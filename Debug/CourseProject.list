
CourseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800a56c  0800a56c  0001a56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a878  0800a878  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a878  0800a878  0001a878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a880  0800a880  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a884  0800a884  0001a884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004380  20000088  0800a910  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004408  0800a910  00024408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013952  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d1f  00000000  00000000  00033a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00036730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  000376a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018b4d  00000000  00000000  000384e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d7c0  00000000  00000000  00051035  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000919e6  00000000  00000000  0005e7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f01db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045fc  00000000  00000000  000f0258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a554 	.word	0x0800a554

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800a554 	.word	0x0800a554

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_ldivmod>:
 8000b98:	b97b      	cbnz	r3, 8000bba <__aeabi_ldivmod+0x22>
 8000b9a:	b972      	cbnz	r2, 8000bba <__aeabi_ldivmod+0x22>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bfbe      	ittt	lt
 8000ba0:	2000      	movlt	r0, #0
 8000ba2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ba6:	e006      	blt.n	8000bb6 <__aeabi_ldivmod+0x1e>
 8000ba8:	bf08      	it	eq
 8000baa:	2800      	cmpeq	r0, #0
 8000bac:	bf1c      	itt	ne
 8000bae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb6:	f000 b9bd 	b.w	8000f34 <__aeabi_idiv0>
 8000bba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	db09      	blt.n	8000bda <__aeabi_ldivmod+0x42>
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db1a      	blt.n	8000c00 <__aeabi_ldivmod+0x68>
 8000bca:	f000 f84d 	bl	8000c68 <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4770      	bx	lr
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db1b      	blt.n	8000c1c <__aeabi_ldivmod+0x84>
 8000be4:	f000 f840 	bl	8000c68 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	4252      	negs	r2, r2
 8000bfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfe:	4770      	bx	lr
 8000c00:	4252      	negs	r2, r2
 8000c02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c06:	f000 f82f 	bl	8000c68 <__udivmoddi4>
 8000c0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c12:	b004      	add	sp, #16
 8000c14:	4240      	negs	r0, r0
 8000c16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1a:	4770      	bx	lr
 8000c1c:	4252      	negs	r2, r2
 8000c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c22:	f000 f821 	bl	8000c68 <__udivmoddi4>
 8000c26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2e:	b004      	add	sp, #16
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <bcdToDec>:

uint8_t decToBcd(int val) {
  return (uint8_t)( (val/10*16) + (val%10) );
}

int bcdToDec(uint8_t val) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	461a      	mov	r2, r3
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	4413      	add	r3, r2
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <getTime>:
	set_time[5] = decToBcd(month);
	set_time[6] = decToBcd(year);
	HAL_I2C_Mem_Write(hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void getTime (I2C_HandleTypeDef *hi2c3) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af04      	add	r7, sp, #16
 8000f6e:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2307      	movs	r3, #7
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	2200      	movs	r2, #0
 8000f84:	21d0      	movs	r1, #208	; 0xd0
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f003 fb4e 	bl	8004628 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000f8c:	7a3b      	ldrb	r3, [r7, #8]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffd2 	bl	8000f38 <bcdToDec>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <getTime+0x9c>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000f9c:	7a7b      	ldrb	r3, [r7, #9]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ffca 	bl	8000f38 <bcdToDec>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <getTime+0x9c>)
 8000faa:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000fac:	7abb      	ldrb	r3, [r7, #10]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffc2 	bl	8000f38 <bcdToDec>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <getTime+0x9c>)
 8000fba:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000fbc:	7afb      	ldrb	r3, [r7, #11]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ffba 	bl	8000f38 <bcdToDec>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <getTime+0x9c>)
 8000fca:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000fcc:	7b3b      	ldrb	r3, [r7, #12]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffb2 	bl	8000f38 <bcdToDec>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <getTime+0x9c>)
 8000fda:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000fdc:	7b7b      	ldrb	r3, [r7, #13]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ffaa 	bl	8000f38 <bcdToDec>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <getTime+0x9c>)
 8000fea:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffa2 	bl	8000f38 <bcdToDec>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <getTime+0x9c>)
 8000ffa:	719a      	strb	r2, [r3, #6]
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20004078 	.word	0x20004078

08001008 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2203      	movs	r2, #3
 8001014:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2203      	movs	r2, #3
 8001026:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	715a      	strb	r2, [r3, #5]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af04      	add	r7, sp, #16
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	460b      	mov	r3, r1
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	8af9      	ldrh	r1, [r7, #22]
 8001060:	f241 3388 	movw	r3, #5000	; 0x1388
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2302      	movs	r3, #2
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	f003 fad9 	bl	8004628 <HAL_I2C_Mem_Read>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10b      	bne.n	8001094 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800107c:	7d7b      	ldrb	r3, [r7, #21]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7d3b      	ldrb	r3, [r7, #20]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21b      	sxth	r3, r3
 800108a:	b29a      	uxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	801a      	strh	r2, [r3, #0]
		return true;
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <read_register16+0x56>
	} else
		return false;
 8001094:	2300      	movs	r3, #0

}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800109e:	b590      	push	{r4, r7, lr}
 80010a0:	b08b      	sub	sp, #44	; 0x2c
 80010a2:	af04      	add	r7, sp, #16
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	461a      	mov	r2, r3
 80010aa:	460b      	mov	r3, r1
 80010ac:	72fb      	strb	r3, [r7, #11]
 80010ae:	4613      	mov	r3, r2
 80010b0:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	b29c      	uxth	r4, r3
 80010c2:	7abb      	ldrb	r3, [r7, #10]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	8af9      	ldrh	r1, [r7, #22]
 80010c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010cc:	9202      	str	r2, [sp, #8]
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	4622      	mov	r2, r4
 80010d8:	f003 faa6 	bl	8004628 <HAL_I2C_Mem_Read>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <read_data+0x48>
		return 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <read_data+0x4a>
	else
		return 1;
 80010e6:	2301      	movs	r3, #1

}
 80010e8:	4618      	mov	r0, r3
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}

080010f0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	461a      	mov	r2, r3
 80010fc:	2188      	movs	r1, #136	; 0x88
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ff9e 	bl	8001040 <read_register16>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d06f      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3302      	adds	r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	218a      	movs	r1, #138	; 0x8a
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff94 	bl	8001040 <read_register16>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d065      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3304      	adds	r3, #4
 8001122:	461a      	mov	r2, r3
 8001124:	218c      	movs	r1, #140	; 0x8c
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff8a 	bl	8001040 <read_register16>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d05b      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3306      	adds	r3, #6
 8001136:	461a      	mov	r2, r3
 8001138:	218e      	movs	r1, #142	; 0x8e
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff80 	bl	8001040 <read_register16>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d051      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3308      	adds	r3, #8
 800114a:	461a      	mov	r2, r3
 800114c:	2190      	movs	r1, #144	; 0x90
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff76 	bl	8001040 <read_register16>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d047      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	330a      	adds	r3, #10
 800115e:	461a      	mov	r2, r3
 8001160:	2192      	movs	r1, #146	; 0x92
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff6c 	bl	8001040 <read_register16>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d03d      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	330c      	adds	r3, #12
 8001172:	461a      	mov	r2, r3
 8001174:	2194      	movs	r1, #148	; 0x94
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff62 	bl	8001040 <read_register16>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d033      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	330e      	adds	r3, #14
 8001186:	461a      	mov	r2, r3
 8001188:	2196      	movs	r1, #150	; 0x96
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff58 	bl	8001040 <read_register16>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d029      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3310      	adds	r3, #16
 800119a:	461a      	mov	r2, r3
 800119c:	2198      	movs	r1, #152	; 0x98
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff4e 	bl	8001040 <read_register16>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d01f      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3312      	adds	r3, #18
 80011ae:	461a      	mov	r2, r3
 80011b0:	219a      	movs	r1, #154	; 0x9a
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff44 	bl	8001040 <read_register16>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d015      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3314      	adds	r3, #20
 80011c2:	461a      	mov	r2, r3
 80011c4:	219c      	movs	r1, #156	; 0x9c
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff3a 	bl	8001040 <read_register16>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80011d6:	461a      	mov	r2, r3
 80011d8:	219e      	movs	r1, #158	; 0x9e
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff30 	bl	8001040 <read_register16>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <read_calibration_data+0xfa>

		return true;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <read_calibration_data+0xfc>
	}

	return false;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f103 0218 	add.w	r2, r3, #24
 8001202:	2301      	movs	r3, #1
 8001204:	21a1      	movs	r1, #161	; 0xa1
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff49 	bl	800109e <read_data>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d14b      	bne.n	80012aa <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	331a      	adds	r3, #26
 8001216:	461a      	mov	r2, r3
 8001218:	21e1      	movs	r1, #225	; 0xe1
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff10 	bl	8001040 <read_register16>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d041      	beq.n	80012aa <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f103 021c 	add.w	r2, r3, #28
 800122c:	2301      	movs	r3, #1
 800122e:	21e3      	movs	r1, #227	; 0xe3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff34 	bl	800109e <read_data>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d136      	bne.n	80012aa <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800123c:	f107 030e 	add.w	r3, r7, #14
 8001240:	461a      	mov	r2, r3
 8001242:	21e4      	movs	r1, #228	; 0xe4
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fefb 	bl	8001040 <read_register16>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d02c      	beq.n	80012aa <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	461a      	mov	r2, r3
 8001256:	21e5      	movs	r1, #229	; 0xe5
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fef1 	bl	8001040 <read_register16>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d022      	beq.n	80012aa <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800126a:	2301      	movs	r3, #1
 800126c:	21e7      	movs	r1, #231	; 0xe7
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff15 	bl	800109e <read_data>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d117      	bne.n	80012aa <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	b21b      	sxth	r3, r3
 8001280:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001284:	b21a      	sxth	r2, r3
 8001286:	89fb      	ldrh	r3, [r7, #14]
 8001288:	121b      	asrs	r3, r3, #8
 800128a:	b21b      	sxth	r3, r3
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800129a:	89bb      	ldrh	r3, [r7, #12]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	841a      	strh	r2, [r3, #32]

		return true;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <read_hum_calibration_data+0xb8>
	}

	return false;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af04      	add	r7, sp, #16
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
 80012c0:	4613      	mov	r3, r2
 80012c2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	89f9      	ldrh	r1, [r7, #14]
 80012d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	2301      	movs	r3, #1
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	1cbb      	adds	r3, r7, #2
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	f003 f8a5 	bl	8004434 <HAL_I2C_Mem_Write>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <write_register8+0x40>
		return false;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e000      	b.n	80012f6 <write_register8+0x42>
	else
		return true;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800130c:	2b76      	cmp	r3, #118	; 0x76
 800130e:	d005      	beq.n	800131c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001314:	2b77      	cmp	r3, #119	; 0x77
 8001316:	d001      	beq.n	800131c <bmp280_init+0x1e>

		return false;
 8001318:	2300      	movs	r3, #0
 800131a:	e099      	b.n	8001450 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001322:	2301      	movs	r3, #1
 8001324:	21d0      	movs	r1, #208	; 0xd0
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff feb9 	bl	800109e <read_data>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <bmp280_init+0x38>
		return false;
 8001332:	2300      	movs	r3, #0
 8001334:	e08c      	b.n	8001450 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800133c:	2b58      	cmp	r3, #88	; 0x58
 800133e:	d006      	beq.n	800134e <bmp280_init+0x50>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001346:	2b60      	cmp	r3, #96	; 0x60
 8001348:	d001      	beq.n	800134e <bmp280_init+0x50>

		return false;
 800134a:	2300      	movs	r3, #0
 800134c:	e080      	b.n	8001450 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800134e:	22b6      	movs	r2, #182	; 0xb6
 8001350:	21e0      	movs	r1, #224	; 0xe0
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffae 	bl	80012b4 <write_register8>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <bmp280_init+0x64>
		return false;
 800135e:	2300      	movs	r3, #0
 8001360:	e076      	b.n	8001450 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001362:	f107 020c 	add.w	r2, r7, #12
 8001366:	2301      	movs	r3, #1
 8001368:	21f3      	movs	r1, #243	; 0xf3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fe97 	bl	800109e <read_data>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f5      	bne.n	8001362 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff feb5 	bl	80010f0 <read_calibration_data>
 8001386:	4603      	mov	r3, r0
 8001388:	f083 0301 	eor.w	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d100      	bne.n	8001394 <bmp280_init+0x96>
 8001392:	e001      	b.n	8001398 <bmp280_init+0x9a>
		return false;
 8001394:	2300      	movs	r3, #0
 8001396:	e05b      	b.n	8001450 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800139e:	2b60      	cmp	r3, #96	; 0x60
 80013a0:	d10a      	bne.n	80013b8 <bmp280_init+0xba>
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ff26 	bl	80011f4 <read_hum_calibration_data>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f083 0301 	eor.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <bmp280_init+0xba>
		return false;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e04b      	b.n	8001450 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	795b      	ldrb	r3, [r3, #5]
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	b25a      	sxtb	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	461a      	mov	r2, r3
 80013d2:	21f5      	movs	r1, #245	; 0xf5
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff6d 	bl	80012b4 <write_register8>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <bmp280_init+0xe6>
		return false;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e035      	b.n	8001450 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d102      	bne.n	80013f2 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	78db      	ldrb	r3, [r3, #3]
 80013f6:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	789b      	ldrb	r3, [r3, #2]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	b25b      	sxtb	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b25a      	sxtb	r2, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25b      	sxtb	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001410:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001418:	2b60      	cmp	r3, #96	; 0x60
 800141a:	d10d      	bne.n	8001438 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	791b      	ldrb	r3, [r3, #4]
 8001420:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001422:	7b7b      	ldrb	r3, [r7, #13]
 8001424:	461a      	mov	r2, r3
 8001426:	21f2      	movs	r1, #242	; 0xf2
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff43 	bl	80012b4 <write_register8>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <bmp280_init+0x13a>
			return false;
 8001434:	2300      	movs	r3, #0
 8001436:	e00b      	b.n	8001450 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	461a      	mov	r2, r3
 800143c:	21f4      	movs	r1, #244	; 0xf4
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff38 	bl	80012b4 <write_register8>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <bmp280_init+0x150>
		return false;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <bmp280_init+0x152>
	}

	return true;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	10da      	asrs	r2, r3, #3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800147a:	12db      	asrs	r3, r3, #11
 800147c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	111b      	asrs	r3, r3, #4
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	1112      	asrs	r2, r2, #4
 800148c:	68f9      	ldr	r1, [r7, #12]
 800148e:	8809      	ldrh	r1, [r1, #0]
 8001490:	1a52      	subs	r2, r2, r1
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800149e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80014a2:	139b      	asrs	r3, r3, #14
 80014a4:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	441a      	add	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3380      	adds	r3, #128	; 0x80
 80014bc:	121b      	asrs	r3, r3, #8
}
 80014be:	4618      	mov	r0, r3
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80014ca:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4619      	mov	r1, r3
 80014dc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014e0:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80014e4:	f142 34ff 	adc.w	r4, r2, #4294967295
 80014e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	6a3a      	ldr	r2, [r7, #32]
 80014f0:	fb02 f203 	mul.w	r2, r2, r3
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	6a39      	ldr	r1, [r7, #32]
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	441a      	add	r2, r3
 80014fe:	6a39      	ldr	r1, [r7, #32]
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	fba1 3403 	umull	r3, r4, r1, r3
 8001506:	4422      	add	r2, r4
 8001508:	4614      	mov	r4, r2
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001510:	b211      	sxth	r1, r2
 8001512:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001516:	fb01 f504 	mul.w	r5, r1, r4
 800151a:	fb03 f002 	mul.w	r0, r3, r2
 800151e:	4428      	add	r0, r5
 8001520:	fba3 3401 	umull	r3, r4, r3, r1
 8001524:	1902      	adds	r2, r0, r4
 8001526:	4614      	mov	r4, r2
 8001528:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800152c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001536:	b21b      	sxth	r3, r3
 8001538:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800153c:	6a3a      	ldr	r2, [r7, #32]
 800153e:	fb04 f102 	mul.w	r1, r4, r2
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	fb03 f202 	mul.w	r2, r3, r2
 8001548:	1888      	adds	r0, r1, r2
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	fba2 1203 	umull	r1, r2, r2, r3
 8001550:	1883      	adds	r3, r0, r2
 8001552:	461a      	mov	r2, r3
 8001554:	f04f 0500 	mov.w	r5, #0
 8001558:	f04f 0600 	mov.w	r6, #0
 800155c:	0456      	lsls	r6, r2, #17
 800155e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001562:	044d      	lsls	r5, r1, #17
 8001564:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001568:	186b      	adds	r3, r5, r1
 800156a:	eb46 0402 	adc.w	r4, r6, r2
 800156e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001578:	b219      	sxth	r1, r3
 800157a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800157e:	f04f 0500 	mov.w	r5, #0
 8001582:	f04f 0600 	mov.w	r6, #0
 8001586:	00ce      	lsls	r6, r1, #3
 8001588:	2500      	movs	r5, #0
 800158a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800158e:	186b      	adds	r3, r5, r1
 8001590:	eb46 0402 	adc.w	r4, r6, r2
 8001594:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	6a3a      	ldr	r2, [r7, #32]
 800159c:	fb02 f203 	mul.w	r2, r2, r3
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	6a39      	ldr	r1, [r7, #32]
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	441a      	add	r2, r3
 80015aa:	6a39      	ldr	r1, [r7, #32]
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	fba1 3403 	umull	r3, r4, r1, r3
 80015b2:	4422      	add	r2, r4
 80015b4:	4614      	mov	r4, r2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80015bc:	b211      	sxth	r1, r2
 80015be:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80015c2:	fb01 f504 	mul.w	r5, r1, r4
 80015c6:	fb03 f002 	mul.w	r0, r3, r2
 80015ca:	4428      	add	r0, r5
 80015cc:	fba3 3401 	umull	r3, r4, r3, r1
 80015d0:	1902      	adds	r2, r0, r4
 80015d2:	4614      	mov	r4, r2
 80015d4:	f04f 0100 	mov.w	r1, #0
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	0a19      	lsrs	r1, r3, #8
 80015de:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80015e2:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80015f0:	6a38      	ldr	r0, [r7, #32]
 80015f2:	fb04 f500 	mul.w	r5, r4, r0
 80015f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015f8:	fb03 f000 	mul.w	r0, r3, r0
 80015fc:	4428      	add	r0, r5
 80015fe:	6a3d      	ldr	r5, [r7, #32]
 8001600:	fba5 5603 	umull	r5, r6, r5, r3
 8001604:	1983      	adds	r3, r0, r6
 8001606:	461e      	mov	r6, r3
 8001608:	f04f 0b00 	mov.w	fp, #0
 800160c:	f04f 0c00 	mov.w	ip, #0
 8001610:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001614:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001618:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800161c:	eb1b 0301 	adds.w	r3, fp, r1
 8001620:	eb4c 0402 	adc.w	r4, ip, r2
 8001624:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001628:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800162c:	1c19      	adds	r1, r3, #0
 800162e:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	88db      	ldrh	r3, [r3, #6]
 8001636:	b29b      	uxth	r3, r3
 8001638:	f04f 0400 	mov.w	r4, #0
 800163c:	fb03 f502 	mul.w	r5, r3, r2
 8001640:	fb01 f004 	mul.w	r0, r1, r4
 8001644:	4428      	add	r0, r5
 8001646:	fba1 3403 	umull	r3, r4, r1, r3
 800164a:	1902      	adds	r2, r0, r4
 800164c:	4614      	mov	r4, r2
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	1061      	asrs	r1, r4, #1
 8001658:	17e2      	asrs	r2, r4, #31
 800165a:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 800165e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001662:	4323      	orrs	r3, r4
 8001664:	d101      	bne.n	800166a <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001666:	2300      	movs	r3, #0
 8001668:	e0d4      	b.n	8001814 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001670:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001674:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	ea4f 0963 	mov.w	r9, r3, asr #1
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001684:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001688:	4645      	mov	r5, r8
 800168a:	464e      	mov	r6, r9
 800168c:	1aed      	subs	r5, r5, r3
 800168e:	eb66 0604 	sbc.w	r6, r6, r4
 8001692:	46a8      	mov	r8, r5
 8001694:	46b1      	mov	r9, r6
 8001696:	eb18 0308 	adds.w	r3, r8, r8
 800169a:	eb49 0409 	adc.w	r4, r9, r9
 800169e:	4698      	mov	r8, r3
 80016a0:	46a1      	mov	r9, r4
 80016a2:	eb18 0805 	adds.w	r8, r8, r5
 80016a6:	eb49 0906 	adc.w	r9, r9, r6
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80016b6:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80016ba:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80016be:	eb18 0801 	adds.w	r8, r8, r1
 80016c2:	eb49 0902 	adc.w	r9, r9, r2
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80016d2:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80016d6:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80016da:	4688      	mov	r8, r1
 80016dc:	4691      	mov	r9, r2
 80016de:	eb18 0805 	adds.w	r8, r8, r5
 80016e2:	eb49 0906 	adc.w	r9, r9, r6
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80016f2:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80016f6:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80016fa:	4688      	mov	r8, r1
 80016fc:	4691      	mov	r9, r2
 80016fe:	eb18 0005 	adds.w	r0, r8, r5
 8001702:	eb49 0106 	adc.w	r1, r9, r6
 8001706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800170a:	f7ff fa45 	bl	8000b98 <__aeabi_ldivmod>
 800170e:	4603      	mov	r3, r0
 8001710:	460c      	mov	r4, r1
 8001712:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800171c:	b219      	sxth	r1, r3
 800171e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001722:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	f04f 0400 	mov.w	r4, #0
 800172e:	0b6b      	lsrs	r3, r5, #13
 8001730:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001734:	1374      	asrs	r4, r6, #13
 8001736:	fb03 f502 	mul.w	r5, r3, r2
 800173a:	fb01 f004 	mul.w	r0, r1, r4
 800173e:	4428      	add	r0, r5
 8001740:	fba1 1203 	umull	r1, r2, r1, r3
 8001744:	1883      	adds	r3, r0, r2
 8001746:	461a      	mov	r2, r3
 8001748:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	0b6b      	lsrs	r3, r5, #13
 8001756:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800175a:	1374      	asrs	r4, r6, #13
 800175c:	fb03 f502 	mul.w	r5, r3, r2
 8001760:	fb01 f004 	mul.w	r0, r1, r4
 8001764:	4428      	add	r0, r5
 8001766:	fba1 1203 	umull	r1, r2, r1, r3
 800176a:	1883      	adds	r3, r0, r2
 800176c:	461a      	mov	r2, r3
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	f04f 0400 	mov.w	r4, #0
 8001776:	0e4b      	lsrs	r3, r1, #25
 8001778:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800177c:	1654      	asrs	r4, r2, #25
 800177e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001788:	b21b      	sxth	r3, r3
 800178a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	fb04 f102 	mul.w	r1, r4, r2
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	fb03 f202 	mul.w	r2, r3, r2
 800179a:	1888      	adds	r0, r1, r2
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	fba2 1203 	umull	r1, r2, r2, r3
 80017a2:	1883      	adds	r3, r0, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	f04f 0400 	mov.w	r4, #0
 80017ae:	0ccb      	lsrs	r3, r1, #19
 80017b0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80017b4:	14d4      	asrs	r4, r2, #19
 80017b6:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80017ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80017be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017c2:	eb11 0803 	adds.w	r8, r1, r3
 80017c6:	eb42 0904 	adc.w	r9, r2, r4
 80017ca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80017ce:	eb13 0508 	adds.w	r5, r3, r8
 80017d2:	eb44 0609 	adc.w	r6, r4, r9
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	0a29      	lsrs	r1, r5, #8
 80017e0:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80017e4:	1232      	asrs	r2, r6, #8
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80017ec:	b21d      	sxth	r5, r3
 80017ee:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80017f2:	f04f 0800 	mov.w	r8, #0
 80017f6:	f04f 0900 	mov.w	r9, #0
 80017fa:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80017fe:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001802:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001806:	eb18 0301 	adds.w	r3, r8, r1
 800180a:	eb49 0402 	adc.w	r4, r9, r2
 800180e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001812:	693b      	ldr	r3, [r7, #16]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800181e <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001830:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	039a      	lsls	r2, r3, #14
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800183c:	051b      	lsls	r3, r3, #20
 800183e:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001846:	4619      	mov	r1, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fb03 f301 	mul.w	r3, r3, r1
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001854:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800185c:	4611      	mov	r1, r2
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	fb02 f201 	mul.w	r2, r2, r1
 8001864:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	7f09      	ldrb	r1, [r1, #28]
 800186a:	4608      	mov	r0, r1
 800186c:	6979      	ldr	r1, [r7, #20]
 800186e:	fb01 f100 	mul.w	r1, r1, r0
 8001872:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001874:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001878:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800187c:	1292      	asrs	r2, r2, #10
 800187e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001882:	68f9      	ldr	r1, [r7, #12]
 8001884:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001888:	fb01 f202 	mul.w	r2, r1, r2
 800188c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001890:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	13db      	asrs	r3, r3, #15
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	13d2      	asrs	r2, r2, #15
 80018a0:	fb02 f303 	mul.w	r3, r2, r3
 80018a4:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	7e12      	ldrb	r2, [r2, #24]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80018bc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80018c4:	bfa8      	it	ge
 80018c6:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80018ca:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	131b      	asrs	r3, r3, #12
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80018f0:	2b60      	cmp	r3, #96	; 0x60
 80018f2:	d007      	beq.n	8001904 <bmp280_read_fixed+0x28>
		if (humidity)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <bmp280_read_fixed+0x32>
 800190a:	2308      	movs	r3, #8
 800190c:	e000      	b.n	8001910 <bmp280_read_fixed+0x34>
 800190e:	2306      	movs	r3, #6
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f107 0218 	add.w	r2, r7, #24
 800191a:	21f7      	movs	r1, #247	; 0xf7
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fbbe 	bl	800109e <read_data>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <bmp280_read_fixed+0x50>
		return false;
 8001928:	2300      	movs	r3, #0
 800192a:	e038      	b.n	800199e <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800192c:	7e3b      	ldrb	r3, [r7, #24]
 800192e:	031a      	lsls	r2, r3, #12
 8001930:	7e7b      	ldrb	r3, [r7, #25]
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4313      	orrs	r3, r2
 8001936:	7eba      	ldrb	r2, [r7, #26]
 8001938:	0912      	lsrs	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	4313      	orrs	r3, r2
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001940:	7efb      	ldrb	r3, [r7, #27]
 8001942:	031a      	lsls	r2, r3, #12
 8001944:	7f3b      	ldrb	r3, [r7, #28]
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4313      	orrs	r3, r2
 800194a:	7f7a      	ldrb	r2, [r7, #29]
 800194c:	0912      	lsrs	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	4313      	orrs	r3, r2
 8001952:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	461a      	mov	r2, r3
 800195a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff fd7b 	bl	8001458 <compensate_temperature>
 8001962:	4602      	mov	r2, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	461a      	mov	r2, r3
 800196c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff fdab 	bl	80014ca <compensate_pressure>
 8001974:	4602      	mov	r2, r0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00d      	beq.n	800199c <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001980:	7fbb      	ldrb	r3, [r7, #30]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	7ffa      	ldrb	r2, [r7, #31]
 8001986:	4313      	orrs	r3, r2
 8001988:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	461a      	mov	r2, r3
 800198e:	6a39      	ldr	r1, [r7, #32]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff ff44 	bl	800181e <compensate_humidity>
 8001996:	4602      	mov	r2, r0
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	601a      	str	r2, [r3, #0]
	}

	return true;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3730      	adds	r7, #48	; 0x30
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <bmp280_read_float+0x1a>
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	e000      	b.n	80019c4 <bmp280_read_float+0x1c>
 80019c2:	2300      	movs	r3, #0
 80019c4:	f107 0218 	add.w	r2, r7, #24
 80019c8:	f107 011c 	add.w	r1, r7, #28
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff ff85 	bl	80018dc <bmp280_read_fixed>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d028      	beq.n	8001a2a <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e2:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001a34 <bmp280_read_float+0x8c>
 80019e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019fa:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001a38 <bmp280_read_float+0x90>
 80019fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a18:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001a3c <bmp280_read_float+0x94>
 8001a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <bmp280_read_float+0x84>
	}

	return false;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	42c80000 	.word	0x42c80000
 8001a38:	43800000 	.word	0x43800000
 8001a3c:	44800000 	.word	0x44800000

08001a40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <vApplicationGetIdleTaskMemory+0x30>)
 8001a56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200000a4 	.word	0x200000a4
 8001a70:	200000f8 	.word	0x200000f8

08001a74 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	70fb      	strb	r3, [r7, #3]
 8001a86:	460b      	mov	r3, r1
 8001a88:	70bb      	strb	r3, [r7, #2]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 8001a92:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <lcdInit+0x15c>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <lcdInit+0x15c>)
 8001aa0:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001aa2:	4a4b      	ldr	r2, [pc, #300]	; (8001bd0 <lcdInit+0x15c>)
 8001aa4:	78bb      	ldrb	r3, [r7, #2]
 8001aa6:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001aa8:	4a49      	ldr	r2, [pc, #292]	; (8001bd0 <lcdInit+0x15c>)
 8001aaa:	787b      	ldrb	r3, [r7, #1]
 8001aac:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001aae:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <lcdInit+0x15c>)
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001ab4:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <lcdInit+0x160>)
 8001ab6:	2234      	movs	r2, #52	; 0x34
 8001ab8:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001aba:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <lcdInit+0x160>)
 8001abc:	781a      	ldrb	r2, [r3, #0]
 8001abe:	4b45      	ldr	r3, [pc, #276]	; (8001bd4 <lcdInit+0x160>)
 8001ac0:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001ac2:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <lcdInit+0x160>)
 8001ac4:	2230      	movs	r2, #48	; 0x30
 8001ac6:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	75fb      	strb	r3, [r7, #23]
 8001acc:	e030      	b.n	8001b30 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001ace:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <lcdInit+0x15c>)
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <lcdInit+0x15c>)
 8001ad4:	799b      	ldrb	r3, [r3, #6]
 8001ad6:	b299      	uxth	r1, r3
 8001ad8:	2303      	movs	r3, #3
 8001ada:	4a3e      	ldr	r2, [pc, #248]	; (8001bd4 <lcdInit+0x160>)
 8001adc:	f002 fb94 	bl	8004208 <HAL_I2C_Master_Transmit_DMA>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <lcdInit+0x76>
            return false;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e06d      	b.n	8001bc6 <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 8001aea:	f006 febf 	bl	800886c <xTaskGetTickCount>
 8001aee:	4603      	mov	r3, r0
 8001af0:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001af2:	e002      	b.n	8001afa <lcdInit+0x86>
            vTaskDelay(1);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f006 fbe5 	bl	80082c4 <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <lcdInit+0x15c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fa2d 	bl	8004f5e <HAL_I2C_GetState>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	d1f4      	bne.n	8001af4 <lcdInit+0x80>
        }

        if (i == 2) {
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d106      	bne.n	8001b1e <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	2101      	movs	r1, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	f006 fb5a 	bl	80081d0 <vTaskDelayUntil>
 8001b1c:	e005      	b.n	8001b2a <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	2105      	movs	r1, #5
 8001b24:	4618      	mov	r0, r3
 8001b26:	f006 fb53 	bl	80081d0 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	75fb      	strb	r3, [r7, #23]
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d9cb      	bls.n	8001ace <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <lcdInit+0x160>)
 8001b38:	222c      	movs	r2, #44	; 0x2c
 8001b3a:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <lcdInit+0x160>)
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <lcdInit+0x160>)
 8001b42:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <lcdInit+0x160>)
 8001b46:	2228      	movs	r2, #40	; 0x28
 8001b48:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <lcdInit+0x15c>)
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <lcdInit+0x15c>)
 8001b50:	799b      	ldrb	r3, [r3, #6]
 8001b52:	b299      	uxth	r1, r3
 8001b54:	2303      	movs	r3, #3
 8001b56:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <lcdInit+0x160>)
 8001b58:	f002 fb56 	bl	8004208 <HAL_I2C_Master_Transmit_DMA>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <lcdInit+0xf8>
        return false;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e02f      	b.n	8001bc6 <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f006 fbac 	bl	80082c4 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <lcdInit+0x15c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 f9f4 	bl	8004f5e <HAL_I2C_GetState>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b20      	cmp	r3, #32
 8001b7a:	d1f4      	bne.n	8001b66 <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <lcdInit+0x15c>)
 8001b88:	791b      	ldrb	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d904      	bls.n	8001b98 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001b98:	f107 030f 	add.w	r3, r7, #15
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 f962 	bl	8001e68 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f000 f816 	bl	8001bd8 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001bac:	2101      	movs	r1, #1
 8001bae:	2007      	movs	r0, #7
 8001bb0:	f000 f812 	bl	8001bd8 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f000 f80e 	bl	8001bd8 <lcdCommand>
    lcdCursorHome();
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	2005      	movs	r0, #5
 8001bc0:	f000 f80a 	bl	8001bd8 <lcdCommand>

    return true;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000300 	.word	0x20000300
 8001bd4:	200002f8 	.word	0x200002f8

08001bd8 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	460a      	mov	r2, r1
 8001be2:	71fb      	strb	r3, [r7, #7]
 8001be4:	4613      	mov	r3, r2
 8001be6:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001bec:	79bb      	ldrb	r3, [r7, #6]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d06e      	beq.n	8001cd0 <lcdCommand+0xf8>
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	f040 80b4 	bne.w	8001d60 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	2b07      	cmp	r3, #7
 8001bfe:	d864      	bhi.n	8001cca <lcdCommand+0xf2>
 8001c00:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <lcdCommand+0x30>)
 8001c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c06:	bf00      	nop
 8001c08:	08001c29 	.word	0x08001c29
 8001c0c:	08001c59 	.word	0x08001c59
 8001c10:	08001c39 	.word	0x08001c39
 8001c14:	08001c49 	.word	0x08001c49
 8001c18:	08001c7d 	.word	0x08001c7d
 8001c1c:	08001cb1 	.word	0x08001cb1
 8001c20:	08001ca1 	.word	0x08001ca1
 8001c24:	08001cbb 	.word	0x08001cbb
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001c28:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <lcdCommand+0x1f0>)
 8001c2a:	7a1b      	ldrb	r3, [r3, #8]
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <lcdCommand+0x1f0>)
 8001c34:	721a      	strb	r2, [r3, #8]
                    break;
 8001c36:	e04a      	b.n	8001cce <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8001c38:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <lcdCommand+0x1f0>)
 8001c3a:	7a1b      	ldrb	r3, [r3, #8]
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <lcdCommand+0x1f0>)
 8001c44:	721a      	strb	r2, [r3, #8]
                    break;
 8001c46:	e042      	b.n	8001cce <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001c48:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <lcdCommand+0x1f0>)
 8001c4a:	7a1b      	ldrb	r3, [r3, #8]
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <lcdCommand+0x1f0>)
 8001c54:	721a      	strb	r2, [r3, #8]
                    break;
 8001c56:	e03a      	b.n	8001cce <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001c5c:	f107 030f 	add.w	r3, r7, #15
 8001c60:	4619      	mov	r1, r3
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 f900 	bl	8001e68 <lcdWriteByte>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <lcdCommand+0x9a>
                        return false;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e0a6      	b.n	8001dc0 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 8001c72:	2002      	movs	r0, #2
 8001c74:	f006 fb26 	bl	80082c4 <vTaskDelay>
                        return true;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0a1      	b.n	8001dc0 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001c80:	f107 030f 	add.w	r3, r7, #15
 8001c84:	4619      	mov	r1, r3
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 f8ee 	bl	8001e68 <lcdWriteByte>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <lcdCommand+0xbe>
                        return false;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e094      	b.n	8001dc0 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 8001c96:	2002      	movs	r0, #2
 8001c98:	f006 fb14 	bl	80082c4 <vTaskDelay>
                        return true;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e08f      	b.n	8001dc0 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001ca0:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <lcdCommand+0x1f0>)
 8001ca2:	7a5b      	ldrb	r3, [r3, #9]
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <lcdCommand+0x1f0>)
 8001cac:	725a      	strb	r2, [r3, #9]
                    break;
 8001cae:	e00e      	b.n	8001cce <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001cb0:	4b45      	ldr	r3, [pc, #276]	; (8001dc8 <lcdCommand+0x1f0>)
 8001cb2:	7a5a      	ldrb	r2, [r3, #9]
 8001cb4:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <lcdCommand+0x1f0>)
 8001cb6:	725a      	strb	r2, [r3, #9]
                    break;
 8001cb8:	e009      	b.n	8001cce <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <lcdCommand+0x1f0>)
 8001cbc:	7a5b      	ldrb	r3, [r3, #9]
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <lcdCommand+0x1f0>)
 8001cc6:	725a      	strb	r2, [r3, #9]
                    break;
 8001cc8:	e001      	b.n	8001cce <lcdCommand+0xf6>

                default:
                    return false;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e078      	b.n	8001dc0 <lcdCommand+0x1e8>
            }

            break;
 8001cce:	e049      	b.n	8001d64 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	2b07      	cmp	r3, #7
 8001cd6:	d840      	bhi.n	8001d5a <lcdCommand+0x182>
 8001cd8:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <lcdCommand+0x108>)
 8001cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cde:	bf00      	nop
 8001ce0:	08001d01 	.word	0x08001d01
 8001ce4:	08001d5b 	.word	0x08001d5b
 8001ce8:	08001d11 	.word	0x08001d11
 8001cec:	08001d21 	.word	0x08001d21
 8001cf0:	08001d5b 	.word	0x08001d5b
 8001cf4:	08001d41 	.word	0x08001d41
 8001cf8:	08001d31 	.word	0x08001d31
 8001cfc:	08001d4b 	.word	0x08001d4b
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001d00:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d02:	7a1b      	ldrb	r3, [r3, #8]
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d0c:	721a      	strb	r2, [r3, #8]
                    break;
 8001d0e:	e026      	b.n	8001d5e <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d12:	7a1b      	ldrb	r3, [r3, #8]
 8001d14:	f023 0302 	bic.w	r3, r3, #2
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d1c:	721a      	strb	r2, [r3, #8]
                    break;
 8001d1e:	e01e      	b.n	8001d5e <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d22:	7a1b      	ldrb	r3, [r3, #8]
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d2c:	721a      	strb	r2, [r3, #8]
                    break;
 8001d2e:	e016      	b.n	8001d5e <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d32:	7a5b      	ldrb	r3, [r3, #9]
 8001d34:	f023 0302 	bic.w	r3, r3, #2
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d3c:	725a      	strb	r2, [r3, #9]
                    break;
 8001d3e:	e00e      	b.n	8001d5e <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d42:	7a5a      	ldrb	r2, [r3, #9]
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d46:	725a      	strb	r2, [r3, #9]
                    break;
 8001d48:	e009      	b.n	8001d5e <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d4c:	7a5b      	ldrb	r3, [r3, #9]
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d56:	725a      	strb	r2, [r3, #9]
                    break;
 8001d58:	e001      	b.n	8001d5e <lcdCommand+0x186>

                default:
                    return false;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e030      	b.n	8001dc0 <lcdCommand+0x1e8>
            }

            break;
 8001d5e:	e001      	b.n	8001d64 <lcdCommand+0x18c>

        default:
            return false;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e02d      	b.n	8001dc0 <lcdCommand+0x1e8>
    }

    /* Now lets send the command */
    switch (command) {
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	2b07      	cmp	r3, #7
 8001d6a:	d821      	bhi.n	8001db0 <lcdCommand+0x1d8>
 8001d6c:	a201      	add	r2, pc, #4	; (adr r2, 8001d74 <lcdCommand+0x19c>)
 8001d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d72:	bf00      	nop
 8001d74:	08001d95 	.word	0x08001d95
 8001d78:	08001db1 	.word	0x08001db1
 8001d7c:	08001d95 	.word	0x08001d95
 8001d80:	08001d95 	.word	0x08001d95
 8001d84:	08001db1 	.word	0x08001db1
 8001d88:	08001da3 	.word	0x08001da3
 8001d8c:	08001da3 	.word	0x08001da3
 8001d90:	08001da3 	.word	0x08001da3
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <lcdCommand+0x1f0>)
 8001d96:	7a1b      	ldrb	r3, [r3, #8]
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	73fb      	strb	r3, [r7, #15]
            break;
 8001da0:	e007      	b.n	8001db2 <lcdCommand+0x1da>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <lcdCommand+0x1f0>)
 8001da4:	7a5b      	ldrb	r3, [r3, #9]
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	73fb      	strb	r3, [r7, #15]
            break;
 8001dae:	e000      	b.n	8001db2 <lcdCommand+0x1da>

        default:
            break;
 8001db0:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001db2:	f107 030f 	add.w	r3, r7, #15
 8001db6:	4619      	mov	r1, r3
 8001db8:	2000      	movs	r0, #0
 8001dba:	f000 f855 	bl	8001e68 <lcdWriteByte>
 8001dbe:	4603      	mov	r3, r0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000300 	.word	0x20000300

08001dcc <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	71fb      	strb	r3, [r7, #7]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <lcdSetCursorPosition+0x50>)
 8001dde:	791b      	ldrb	r3, [r3, #4]
 8001de0:	79ba      	ldrb	r2, [r7, #6]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d303      	bcc.n	8001dee <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <lcdSetCursorPosition+0x50>)
 8001de8:	791b      	ldrb	r3, [r3, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <lcdSetCursorPosition+0x54>)
 8001df2:	5cd2      	ldrb	r2, [r2, r3]
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4413      	add	r3, r2
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8001e06:	f107 030f 	add.w	r3, r7, #15
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f000 f82b 	bl	8001e68 <lcdWriteByte>
 8001e12:	4603      	mov	r3, r0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000300 	.word	0x20000300
 8001e20:	0800a7f4 	.word	0x0800a7f4

08001e24 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e00e      	b.n	8001e54 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f000 f812 	bl	8001e68 <lcdWriteByte>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <lcdPrintStr+0x2a>
            return false;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e007      	b.n	8001e5e <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3301      	adds	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3ec      	bcc.n	8001e36 <lcdPrintStr+0x12>
        }
    }

    return true;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <lcdWriteByte+0xdc>)
 8001e76:	79da      	ldrb	r2, [r3, #7]
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f023 030f 	bic.w	r3, r3, #15
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <lcdWriteByte+0xe0>)
 8001e94:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <lcdWriteByte+0xe0>)
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <lcdWriteByte+0xe0>)
 8001e9c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <lcdWriteByte+0xdc>)
 8001ea0:	79da      	ldrb	r2, [r3, #7]
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	b25a      	sxtb	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b25b      	sxtb	r3, r3
 8001eb0:	f023 030f 	bic.w	r3, r3, #15
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	b25b      	sxtb	r3, r3
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <lcdWriteByte+0xe0>)
 8001ebe:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <lcdWriteByte+0xdc>)
 8001ec2:	79da      	ldrb	r2, [r3, #7]
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <lcdWriteByte+0xe0>)
 8001ede:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <lcdWriteByte+0xe0>)
 8001ee2:	78da      	ldrb	r2, [r3, #3]
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <lcdWriteByte+0xe0>)
 8001ee6:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <lcdWriteByte+0xdc>)
 8001eea:	79da      	ldrb	r2, [r3, #7]
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	b25a      	sxtb	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	b25b      	sxtb	r3, r3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b25b      	sxtb	r3, r3
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <lcdWriteByte+0xe0>)
 8001f04:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <lcdWriteByte+0xdc>)
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <lcdWriteByte+0xdc>)
 8001f0c:	799b      	ldrb	r3, [r3, #6]
 8001f0e:	b299      	uxth	r1, r3
 8001f10:	2306      	movs	r3, #6
 8001f12:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <lcdWriteByte+0xe0>)
 8001f14:	f002 f978 	bl	8004208 <HAL_I2C_Master_Transmit_DMA>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <lcdWriteByte+0xc0>
        return false;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e00b      	b.n	8001f3a <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f006 f9ce 	bl	80082c4 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <lcdWriteByte+0xdc>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 f816 	bl	8004f5e <HAL_I2C_GetState>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d1f4      	bne.n	8001f22 <lcdWriteByte+0xba>
    }

    return true;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000300 	.word	0x20000300
 8001f48:	200002f8 	.word	0x200002f8

08001f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f4c:	b5b0      	push	{r4, r5, r7, lr}
 8001f4e:	b0aa      	sub	sp, #168	; 0xa8
 8001f50:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f52:	f001 f91d 	bl	8003190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f56:	f000 f8a1 	bl	800209c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5a:	f000 f9e3 	bl	8002324 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f5e:	f000 f9b9 	bl	80022d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f62:	f000 f98d 	bl	8002280 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f66:	f000 f901 	bl	800216c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001f6a:	f000 f92d 	bl	80021c8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001f6e:	f000 f959 	bl	8002224 <MX_I2C3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001f72:	4b3e      	ldr	r3, [pc, #248]	; (800206c <main+0x120>)
 8001f74:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001f78:	461d      	mov	r5, r3
 8001f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001f86:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f005 fe56 	bl	8007c3e <osThreadCreate>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <main+0x124>)
 8001f96:	601a      	str	r2, [r3, #0]

  /* definition and creation of printLcdTask */
  osThreadDef(printLcdTask, StartLcdTask, osPriorityNormal, 0, 128);
 8001f98:	4b36      	ldr	r3, [pc, #216]	; (8002074 <main+0x128>)
 8001f9a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  printLcdTaskHandle = osThreadCreate(osThread(printLcdTask), NULL);
 8001fac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f005 fe43 	bl	8007c3e <osThreadCreate>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <main+0x12c>)
 8001fbc:	601a      	str	r2, [r3, #0]

  /* definition and creation of checkDataSensor */
  osThreadDef(checkDataSensor, StartDataSensor, osPriorityNormal, 0, 128);
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	; (800207c <main+0x130>)
 8001fc0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001fc4:	461d      	mov	r5, r3
 8001fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkDataSensorHandle = osThreadCreate(osThread(checkDataSensor), NULL);
 8001fd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f005 fe30 	bl	8007c3e <osThreadCreate>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <main+0x134>)
 8001fe2:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBtnTask */
  osThreadDef(myBtnTask, StartBtnTask, osPriorityNormal, 0, 128);
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <main+0x138>)
 8001fe6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001fea:	461d      	mov	r5, r3
 8001fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ff4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myBtnTaskHandle = osThreadCreate(osThread(myBtnTask), NULL);
 8001ff8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f005 fe1d 	bl	8007c3e <osThreadCreate>
 8002004:	4602      	mov	r2, r0
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <main+0x13c>)
 8002008:	601a      	str	r2, [r3, #0]

  /* definition and creation of myPrintTime */
  osThreadDef(myPrintTime, StartTimeTask, osPriorityNormal, 0, 128);
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <main+0x140>)
 800200c:	f107 041c 	add.w	r4, r7, #28
 8002010:	461d      	mov	r5, r3
 8002012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800201a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPrintTimeHandle = osThreadCreate(osThread(myPrintTime), NULL);
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f005 fe0a 	bl	8007c3e <osThreadCreate>
 800202a:	4602      	mov	r2, r0
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <main+0x144>)
 800202e:	601a      	str	r2, [r3, #0]

  /* definition and creation of myStatusTemp */
  osThreadDef(myStatusTemp, StartStatusTemp, osPriorityNormal, 0, 128);
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <main+0x148>)
 8002032:	463c      	mov	r4, r7
 8002034:	461d      	mov	r5, r3
 8002036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800203e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myStatusTempHandle = osThreadCreate(osThread(myStatusTemp), NULL);
 8002042:	463b      	mov	r3, r7
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f005 fdf9 	bl	8007c3e <osThreadCreate>
 800204c:	4602      	mov	r2, r0
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <main+0x14c>)
 8002050:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //vTaskSuspend(printLcdTaskHandle);
  vTaskSuspend(myPrintTimeHandle);
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <main+0x144>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f006 f968 	bl	800832c <vTaskSuspend>
  vTaskSuspend(checkDataSensorHandle);
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <main+0x134>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f006 f963 	bl	800832c <vTaskSuspend>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002066:	f005 fde3 	bl	8007c30 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800206a:	e7fe      	b.n	800206a <main+0x11e>
 800206c:	0800a578 	.word	0x0800a578
 8002070:	20004080 	.word	0x20004080
 8002074:	0800a5a4 	.word	0x0800a5a4
 8002078:	200041f0 	.word	0x200041f0
 800207c:	0800a5d0 	.word	0x0800a5d0
 8002080:	20004310 	.word	0x20004310
 8002084:	0800a5f8 	.word	0x0800a5f8
 8002088:	20004378 	.word	0x20004378
 800208c:	0800a620 	.word	0x0800a620
 8002090:	200043fc 	.word	0x200043fc
 8002094:	0800a64c 	.word	0x0800a64c
 8002098:	200043f8 	.word	0x200043f8

0800209c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b094      	sub	sp, #80	; 0x50
 80020a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a2:	f107 0320 	add.w	r3, r7, #32
 80020a6:	2230      	movs	r2, #48	; 0x30
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f007 fac5 	bl	800963a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <SystemClock_Config+0xc8>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	4a26      	ldr	r2, [pc, #152]	; (8002164 <SystemClock_Config+0xc8>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6413      	str	r3, [r2, #64]	; 0x40
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <SystemClock_Config+0xc8>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020dc:	2300      	movs	r3, #0
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <SystemClock_Config+0xcc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <SystemClock_Config+0xcc>)
 80020e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <SystemClock_Config+0xcc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020f8:	2301      	movs	r3, #1
 80020fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002102:	2302      	movs	r3, #2
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800210c:	2308      	movs	r3, #8
 800210e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002110:	2364      	movs	r3, #100	; 0x64
 8002112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002114:	2302      	movs	r3, #2
 8002116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002118:	2304      	movs	r3, #4
 800211a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800211c:	f107 0320 	add.w	r3, r7, #32
 8002120:	4618      	mov	r0, r3
 8002122:	f004 fd2f 	bl	8006b84 <HAL_RCC_OscConfig>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800212c:	f000 fd9e 	bl	8002c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002130:	230f      	movs	r3, #15
 8002132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002134:	2302      	movs	r3, #2
 8002136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	2101      	movs	r1, #1
 800214c:	4618      	mov	r0, r3
 800214e:	f004 ff89 	bl	8007064 <HAL_RCC_ClockConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002158:	f000 fd88 	bl	8002c6c <Error_Handler>
  }
}
 800215c:	bf00      	nop
 800215e:	3750      	adds	r7, #80	; 0x50
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	40007000 	.word	0x40007000

0800216c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <MX_I2C1_Init+0x50>)
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <MX_I2C1_Init+0x54>)
 8002174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_I2C1_Init+0x50>)
 8002178:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <MX_I2C1_Init+0x58>)
 800217a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <MX_I2C1_Init+0x50>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <MX_I2C1_Init+0x50>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_I2C1_Init+0x50>)
 800218a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800218e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <MX_I2C1_Init+0x50>)
 8002192:	2200      	movs	r2, #0
 8002194:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_I2C1_Init+0x50>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <MX_I2C1_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_I2C1_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <MX_I2C1_Init+0x50>)
 80021aa:	f001 fef5 	bl	8003f98 <HAL_I2C_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021b4:	f000 fd5a 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20004140 	.word	0x20004140
 80021c0:	40005400 	.word	0x40005400
 80021c4:	000186a0 	.word	0x000186a0

080021c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <MX_I2C2_Init+0x50>)
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <MX_I2C2_Init+0x54>)
 80021d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_I2C2_Init+0x50>)
 80021d4:	4a12      	ldr	r2, [pc, #72]	; (8002220 <MX_I2C2_Init+0x58>)
 80021d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_I2C2_Init+0x50>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <MX_I2C2_Init+0x50>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MX_I2C2_Init+0x50>)
 80021e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <MX_I2C2_Init+0x50>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MX_I2C2_Init+0x50>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <MX_I2C2_Init+0x50>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_I2C2_Init+0x50>)
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002204:	4804      	ldr	r0, [pc, #16]	; (8002218 <MX_I2C2_Init+0x50>)
 8002206:	f001 fec7 	bl	8003f98 <HAL_I2C_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002210:	f000 fd2c 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20004194 	.word	0x20004194
 800221c:	40005800 	.word	0x40005800
 8002220:	000186a0 	.word	0x000186a0

08002224 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <MX_I2C3_Init+0x50>)
 800222a:	4a13      	ldr	r2, [pc, #76]	; (8002278 <MX_I2C3_Init+0x54>)
 800222c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <MX_I2C3_Init+0x50>)
 8002230:	4a12      	ldr	r2, [pc, #72]	; (800227c <MX_I2C3_Init+0x58>)
 8002232:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <MX_I2C3_Init+0x50>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <MX_I2C3_Init+0x50>)
 800223c:	2200      	movs	r2, #0
 800223e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <MX_I2C3_Init+0x50>)
 8002242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002246:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <MX_I2C3_Init+0x50>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <MX_I2C3_Init+0x50>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <MX_I2C3_Init+0x50>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MX_I2C3_Init+0x50>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002260:	4804      	ldr	r0, [pc, #16]	; (8002274 <MX_I2C3_Init+0x50>)
 8002262:	f001 fe99 	bl	8003f98 <HAL_I2C_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800226c:	f000 fcfe 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20004084 	.word	0x20004084
 8002278:	40005c00 	.word	0x40005c00
 800227c:	000186a0 	.word	0x000186a0

08002280 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <MX_USART2_UART_Init+0x4c>)
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <MX_USART2_UART_Init+0x50>)
 8002288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <MX_USART2_UART_Init+0x4c>)
 800228c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <MX_USART2_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <MX_USART2_UART_Init+0x4c>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MX_USART2_UART_Init+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_USART2_UART_Init+0x4c>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <MX_USART2_UART_Init+0x4c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <MX_USART2_UART_Init+0x4c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <MX_USART2_UART_Init+0x4c>)
 80022b8:	f005 f8c6 	bl	8007448 <HAL_UART_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022c2:	f000 fcd3 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200043b8 	.word	0x200043b8
 80022d0:	40004400 	.word	0x40004400

080022d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <MX_DMA_Init+0x4c>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <MX_DMA_Init+0x4c>)
 80022e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <MX_DMA_Init+0x4c>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2105      	movs	r1, #5
 80022fa:	200b      	movs	r0, #11
 80022fc:	f001 f8b7 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002300:	200b      	movs	r0, #11
 8002302:	f001 f8d0 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2105      	movs	r1, #5
 800230a:	200c      	movs	r0, #12
 800230c:	f001 f8af 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002310:	200c      	movs	r0, #12
 8002312:	f001 f8c8 	bl	80034a6 <HAL_NVIC_EnableIRQ>

}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800

08002324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b33      	ldr	r3, [pc, #204]	; (800240c <MX_GPIO_Init+0xe8>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a32      	ldr	r2, [pc, #200]	; (800240c <MX_GPIO_Init+0xe8>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <MX_GPIO_Init+0xe8>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <MX_GPIO_Init+0xe8>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a2b      	ldr	r2, [pc, #172]	; (800240c <MX_GPIO_Init+0xe8>)
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <MX_GPIO_Init+0xe8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	4b25      	ldr	r3, [pc, #148]	; (800240c <MX_GPIO_Init+0xe8>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a24      	ldr	r2, [pc, #144]	; (800240c <MX_GPIO_Init+0xe8>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b22      	ldr	r3, [pc, #136]	; (800240c <MX_GPIO_Init+0xe8>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <MX_GPIO_Init+0xe8>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a1d      	ldr	r2, [pc, #116]	; (800240c <MX_GPIO_Init+0xe8>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <MX_GPIO_Init+0xe8>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin|RGB_led2_Pin|RGB_led3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2133      	movs	r1, #51	; 0x33
 80023ae:	4818      	ldr	r0, [pc, #96]	; (8002410 <MX_GPIO_Init+0xec>)
 80023b0:	f001 fdd8 	bl	8003f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <MX_GPIO_Init+0xf0>)
 80023bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4619      	mov	r1, r3
 80023c8:	4813      	ldr	r0, [pc, #76]	; (8002418 <MX_GPIO_Init+0xf4>)
 80023ca:	f001 fc31 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SensorBtn_Pin */
  GPIO_InitStruct.Pin = SensorBtn_Pin;
 80023ce:	2301      	movs	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SensorBtn_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <MX_GPIO_Init+0xf4>)
 80023e2:	f001 fc25 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_led1_Pin RGB_led2_Pin RGB_led3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RGB_led1_Pin|RGB_led2_Pin|RGB_led3_Pin|LD2_Pin;
 80023e6:	2333      	movs	r3, #51	; 0x33
 80023e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <MX_GPIO_Init+0xec>)
 80023fe:	f001 fc17 	bl	8003c30 <HAL_GPIO_Init>

}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40020000 	.word	0x40020000
 8002414:	10210000 	.word	0x10210000
 8002418:	40020800 	.word	0x40020800

0800241c <initBME280>:

/* USER CODE BEGIN 4 */
void initBME280(I2C_HandleTypeDef *i2c) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8002424:	2314      	movs	r3, #20
 8002426:	2204      	movs	r2, #4
 8002428:	2127      	movs	r1, #39	; 0x27
 800242a:	4829      	ldr	r0, [pc, #164]	; (80024d0 <initBME280+0xb4>)
 800242c:	f7ff fb22 	bl	8001a74 <lcdInit>

	bmp280_init_default_params(&bmp280.params);
 8002430:	4828      	ldr	r0, [pc, #160]	; (80024d4 <initBME280+0xb8>)
 8002432:	f7fe fde9 	bl	8001008 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002436:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <initBME280+0xbc>)
 8002438:	2276      	movs	r2, #118	; 0x76
 800243a:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = i2c;
 800243c:	4a26      	ldr	r2, [pc, #152]	; (80024d8 <initBME280+0xbc>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6293      	str	r3, [r2, #40]	; 0x28

    while (!bmp280_init(&bmp280, &bmp280.params))
 8002442:	e00f      	b.n	8002464 <initBME280+0x48>
    {
    	lcdSetCursorPosition(0, 0);
 8002444:	2100      	movs	r1, #0
 8002446:	2000      	movs	r0, #0
 8002448:	f7ff fcc0 	bl	8001dcc <lcdSetCursorPosition>
    	lcdPrintStr((uint8_t*)"BMP280 - failed", 15);
 800244c:	210f      	movs	r1, #15
 800244e:	4823      	ldr	r0, [pc, #140]	; (80024dc <initBME280+0xc0>)
 8002450:	f7ff fce8 	bl	8001e24 <lcdPrintStr>
    	HAL_Delay(1000);
 8002454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002458:	f000 ff0c 	bl	8003274 <HAL_Delay>
    	lcdDisplayClear();
 800245c:	2101      	movs	r1, #1
 800245e:	2002      	movs	r0, #2
 8002460:	f7ff fbba 	bl	8001bd8 <lcdCommand>
    while (!bmp280_init(&bmp280, &bmp280.params))
 8002464:	491b      	ldr	r1, [pc, #108]	; (80024d4 <initBME280+0xb8>)
 8002466:	481c      	ldr	r0, [pc, #112]	; (80024d8 <initBME280+0xbc>)
 8002468:	f7fe ff49 	bl	80012fe <bmp280_init>
 800246c:	4603      	mov	r3, r0
 800246e:	f083 0301 	eor.w	r3, r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e5      	bne.n	8002444 <initBME280+0x28>
	}

    bool bme280p = bmp280.id == BME280_CHIP_ID;
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <initBME280+0xbc>)
 800247a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800247e:	2b60      	cmp	r3, #96	; 0x60
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]

	lcdSetCursorPosition(0, 1);
 8002488:	2101      	movs	r1, #1
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff fc9e 	bl	8001dcc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Our sensor is ", 14);
 8002490:	210e      	movs	r1, #14
 8002492:	4813      	ldr	r0, [pc, #76]	; (80024e0 <initBME280+0xc4>)
 8002494:	f7ff fcc6 	bl	8001e24 <lcdPrintStr>

	lcdSetCursorPosition(14, 1);
 8002498:	2101      	movs	r1, #1
 800249a:	200e      	movs	r0, #14
 800249c:	f7ff fc96 	bl	8001dcc <lcdSetCursorPosition>

    if(bme280p)
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <initBME280+0x94>
    {
    	lcdPrintStr((uint8_t*) bmeStr, 6);
 80024a6:	2106      	movs	r1, #6
 80024a8:	480e      	ldr	r0, [pc, #56]	; (80024e4 <initBME280+0xc8>)
 80024aa:	f7ff fcbb 	bl	8001e24 <lcdPrintStr>
 80024ae:	e003      	b.n	80024b8 <initBME280+0x9c>
    }
    else
    {
    	lcdPrintStr((uint8_t*) bmpStr, 6);
 80024b0:	2106      	movs	r1, #6
 80024b2:	480d      	ldr	r0, [pc, #52]	; (80024e8 <initBME280+0xcc>)
 80024b4:	f7ff fcb6 	bl	8001e24 <lcdPrintStr>
    }

    HAL_Delay(2000);
 80024b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024bc:	f000 feda 	bl	8003274 <HAL_Delay>
    lcdDisplayClear();
 80024c0:	2101      	movs	r1, #1
 80024c2:	2002      	movs	r0, #2
 80024c4:	f7ff fb88 	bl	8001bd8 <lcdCommand>
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20004140 	.word	0x20004140
 80024d4:	200043b0 	.word	0x200043b0
 80024d8:	20004384 	.word	0x20004384
 80024dc:	0800a668 	.word	0x0800a668
 80024e0:	0800a678 	.word	0x0800a678
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000008 	.word	0x20000008

080024ec <checkBME280>:

void checkBME280(void) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	while(!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 80024f0:	e017      	b.n	8002522 <checkBME280+0x36>
	{
		lcdSetCursorPosition(0, 1);
 80024f2:	2101      	movs	r1, #1
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7ff fc69 	bl	8001dcc <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) "Read data - failed!", 18);
 80024fa:	2112      	movs	r1, #18
 80024fc:	482d      	ldr	r0, [pc, #180]	; (80025b4 <checkBME280+0xc8>)
 80024fe:	f7ff fc91 	bl	8001e24 <lcdPrintStr>
		lcdSetCursorPosition(0, 2);
 8002502:	2102      	movs	r1, #2
 8002504:	2000      	movs	r0, #0
 8002506:	f7ff fc61 	bl	8001dcc <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) "Check connection!", 17);
 800250a:	2111      	movs	r1, #17
 800250c:	482a      	ldr	r0, [pc, #168]	; (80025b8 <checkBME280+0xcc>)
 800250e:	f7ff fc89 	bl	8001e24 <lcdPrintStr>
		HAL_Delay(1000);
 8002512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002516:	f000 fead 	bl	8003274 <HAL_Delay>
		lcdDisplayClear();
 800251a:	2101      	movs	r1, #1
 800251c:	2002      	movs	r0, #2
 800251e:	f7ff fb5b 	bl	8001bd8 <lcdCommand>
	while(!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <checkBME280+0xd0>)
 8002524:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <checkBME280+0xd4>)
 8002526:	4927      	ldr	r1, [pc, #156]	; (80025c4 <checkBME280+0xd8>)
 8002528:	4827      	ldr	r0, [pc, #156]	; (80025c8 <checkBME280+0xdc>)
 800252a:	f7ff fa3d 	bl	80019a8 <bmp280_read_float>
 800252e:	4603      	mov	r3, r0
 8002530:	f083 0301 	eor.w	r3, r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1db      	bne.n	80024f2 <checkBME280+0x6>
	}

	fPart = (int) temperature;
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <checkBME280+0xd8>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002544:	ee17 2a90 	vmov	r2, s15
 8002548:	4b20      	ldr	r3, [pc, #128]	; (80025cc <checkBME280+0xe0>)
 800254a:	601a      	str	r2, [r3, #0]
	sPart = (temperature - fPart) * 1000;
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <checkBME280+0xd8>)
 800254e:	ed93 7a00 	vldr	s14, [r3]
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <checkBME280+0xe0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800255e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002562:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80025d0 <checkBME280+0xe4>
 8002566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256e:	ee17 2a90 	vmov	r2, s15
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <checkBME280+0xe8>)
 8002574:	601a      	str	r2, [r3, #0]

	MMPressure = pressure / 133;
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <checkBME280+0xd4>)
 8002578:	ed93 7a00 	vldr	s14, [r3]
 800257c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80025d8 <checkBME280+0xec>
 8002580:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <checkBME280+0xf0>)
 8002586:	edc3 7a00 	vstr	s15, [r3]
	fPartPressure = (int) MMPressure;
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <checkBME280+0xf0>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002594:	ee17 2a90 	vmov	r2, s15
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <checkBME280+0xf4>)
 800259a:	601a      	str	r2, [r3, #0]

	fHumidity = (int) humidity;
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <checkBME280+0xd0>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025a6:	ee17 2a90 	vmov	r2, s15
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <checkBME280+0xf8>)
 80025ac:	601a      	str	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	0800a688 	.word	0x0800a688
 80025b8:	0800a69c 	.word	0x0800a69c
 80025bc:	200041f8 	.word	0x200041f8
 80025c0:	200041f4 	.word	0x200041f4
 80025c4:	200041ec 	.word	0x200041ec
 80025c8:	20004384 	.word	0x20004384
 80025cc:	2000437c 	.word	0x2000437c
 80025d0:	447a0000 	.word	0x447a0000
 80025d4:	200040d8 	.word	0x200040d8
 80025d8:	43050000 	.word	0x43050000
 80025dc:	200041fc 	.word	0x200041fc
 80025e0:	20004380 	.word	0x20004380
 80025e4:	200040dc 	.word	0x200040dc

080025e8 <convertData>:

void convertData(void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	itoa(fPart, firstPart, 10);
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <convertData+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	220a      	movs	r2, #10
 80025f2:	490e      	ldr	r1, [pc, #56]	; (800262c <convertData+0x44>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f007 f813 	bl	8009620 <itoa>
	itoa(sPart, secondPart, 10);
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <convertData+0x48>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	220a      	movs	r2, #10
 8002600:	490c      	ldr	r1, [pc, #48]	; (8002634 <convertData+0x4c>)
 8002602:	4618      	mov	r0, r3
 8002604:	f007 f80c 	bl	8009620 <itoa>
	itoa(fPartPressure, PressureStr, 10);
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <convertData+0x50>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	220a      	movs	r2, #10
 800260e:	490b      	ldr	r1, [pc, #44]	; (800263c <convertData+0x54>)
 8002610:	4618      	mov	r0, r3
 8002612:	f007 f805 	bl	8009620 <itoa>
	itoa(fHumidity, HumidityStr, 10);
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <convertData+0x58>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	220a      	movs	r2, #10
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <convertData+0x5c>)
 800261e:	4618      	mov	r0, r3
 8002620:	f006 fffe 	bl	8009620 <itoa>
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	2000437c 	.word	0x2000437c
 800262c:	20000310 	.word	0x20000310
 8002630:	200040d8 	.word	0x200040d8
 8002634:	20000314 	.word	0x20000314
 8002638:	20004380 	.word	0x20004380
 800263c:	20000318 	.word	0x20000318
 8002640:	200040dc 	.word	0x200040dc
 8002644:	2000031c 	.word	0x2000031c

08002648 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  for(;;)
  {
	  checkBME280();
 8002650:	f7ff ff4c 	bl	80024ec <checkBME280>
	  vTaskDelay(1000);
 8002654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002658:	f005 fe34 	bl	80082c4 <vTaskDelay>
	  checkBME280();
 800265c:	e7f8      	b.n	8002650 <StartDefaultTask+0x8>
	...

08002660 <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void const * argument)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8002668:	2314      	movs	r3, #20
 800266a:	2204      	movs	r2, #4
 800266c:	2127      	movs	r1, #39	; 0x27
 800266e:	487a      	ldr	r0, [pc, #488]	; (8002858 <StartLcdTask+0x1f8>)
 8002670:	f7ff fa00 	bl	8001a74 <lcdInit>

  initBME280(&hi2c2);
 8002674:	4879      	ldr	r0, [pc, #484]	; (800285c <StartLcdTask+0x1fc>)
 8002676:	f7ff fed1 	bl	800241c <initBME280>

  for(;;)
  {
	  getTime(&hi2c3);
 800267a:	4879      	ldr	r0, [pc, #484]	; (8002860 <StartLcdTask+0x200>)
 800267c:	f7fe fc74 	bl	8000f68 <getTime>
	  convertData();
 8002680:	f7ff ffb2 	bl	80025e8 <convertData>

	  getDay = time.dayofmonth;
 8002684:	4b77      	ldr	r3, [pc, #476]	; (8002864 <StartLcdTask+0x204>)
 8002686:	791b      	ldrb	r3, [r3, #4]
 8002688:	461a      	mov	r2, r3
 800268a:	4b77      	ldr	r3, [pc, #476]	; (8002868 <StartLcdTask+0x208>)
 800268c:	601a      	str	r2, [r3, #0]

	  lcdDisplayClear();
 800268e:	2101      	movs	r1, #1
 8002690:	2002      	movs	r0, #2
 8002692:	f7ff faa1 	bl	8001bd8 <lcdCommand>

	  lcdSetCursorPosition(0, 0);
 8002696:	2100      	movs	r1, #0
 8002698:	2000      	movs	r0, #0
 800269a:	f7ff fb97 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Hello, dear user!" , 17);
 800269e:	2111      	movs	r1, #17
 80026a0:	4872      	ldr	r0, [pc, #456]	; (800286c <StartLcdTask+0x20c>)
 80026a2:	f7ff fbbf 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(0, 1);
 80026a6:	2101      	movs	r1, #1
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7ff fb8f 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Today's ", 8);
 80026ae:	2108      	movs	r1, #8
 80026b0:	486f      	ldr	r0, [pc, #444]	; (8002870 <StartLcdTask+0x210>)
 80026b2:	f7ff fbb7 	bl	8001e24 <lcdPrintStr>

	  sprintf(buffer, "%02d", time.dayofmonth);
 80026b6:	4b6b      	ldr	r3, [pc, #428]	; (8002864 <StartLcdTask+0x204>)
 80026b8:	791b      	ldrb	r3, [r3, #4]
 80026ba:	461a      	mov	r2, r3
 80026bc:	496d      	ldr	r1, [pc, #436]	; (8002874 <StartLcdTask+0x214>)
 80026be:	486e      	ldr	r0, [pc, #440]	; (8002878 <StartLcdTask+0x218>)
 80026c0:	f006 ffc4 	bl	800964c <siprintf>
	  lcdSetCursorPosition(8, 1);
 80026c4:	2101      	movs	r1, #1
 80026c6:	2008      	movs	r0, #8
 80026c8:	f7ff fb80 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, floor(log10(abs(getDay)))+1);
 80026cc:	4b66      	ldr	r3, [pc, #408]	; (8002868 <StartLcdTask+0x208>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bfb8      	it	lt
 80026d4:	425b      	neglt	r3, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff24 	bl	8000524 <__aeabi_i2d>
 80026dc:	4603      	mov	r3, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	ec44 3b10 	vmov	d0, r3, r4
 80026e4:	f007 fc70 	bl	8009fc8 <log10>
 80026e8:	eeb0 7a40 	vmov.f32	s14, s0
 80026ec:	eef0 7a60 	vmov.f32	s15, s1
 80026f0:	eeb0 0a47 	vmov.f32	s0, s14
 80026f4:	eef0 0a67 	vmov.f32	s1, s15
 80026f8:	f007 fbe2 	bl	8009ec0 <floor>
 80026fc:	ec51 0b10 	vmov	r0, r1, d0
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	4b5d      	ldr	r3, [pc, #372]	; (800287c <StartLcdTask+0x21c>)
 8002706:	f7fd fdc1 	bl	800028c <__adddf3>
 800270a:	4603      	mov	r3, r0
 800270c:	460c      	mov	r4, r1
 800270e:	4618      	mov	r0, r3
 8002710:	4621      	mov	r1, r4
 8002712:	f7fe fa21 	bl	8000b58 <__aeabi_d2uiz>
 8002716:	4603      	mov	r3, r0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4619      	mov	r1, r3
 800271c:	4856      	ldr	r0, [pc, #344]	; (8002878 <StartLcdTask+0x218>)
 800271e:	f7ff fb81 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(11, 1);
 8002722:	2101      	movs	r1, #1
 8002724:	200b      	movs	r0, #11
 8002726:	f7ff fb51 	bl	8001dcc <lcdSetCursorPosition>
	  switch(time.month) {
 800272a:	4b4e      	ldr	r3, [pc, #312]	; (8002864 <StartLcdTask+0x204>)
 800272c:	795b      	ldrb	r3, [r3, #5]
 800272e:	3b01      	subs	r3, #1
 8002730:	2b0b      	cmp	r3, #11
 8002732:	d857      	bhi.n	80027e4 <StartLcdTask+0x184>
 8002734:	a201      	add	r2, pc, #4	; (adr r2, 800273c <StartLcdTask+0xdc>)
 8002736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273a:	bf00      	nop
 800273c:	0800276d 	.word	0x0800276d
 8002740:	08002777 	.word	0x08002777
 8002744:	08002781 	.word	0x08002781
 8002748:	0800278b 	.word	0x0800278b
 800274c:	08002795 	.word	0x08002795
 8002750:	0800279f 	.word	0x0800279f
 8002754:	080027a9 	.word	0x080027a9
 8002758:	080027b3 	.word	0x080027b3
 800275c:	080027bd 	.word	0x080027bd
 8002760:	080027c7 	.word	0x080027c7
 8002764:	080027d1 	.word	0x080027d1
 8002768:	080027db 	.word	0x080027db
	  case 1:
		  lcdPrintStr((uint8_t*) "January", 7);
 800276c:	2107      	movs	r1, #7
 800276e:	4844      	ldr	r0, [pc, #272]	; (8002880 <StartLcdTask+0x220>)
 8002770:	f7ff fb58 	bl	8001e24 <lcdPrintStr>
		  break;
 8002774:	e036      	b.n	80027e4 <StartLcdTask+0x184>
	  case 2:
		  lcdPrintStr((uint8_t*) "February", 8);
 8002776:	2108      	movs	r1, #8
 8002778:	4842      	ldr	r0, [pc, #264]	; (8002884 <StartLcdTask+0x224>)
 800277a:	f7ff fb53 	bl	8001e24 <lcdPrintStr>
		  break;
 800277e:	e031      	b.n	80027e4 <StartLcdTask+0x184>
	  case 3:
		  lcdPrintStr((uint8_t*) "March", 5);
 8002780:	2105      	movs	r1, #5
 8002782:	4841      	ldr	r0, [pc, #260]	; (8002888 <StartLcdTask+0x228>)
 8002784:	f7ff fb4e 	bl	8001e24 <lcdPrintStr>
		  break;
 8002788:	e02c      	b.n	80027e4 <StartLcdTask+0x184>
	  case 4:
		  lcdPrintStr((uint8_t*) "April", 5);
 800278a:	2105      	movs	r1, #5
 800278c:	483f      	ldr	r0, [pc, #252]	; (800288c <StartLcdTask+0x22c>)
 800278e:	f7ff fb49 	bl	8001e24 <lcdPrintStr>
		  break;
 8002792:	e027      	b.n	80027e4 <StartLcdTask+0x184>
	  case 5:
		  lcdPrintStr((uint8_t*) "May", 3);
 8002794:	2103      	movs	r1, #3
 8002796:	483e      	ldr	r0, [pc, #248]	; (8002890 <StartLcdTask+0x230>)
 8002798:	f7ff fb44 	bl	8001e24 <lcdPrintStr>
		  break;
 800279c:	e022      	b.n	80027e4 <StartLcdTask+0x184>
	  case 6:
		  lcdPrintStr((uint8_t*) "June", 4);
 800279e:	2104      	movs	r1, #4
 80027a0:	483c      	ldr	r0, [pc, #240]	; (8002894 <StartLcdTask+0x234>)
 80027a2:	f7ff fb3f 	bl	8001e24 <lcdPrintStr>
		  break;
 80027a6:	e01d      	b.n	80027e4 <StartLcdTask+0x184>
	  case 7:
		  lcdPrintStr((uint8_t*) "July", 4);
 80027a8:	2104      	movs	r1, #4
 80027aa:	483b      	ldr	r0, [pc, #236]	; (8002898 <StartLcdTask+0x238>)
 80027ac:	f7ff fb3a 	bl	8001e24 <lcdPrintStr>
		  break;
 80027b0:	e018      	b.n	80027e4 <StartLcdTask+0x184>
	  case 8:
		  lcdPrintStr((uint8_t*) "August", 6);
 80027b2:	2106      	movs	r1, #6
 80027b4:	4839      	ldr	r0, [pc, #228]	; (800289c <StartLcdTask+0x23c>)
 80027b6:	f7ff fb35 	bl	8001e24 <lcdPrintStr>
		  break;
 80027ba:	e013      	b.n	80027e4 <StartLcdTask+0x184>
	  case 9:
		  lcdPrintStr((uint8_t*) "September", 9);
 80027bc:	2109      	movs	r1, #9
 80027be:	4838      	ldr	r0, [pc, #224]	; (80028a0 <StartLcdTask+0x240>)
 80027c0:	f7ff fb30 	bl	8001e24 <lcdPrintStr>
		  break;
 80027c4:	e00e      	b.n	80027e4 <StartLcdTask+0x184>
	  case 10:
		  lcdPrintStr((uint8_t*) "October", 7);
 80027c6:	2107      	movs	r1, #7
 80027c8:	4836      	ldr	r0, [pc, #216]	; (80028a4 <StartLcdTask+0x244>)
 80027ca:	f7ff fb2b 	bl	8001e24 <lcdPrintStr>
		  break;
 80027ce:	e009      	b.n	80027e4 <StartLcdTask+0x184>
	  case 11:
		  lcdPrintStr((uint8_t*) "November", 8);
 80027d0:	2108      	movs	r1, #8
 80027d2:	4835      	ldr	r0, [pc, #212]	; (80028a8 <StartLcdTask+0x248>)
 80027d4:	f7ff fb26 	bl	8001e24 <lcdPrintStr>
		  break;
 80027d8:	e004      	b.n	80027e4 <StartLcdTask+0x184>
	  case 12:
		  lcdPrintStr((uint8_t*) "December", 8);
 80027da:	2108      	movs	r1, #8
 80027dc:	4833      	ldr	r0, [pc, #204]	; (80028ac <StartLcdTask+0x24c>)
 80027de:	f7ff fb21 	bl	8001e24 <lcdPrintStr>
		  break;
 80027e2:	bf00      	nop
	  }

	  lcdSetCursorPosition(0, 2);
 80027e4:	2102      	movs	r1, #2
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7ff faf0 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Temperature: ", 13);
 80027ec:	210d      	movs	r1, #13
 80027ee:	4830      	ldr	r0, [pc, #192]	; (80028b0 <StartLcdTask+0x250>)
 80027f0:	f7ff fb18 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(13, 2);
 80027f4:	2102      	movs	r1, #2
 80027f6:	200d      	movs	r0, #13
 80027f8:	f7ff fae8 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) firstPart, 2);
 80027fc:	2102      	movs	r1, #2
 80027fe:	482d      	ldr	r0, [pc, #180]	; (80028b4 <StartLcdTask+0x254>)
 8002800:	f7ff fb10 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(16, 2);
 8002804:	2102      	movs	r1, #2
 8002806:	2010      	movs	r0, #16
 8002808:	f7ff fae0 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "C", 1);
 800280c:	2101      	movs	r1, #1
 800280e:	482a      	ldr	r0, [pc, #168]	; (80028b8 <StartLcdTask+0x258>)
 8002810:	f7ff fb08 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(0, 3);
 8002814:	2103      	movs	r1, #3
 8002816:	2000      	movs	r0, #0
 8002818:	f7ff fad8 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Time: ", 6);
 800281c:	2106      	movs	r1, #6
 800281e:	4827      	ldr	r0, [pc, #156]	; (80028bc <StartLcdTask+0x25c>)
 8002820:	f7ff fb00 	bl	8001e24 <lcdPrintStr>

	  sprintf(buffer, "%02d:%02d", time.hour, time.minutes);
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <StartLcdTask+0x204>)
 8002826:	789b      	ldrb	r3, [r3, #2]
 8002828:	461a      	mov	r2, r3
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <StartLcdTask+0x204>)
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	4924      	ldr	r1, [pc, #144]	; (80028c0 <StartLcdTask+0x260>)
 8002830:	4811      	ldr	r0, [pc, #68]	; (8002878 <StartLcdTask+0x218>)
 8002832:	f006 ff0b 	bl	800964c <siprintf>
	  lcdSetCursorPosition(6, 3);
 8002836:	2103      	movs	r1, #3
 8002838:	2006      	movs	r0, #6
 800283a:	f7ff fac7 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 5);
 800283e:	2105      	movs	r1, #5
 8002840:	480d      	ldr	r0, [pc, #52]	; (8002878 <StartLcdTask+0x218>)
 8002842:	f7ff faef 	bl	8001e24 <lcdPrintStr>

	  HAL_Delay(2000);
 8002846:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800284a:	f000 fd13 	bl	8003274 <HAL_Delay>

	  vTaskDelay(100);
 800284e:	2064      	movs	r0, #100	; 0x64
 8002850:	f005 fd38 	bl	80082c4 <vTaskDelay>
	  getTime(&hi2c3);
 8002854:	e711      	b.n	800267a <StartLcdTask+0x1a>
 8002856:	bf00      	nop
 8002858:	20004140 	.word	0x20004140
 800285c:	20004194 	.word	0x20004194
 8002860:	20004084 	.word	0x20004084
 8002864:	20004078 	.word	0x20004078
 8002868:	200041e8 	.word	0x200041e8
 800286c:	0800a6b0 	.word	0x0800a6b0
 8002870:	0800a6c4 	.word	0x0800a6c4
 8002874:	0800a6d0 	.word	0x0800a6d0
 8002878:	20004300 	.word	0x20004300
 800287c:	3ff00000 	.word	0x3ff00000
 8002880:	0800a6d8 	.word	0x0800a6d8
 8002884:	0800a6e0 	.word	0x0800a6e0
 8002888:	0800a6ec 	.word	0x0800a6ec
 800288c:	0800a6f4 	.word	0x0800a6f4
 8002890:	0800a6fc 	.word	0x0800a6fc
 8002894:	0800a700 	.word	0x0800a700
 8002898:	0800a708 	.word	0x0800a708
 800289c:	0800a710 	.word	0x0800a710
 80028a0:	0800a718 	.word	0x0800a718
 80028a4:	0800a724 	.word	0x0800a724
 80028a8:	0800a72c 	.word	0x0800a72c
 80028ac:	0800a738 	.word	0x0800a738
 80028b0:	0800a744 	.word	0x0800a744
 80028b4:	20000310 	.word	0x20000310
 80028b8:	0800a754 	.word	0x0800a754
 80028bc:	0800a758 	.word	0x0800a758
 80028c0:	0800a760 	.word	0x0800a760

080028c4 <StartDataSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDataSensor */
void StartDataSensor(void const * argument)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDataSensor */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 80028cc:	2314      	movs	r3, #20
 80028ce:	2204      	movs	r2, #4
 80028d0:	2127      	movs	r1, #39	; 0x27
 80028d2:	4837      	ldr	r0, [pc, #220]	; (80029b0 <StartDataSensor+0xec>)
 80028d4:	f7ff f8ce 	bl	8001a74 <lcdInit>

//  initBME280(&hi2c2);

  for(;;) {

	  lcdDisplayClear();
 80028d8:	2101      	movs	r1, #1
 80028da:	2002      	movs	r0, #2
 80028dc:	f7ff f97c 	bl	8001bd8 <lcdCommand>

	  convertData();
 80028e0:	f7ff fe82 	bl	80025e8 <convertData>

	  lcdSetCursorPosition(0, 0);
 80028e4:	2100      	movs	r1, #0
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7ff fa70 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Sensor data:", 12);
 80028ec:	210c      	movs	r1, #12
 80028ee:	4831      	ldr	r0, [pc, #196]	; (80029b4 <StartDataSensor+0xf0>)
 80028f0:	f7ff fa98 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(0, 1);
 80028f4:	2101      	movs	r1, #1
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7ff fa68 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Humidity = ", 11);
 80028fc:	210b      	movs	r1, #11
 80028fe:	482e      	ldr	r0, [pc, #184]	; (80029b8 <StartDataSensor+0xf4>)
 8002900:	f7ff fa90 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(11, 1);
 8002904:	2101      	movs	r1, #1
 8002906:	200b      	movs	r0, #11
 8002908:	f7ff fa60 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) HumidityStr, 2);
 800290c:	2102      	movs	r1, #2
 800290e:	482b      	ldr	r0, [pc, #172]	; (80029bc <StartDataSensor+0xf8>)
 8002910:	f7ff fa88 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(14, 1);
 8002914:	2101      	movs	r1, #1
 8002916:	200e      	movs	r0, #14
 8002918:	f7ff fa58 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "%", 1);
 800291c:	2101      	movs	r1, #1
 800291e:	4828      	ldr	r0, [pc, #160]	; (80029c0 <StartDataSensor+0xfc>)
 8002920:	f7ff fa80 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(0, 2);
 8002924:	2102      	movs	r1, #2
 8002926:	2000      	movs	r0, #0
 8002928:	f7ff fa50 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Pressure = ", 11);
 800292c:	210b      	movs	r1, #11
 800292e:	4825      	ldr	r0, [pc, #148]	; (80029c4 <StartDataSensor+0x100>)
 8002930:	f7ff fa78 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(11, 2);
 8002934:	2102      	movs	r1, #2
 8002936:	200b      	movs	r0, #11
 8002938:	f7ff fa48 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) PressureStr, 3);
 800293c:	2103      	movs	r1, #3
 800293e:	4822      	ldr	r0, [pc, #136]	; (80029c8 <StartDataSensor+0x104>)
 8002940:	f7ff fa70 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(15, 2);
 8002944:	2102      	movs	r1, #2
 8002946:	200f      	movs	r0, #15
 8002948:	f7ff fa40 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "mmHg", 4);
 800294c:	2104      	movs	r1, #4
 800294e:	481f      	ldr	r0, [pc, #124]	; (80029cc <StartDataSensor+0x108>)
 8002950:	f7ff fa68 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(0, 3);
 8002954:	2103      	movs	r1, #3
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff fa38 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Temp = ", 7);
 800295c:	2107      	movs	r1, #7
 800295e:	481c      	ldr	r0, [pc, #112]	; (80029d0 <StartDataSensor+0x10c>)
 8002960:	f7ff fa60 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(7, 3);
 8002964:	2103      	movs	r1, #3
 8002966:	2007      	movs	r0, #7
 8002968:	f7ff fa30 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)firstPart, 2);
 800296c:	2102      	movs	r1, #2
 800296e:	4819      	ldr	r0, [pc, #100]	; (80029d4 <StartDataSensor+0x110>)
 8002970:	f7ff fa58 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(9, 3);
 8002974:	2103      	movs	r1, #3
 8002976:	2009      	movs	r0, #9
 8002978:	f7ff fa28 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)".", 1);
 800297c:	2101      	movs	r1, #1
 800297e:	4816      	ldr	r0, [pc, #88]	; (80029d8 <StartDataSensor+0x114>)
 8002980:	f7ff fa50 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(10, 3);
 8002984:	2103      	movs	r1, #3
 8002986:	200a      	movs	r0, #10
 8002988:	f7ff fa20 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)secondPart, 2);
 800298c:	2102      	movs	r1, #2
 800298e:	4813      	ldr	r0, [pc, #76]	; (80029dc <StartDataSensor+0x118>)
 8002990:	f7ff fa48 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(13, 3);
 8002994:	2103      	movs	r1, #3
 8002996:	200d      	movs	r0, #13
 8002998:	f7ff fa18 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Celsius", 7);
 800299c:	2107      	movs	r1, #7
 800299e:	4810      	ldr	r0, [pc, #64]	; (80029e0 <StartDataSensor+0x11c>)
 80029a0:	f7ff fa40 	bl	8001e24 <lcdPrintStr>

	  osDelay(1000);
 80029a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a8:	f005 f995 	bl	8007cd6 <osDelay>
	  lcdDisplayClear();
 80029ac:	e794      	b.n	80028d8 <StartDataSensor+0x14>
 80029ae:	bf00      	nop
 80029b0:	20004140 	.word	0x20004140
 80029b4:	0800a76c 	.word	0x0800a76c
 80029b8:	0800a77c 	.word	0x0800a77c
 80029bc:	2000031c 	.word	0x2000031c
 80029c0:	0800a788 	.word	0x0800a788
 80029c4:	0800a78c 	.word	0x0800a78c
 80029c8:	20000318 	.word	0x20000318
 80029cc:	0800a798 	.word	0x0800a798
 80029d0:	0800a7a0 	.word	0x0800a7a0
 80029d4:	20000310 	.word	0x20000310
 80029d8:	0800a7a8 	.word	0x0800a7a8
 80029dc:	20000314 	.word	0x20000314
 80029e0:	0800a7ac 	.word	0x0800a7ac

080029e4 <StartBtnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBtnTask */
void StartBtnTask(void const * argument)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBtnTask */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(SensorBtn_GPIO_Port, SensorBtn_Pin) == GPIO_PIN_SET)
 80029ec:	2101      	movs	r1, #1
 80029ee:	4835      	ldr	r0, [pc, #212]	; (8002ac4 <StartBtnTask+0xe0>)
 80029f0:	f001 faa0 	bl	8003f34 <HAL_GPIO_ReadPin>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d15f      	bne.n	8002aba <StartBtnTask+0xd6>
	  {
		  osDelay(100);
 80029fa:	2064      	movs	r0, #100	; 0x64
 80029fc:	f005 f96b 	bl	8007cd6 <osDelay>

		  if(numTask == 3)
 8002a00:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <StartBtnTask+0xe4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d102      	bne.n	8002a0e <StartBtnTask+0x2a>
		  {
			  numTask = 0;
 8002a08:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <StartBtnTask+0xe4>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
		  }


		  if(numTask == 0)
 8002a0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ac8 <StartBtnTask+0xe4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <StartBtnTask+0x64>
		  {
			osThreadSuspend(printLcdTaskHandle);
 8002a16:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <StartBtnTask+0xe8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f005 f96f 	bl	8007cfe <osThreadSuspend>
			osThreadSuspend(myPrintTimeHandle);
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <StartBtnTask+0xec>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f005 f96a 	bl	8007cfe <osThreadSuspend>
			lcdDisplayClear();
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f7ff f8d3 	bl	8001bd8 <lcdCommand>
			osThreadResume(checkDataSensorHandle);
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <StartBtnTask+0xf0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f005 f96e 	bl	8007d18 <osThreadResume>
			numTask++;
 8002a3c:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <StartBtnTask+0xe4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <StartBtnTask+0xe4>)
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e038      	b.n	8002aba <StartBtnTask+0xd6>
		  }
		  else if(numTask == 1)
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <StartBtnTask+0xe4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d118      	bne.n	8002a82 <StartBtnTask+0x9e>
		  {
			osThreadSuspend(checkDataSensorHandle);
 8002a50:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <StartBtnTask+0xf0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f005 f952 	bl	8007cfe <osThreadSuspend>
			osThreadSuspend(printLcdTaskHandle);
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <StartBtnTask+0xe8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f005 f94d 	bl	8007cfe <osThreadSuspend>
			lcdDisplayClear();
 8002a64:	2101      	movs	r1, #1
 8002a66:	2002      	movs	r0, #2
 8002a68:	f7ff f8b6 	bl	8001bd8 <lcdCommand>
			osThreadResume(myPrintTimeHandle);
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <StartBtnTask+0xec>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f005 f951 	bl	8007d18 <osThreadResume>
			numTask++;
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <StartBtnTask+0xe4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <StartBtnTask+0xe4>)
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e01b      	b.n	8002aba <StartBtnTask+0xd6>
		  }
		  else if(numTask == 2)
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <StartBtnTask+0xe4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d117      	bne.n	8002aba <StartBtnTask+0xd6>
		  {
			osThreadSuspend(checkDataSensorHandle);
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <StartBtnTask+0xf0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f005 f935 	bl	8007cfe <osThreadSuspend>
			osThreadSuspend(myPrintTimeHandle);
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <StartBtnTask+0xec>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f005 f930 	bl	8007cfe <osThreadSuspend>
			lcdDisplayClear();
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	2002      	movs	r0, #2
 8002aa2:	f7ff f899 	bl	8001bd8 <lcdCommand>
			osThreadResume(printLcdTaskHandle);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <StartBtnTask+0xe8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f005 f934 	bl	8007d18 <osThreadResume>
			numTask++;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <StartBtnTask+0xe4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <StartBtnTask+0xe4>)
 8002ab8:	6013      	str	r3, [r2, #0]
		  }
	  }
	  osDelay(100);
 8002aba:	2064      	movs	r0, #100	; 0x64
 8002abc:	f005 f90b 	bl	8007cd6 <osDelay>
	  if(HAL_GPIO_ReadPin(SensorBtn_GPIO_Port, SensorBtn_Pin) == GPIO_PIN_SET)
 8002ac0:	e794      	b.n	80029ec <StartBtnTask+0x8>
 8002ac2:	bf00      	nop
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	2000030c 	.word	0x2000030c
 8002acc:	200041f0 	.word	0x200041f0
 8002ad0:	200043fc 	.word	0x200043fc
 8002ad4:	20004310 	.word	0x20004310

08002ad8 <StartTimeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimeTask */
void StartTimeTask(void const * argument)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeTask */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8002ae0:	2314      	movs	r3, #20
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	2127      	movs	r1, #39	; 0x27
 8002ae6:	4827      	ldr	r0, [pc, #156]	; (8002b84 <StartTimeTask+0xac>)
 8002ae8:	f7fe ffc4 	bl	8001a74 <lcdInit>

  for(;;)
  {
	  lcdDisplayClear();
 8002aec:	2101      	movs	r1, #1
 8002aee:	2002      	movs	r0, #2
 8002af0:	f7ff f872 	bl	8001bd8 <lcdCommand>

	  getTime(&hi2c3);
 8002af4:	4824      	ldr	r0, [pc, #144]	; (8002b88 <StartTimeTask+0xb0>)
 8002af6:	f7fe fa37 	bl	8000f68 <getTime>

	  lcdSetCursorPosition(0, 0);
 8002afa:	2100      	movs	r1, #0
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7ff f965 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Your time: ", 11);
 8002b02:	210b      	movs	r1, #11
 8002b04:	4821      	ldr	r0, [pc, #132]	; (8002b8c <StartTimeTask+0xb4>)
 8002b06:	f7ff f98d 	bl	8001e24 <lcdPrintStr>

	  sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <StartTimeTask+0xb8>)
 8002b0c:	789b      	ldrb	r3, [r3, #2]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <StartTimeTask+0xb8>)
 8002b12:	785b      	ldrb	r3, [r3, #1]
 8002b14:	4619      	mov	r1, r3
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <StartTimeTask+0xb8>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	491d      	ldr	r1, [pc, #116]	; (8002b94 <StartTimeTask+0xbc>)
 8002b20:	481d      	ldr	r0, [pc, #116]	; (8002b98 <StartTimeTask+0xc0>)
 8002b22:	f006 fd93 	bl	800964c <siprintf>
	  lcdSetCursorPosition(11, 0);
 8002b26:	2100      	movs	r1, #0
 8002b28:	200b      	movs	r0, #11
 8002b2a:	f7ff f94f 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 8);
 8002b2e:	2108      	movs	r1, #8
 8002b30:	4819      	ldr	r0, [pc, #100]	; (8002b98 <StartTimeTask+0xc0>)
 8002b32:	f7ff f977 	bl	8001e24 <lcdPrintStr>

	  lcdSetCursorPosition(0, 2);
 8002b36:	2102      	movs	r1, #2
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7ff f947 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Date: ", 6);
 8002b3e:	2106      	movs	r1, #6
 8002b40:	4816      	ldr	r0, [pc, #88]	; (8002b9c <StartTimeTask+0xc4>)
 8002b42:	f7ff f96f 	bl	8001e24 <lcdPrintStr>

	  sprintf(buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <StartTimeTask+0xb8>)
 8002b48:	791b      	ldrb	r3, [r3, #4]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <StartTimeTask+0xb8>)
 8002b4e:	795b      	ldrb	r3, [r3, #5]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <StartTimeTask+0xb8>)
 8002b54:	799b      	ldrb	r3, [r3, #6]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4911      	ldr	r1, [pc, #68]	; (8002ba0 <StartTimeTask+0xc8>)
 8002b5c:	480e      	ldr	r0, [pc, #56]	; (8002b98 <StartTimeTask+0xc0>)
 8002b5e:	f006 fd75 	bl	800964c <siprintf>
	  lcdSetCursorPosition(6, 2);
 8002b62:	2102      	movs	r1, #2
 8002b64:	2006      	movs	r0, #6
 8002b66:	f7ff f931 	bl	8001dcc <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 10);
 8002b6a:	210a      	movs	r1, #10
 8002b6c:	480a      	ldr	r0, [pc, #40]	; (8002b98 <StartTimeTask+0xc0>)
 8002b6e:	f7ff f959 	bl	8001e24 <lcdPrintStr>

	  HAL_Delay(1000);
 8002b72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b76:	f000 fb7d 	bl	8003274 <HAL_Delay>

	  vTaskDelay(100);
 8002b7a:	2064      	movs	r0, #100	; 0x64
 8002b7c:	f005 fba2 	bl	80082c4 <vTaskDelay>
	  lcdDisplayClear();
 8002b80:	e7b4      	b.n	8002aec <StartTimeTask+0x14>
 8002b82:	bf00      	nop
 8002b84:	20004140 	.word	0x20004140
 8002b88:	20004084 	.word	0x20004084
 8002b8c:	0800a7b4 	.word	0x0800a7b4
 8002b90:	20004078 	.word	0x20004078
 8002b94:	0800a7c0 	.word	0x0800a7c0
 8002b98:	20004300 	.word	0x20004300
 8002b9c:	0800a7d0 	.word	0x0800a7d0
 8002ba0:	0800a7d8 	.word	0x0800a7d8

08002ba4 <StartStatusTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusTemp */
void StartStatusTemp(void const * argument)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusTemp */
  for(;;)
  {
	  if(temperature >= 18 && temperature <= 20)
 8002bac:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <StartStatusTemp+0xc0>)
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8002bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbe:	db19      	blt.n	8002bf4 <StartStatusTemp+0x50>
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <StartStatusTemp+0xc0>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd2:	d80f      	bhi.n	8002bf4 <StartStatusTemp+0x50>
	  {
		  HAL_GPIO_WritePin(GPIOA, RGB_led2_Pin, GPIO_PIN_RESET);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	4823      	ldr	r0, [pc, #140]	; (8002c68 <StartStatusTemp+0xc4>)
 8002bda:	f001 f9c3 	bl	8003f64 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin, GPIO_PIN_SET);
 8002bde:	2201      	movs	r2, #1
 8002be0:	2101      	movs	r1, #1
 8002be2:	4821      	ldr	r0, [pc, #132]	; (8002c68 <StartStatusTemp+0xc4>)
 8002be4:	f001 f9be 	bl	8003f64 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led3_Pin, GPIO_PIN_SET);
 8002be8:	2201      	movs	r2, #1
 8002bea:	2110      	movs	r1, #16
 8002bec:	481e      	ldr	r0, [pc, #120]	; (8002c68 <StartStatusTemp+0xc4>)
 8002bee:	f001 f9b9 	bl	8003f64 <HAL_GPIO_WritePin>
 8002bf2:	e032      	b.n	8002c5a <StartStatusTemp+0xb6>
	  }
	  else if(temperature >= 21 && temperature <= 24)
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <StartStatusTemp+0xc0>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8002bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c06:	db19      	blt.n	8002c3c <StartStatusTemp+0x98>
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <StartStatusTemp+0xc0>)
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	d80f      	bhi.n	8002c3c <StartStatusTemp+0x98>
	  {
		  HAL_GPIO_WritePin(GPIOA, RGB_led2_Pin, GPIO_PIN_SET);
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4811      	ldr	r0, [pc, #68]	; (8002c68 <StartStatusTemp+0xc4>)
 8002c22:	f001 f99f 	bl	8003f64 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin, GPIO_PIN_RESET);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2101      	movs	r1, #1
 8002c2a:	480f      	ldr	r0, [pc, #60]	; (8002c68 <StartStatusTemp+0xc4>)
 8002c2c:	f001 f99a 	bl	8003f64 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led3_Pin, GPIO_PIN_RESET);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2110      	movs	r1, #16
 8002c34:	480c      	ldr	r0, [pc, #48]	; (8002c68 <StartStatusTemp+0xc4>)
 8002c36:	f001 f995 	bl	8003f64 <HAL_GPIO_WritePin>
 8002c3a:	e00e      	b.n	8002c5a <StartStatusTemp+0xb6>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, RGB_led2_Pin, GPIO_PIN_RESET);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2102      	movs	r1, #2
 8002c40:	4809      	ldr	r0, [pc, #36]	; (8002c68 <StartStatusTemp+0xc4>)
 8002c42:	f001 f98f 	bl	8003f64 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin, GPIO_PIN_SET);
 8002c46:	2201      	movs	r2, #1
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4807      	ldr	r0, [pc, #28]	; (8002c68 <StartStatusTemp+0xc4>)
 8002c4c:	f001 f98a 	bl	8003f64 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led3_Pin, GPIO_PIN_RESET);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2110      	movs	r1, #16
 8002c54:	4804      	ldr	r0, [pc, #16]	; (8002c68 <StartStatusTemp+0xc4>)
 8002c56:	f001 f985 	bl	8003f64 <HAL_GPIO_WritePin>
	  }

      vTaskDelay(1000);
 8002c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c5e:	f005 fb31 	bl	80082c4 <vTaskDelay>
	  if(temperature >= 18 && temperature <= 20)
 8002c62:	e7a3      	b.n	8002bac <StartStatusTemp+0x8>
 8002c64:	200041ec 	.word	0x200041ec
 8002c68:	40020000 	.word	0x40020000

08002c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_MspInit+0x54>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <HAL_MspInit+0x54>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <HAL_MspInit+0x54>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_MspInit+0x54>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_MspInit+0x54>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <HAL_MspInit+0x54>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	210f      	movs	r1, #15
 8002cbe:	f06f 0001 	mvn.w	r0, #1
 8002cc2:	f000 fbd4 	bl	800346e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08e      	sub	sp, #56	; 0x38
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a9a      	ldr	r2, [pc, #616]	; (8002f5c <HAL_I2C_MspInit+0x288>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	f040 8098 	bne.w	8002e28 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
 8002cfc:	4b98      	ldr	r3, [pc, #608]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4a97      	ldr	r2, [pc, #604]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002d02:	f043 0302 	orr.w	r3, r3, #2
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
 8002d08:	4b95      	ldr	r3, [pc, #596]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d14:	23c0      	movs	r3, #192	; 0xc0
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d18:	2312      	movs	r3, #18
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d20:	2303      	movs	r3, #3
 8002d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d24:	2304      	movs	r3, #4
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	488d      	ldr	r0, [pc, #564]	; (8002f64 <HAL_I2C_MspInit+0x290>)
 8002d30:	f000 ff7e 	bl	8003c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	4b89      	ldr	r3, [pc, #548]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	4a88      	ldr	r2, [pc, #544]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d42:	6413      	str	r3, [r2, #64]	; 0x40
 8002d44:	4b86      	ldr	r3, [pc, #536]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002d50:	4b85      	ldr	r3, [pc, #532]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d52:	4a86      	ldr	r2, [pc, #536]	; (8002f6c <HAL_I2C_MspInit+0x298>)
 8002d54:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002d56:	4b84      	ldr	r3, [pc, #528]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d5c:	4b82      	ldr	r3, [pc, #520]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d5e:	2240      	movs	r2, #64	; 0x40
 8002d60:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d62:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d68:	4b7f      	ldr	r3, [pc, #508]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d6e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d70:	4b7d      	ldr	r3, [pc, #500]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d76:	4b7c      	ldr	r3, [pc, #496]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002d7c:	4b7a      	ldr	r3, [pc, #488]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d82:	4b79      	ldr	r3, [pc, #484]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d88:	4b77      	ldr	r3, [pc, #476]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002d8e:	4876      	ldr	r0, [pc, #472]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002d90:	f000 fba4 	bl	80034dc <HAL_DMA_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002d9a:	f7ff ff67 	bl	8002c6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a71      	ldr	r2, [pc, #452]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
 8002da4:	4a70      	ldr	r2, [pc, #448]	; (8002f68 <HAL_I2C_MspInit+0x294>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002daa:	4b71      	ldr	r3, [pc, #452]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002dac:	4a71      	ldr	r2, [pc, #452]	; (8002f74 <HAL_I2C_MspInit+0x2a0>)
 8002dae:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002db0:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db8:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dbe:	4b6c      	ldr	r3, [pc, #432]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc4:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dca:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dcc:	4b68      	ldr	r3, [pc, #416]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd2:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002dd8:	4b65      	ldr	r3, [pc, #404]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dde:	4b64      	ldr	r3, [pc, #400]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de4:	4b62      	ldr	r3, [pc, #392]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002dea:	4861      	ldr	r0, [pc, #388]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002dec:	f000 fb76 	bl	80034dc <HAL_DMA_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002df6:	f7ff ff39 	bl	8002c6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a5c      	ldr	r2, [pc, #368]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
 8002e00:	4a5b      	ldr	r2, [pc, #364]	; (8002f70 <HAL_I2C_MspInit+0x29c>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2105      	movs	r1, #5
 8002e0a:	201f      	movs	r0, #31
 8002e0c:	f000 fb2f 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002e10:	201f      	movs	r0, #31
 8002e12:	f000 fb48 	bl	80034a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2105      	movs	r1, #5
 8002e1a:	2020      	movs	r0, #32
 8002e1c:	f000 fb27 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002e20:	2020      	movs	r0, #32
 8002e22:	f000 fb40 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e26:	e094      	b.n	8002f52 <HAL_I2C_MspInit+0x27e>
  else if(hi2c->Instance==I2C2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a52      	ldr	r2, [pc, #328]	; (8002f78 <HAL_I2C_MspInit+0x2a4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d13e      	bne.n	8002eb0 <HAL_I2C_MspInit+0x1dc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a49      	ldr	r2, [pc, #292]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e54:	2312      	movs	r3, #18
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e60:	2304      	movs	r3, #4
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e68:	4619      	mov	r1, r3
 8002e6a:	483e      	ldr	r0, [pc, #248]	; (8002f64 <HAL_I2C_MspInit+0x290>)
 8002e6c:	f000 fee0 	bl	8003c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e76:	2312      	movs	r3, #18
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002e82:	2309      	movs	r3, #9
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4835      	ldr	r0, [pc, #212]	; (8002f64 <HAL_I2C_MspInit+0x290>)
 8002e8e:	f000 fecf 	bl	8003c30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a31      	ldr	r2, [pc, #196]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002e9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	697b      	ldr	r3, [r7, #20]
}
 8002eae:	e050      	b.n	8002f52 <HAL_I2C_MspInit+0x27e>
  else if(hi2c->Instance==I2C3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a31      	ldr	r2, [pc, #196]	; (8002f7c <HAL_I2C_MspInit+0x2a8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d14b      	bne.n	8002f52 <HAL_I2C_MspInit+0x27e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a20      	ldr	r2, [pc, #128]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef8:	2312      	movs	r3, #18
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002efc:	2301      	movs	r3, #1
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f04:	2304      	movs	r3, #4
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	481c      	ldr	r0, [pc, #112]	; (8002f80 <HAL_I2C_MspInit+0x2ac>)
 8002f10:	f000 fe8e 	bl	8003c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f1a:	2312      	movs	r3, #18
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f22:	2303      	movs	r3, #3
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f26:	2304      	movs	r3, #4
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4814      	ldr	r0, [pc, #80]	; (8002f84 <HAL_I2C_MspInit+0x2b0>)
 8002f32:	f000 fe7d 	bl	8003c30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_I2C_MspInit+0x28c>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
}
 8002f52:	bf00      	nop
 8002f54:	3738      	adds	r7, #56	; 0x38
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40005400 	.word	0x40005400
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020400 	.word	0x40020400
 8002f68:	200040e0 	.word	0x200040e0
 8002f6c:	40026028 	.word	0x40026028
 8002f70:	20004318 	.word	0x20004318
 8002f74:	40026010 	.word	0x40026010
 8002f78:	40005800 	.word	0x40005800
 8002f7c:	40005c00 	.word	0x40005c00
 8002f80:	40020800 	.word	0x40020800
 8002f84:	40020000 	.word	0x40020000

08002f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a19      	ldr	r2, [pc, #100]	; (800300c <HAL_UART_MspInit+0x84>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d12b      	bne.n	8003002 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ff2:	2307      	movs	r3, #7
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff6:	f107 0314 	add.w	r3, r7, #20
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4805      	ldr	r0, [pc, #20]	; (8003014 <HAL_UART_MspInit+0x8c>)
 8002ffe:	f000 fe17 	bl	8003c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003002:	bf00      	nop
 8003004:	3728      	adds	r7, #40	; 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40004400 	.word	0x40004400
 8003010:	40023800 	.word	0x40023800
 8003014:	40020000 	.word	0x40020000

08003018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800302a:	e7fe      	b.n	800302a <HardFault_Handler+0x4>

0800302c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003030:	e7fe      	b.n	8003030 <MemManage_Handler+0x4>

08003032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003036:	e7fe      	b.n	8003036 <BusFault_Handler+0x4>

08003038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800303c:	e7fe      	b.n	800303c <UsageFault_Handler+0x4>

0800303e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003050:	f000 f8f0 	bl	8003234 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003054:	f005 fe08 	bl	8008c68 <xTaskGetSchedulerState>
 8003058:	4603      	mov	r3, r0
 800305a:	2b01      	cmp	r3, #1
 800305c:	d001      	beq.n	8003062 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800305e:	f006 f83b 	bl	80090d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <DMA1_Stream0_IRQHandler+0x10>)
 800306e:	f000 fb5d 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20004318 	.word	0x20004318

0800307c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <DMA1_Stream1_IRQHandler+0x10>)
 8003082:	f000 fb53 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200040e0 	.word	0x200040e0

08003090 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <I2C1_EV_IRQHandler+0x10>)
 8003096:	f001 fced 	bl	8004a74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20004140 	.word	0x20004140

080030a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <I2C1_ER_IRQHandler+0x10>)
 80030aa:	f001 fe49 	bl	8004d40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20004140 	.word	0x20004140

080030b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <_sbrk+0x50>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <_sbrk+0x16>
		heap_end = &end;
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <_sbrk+0x50>)
 80030ca:	4a10      	ldr	r2, [pc, #64]	; (800310c <_sbrk+0x54>)
 80030cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <_sbrk+0x50>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <_sbrk+0x50>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	466a      	mov	r2, sp
 80030de:	4293      	cmp	r3, r2
 80030e0:	d907      	bls.n	80030f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80030e2:	f006 fa5b 	bl	800959c <__errno>
 80030e6:	4602      	mov	r2, r0
 80030e8:	230c      	movs	r3, #12
 80030ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	e006      	b.n	8003100 <_sbrk+0x48>
	}

	heap_end += incr;
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <_sbrk+0x50>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	4a03      	ldr	r2, [pc, #12]	; (8003108 <_sbrk+0x50>)
 80030fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030fe:	68fb      	ldr	r3, [r7, #12]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000320 	.word	0x20000320
 800310c:	20004408 	.word	0x20004408

08003110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <SystemInit+0x28>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	4a07      	ldr	r2, [pc, #28]	; (8003138 <SystemInit+0x28>)
 800311c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <SystemInit+0x28>)
 8003126:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800312a:	609a      	str	r2, [r3, #8]
#endif
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800313c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003174 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003140:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003142:	e003      	b.n	800314c <LoopCopyDataInit>

08003144 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003146:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003148:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800314a:	3104      	adds	r1, #4

0800314c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800314c:	480b      	ldr	r0, [pc, #44]	; (800317c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003150:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003152:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003154:	d3f6      	bcc.n	8003144 <CopyDataInit>
  ldr  r2, =_sbss
 8003156:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003158:	e002      	b.n	8003160 <LoopFillZerobss>

0800315a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800315a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800315c:	f842 3b04 	str.w	r3, [r2], #4

08003160 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003162:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003164:	d3f9      	bcc.n	800315a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003166:	f7ff ffd3 	bl	8003110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800316a:	f006 fa1d 	bl	80095a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800316e:	f7fe feed 	bl	8001f4c <main>
  bx  lr    
 8003172:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003174:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003178:	0800a888 	.word	0x0800a888
  ldr  r0, =_sdata
 800317c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003180:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8003184:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8003188:	20004408 	.word	0x20004408

0800318c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800318c:	e7fe      	b.n	800318c <ADC_IRQHandler>
	...

08003190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <HAL_Init+0x40>)
 800319a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800319e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <HAL_Init+0x40>)
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_Init+0x40>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_Init+0x40>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b8:	2003      	movs	r0, #3
 80031ba:	f000 f94d 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031be:	200f      	movs	r0, #15
 80031c0:	f000 f808 	bl	80031d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c4:	f7ff fd5a 	bl	8002c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_InitTick+0x54>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_InitTick+0x58>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f965 	bl	80034c2 <HAL_SYSTICK_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e00e      	b.n	8003220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b0f      	cmp	r3, #15
 8003206:	d80a      	bhi.n	800321e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003208:	2200      	movs	r2, #0
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f000 f92d 	bl	800346e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003214:	4a06      	ldr	r2, [pc, #24]	; (8003230 <HAL_InitTick+0x5c>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000010 	.word	0x20000010
 800322c:	20000018 	.word	0x20000018
 8003230:	20000014 	.word	0x20000014

08003234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_IncTick+0x20>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_IncTick+0x24>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4413      	add	r3, r2
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <HAL_IncTick+0x24>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000018 	.word	0x20000018
 8003258:	20004400 	.word	0x20004400

0800325c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTick;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_GetTick+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20004400 	.word	0x20004400

08003274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800327c:	f7ff ffee 	bl	800325c <HAL_GetTick>
 8003280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d005      	beq.n	800329a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_Delay+0x40>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800329a:	bf00      	nop
 800329c:	f7ff ffde 	bl	800325c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d8f7      	bhi.n	800329c <HAL_Delay+0x28>
  {
  }
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000018 	.word	0x20000018

080032b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	; (8003354 <__NVIC_EnableIRQ+0x38>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	; (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003424:	d301      	bcc.n	800342a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <SysTick_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003432:	210f      	movs	r1, #15
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f7ff ff8e 	bl	8003358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <SysTick_Config+0x40>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <SysTick_Config+0x40>)
 8003444:	2207      	movs	r2, #7
 8003446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff29 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003480:	f7ff ff3e 	bl	8003300 <__NVIC_GetPriorityGrouping>
 8003484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff ff8e 	bl	80033ac <NVIC_EncodePriority>
 8003490:	4602      	mov	r2, r0
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff5d 	bl	8003358 <__NVIC_SetPriority>
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff31 	bl	800331c <__NVIC_EnableIRQ>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ffa2 	bl	8003414 <SysTick_Config>
 80034d0:	4603      	mov	r3, r0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff feb8 	bl	800325c <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e099      	b.n	800362c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003518:	e00f      	b.n	800353a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800351a:	f7ff fe9f 	bl	800325c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b05      	cmp	r3, #5
 8003526:	d908      	bls.n	800353a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2203      	movs	r2, #3
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e078      	b.n	800362c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e8      	bne.n	800351a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <HAL_DMA_Init+0x158>)
 8003554:	4013      	ands	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003566:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	2b04      	cmp	r3, #4
 8003592:	d107      	bne.n	80035a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	4313      	orrs	r3, r2
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 0307 	bic.w	r3, r3, #7
 80035ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d117      	bne.n	80035fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00e      	beq.n	80035fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 faab 	bl	8003b3c <DMA_CheckFifoParam>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2240      	movs	r2, #64	; 0x40
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035fa:	2301      	movs	r3, #1
 80035fc:	e016      	b.n	800362c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fa62 	bl	8003ad0 <DMA_CalcBaseAndBitshift>
 800360c:	4603      	mov	r3, r0
 800360e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003614:	223f      	movs	r2, #63	; 0x3f
 8003616:	409a      	lsls	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	f010803f 	.word	0xf010803f

08003638 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_DMA_Start_IT+0x26>
 800365a:	2302      	movs	r3, #2
 800365c:	e040      	b.n	80036e0 <HAL_DMA_Start_IT+0xa8>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d12f      	bne.n	80036d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f9f4 	bl	8003a74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	223f      	movs	r2, #63	; 0x3f
 8003692:	409a      	lsls	r2, r3
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0216 	orr.w	r2, r2, #22
 80036a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0208 	orr.w	r2, r2, #8
 80036be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e005      	b.n	80036de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036da:	2302      	movs	r3, #2
 80036dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036de:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d004      	beq.n	8003706 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00c      	b.n	8003720 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2205      	movs	r2, #5
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003738:	4b92      	ldr	r3, [pc, #584]	; (8003984 <HAL_DMA_IRQHandler+0x258>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a92      	ldr	r2, [pc, #584]	; (8003988 <HAL_DMA_IRQHandler+0x25c>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0a9b      	lsrs	r3, r3, #10
 8003744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	2208      	movs	r2, #8
 8003758:	409a      	lsls	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01a      	beq.n	8003798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0204 	bic.w	r2, r2, #4
 800377e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	2208      	movs	r2, #8
 8003786:	409a      	lsls	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	2201      	movs	r2, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d012      	beq.n	80037ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2201      	movs	r2, #1
 80037bc:	409a      	lsls	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d2:	2204      	movs	r2, #4
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d012      	beq.n	8003804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	2204      	movs	r2, #4
 80037f2:	409a      	lsls	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	2210      	movs	r2, #16
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d043      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03c      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	2210      	movs	r2, #16
 8003828:	409a      	lsls	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d018      	beq.n	800386e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d024      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
 800385a:	e01f      	b.n	800389c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e016      	b.n	800389c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0208 	bic.w	r2, r2, #8
 800388a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2220      	movs	r2, #32
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 808e 	beq.w	80039ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8086 	beq.w	80039ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	2220      	movs	r2, #32
 80038c4:	409a      	lsls	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d136      	bne.n	8003944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0216 	bic.w	r2, r2, #22
 80038e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <HAL_DMA_IRQHandler+0x1da>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0208 	bic.w	r2, r2, #8
 8003914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	223f      	movs	r2, #63	; 0x3f
 800391c:	409a      	lsls	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	d07d      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
        }
        return;
 8003942:	e078      	b.n	8003a36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01c      	beq.n	800398c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	2b00      	cmp	r3, #0
 8003966:	d030      	beq.n	80039ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
 8003970:	e02b      	b.n	80039ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d027      	beq.n	80039ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
 8003982:	e022      	b.n	80039ca <HAL_DMA_IRQHandler+0x29e>
 8003984:	20000010 	.word	0x20000010
 8003988:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0210 	bic.w	r2, r2, #16
 80039a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d032      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d022      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2205      	movs	r2, #5
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	3301      	adds	r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d307      	bcc.n	8003a12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f2      	bne.n	80039f6 <HAL_DMA_IRQHandler+0x2ca>
 8003a10:	e000      	b.n	8003a14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
 8003a34:	e000      	b.n	8003a38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a36:	bf00      	nop
    }
  }
}
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop

08003a40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4e:	b2db      	uxtb	r3, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d108      	bne.n	8003ab4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ab2:	e007      	b.n	8003ac4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3b10      	subs	r3, #16
 8003ae0:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <DMA_CalcBaseAndBitshift+0x64>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aea:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <DMA_CalcBaseAndBitshift+0x68>)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d909      	bls.n	8003b12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	1d1a      	adds	r2, r3, #4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b10:	e007      	b.n	8003b22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	aaaaaaab 	.word	0xaaaaaaab
 8003b38:	0800a810 	.word	0x0800a810

08003b3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11f      	bne.n	8003b96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d855      	bhi.n	8003c08 <DMA_CheckFifoParam+0xcc>
 8003b5c:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <DMA_CheckFifoParam+0x28>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b87 	.word	0x08003b87
 8003b6c:	08003b75 	.word	0x08003b75
 8003b70:	08003c09 	.word	0x08003c09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d045      	beq.n	8003c0c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b84:	e042      	b.n	8003c0c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b8e:	d13f      	bne.n	8003c10 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b94:	e03c      	b.n	8003c10 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9e:	d121      	bne.n	8003be4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d836      	bhi.n	8003c14 <DMA_CheckFifoParam+0xd8>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <DMA_CheckFifoParam+0x70>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003bbd 	.word	0x08003bbd
 8003bb0:	08003bc3 	.word	0x08003bc3
 8003bb4:	08003bbd 	.word	0x08003bbd
 8003bb8:	08003bd5 	.word	0x08003bd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc0:	e02f      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d024      	beq.n	8003c18 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd2:	e021      	b.n	8003c18 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bdc:	d11e      	bne.n	8003c1c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003be2:	e01b      	b.n	8003c1c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <DMA_CheckFifoParam+0xb4>
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d003      	beq.n	8003bf6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bee:	e018      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf4:	e015      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00e      	beq.n	8003c20 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
      break;
 8003c06:	e00b      	b.n	8003c20 <DMA_CheckFifoParam+0xe4>
      break;
 8003c08:	bf00      	nop
 8003c0a:	e00a      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c0c:	bf00      	nop
 8003c0e:	e008      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c10:	bf00      	nop
 8003c12:	e006      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c14:	bf00      	nop
 8003c16:	e004      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c18:	bf00      	nop
 8003c1a:	e002      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;   
 8003c1c:	bf00      	nop
 8003c1e:	e000      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c20:	bf00      	nop
    }
  } 
  
  return status; 
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	e159      	b.n	8003f00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	f040 8148 	bne.w	8003efa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d00b      	beq.n	8003c8a <HAL_GPIO_Init+0x5a>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d007      	beq.n	8003c8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c7e:	2b11      	cmp	r3, #17
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b12      	cmp	r3, #18
 8003c88:	d130      	bne.n	8003cec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	2203      	movs	r2, #3
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 0201 	and.w	r2, r3, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0xfc>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b12      	cmp	r3, #18
 8003d2a:	d123      	bne.n	8003d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	08da      	lsrs	r2, r3, #3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3208      	adds	r2, #8
 8003d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	220f      	movs	r2, #15
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	08da      	lsrs	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3208      	adds	r2, #8
 8003d6e:	69b9      	ldr	r1, [r7, #24]
 8003d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	2203      	movs	r2, #3
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0203 	and.w	r2, r3, #3
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a2 	beq.w	8003efa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	4b56      	ldr	r3, [pc, #344]	; (8003f14 <HAL_GPIO_Init+0x2e4>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	4a55      	ldr	r2, [pc, #340]	; (8003f14 <HAL_GPIO_Init+0x2e4>)
 8003dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc6:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <HAL_GPIO_Init+0x2e4>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dd2:	4a51      	ldr	r2, [pc, #324]	; (8003f18 <HAL_GPIO_Init+0x2e8>)
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	089b      	lsrs	r3, r3, #2
 8003dd8:	3302      	adds	r3, #2
 8003dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	220f      	movs	r2, #15
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4013      	ands	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a48      	ldr	r2, [pc, #288]	; (8003f1c <HAL_GPIO_Init+0x2ec>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d019      	beq.n	8003e32 <HAL_GPIO_Init+0x202>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a47      	ldr	r2, [pc, #284]	; (8003f20 <HAL_GPIO_Init+0x2f0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_GPIO_Init+0x1fe>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a46      	ldr	r2, [pc, #280]	; (8003f24 <HAL_GPIO_Init+0x2f4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00d      	beq.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a45      	ldr	r2, [pc, #276]	; (8003f28 <HAL_GPIO_Init+0x2f8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <HAL_GPIO_Init+0x1f6>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a44      	ldr	r2, [pc, #272]	; (8003f2c <HAL_GPIO_Init+0x2fc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <HAL_GPIO_Init+0x1f2>
 8003e1e:	2304      	movs	r3, #4
 8003e20:	e008      	b.n	8003e34 <HAL_GPIO_Init+0x204>
 8003e22:	2307      	movs	r3, #7
 8003e24:	e006      	b.n	8003e34 <HAL_GPIO_Init+0x204>
 8003e26:	2303      	movs	r3, #3
 8003e28:	e004      	b.n	8003e34 <HAL_GPIO_Init+0x204>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e002      	b.n	8003e34 <HAL_GPIO_Init+0x204>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_GPIO_Init+0x204>
 8003e32:	2300      	movs	r3, #0
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	f002 0203 	and.w	r2, r2, #3
 8003e3a:	0092      	lsls	r2, r2, #2
 8003e3c:	4093      	lsls	r3, r2
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e44:	4934      	ldr	r1, [pc, #208]	; (8003f18 <HAL_GPIO_Init+0x2e8>)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e52:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e76:	4a2e      	ldr	r2, [pc, #184]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e7c:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eca:	4a19      	ldr	r2, [pc, #100]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ed0:	4b17      	ldr	r3, [pc, #92]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ef4:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3301      	adds	r3, #1
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b0f      	cmp	r3, #15
 8003f04:	f67f aea2 	bls.w	8003c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f08:	bf00      	nop
 8003f0a:	3724      	adds	r7, #36	; 0x24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40023800 	.word	0x40023800
 8003f18:	40013800 	.word	0x40013800
 8003f1c:	40020000 	.word	0x40020000
 8003f20:	40020400 	.word	0x40020400
 8003f24:	40020800 	.word	0x40020800
 8003f28:	40020c00 	.word	0x40020c00
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40013c00 	.word	0x40013c00

08003f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	887b      	ldrh	r3, [r7, #2]
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
 8003f50:	e001      	b.n	8003f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f52:	2300      	movs	r3, #0
 8003f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
 8003f70:	4613      	mov	r3, r2
 8003f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f74:	787b      	ldrb	r3, [r7, #1]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f7a:	887a      	ldrh	r2, [r7, #2]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f80:	e003      	b.n	8003f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f82:	887b      	ldrh	r3, [r7, #2]
 8003f84:	041a      	lsls	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	619a      	str	r2, [r3, #24]
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e11f      	b.n	80041ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fe fe88 	bl	8002cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	; 0x24
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ffc:	f003 f9fc 	bl	80073f8 <HAL_RCC_GetPCLK1Freq>
 8004000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a7b      	ldr	r2, [pc, #492]	; (80041f4 <HAL_I2C_Init+0x25c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d807      	bhi.n	800401c <HAL_I2C_Init+0x84>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a7a      	ldr	r2, [pc, #488]	; (80041f8 <HAL_I2C_Init+0x260>)
 8004010:	4293      	cmp	r3, r2
 8004012:	bf94      	ite	ls
 8004014:	2301      	movls	r3, #1
 8004016:	2300      	movhi	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e006      	b.n	800402a <HAL_I2C_Init+0x92>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4a77      	ldr	r2, [pc, #476]	; (80041fc <HAL_I2C_Init+0x264>)
 8004020:	4293      	cmp	r3, r2
 8004022:	bf94      	ite	ls
 8004024:	2301      	movls	r3, #1
 8004026:	2300      	movhi	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e0db      	b.n	80041ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a72      	ldr	r2, [pc, #456]	; (8004200 <HAL_I2C_Init+0x268>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0c9b      	lsrs	r3, r3, #18
 800403c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4a64      	ldr	r2, [pc, #400]	; (80041f4 <HAL_I2C_Init+0x25c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d802      	bhi.n	800406c <HAL_I2C_Init+0xd4>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3301      	adds	r3, #1
 800406a:	e009      	b.n	8004080 <HAL_I2C_Init+0xe8>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	4a63      	ldr	r2, [pc, #396]	; (8004204 <HAL_I2C_Init+0x26c>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	099b      	lsrs	r3, r3, #6
 800407e:	3301      	adds	r3, #1
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	430b      	orrs	r3, r1
 8004086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004092:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4956      	ldr	r1, [pc, #344]	; (80041f4 <HAL_I2C_Init+0x25c>)
 800409c:	428b      	cmp	r3, r1
 800409e:	d80d      	bhi.n	80040bc <HAL_I2C_Init+0x124>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1e59      	subs	r1, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ae:	3301      	adds	r3, #1
 80040b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	bf38      	it	cc
 80040b8:	2304      	movcc	r3, #4
 80040ba:	e04f      	b.n	800415c <HAL_I2C_Init+0x1c4>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d111      	bne.n	80040e8 <HAL_I2C_Init+0x150>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1e58      	subs	r0, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	440b      	add	r3, r1
 80040d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e012      	b.n	800410e <HAL_I2C_Init+0x176>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1e58      	subs	r0, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6859      	ldr	r1, [r3, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	0099      	lsls	r1, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80040fe:	3301      	adds	r3, #1
 8004100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004104:	2b00      	cmp	r3, #0
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Init+0x17e>
 8004112:	2301      	movs	r3, #1
 8004114:	e022      	b.n	800415c <HAL_I2C_Init+0x1c4>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10e      	bne.n	800413c <HAL_I2C_Init+0x1a4>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1e58      	subs	r0, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	460b      	mov	r3, r1
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	440b      	add	r3, r1
 800412c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004130:	3301      	adds	r3, #1
 8004132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800413a:	e00f      	b.n	800415c <HAL_I2C_Init+0x1c4>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1e58      	subs	r0, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	0099      	lsls	r1, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004152:	3301      	adds	r3, #1
 8004154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	6809      	ldr	r1, [r1, #0]
 8004160:	4313      	orrs	r3, r2
 8004162:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69da      	ldr	r2, [r3, #28]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800418a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6911      	ldr	r1, [r2, #16]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68d2      	ldr	r2, [r2, #12]
 8004196:	4311      	orrs	r1, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	430b      	orrs	r3, r1
 800419e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	000186a0 	.word	0x000186a0
 80041f8:	001e847f 	.word	0x001e847f
 80041fc:	003d08ff 	.word	0x003d08ff
 8004200:	431bde83 	.word	0x431bde83
 8004204:	10624dd3 	.word	0x10624dd3

08004208 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	461a      	mov	r2, r3
 8004214:	460b      	mov	r3, r1
 8004216:	817b      	strh	r3, [r7, #10]
 8004218:	4613      	mov	r3, r2
 800421a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b20      	cmp	r3, #32
 800422a:	f040 80f4 	bne.w	8004416 <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800422e:	4b7c      	ldr	r3, [pc, #496]	; (8004420 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	08db      	lsrs	r3, r3, #3
 8004234:	4a7b      	ldr	r2, [pc, #492]	; (8004424 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	0a1a      	lsrs	r2, r3, #8
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009a      	lsls	r2, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	3b01      	subs	r3, #1
 800424c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d116      	bne.n	8004282 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f043 0220 	orr.w	r2, r3, #32
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0ca      	b.n	8004418 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b02      	cmp	r3, #2
 800428e:	d0db      	beq.n	8004248 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_I2C_Master_Transmit_DMA+0x96>
 800429a:	2302      	movs	r3, #2
 800429c:	e0bc      	b.n	8004418 <HAL_I2C_Master_Transmit_DMA+0x210>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d007      	beq.n	80042c4 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2221      	movs	r2, #33	; 0x21
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2210      	movs	r2, #16
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	893a      	ldrh	r2, [r7, #8]
 80042f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4a49      	ldr	r2, [pc, #292]	; (8004428 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004304:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004306:	897a      	ldrh	r2, [r7, #10]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d062      	beq.n	80043da <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004318:	4a44      	ldr	r2, [pc, #272]	; (800442c <HAL_I2C_Master_Transmit_DMA+0x224>)
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	4a43      	ldr	r2, [pc, #268]	; (8004430 <HAL_I2C_Master_Transmit_DMA+0x228>)
 8004322:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	2200      	movs	r2, #0
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	2200      	movs	r2, #0
 8004332:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	2200      	movs	r2, #0
 800433a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	2200      	movs	r2, #0
 8004342:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	4619      	mov	r1, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3310      	adds	r3, #16
 8004354:	461a      	mov	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435a:	f7ff f96d 	bl	8003638 <HAL_DMA_Start_IT>
 800435e:	4603      	mov	r3, r0
 8004360:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8004362:	7dfb      	ldrb	r3, [r7, #23]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d124      	bne.n	80043b2 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004376:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004386:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800439e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ae:	605a      	str	r2, [r3, #4]
 80043b0:	e02f      	b.n	8004412 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f043 0210 	orr.w	r2, r3, #16
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e01e      	b.n	8004418 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e8:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f8:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004410:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
  }
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000010 	.word	0x20000010
 8004424:	14f8b589 	.word	0x14f8b589
 8004428:	ffff0000 	.word	0xffff0000
 800442c:	08006471 	.word	0x08006471
 8004430:	0800661b 	.word	0x0800661b

08004434 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	4603      	mov	r3, r0
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	460b      	mov	r3, r1
 8004448:	813b      	strh	r3, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800444e:	f7fe ff05 	bl	800325c <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b20      	cmp	r3, #32
 800445e:	f040 80d9 	bne.w	8004614 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	2319      	movs	r3, #25
 8004468:	2201      	movs	r2, #1
 800446a:	496d      	ldr	r1, [pc, #436]	; (8004620 <HAL_I2C_Mem_Write+0x1ec>)
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f002 f990 	bl	8006792 <I2C_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
 800447a:	e0cc      	b.n	8004616 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_I2C_Mem_Write+0x56>
 8004486:	2302      	movs	r3, #2
 8004488:	e0c5      	b.n	8004616 <HAL_I2C_Mem_Write+0x1e2>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	d007      	beq.n	80044b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2221      	movs	r2, #33	; 0x21
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2240      	movs	r2, #64	; 0x40
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a3a      	ldr	r2, [r7, #32]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a4d      	ldr	r2, [pc, #308]	; (8004624 <HAL_I2C_Mem_Write+0x1f0>)
 80044f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044f2:	88f8      	ldrh	r0, [r7, #6]
 80044f4:	893a      	ldrh	r2, [r7, #8]
 80044f6:	8979      	ldrh	r1, [r7, #10]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	4603      	mov	r3, r0
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f001 fe3a 	bl	800617c <I2C_RequestMemoryWrite>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d052      	beq.n	80045b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e081      	b.n	8004616 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f002 fa11 	bl	800693e <I2C_WaitOnTXEFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2b04      	cmp	r3, #4
 8004528:	d107      	bne.n	800453a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004538:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e06b      	b.n	8004616 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	781a      	ldrb	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b04      	cmp	r3, #4
 800457a:	d11b      	bne.n	80045b4 <HAL_I2C_Mem_Write+0x180>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d017      	beq.n	80045b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1aa      	bne.n	8004512 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f002 f9fd 	bl	80069c0 <I2C_WaitOnBTFFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d107      	bne.n	80045e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e016      	b.n	8004616 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	00100002 	.word	0x00100002
 8004624:	ffff0000 	.word	0xffff0000

08004628 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08c      	sub	sp, #48	; 0x30
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	4608      	mov	r0, r1
 8004632:	4611      	mov	r1, r2
 8004634:	461a      	mov	r2, r3
 8004636:	4603      	mov	r3, r0
 8004638:	817b      	strh	r3, [r7, #10]
 800463a:	460b      	mov	r3, r1
 800463c:	813b      	strh	r3, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004642:	f7fe fe0b 	bl	800325c <HAL_GetTick>
 8004646:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b20      	cmp	r3, #32
 8004652:	f040 8208 	bne.w	8004a66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2319      	movs	r3, #25
 800465c:	2201      	movs	r2, #1
 800465e:	497b      	ldr	r1, [pc, #492]	; (800484c <HAL_I2C_Mem_Read+0x224>)
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f002 f896 	bl	8006792 <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
 800466e:	e1fb      	b.n	8004a68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_I2C_Mem_Read+0x56>
 800467a:	2302      	movs	r3, #2
 800467c:	e1f4      	b.n	8004a68 <HAL_I2C_Mem_Read+0x440>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b01      	cmp	r3, #1
 8004692:	d007      	beq.n	80046a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2222      	movs	r2, #34	; 0x22
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2240      	movs	r2, #64	; 0x40
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a5b      	ldr	r2, [pc, #364]	; (8004850 <HAL_I2C_Mem_Read+0x228>)
 80046e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046e6:	88f8      	ldrh	r0, [r7, #6]
 80046e8:	893a      	ldrh	r2, [r7, #8]
 80046ea:	8979      	ldrh	r1, [r7, #10]
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	4603      	mov	r3, r0
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f001 fdd4 	bl	80062a4 <I2C_RequestMemoryRead>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e1b0      	b.n	8004a68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470a:	2b00      	cmp	r3, #0
 800470c:	d113      	bne.n	8004736 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470e:	2300      	movs	r3, #0
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	623b      	str	r3, [r7, #32]
 8004722:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e184      	b.n	8004a40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473a:	2b01      	cmp	r3, #1
 800473c:	d11b      	bne.n	8004776 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e164      	b.n	8004a40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	2b02      	cmp	r3, #2
 800477c:	d11b      	bne.n	80047b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479e:	2300      	movs	r3, #0
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	e144      	b.n	8004a40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047cc:	e138      	b.n	8004a40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	f200 80f1 	bhi.w	80049ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d123      	bne.n	8004828 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f002 f92c 	bl	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e139      	b.n	8004a68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004826:	e10b      	b.n	8004a40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	2b02      	cmp	r3, #2
 800482e:	d14e      	bne.n	80048ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	2200      	movs	r2, #0
 8004838:	4906      	ldr	r1, [pc, #24]	; (8004854 <HAL_I2C_Mem_Read+0x22c>)
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f001 ffa9 	bl	8006792 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e10e      	b.n	8004a68 <HAL_I2C_Mem_Read+0x440>
 800484a:	bf00      	nop
 800484c:	00100002 	.word	0x00100002
 8004850:	ffff0000 	.word	0xffff0000
 8004854:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048cc:	e0b8      	b.n	8004a40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2200      	movs	r2, #0
 80048d6:	4966      	ldr	r1, [pc, #408]	; (8004a70 <HAL_I2C_Mem_Read+0x448>)
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f001 ff5a 	bl	8006792 <I2C_WaitOnFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0bf      	b.n	8004a68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	2200      	movs	r2, #0
 8004932:	494f      	ldr	r1, [pc, #316]	; (8004a70 <HAL_I2C_Mem_Read+0x448>)
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f001 ff2c 	bl	8006792 <I2C_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e091      	b.n	8004a68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049b8:	e042      	b.n	8004a40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f002 f83f 	bl	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e04c      	b.n	8004a68 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d118      	bne.n	8004a40 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f47f aec2 	bne.w	80047ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e000      	b.n	8004a68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3728      	adds	r7, #40	; 0x28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	00010004 	.word	0x00010004

08004a74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d003      	beq.n	8004aac <HAL_I2C_EV_IRQHandler+0x38>
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	f040 80b6 	bne.w	8004c18 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10d      	bne.n	8004ae2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004acc:	d003      	beq.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x62>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ad4:	d101      	bne.n	8004ada <HAL_I2C_EV_IRQHandler+0x66>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <HAL_I2C_EV_IRQHandler+0x68>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	f000 8127 	beq.w	8004d30 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00c      	beq.n	8004b06 <HAL_I2C_EV_IRQHandler+0x92>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	0a5b      	lsrs	r3, r3, #9
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f002 f827 	bl	8006b4c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fd2a 	bl	8005558 <I2C_Master_SB>
 8004b04:	e087      	b.n	8004c16 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	08db      	lsrs	r3, r3, #3
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0xb2>
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	0a5b      	lsrs	r3, r3, #9
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fda0 	bl	8005664 <I2C_Master_ADD10>
 8004b24:	e077      	b.n	8004c16 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_I2C_EV_IRQHandler+0xd2>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	0a5b      	lsrs	r3, r3, #9
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fdba 	bl	80056b8 <I2C_Master_ADDR>
 8004b44:	e067      	b.n	8004c16 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d030      	beq.n	8004bb4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b60:	f000 80e8 	beq.w	8004d34 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	09db      	lsrs	r3, r3, #7
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00f      	beq.n	8004b90 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	0a9b      	lsrs	r3, r3, #10
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d009      	beq.n	8004b90 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	089b      	lsrs	r3, r3, #2
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d103      	bne.n	8004b90 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f9f6 	bl	8004f7a <I2C_MasterTransmit_TXE>
 8004b8e:	e042      	b.n	8004c16 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80cb 	beq.w	8004d34 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	0a5b      	lsrs	r3, r3, #9
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80c4 	beq.w	8004d34 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fa80 	bl	80050b2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bb2:	e0bf      	b.n	8004d34 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc2:	f000 80b7 	beq.w	8004d34 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	099b      	lsrs	r3, r3, #6
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00f      	beq.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x17e>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	0a9b      	lsrs	r3, r3, #10
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x17e>
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	089b      	lsrs	r3, r3, #2
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d103      	bne.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fb48 	bl	8005280 <I2C_MasterReceive_RXNE>
 8004bf0:	e011      	b.n	8004c16 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	089b      	lsrs	r3, r3, #2
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 809a 	beq.w	8004d34 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	0a5b      	lsrs	r3, r3, #9
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8093 	beq.w	8004d34 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fbb8 	bl	8005384 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c14:	e08e      	b.n	8004d34 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004c16:	e08d      	b.n	8004d34 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	e007      	b.n	8004c3a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <HAL_I2C_EV_IRQHandler+0x1f8>
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	0a5b      	lsrs	r3, r3, #9
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c62:	69b9      	ldr	r1, [r7, #24]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 ff76 	bl	8005b56 <I2C_Slave_ADDR>
 8004c6a:	e066      	b.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	091b      	lsrs	r3, r3, #4
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d009      	beq.n	8004c8c <HAL_I2C_EV_IRQHandler+0x218>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	0a5b      	lsrs	r3, r3, #9
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 ffab 	bl	8005be0 <I2C_Slave_STOPF>
 8004c8a:	e056      	b.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c8c:	7bbb      	ldrb	r3, [r7, #14]
 8004c8e:	2b21      	cmp	r3, #33	; 0x21
 8004c90:	d002      	beq.n	8004c98 <HAL_I2C_EV_IRQHandler+0x224>
 8004c92:	7bbb      	ldrb	r3, [r7, #14]
 8004c94:	2b29      	cmp	r3, #41	; 0x29
 8004c96:	d125      	bne.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	09db      	lsrs	r3, r3, #7
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00f      	beq.n	8004cc4 <HAL_I2C_EV_IRQHandler+0x250>
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	0a9b      	lsrs	r3, r3, #10
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <HAL_I2C_EV_IRQHandler+0x250>
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d103      	bne.n	8004cc4 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fe8c 	bl	80059da <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cc2:	e039      	b.n	8004d38 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	089b      	lsrs	r3, r3, #2
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d033      	beq.n	8004d38 <HAL_I2C_EV_IRQHandler+0x2c4>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	0a5b      	lsrs	r3, r3, #9
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d02d      	beq.n	8004d38 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 feb9 	bl	8005a54 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce2:	e029      	b.n	8004d38 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00f      	beq.n	8004d10 <HAL_I2C_EV_IRQHandler+0x29c>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	0a9b      	lsrs	r3, r3, #10
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <HAL_I2C_EV_IRQHandler+0x29c>
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	089b      	lsrs	r3, r3, #2
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fec4 	bl	8005a96 <I2C_SlaveReceive_RXNE>
 8004d0e:	e014      	b.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00e      	beq.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2c6>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	0a5b      	lsrs	r3, r3, #9
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fef2 	bl	8005b12 <I2C_SlaveReceive_BTF>
 8004d2e:	e004      	b.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004d30:	bf00      	nop
 8004d32:	e002      	b.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d34:	bf00      	nop
 8004d36:	e000      	b.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d38:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d62:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00e      	beq.n	8004d8e <HAL_I2C_ER_IRQHandler+0x4e>
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d8c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	0a5b      	lsrs	r3, r3, #9
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00e      	beq.n	8004db8 <HAL_I2C_ER_IRQHandler+0x78>
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	0a1b      	lsrs	r3, r3, #8
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004db6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	0a9b      	lsrs	r3, r3, #10
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d03f      	beq.n	8004e44 <HAL_I2C_ER_IRQHandler+0x104>
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d039      	beq.n	8004e44 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004dd0:	7efb      	ldrb	r3, [r7, #27]
 8004dd2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004dea:	7ebb      	ldrb	r3, [r7, #26]
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d112      	bne.n	8004e16 <HAL_I2C_ER_IRQHandler+0xd6>
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10f      	bne.n	8004e16 <HAL_I2C_ER_IRQHandler+0xd6>
 8004df6:	7cfb      	ldrb	r3, [r7, #19]
 8004df8:	2b21      	cmp	r3, #33	; 0x21
 8004dfa:	d008      	beq.n	8004e0e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	2b29      	cmp	r3, #41	; 0x29
 8004e00:	d005      	beq.n	8004e0e <HAL_I2C_ER_IRQHandler+0xce>
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b28      	cmp	r3, #40	; 0x28
 8004e06:	d106      	bne.n	8004e16 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b21      	cmp	r3, #33	; 0x21
 8004e0c:	d103      	bne.n	8004e16 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f001 f816 	bl	8005e40 <I2C_Slave_AF>
 8004e14:	e016      	b.n	8004e44 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e1e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e28:	7efb      	ldrb	r3, [r7, #27]
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d002      	beq.n	8004e34 <HAL_I2C_ER_IRQHandler+0xf4>
 8004e2e:	7efb      	ldrb	r3, [r7, #27]
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d107      	bne.n	8004e44 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e42:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	0adb      	lsrs	r3, r3, #11
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <HAL_I2C_ER_IRQHandler+0x12e>
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	f043 0308 	orr.w	r3, r3, #8
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004e6c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 f84d 	bl	8005f20 <I2C_ITError>
  }
}
 8004e86:	bf00      	nop
 8004e88:	3728      	adds	r7, #40	; 0x28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
 8004eea:	4613      	mov	r3, r2
 8004eec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f88:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f90:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d150      	bne.n	8005042 <I2C_MasterTransmit_TXE+0xc8>
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	2b21      	cmp	r3, #33	; 0x21
 8004fa4:	d14d      	bne.n	8005042 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d01d      	beq.n	8004fe8 <I2C_MasterTransmit_TXE+0x6e>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d01a      	beq.n	8004fe8 <I2C_MasterTransmit_TXE+0x6e>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fb8:	d016      	beq.n	8004fe8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fc8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2211      	movs	r2, #17
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff ff54 	bl	8004e8e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fe6:	e060      	b.n	80050aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ff6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005006:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d107      	bne.n	8005032 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ff6f 	bl	8004f0e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005030:	e03b      	b.n	80050aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff ff27 	bl	8004e8e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005040:	e033      	b.n	80050aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b21      	cmp	r3, #33	; 0x21
 8005046:	d005      	beq.n	8005054 <I2C_MasterTransmit_TXE+0xda>
 8005048:	7bbb      	ldrb	r3, [r7, #14]
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d12d      	bne.n	80050aa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b22      	cmp	r3, #34	; 0x22
 8005052:	d12a      	bne.n	80050aa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d108      	bne.n	8005070 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800506e:	e01c      	b.n	80050aa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d103      	bne.n	8005084 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f898 	bl	80051b2 <I2C_MemoryTransmit_TXE_BTF>
}
 8005082:	e012      	b.n	80050aa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050a8:	e7ff      	b.n	80050aa <I2C_MasterTransmit_TXE+0x130>
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b21      	cmp	r3, #33	; 0x21
 80050ca:	d165      	bne.n	8005198 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	781a      	ldrb	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80050fa:	e056      	b.n	80051aa <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d01d      	beq.n	800513e <I2C_MasterTransmit_BTF+0x8c>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b20      	cmp	r3, #32
 8005106:	d01a      	beq.n	800513e <I2C_MasterTransmit_BTF+0x8c>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800510e:	d016      	beq.n	800513e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800511e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2211      	movs	r2, #17
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff fea9 	bl	8004e8e <HAL_I2C_MasterTxCpltCallback>
}
 800513c:	e035      	b.n	80051aa <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800514c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b40      	cmp	r3, #64	; 0x40
 8005176:	d107      	bne.n	8005188 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff fec4 	bl	8004f0e <HAL_I2C_MemTxCpltCallback>
}
 8005186:	e010      	b.n	80051aa <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fe7c 	bl	8004e8e <HAL_I2C_MasterTxCpltCallback>
}
 8005196:	e008      	b.n	80051aa <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d102      	bne.n	80051aa <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f804 	bl	80051b2 <I2C_MemoryTransmit_TXE_BTF>
}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d11d      	bne.n	80051fe <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d10b      	bne.n	80051e2 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	1c9a      	adds	r2, r3, #2
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80051e0:	e048      	b.n	8005274 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	121b      	asrs	r3, r3, #8
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051fc:	e03a      	b.n	8005274 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005202:	2b01      	cmp	r3, #1
 8005204:	d10b      	bne.n	800521e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520a:	b2da      	uxtb	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800521c:	e02a      	b.n	8005274 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005222:	2b02      	cmp	r3, #2
 8005224:	d126      	bne.n	8005274 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b22      	cmp	r3, #34	; 0x22
 8005230:	d108      	bne.n	8005244 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005240:	601a      	str	r2, [r3, #0]
}
 8005242:	e017      	b.n	8005274 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b21      	cmp	r3, #33	; 0x21
 800524e:	d111      	bne.n	8005274 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	781a      	ldrb	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b22      	cmp	r3, #34	; 0x22
 8005292:	d173      	bne.n	800537c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d920      	bls.n	80052e4 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d154      	bne.n	800537c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80052e2:	e04b      	b.n	800537c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d047      	beq.n	800537c <I2C_MasterReceive_RXNE+0xfc>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d002      	beq.n	80052f8 <I2C_MasterReceive_RXNE+0x78>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d141      	bne.n	800537c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005306:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005316:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d10a      	bne.n	8005368 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fdde 	bl	8004f22 <HAL_I2C_MemRxCpltCallback>
}
 8005366:	e009      	b.n	800537c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2212      	movs	r2, #18
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff fd93 	bl	8004ea2 <HAL_I2C_MasterRxCpltCallback>
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b04      	cmp	r3, #4
 800539a:	d11b      	bne.n	80053d4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053aa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80053d2:	e0bd      	b.n	8005550 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d129      	bne.n	8005432 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d00a      	beq.n	800540a <I2C_MasterReceive_BTF+0x86>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d007      	beq.n	800540a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005408:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005430:	e08e      	b.n	8005550 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d176      	bne.n	800552a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d002      	beq.n	8005448 <I2C_MasterReceive_BTF+0xc4>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b10      	cmp	r3, #16
 8005446:	d108      	bne.n	800545a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e019      	b.n	800548e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d002      	beq.n	8005466 <I2C_MasterReceive_BTF+0xe2>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d108      	bne.n	8005478 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	e00a      	b.n	800548e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b10      	cmp	r3, #16
 800547c:	d007      	beq.n	800548e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80054e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d10a      	bne.n	8005514 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff fd08 	bl	8004f22 <HAL_I2C_MemRxCpltCallback>
}
 8005512:	e01d      	b.n	8005550 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2212      	movs	r2, #18
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff fcbd 	bl	8004ea2 <HAL_I2C_MasterRxCpltCallback>
}
 8005528:	e012      	b.n	8005550 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d117      	bne.n	800559c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005570:	2b00      	cmp	r3, #0
 8005572:	d109      	bne.n	8005588 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005584:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005586:	e067      	b.n	8005658 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	b2da      	uxtb	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	611a      	str	r2, [r3, #16]
}
 800559a:	e05d      	b.n	8005658 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a4:	d133      	bne.n	800560e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b21      	cmp	r3, #33	; 0x21
 80055b0:	d109      	bne.n	80055c6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055c2:	611a      	str	r2, [r3, #16]
 80055c4:	e008      	b.n	80055d8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <I2C_Master_SB+0x92>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d108      	bne.n	80055fc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d032      	beq.n	8005658 <I2C_Master_SB+0x100>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d02d      	beq.n	8005658 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560a:	605a      	str	r2, [r3, #4]
}
 800560c:	e024      	b.n	8005658 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10e      	bne.n	8005634 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	b29b      	uxth	r3, r3
 800561c:	11db      	asrs	r3, r3, #7
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 0306 	and.w	r3, r3, #6
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f063 030f 	orn	r3, r3, #15
 800562a:	b2da      	uxtb	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	611a      	str	r2, [r3, #16]
}
 8005632:	e011      	b.n	8005658 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005638:	2b01      	cmp	r3, #1
 800563a:	d10d      	bne.n	8005658 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005640:	b29b      	uxth	r3, r3
 8005642:	11db      	asrs	r3, r3, #7
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 0306 	and.w	r3, r3, #6
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f063 030e 	orn	r3, r3, #14
 8005650:	b2da      	uxtb	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	b2da      	uxtb	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	2b00      	cmp	r3, #0
 800567e:	d103      	bne.n	8005688 <I2C_Master_ADD10+0x24>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	2b00      	cmp	r3, #0
 8005686:	d011      	beq.n	80056ac <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <I2C_Master_ADD10+0x38>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056aa:	605a      	str	r2, [r3, #4]
    }
  }
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b091      	sub	sp, #68	; 0x44
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b22      	cmp	r3, #34	; 0x22
 80056e0:	f040 8169 	bne.w	80059b6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10f      	bne.n	800570c <I2C_Master_ADDR+0x54>
 80056ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d10b      	bne.n	800570c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f4:	2300      	movs	r3, #0
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	633b      	str	r3, [r7, #48]	; 0x30
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	e160      	b.n	80059ce <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11d      	bne.n	8005750 <I2C_Master_ADDR+0x98>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800571c:	d118      	bne.n	8005750 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800571e:	2300      	movs	r3, #0
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005742:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	651a      	str	r2, [r3, #80]	; 0x50
 800574e:	e13e      	b.n	80059ce <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d113      	bne.n	8005782 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575a:	2300      	movs	r3, #0
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e115      	b.n	80059ae <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	f040 808a 	bne.w	80058a2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005794:	d137      	bne.n	8005806 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b4:	d113      	bne.n	80057de <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c6:	2300      	movs	r3, #0
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	e0e7      	b.n	80059ae <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057de:	2300      	movs	r3, #0
 80057e0:	623b      	str	r3, [r7, #32]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	623b      	str	r3, [r7, #32]
 80057f2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	e0d3      	b.n	80059ae <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	2b08      	cmp	r3, #8
 800580a:	d02e      	beq.n	800586a <I2C_Master_ADDR+0x1b2>
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	2b20      	cmp	r3, #32
 8005810:	d02b      	beq.n	800586a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005814:	2b12      	cmp	r3, #18
 8005816:	d102      	bne.n	800581e <I2C_Master_ADDR+0x166>
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	2b01      	cmp	r3, #1
 800581c:	d125      	bne.n	800586a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	2b04      	cmp	r3, #4
 8005822:	d00e      	beq.n	8005842 <I2C_Master_ADDR+0x18a>
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	2b02      	cmp	r3, #2
 8005828:	d00b      	beq.n	8005842 <I2C_Master_ADDR+0x18a>
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	2b10      	cmp	r3, #16
 800582e:	d008      	beq.n	8005842 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e007      	b.n	8005852 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005850:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	e0a1      	b.n	80059ae <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005878:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587a:	2300      	movs	r3, #0
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	e085      	b.n	80059ae <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d14d      	bne.n	8005948 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d016      	beq.n	80058e0 <I2C_Master_ADDR+0x228>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d013      	beq.n	80058e0 <I2C_Master_ADDR+0x228>
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d010      	beq.n	80058e0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058cc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	e007      	b.n	80058f0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058ee:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fe:	d117      	bne.n	8005930 <I2C_Master_ADDR+0x278>
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005906:	d00b      	beq.n	8005920 <I2C_Master_ADDR+0x268>
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	2b01      	cmp	r3, #1
 800590c:	d008      	beq.n	8005920 <I2C_Master_ADDR+0x268>
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	2b08      	cmp	r3, #8
 8005912:	d005      	beq.n	8005920 <I2C_Master_ADDR+0x268>
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	2b10      	cmp	r3, #16
 8005918:	d002      	beq.n	8005920 <I2C_Master_ADDR+0x268>
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	2b20      	cmp	r3, #32
 800591e:	d107      	bne.n	8005930 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800592e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	e032      	b.n	80059ae <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005956:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005966:	d117      	bne.n	8005998 <I2C_Master_ADDR+0x2e0>
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800596e:	d00b      	beq.n	8005988 <I2C_Master_ADDR+0x2d0>
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	2b01      	cmp	r3, #1
 8005974:	d008      	beq.n	8005988 <I2C_Master_ADDR+0x2d0>
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2b08      	cmp	r3, #8
 800597a:	d005      	beq.n	8005988 <I2C_Master_ADDR+0x2d0>
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	2b10      	cmp	r3, #16
 8005980:	d002      	beq.n	8005988 <I2C_Master_ADDR+0x2d0>
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	2b20      	cmp	r3, #32
 8005986:	d107      	bne.n	8005998 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005996:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005998:	2300      	movs	r3, #0
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80059b4:	e00b      	b.n	80059ce <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
}
 80059cc:	e7ff      	b.n	80059ce <I2C_Master_ADDR+0x316>
 80059ce:	bf00      	nop
 80059d0:	3744      	adds	r7, #68	; 0x44
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d02b      	beq.n	8005a4c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	781a      	ldrb	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d114      	bne.n	8005a4c <I2C_SlaveTransmit_TXE+0x72>
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	2b29      	cmp	r3, #41	; 0x29
 8005a26:	d111      	bne.n	8005a4c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a36:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2221      	movs	r2, #33	; 0x21
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2228      	movs	r2, #40	; 0x28
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff fa35 	bl	8004eb6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d011      	beq.n	8005a8a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	781a      	ldrb	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d02c      	beq.n	8005b0a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d114      	bne.n	8005b0a <I2C_SlaveReceive_RXNE+0x74>
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ae4:	d111      	bne.n	8005b0a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2222      	movs	r2, #34	; 0x22
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2228      	movs	r2, #40	; 0x28
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff f9e0 	bl	8004eca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d012      	beq.n	8005b4a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b70:	2b28      	cmp	r3, #40	; 0x28
 8005b72:	d127      	bne.n	8005bc4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b82:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	089b      	lsrs	r3, r3, #2
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	09db      	lsrs	r3, r3, #7
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d103      	bne.n	8005ba8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	81bb      	strh	r3, [r7, #12]
 8005ba6:	e002      	b.n	8005bae <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005bb6:	89ba      	ldrh	r2, [r7, #12]
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff f98e 	bl	8004ede <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005bc2:	e008      	b.n	8005bd6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0202 	mvn.w	r2, #2
 8005bcc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005bd6:	bf00      	nop
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bfe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c00:	2300      	movs	r3, #0
 8005c02:	60bb      	str	r3, [r7, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	60bb      	str	r3, [r7, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c3c:	d172      	bne.n	8005d24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b22      	cmp	r3, #34	; 0x22
 8005c42:	d002      	beq.n	8005c4a <I2C_Slave_STOPF+0x6a>
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	2b2a      	cmp	r3, #42	; 0x2a
 8005c48:	d135      	bne.n	8005cb6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f043 0204 	orr.w	r2, r3, #4
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fd fedc 	bl	8003a40 <HAL_DMA_GetState>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d049      	beq.n	8005d22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	4a69      	ldr	r2, [pc, #420]	; (8005e38 <I2C_Slave_STOPF+0x258>)
 8005c94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fd fd24 	bl	80036e8 <HAL_DMA_Abort_IT>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d03d      	beq.n	8005d22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cb4:	e035      	b.n	8005d22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f043 0204 	orr.w	r2, r3, #4
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fd fea6 	bl	8003a40 <HAL_DMA_GetState>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d014      	beq.n	8005d24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	4a4e      	ldr	r2, [pc, #312]	; (8005e38 <I2C_Slave_STOPF+0x258>)
 8005d00:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fd fcee 	bl	80036e8 <HAL_DMA_Abort_IT>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	e000      	b.n	8005d24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d03e      	beq.n	8005dac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d112      	bne.n	8005d62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d112      	bne.n	8005d96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	f043 0204 	orr.w	r2, r3, #4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f8b3 	bl	8005f20 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005dba:	e039      	b.n	8005e30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc0:	d109      	bne.n	8005dd6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2228      	movs	r2, #40	; 0x28
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff f87a 	bl	8004eca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b28      	cmp	r3, #40	; 0x28
 8005de0:	d111      	bne.n	8005e06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <I2C_Slave_STOPF+0x25c>)
 8005de6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff f87b 	bl	8004efa <HAL_I2C_ListenCpltCallback>
}
 8005e04:	e014      	b.n	8005e30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	2b22      	cmp	r3, #34	; 0x22
 8005e0c:	d002      	beq.n	8005e14 <I2C_Slave_STOPF+0x234>
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	2b22      	cmp	r3, #34	; 0x22
 8005e12:	d10d      	bne.n	8005e30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff f84d 	bl	8004eca <HAL_I2C_SlaveRxCpltCallback>
}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	08006695 	.word	0x08006695
 8005e3c:	ffff0000 	.word	0xffff0000

08005e40 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d002      	beq.n	8005e62 <I2C_Slave_AF+0x22>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d129      	bne.n	8005eb6 <I2C_Slave_AF+0x76>
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b28      	cmp	r3, #40	; 0x28
 8005e66:	d126      	bne.n	8005eb6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <I2C_Slave_AF+0xdc>)
 8005e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e7c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e86:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e96:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff f823 	bl	8004efa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005eb4:	e02e      	b.n	8005f14 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2b21      	cmp	r3, #33	; 0x21
 8005eba:	d126      	bne.n	8005f0a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <I2C_Slave_AF+0xdc>)
 8005ec0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2221      	movs	r2, #33	; 0x21
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ee6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ef0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f00:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fe ffd7 	bl	8004eb6 <HAL_I2C_SlaveTxCpltCallback>
}
 8005f08:	e004      	b.n	8005f14 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f12:	615a      	str	r2, [r3, #20]
}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	ffff0000 	.word	0xffff0000

08005f20 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d10a      	bne.n	8005f52 <I2C_ITError+0x32>
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	2b22      	cmp	r3, #34	; 0x22
 8005f40:	d107      	bne.n	8005f52 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f50:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f58:	2b28      	cmp	r3, #40	; 0x28
 8005f5a:	d107      	bne.n	8005f6c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2228      	movs	r2, #40	; 0x28
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f6a:	e015      	b.n	8005f98 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f7a:	d006      	beq.n	8005f8a <I2C_ITError+0x6a>
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b60      	cmp	r3, #96	; 0x60
 8005f80:	d003      	beq.n	8005f8a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa6:	d162      	bne.n	800606e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d020      	beq.n	8006008 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	4a6a      	ldr	r2, [pc, #424]	; (8006174 <I2C_ITError+0x254>)
 8005fcc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fd fb88 	bl	80036e8 <HAL_DMA_Abort_IT>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 8089 	beq.w	80060f2 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006002:	4610      	mov	r0, r2
 8006004:	4798      	blx	r3
 8006006:	e074      	b.n	80060f2 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	4a59      	ldr	r2, [pc, #356]	; (8006174 <I2C_ITError+0x254>)
 800600e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	4618      	mov	r0, r3
 8006016:	f7fd fb67 	bl	80036e8 <HAL_DMA_Abort_IT>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d068      	beq.n	80060f2 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d10b      	bne.n	8006046 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006068:	4610      	mov	r0, r2
 800606a:	4798      	blx	r3
 800606c:	e041      	b.n	80060f2 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b60      	cmp	r3, #96	; 0x60
 8006078:	d125      	bne.n	80060c6 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d10b      	bne.n	80060ae <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fe ff43 	bl	8004f4a <HAL_I2C_AbortCpltCallback>
 80060c4:	e015      	b.n	80060f2 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b40      	cmp	r3, #64	; 0x40
 80060d2:	d10b      	bne.n	80060ec <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7fe ff22 	bl	8004f36 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10e      	bne.n	8006120 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006108:	2b00      	cmp	r3, #0
 800610a:	d109      	bne.n	8006120 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800612e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006136:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b04      	cmp	r3, #4
 8006142:	d113      	bne.n	800616c <I2C_ITError+0x24c>
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b28      	cmp	r3, #40	; 0x28
 8006148:	d110      	bne.n	800616c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <I2C_ITError+0x258>)
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fe fec7 	bl	8004efa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800616c:	bf00      	nop
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	08006695 	.word	0x08006695
 8006178:	ffff0000 	.word	0xffff0000

0800617c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	4608      	mov	r0, r1
 8006186:	4611      	mov	r1, r2
 8006188:	461a      	mov	r2, r3
 800618a:	4603      	mov	r3, r0
 800618c:	817b      	strh	r3, [r7, #10]
 800618e:	460b      	mov	r3, r1
 8006190:	813b      	strh	r3, [r7, #8]
 8006192:	4613      	mov	r3, r2
 8006194:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 faed 	bl	8006792 <I2C_WaitOnFlagUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00c      	beq.n	80061d8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e05f      	b.n	8006298 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061d8:	897b      	ldrh	r3, [r7, #10]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	6a3a      	ldr	r2, [r7, #32]
 80061ec:	492c      	ldr	r1, [pc, #176]	; (80062a0 <I2C_RequestMemoryWrite+0x124>)
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fb26 	bl	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e04c      	b.n	8006298 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006216:	6a39      	ldr	r1, [r7, #32]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fb90 	bl	800693e <I2C_WaitOnTXEFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00d      	beq.n	8006240 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	2b04      	cmp	r3, #4
 800622a:	d107      	bne.n	800623c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e02b      	b.n	8006298 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d105      	bne.n	8006252 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006246:	893b      	ldrh	r3, [r7, #8]
 8006248:	b2da      	uxtb	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	611a      	str	r2, [r3, #16]
 8006250:	e021      	b.n	8006296 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006252:	893b      	ldrh	r3, [r7, #8]
 8006254:	0a1b      	lsrs	r3, r3, #8
 8006256:	b29b      	uxth	r3, r3
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006262:	6a39      	ldr	r1, [r7, #32]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 fb6a 	bl	800693e <I2C_WaitOnTXEFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00d      	beq.n	800628c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	2b04      	cmp	r3, #4
 8006276:	d107      	bne.n	8006288 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006286:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e005      	b.n	8006298 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800628c:	893b      	ldrh	r3, [r7, #8]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	00010002 	.word	0x00010002

080062a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	4608      	mov	r0, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	461a      	mov	r2, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	817b      	strh	r3, [r7, #10]
 80062b6:	460b      	mov	r3, r1
 80062b8:	813b      	strh	r3, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 fa51 	bl	8006792 <I2C_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00c      	beq.n	8006310 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800630a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e0a9      	b.n	8006464 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006310:	897b      	ldrh	r3, [r7, #10]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800631e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	6a3a      	ldr	r2, [r7, #32]
 8006324:	4951      	ldr	r1, [pc, #324]	; (800646c <I2C_RequestMemoryRead+0x1c8>)
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 fa8a 	bl	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e096      	b.n	8006464 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634e:	6a39      	ldr	r1, [r7, #32]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 faf4 	bl	800693e <I2C_WaitOnTXEFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	2b04      	cmp	r3, #4
 8006362:	d107      	bne.n	8006374 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006372:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e075      	b.n	8006464 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d105      	bne.n	800638a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800637e:	893b      	ldrh	r3, [r7, #8]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	611a      	str	r2, [r3, #16]
 8006388:	e021      	b.n	80063ce <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800638a:	893b      	ldrh	r3, [r7, #8]
 800638c:	0a1b      	lsrs	r3, r3, #8
 800638e:	b29b      	uxth	r3, r3
 8006390:	b2da      	uxtb	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639a:	6a39      	ldr	r1, [r7, #32]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 face 	bl	800693e <I2C_WaitOnTXEFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00d      	beq.n	80063c4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d107      	bne.n	80063c0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e04f      	b.n	8006464 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063c4:	893b      	ldrh	r3, [r7, #8]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d0:	6a39      	ldr	r1, [r7, #32]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fab3 	bl	800693e <I2C_WaitOnTXEFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d107      	bne.n	80063f6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e034      	b.n	8006464 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	2200      	movs	r2, #0
 8006412:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 f9bb 	bl	8006792 <I2C_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e013      	b.n	8006464 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800643c:	897b      	ldrh	r3, [r7, #10]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	b2da      	uxtb	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	6a3a      	ldr	r2, [r7, #32]
 8006450:	4906      	ldr	r1, [pc, #24]	; (800646c <I2C_RequestMemoryRead+0x1c8>)
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f9f4 	bl	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	00010002 	.word	0x00010002

08006470 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006484:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800648c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80064a2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b0:	2200      	movs	r2, #0
 80064b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	2200      	movs	r2, #0
 80064c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
 80064c6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80064ca:	2b21      	cmp	r3, #33	; 0x21
 80064cc:	d007      	beq.n	80064de <I2C_DMAXferCplt+0x6e>
 80064ce:	7cfb      	ldrb	r3, [r7, #19]
 80064d0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80064d4:	2b22      	cmp	r3, #34	; 0x22
 80064d6:	d131      	bne.n	800653c <I2C_DMAXferCplt+0xcc>
 80064d8:	7cbb      	ldrb	r3, [r7, #18]
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d12e      	bne.n	800653c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064ec:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2200      	movs	r2, #0
 80064f2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80064f4:	7cfb      	ldrb	r3, [r7, #19]
 80064f6:	2b29      	cmp	r3, #41	; 0x29
 80064f8:	d10a      	bne.n	8006510 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2221      	movs	r2, #33	; 0x21
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2228      	movs	r2, #40	; 0x28
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006508:	6978      	ldr	r0, [r7, #20]
 800650a:	f7fe fcd4 	bl	8004eb6 <HAL_I2C_SlaveTxCpltCallback>
 800650e:	e00c      	b.n	800652a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	2b2a      	cmp	r3, #42	; 0x2a
 8006514:	d109      	bne.n	800652a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2222      	movs	r2, #34	; 0x22
 800651a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2228      	movs	r2, #40	; 0x28
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006524:	6978      	ldr	r0, [r7, #20]
 8006526:	f7fe fcd0 	bl	8004eca <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006538:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800653a:	e06a      	b.n	8006612 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d064      	beq.n	8006612 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b01      	cmp	r3, #1
 8006550:	d107      	bne.n	8006562 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006560:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006570:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006578:	d009      	beq.n	800658e <I2C_DMAXferCplt+0x11e>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d006      	beq.n	800658e <I2C_DMAXferCplt+0x11e>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006586:	d002      	beq.n	800658e <I2C_DMAXferCplt+0x11e>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b20      	cmp	r3, #32
 800658c:	d107      	bne.n	800659e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065ac:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065bc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2200      	movs	r2, #0
 80065c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80065cc:	6978      	ldr	r0, [r7, #20]
 80065ce:	f7fe fcb2 	bl	8004f36 <HAL_I2C_ErrorCallback>
}
 80065d2:	e01e      	b.n	8006612 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d10a      	bne.n	80065fe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80065f6:	6978      	ldr	r0, [r7, #20]
 80065f8:	f7fe fc93 	bl	8004f22 <HAL_I2C_MemRxCpltCallback>
}
 80065fc:	e009      	b.n	8006612 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2212      	movs	r2, #18
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800660c:	6978      	ldr	r0, [r7, #20]
 800660e:	f7fe fc48 	bl	8004ea2 <HAL_I2C_MasterRxCpltCallback>
}
 8006612:	bf00      	nop
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	2200      	movs	r2, #0
 8006636:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	2200      	movs	r2, #0
 8006646:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7fd fa07 	bl	8003a5c <HAL_DMA_GetError>
 800664e:	4603      	mov	r3, r0
 8006650:	2b02      	cmp	r3, #2
 8006652:	d01b      	beq.n	800668c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006662:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f043 0210 	orr.w	r2, r3, #16
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7fe fc55 	bl	8004f36 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800668c:	bf00      	nop
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b6:	2200      	movs	r2, #0
 80066b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	2200      	movs	r2, #0
 80066c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ec:	2200      	movs	r2, #0
 80066ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	2200      	movs	r2, #0
 80066fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0201 	bic.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b60      	cmp	r3, #96	; 0x60
 800671a:	d10e      	bne.n	800673a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7fe fc09 	bl	8004f4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006738:	e027      	b.n	800678a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800673a:	7afb      	ldrb	r3, [r7, #11]
 800673c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006740:	2b28      	cmp	r3, #40	; 0x28
 8006742:	d117      	bne.n	8006774 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006762:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2228      	movs	r2, #40	; 0x28
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006772:	e007      	b.n	8006784 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7fe fbd6 	bl	8004f36 <HAL_I2C_ErrorCallback>
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	4613      	mov	r3, r2
 80067a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067a2:	e025      	b.n	80067f0 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067aa:	d021      	beq.n	80067f0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ac:	f7fc fd56 	bl	800325c <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d302      	bcc.n	80067c2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d116      	bne.n	80067f0 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	f043 0220 	orr.w	r2, r3, #32
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e023      	b.n	8006838 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	0c1b      	lsrs	r3, r3, #16
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d10d      	bne.n	8006816 <I2C_WaitOnFlagUntilTimeout+0x84>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	43da      	mvns	r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4013      	ands	r3, r2
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	bf0c      	ite	eq
 800680c:	2301      	moveq	r3, #1
 800680e:	2300      	movne	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	e00c      	b.n	8006830 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	43da      	mvns	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4013      	ands	r3, r2
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	429a      	cmp	r2, r3
 8006834:	d0b6      	beq.n	80067a4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800684e:	e051      	b.n	80068f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685e:	d123      	bne.n	80068a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800686e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006878:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	f043 0204 	orr.w	r2, r3, #4
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e046      	b.n	8006936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d021      	beq.n	80068f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b0:	f7fc fcd4 	bl	800325c <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d302      	bcc.n	80068c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d116      	bne.n	80068f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	f043 0220 	orr.w	r2, r3, #32
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e020      	b.n	8006936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d10c      	bne.n	8006918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	43da      	mvns	r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4013      	ands	r3, r2
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	bf14      	ite	ne
 8006910:	2301      	movne	r3, #1
 8006912:	2300      	moveq	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	e00b      	b.n	8006930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	43da      	mvns	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf14      	ite	ne
 800692a:	2301      	movne	r3, #1
 800692c:	2300      	moveq	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d18d      	bne.n	8006850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800694a:	e02d      	b.n	80069a8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f8ce 	bl	8006aee <I2C_IsAcknowledgeFailed>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e02d      	b.n	80069b8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d021      	beq.n	80069a8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006964:	f7fc fc7a 	bl	800325c <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	429a      	cmp	r2, r3
 8006972:	d302      	bcc.n	800697a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d116      	bne.n	80069a8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	f043 0220 	orr.w	r2, r3, #32
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e007      	b.n	80069b8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d1ca      	bne.n	800694c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069cc:	e02d      	b.n	8006a2a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 f88d 	bl	8006aee <I2C_IsAcknowledgeFailed>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e02d      	b.n	8006a3a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d021      	beq.n	8006a2a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e6:	f7fc fc39 	bl	800325c <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d302      	bcc.n	80069fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d116      	bne.n	8006a2a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f043 0220 	orr.w	r2, r3, #32
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e007      	b.n	8006a3a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d1ca      	bne.n	80069ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a4e:	e042      	b.n	8006ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	2b10      	cmp	r3, #16
 8006a5c:	d119      	bne.n	8006a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f06f 0210 	mvn.w	r2, #16
 8006a66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e029      	b.n	8006ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a92:	f7fc fbe3 	bl	800325c <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d302      	bcc.n	8006aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d116      	bne.n	8006ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f043 0220 	orr.w	r2, r3, #32
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e007      	b.n	8006ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d1b5      	bne.n	8006a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b04:	d11b      	bne.n	8006b3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	f043 0204 	orr.w	r2, r3, #4
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b5c:	d103      	bne.n	8006b66 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b64:	e007      	b.n	8006b76 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b6e:	d102      	bne.n	8006b76 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2208      	movs	r2, #8
 8006b74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e25b      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d075      	beq.n	8006c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ba2:	4ba3      	ldr	r3, [pc, #652]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d00c      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bae:	4ba0      	ldr	r3, [pc, #640]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d112      	bne.n	8006be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bba:	4b9d      	ldr	r3, [pc, #628]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bc6:	d10b      	bne.n	8006be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc8:	4b99      	ldr	r3, [pc, #612]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d05b      	beq.n	8006c8c <HAL_RCC_OscConfig+0x108>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d157      	bne.n	8006c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e236      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be8:	d106      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x74>
 8006bea:	4b91      	ldr	r3, [pc, #580]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a90      	ldr	r2, [pc, #576]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	e01d      	b.n	8006c34 <HAL_RCC_OscConfig+0xb0>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c00:	d10c      	bne.n	8006c1c <HAL_RCC_OscConfig+0x98>
 8006c02:	4b8b      	ldr	r3, [pc, #556]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a8a      	ldr	r2, [pc, #552]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	4b88      	ldr	r3, [pc, #544]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a87      	ldr	r2, [pc, #540]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	e00b      	b.n	8006c34 <HAL_RCC_OscConfig+0xb0>
 8006c1c:	4b84      	ldr	r3, [pc, #528]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a83      	ldr	r2, [pc, #524]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	4b81      	ldr	r3, [pc, #516]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a80      	ldr	r2, [pc, #512]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d013      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3c:	f7fc fb0e 	bl	800325c <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c44:	f7fc fb0a 	bl	800325c <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b64      	cmp	r3, #100	; 0x64
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e1fb      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c56:	4b76      	ldr	r3, [pc, #472]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f0      	beq.n	8006c44 <HAL_RCC_OscConfig+0xc0>
 8006c62:	e014      	b.n	8006c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c64:	f7fc fafa 	bl	800325c <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c6a:	e008      	b.n	8006c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c6c:	f7fc faf6 	bl	800325c <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b64      	cmp	r3, #100	; 0x64
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e1e7      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c7e:	4b6c      	ldr	r3, [pc, #432]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1f0      	bne.n	8006c6c <HAL_RCC_OscConfig+0xe8>
 8006c8a:	e000      	b.n	8006c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d063      	beq.n	8006d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c9a:	4b65      	ldr	r3, [pc, #404]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 030c 	and.w	r3, r3, #12
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ca6:	4b62      	ldr	r3, [pc, #392]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d11c      	bne.n	8006cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cb2:	4b5f      	ldr	r3, [pc, #380]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d116      	bne.n	8006cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cbe:	4b5c      	ldr	r3, [pc, #368]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x152>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d001      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e1bb      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd6:	4b56      	ldr	r3, [pc, #344]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4952      	ldr	r1, [pc, #328]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cea:	e03a      	b.n	8006d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d020      	beq.n	8006d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cf4:	4b4f      	ldr	r3, [pc, #316]	; (8006e34 <HAL_RCC_OscConfig+0x2b0>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfa:	f7fc faaf 	bl	800325c <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d00:	e008      	b.n	8006d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d02:	f7fc faab 	bl	800325c <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d901      	bls.n	8006d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e19c      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d14:	4b46      	ldr	r3, [pc, #280]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0f0      	beq.n	8006d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d20:	4b43      	ldr	r3, [pc, #268]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	4940      	ldr	r1, [pc, #256]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	600b      	str	r3, [r1, #0]
 8006d34:	e015      	b.n	8006d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d36:	4b3f      	ldr	r3, [pc, #252]	; (8006e34 <HAL_RCC_OscConfig+0x2b0>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3c:	f7fc fa8e 	bl	800325c <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d44:	f7fc fa8a 	bl	800325c <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e17b      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d56:	4b36      	ldr	r3, [pc, #216]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d030      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d016      	beq.n	8006da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d76:	4b30      	ldr	r3, [pc, #192]	; (8006e38 <HAL_RCC_OscConfig+0x2b4>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7c:	f7fc fa6e 	bl	800325c <HAL_GetTick>
 8006d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d82:	e008      	b.n	8006d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d84:	f7fc fa6a 	bl	800325c <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e15b      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d96:	4b26      	ldr	r3, [pc, #152]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0f0      	beq.n	8006d84 <HAL_RCC_OscConfig+0x200>
 8006da2:	e015      	b.n	8006dd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006da4:	4b24      	ldr	r3, [pc, #144]	; (8006e38 <HAL_RCC_OscConfig+0x2b4>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006daa:	f7fc fa57 	bl	800325c <HAL_GetTick>
 8006dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006db0:	e008      	b.n	8006dc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006db2:	f7fc fa53 	bl	800325c <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e144      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dc4:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1f0      	bne.n	8006db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 80a0 	beq.w	8006f1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dde:	2300      	movs	r3, #0
 8006de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006de2:	4b13      	ldr	r3, [pc, #76]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10f      	bne.n	8006e0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dee:	2300      	movs	r3, #0
 8006df0:	60bb      	str	r3, [r7, #8]
 8006df2:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	4a0e      	ldr	r2, [pc, #56]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <HAL_RCC_OscConfig+0x2ac>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e06:	60bb      	str	r3, [r7, #8]
 8006e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <HAL_RCC_OscConfig+0x2b8>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d121      	bne.n	8006e5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <HAL_RCC_OscConfig+0x2b8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a07      	ldr	r2, [pc, #28]	; (8006e3c <HAL_RCC_OscConfig+0x2b8>)
 8006e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e26:	f7fc fa19 	bl	800325c <HAL_GetTick>
 8006e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e2c:	e011      	b.n	8006e52 <HAL_RCC_OscConfig+0x2ce>
 8006e2e:	bf00      	nop
 8006e30:	40023800 	.word	0x40023800
 8006e34:	42470000 	.word	0x42470000
 8006e38:	42470e80 	.word	0x42470e80
 8006e3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e40:	f7fc fa0c 	bl	800325c <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e0fd      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e52:	4b81      	ldr	r3, [pc, #516]	; (8007058 <HAL_RCC_OscConfig+0x4d4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0f0      	beq.n	8006e40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d106      	bne.n	8006e74 <HAL_RCC_OscConfig+0x2f0>
 8006e66:	4b7d      	ldr	r3, [pc, #500]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	4a7c      	ldr	r2, [pc, #496]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006e6c:	f043 0301 	orr.w	r3, r3, #1
 8006e70:	6713      	str	r3, [r2, #112]	; 0x70
 8006e72:	e01c      	b.n	8006eae <HAL_RCC_OscConfig+0x32a>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	2b05      	cmp	r3, #5
 8006e7a:	d10c      	bne.n	8006e96 <HAL_RCC_OscConfig+0x312>
 8006e7c:	4b77      	ldr	r3, [pc, #476]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e80:	4a76      	ldr	r2, [pc, #472]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006e82:	f043 0304 	orr.w	r3, r3, #4
 8006e86:	6713      	str	r3, [r2, #112]	; 0x70
 8006e88:	4b74      	ldr	r3, [pc, #464]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	4a73      	ldr	r2, [pc, #460]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	6713      	str	r3, [r2, #112]	; 0x70
 8006e94:	e00b      	b.n	8006eae <HAL_RCC_OscConfig+0x32a>
 8006e96:	4b71      	ldr	r3, [pc, #452]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9a:	4a70      	ldr	r2, [pc, #448]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea2:	4b6e      	ldr	r3, [pc, #440]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	4a6d      	ldr	r2, [pc, #436]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006ea8:	f023 0304 	bic.w	r3, r3, #4
 8006eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d015      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb6:	f7fc f9d1 	bl	800325c <HAL_GetTick>
 8006eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ebc:	e00a      	b.n	8006ed4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ebe:	f7fc f9cd 	bl	800325c <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e0bc      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed4:	4b61      	ldr	r3, [pc, #388]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0ee      	beq.n	8006ebe <HAL_RCC_OscConfig+0x33a>
 8006ee0:	e014      	b.n	8006f0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ee2:	f7fc f9bb 	bl	800325c <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ee8:	e00a      	b.n	8006f00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eea:	f7fc f9b7 	bl	800325c <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e0a6      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f00:	4b56      	ldr	r3, [pc, #344]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1ee      	bne.n	8006eea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d105      	bne.n	8006f1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f12:	4b52      	ldr	r3, [pc, #328]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	4a51      	ldr	r2, [pc, #324]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8092 	beq.w	800704c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f28:	4b4c      	ldr	r3, [pc, #304]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 030c 	and.w	r3, r3, #12
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d05c      	beq.n	8006fee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d141      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f3c:	4b48      	ldr	r3, [pc, #288]	; (8007060 <HAL_RCC_OscConfig+0x4dc>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f42:	f7fc f98b 	bl	800325c <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f4a:	f7fc f987 	bl	800325c <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e078      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5c:	4b3f      	ldr	r3, [pc, #252]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1f0      	bne.n	8006f4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	019b      	lsls	r3, r3, #6
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	3b01      	subs	r3, #1
 8006f82:	041b      	lsls	r3, r3, #16
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	4933      	ldr	r1, [pc, #204]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f92:	4b33      	ldr	r3, [pc, #204]	; (8007060 <HAL_RCC_OscConfig+0x4dc>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f98:	f7fc f960 	bl	800325c <HAL_GetTick>
 8006f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fa0:	f7fc f95c 	bl	800325c <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e04d      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb2:	4b2a      	ldr	r3, [pc, #168]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0f0      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x41c>
 8006fbe:	e045      	b.n	800704c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc0:	4b27      	ldr	r3, [pc, #156]	; (8007060 <HAL_RCC_OscConfig+0x4dc>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fc6:	f7fc f949 	bl	800325c <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fce:	f7fc f945 	bl	800325c <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e036      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe0:	4b1e      	ldr	r3, [pc, #120]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f0      	bne.n	8006fce <HAL_RCC_OscConfig+0x44a>
 8006fec:	e02e      	b.n	800704c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e029      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ffa:	4b18      	ldr	r3, [pc, #96]	; (800705c <HAL_RCC_OscConfig+0x4d8>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	429a      	cmp	r2, r3
 800700c:	d11c      	bne.n	8007048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007018:	429a      	cmp	r2, r3
 800701a:	d115      	bne.n	8007048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007022:	4013      	ands	r3, r2
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007028:	4293      	cmp	r3, r2
 800702a:	d10d      	bne.n	8007048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007036:	429a      	cmp	r2, r3
 8007038:	d106      	bne.n	8007048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007044:	429a      	cmp	r2, r3
 8007046:	d001      	beq.n	800704c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e000      	b.n	800704e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	40007000 	.word	0x40007000
 800705c:	40023800 	.word	0x40023800
 8007060:	42470060 	.word	0x42470060

08007064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0cc      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007078:	4b68      	ldr	r3, [pc, #416]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d90c      	bls.n	80070a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007086:	4b65      	ldr	r3, [pc, #404]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708e:	4b63      	ldr	r3, [pc, #396]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d001      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e0b8      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d020      	beq.n	80070ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070b8:	4b59      	ldr	r3, [pc, #356]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	4a58      	ldr	r2, [pc, #352]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070d0:	4b53      	ldr	r3, [pc, #332]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	4a52      	ldr	r2, [pc, #328]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070dc:	4b50      	ldr	r3, [pc, #320]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	494d      	ldr	r1, [pc, #308]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d044      	beq.n	8007184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d107      	bne.n	8007112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007102:	4b47      	ldr	r3, [pc, #284]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d119      	bne.n	8007142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e07f      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d003      	beq.n	8007122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800711e:	2b03      	cmp	r3, #3
 8007120:	d107      	bne.n	8007132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007122:	4b3f      	ldr	r3, [pc, #252]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e06f      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007132:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e067      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007142:	4b37      	ldr	r3, [pc, #220]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f023 0203 	bic.w	r2, r3, #3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	4934      	ldr	r1, [pc, #208]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	4313      	orrs	r3, r2
 8007152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007154:	f7fc f882 	bl	800325c <HAL_GetTick>
 8007158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800715a:	e00a      	b.n	8007172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800715c:	f7fc f87e 	bl	800325c <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f241 3288 	movw	r2, #5000	; 0x1388
 800716a:	4293      	cmp	r3, r2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e04f      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007172:	4b2b      	ldr	r3, [pc, #172]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 020c 	and.w	r2, r3, #12
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	429a      	cmp	r2, r3
 8007182:	d1eb      	bne.n	800715c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007184:	4b25      	ldr	r3, [pc, #148]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d20c      	bcs.n	80071ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007192:	4b22      	ldr	r3, [pc, #136]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800719a:	4b20      	ldr	r3, [pc, #128]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d001      	beq.n	80071ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e032      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b8:	4b19      	ldr	r3, [pc, #100]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4916      	ldr	r1, [pc, #88]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071d6:	4b12      	ldr	r3, [pc, #72]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	490e      	ldr	r1, [pc, #56]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071ea:	f000 f821 	bl	8007230 <HAL_RCC_GetSysClockFreq>
 80071ee:	4601      	mov	r1, r0
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	4a0a      	ldr	r2, [pc, #40]	; (8007224 <HAL_RCC_ClockConfig+0x1c0>)
 80071fc:	5cd3      	ldrb	r3, [r2, r3]
 80071fe:	fa21 f303 	lsr.w	r3, r1, r3
 8007202:	4a09      	ldr	r2, [pc, #36]	; (8007228 <HAL_RCC_ClockConfig+0x1c4>)
 8007204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007206:	4b09      	ldr	r3, [pc, #36]	; (800722c <HAL_RCC_ClockConfig+0x1c8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f7fb ffe2 	bl	80031d4 <HAL_InitTick>

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40023c00 	.word	0x40023c00
 8007220:	40023800 	.word	0x40023800
 8007224:	0800a7f8 	.word	0x0800a7f8
 8007228:	20000010 	.word	0x20000010
 800722c:	20000014 	.word	0x20000014

08007230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	607b      	str	r3, [r7, #4]
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
 800723e:	2300      	movs	r3, #0
 8007240:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007246:	4b63      	ldr	r3, [pc, #396]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 030c 	and.w	r3, r3, #12
 800724e:	2b04      	cmp	r3, #4
 8007250:	d007      	beq.n	8007262 <HAL_RCC_GetSysClockFreq+0x32>
 8007252:	2b08      	cmp	r3, #8
 8007254:	d008      	beq.n	8007268 <HAL_RCC_GetSysClockFreq+0x38>
 8007256:	2b00      	cmp	r3, #0
 8007258:	f040 80b4 	bne.w	80073c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800725c:	4b5e      	ldr	r3, [pc, #376]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800725e:	60bb      	str	r3, [r7, #8]
       break;
 8007260:	e0b3      	b.n	80073ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007262:	4b5e      	ldr	r3, [pc, #376]	; (80073dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007264:	60bb      	str	r3, [r7, #8]
      break;
 8007266:	e0b0      	b.n	80073ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007268:	4b5a      	ldr	r3, [pc, #360]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007270:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007272:	4b58      	ldr	r3, [pc, #352]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d04a      	beq.n	8007314 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800727e:	4b55      	ldr	r3, [pc, #340]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	099b      	lsrs	r3, r3, #6
 8007284:	f04f 0400 	mov.w	r4, #0
 8007288:	f240 11ff 	movw	r1, #511	; 0x1ff
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	ea03 0501 	and.w	r5, r3, r1
 8007294:	ea04 0602 	and.w	r6, r4, r2
 8007298:	4629      	mov	r1, r5
 800729a:	4632      	mov	r2, r6
 800729c:	f04f 0300 	mov.w	r3, #0
 80072a0:	f04f 0400 	mov.w	r4, #0
 80072a4:	0154      	lsls	r4, r2, #5
 80072a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072aa:	014b      	lsls	r3, r1, #5
 80072ac:	4619      	mov	r1, r3
 80072ae:	4622      	mov	r2, r4
 80072b0:	1b49      	subs	r1, r1, r5
 80072b2:	eb62 0206 	sbc.w	r2, r2, r6
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	f04f 0400 	mov.w	r4, #0
 80072be:	0194      	lsls	r4, r2, #6
 80072c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80072c4:	018b      	lsls	r3, r1, #6
 80072c6:	1a5b      	subs	r3, r3, r1
 80072c8:	eb64 0402 	sbc.w	r4, r4, r2
 80072cc:	f04f 0100 	mov.w	r1, #0
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	00e2      	lsls	r2, r4, #3
 80072d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80072da:	00d9      	lsls	r1, r3, #3
 80072dc:	460b      	mov	r3, r1
 80072de:	4614      	mov	r4, r2
 80072e0:	195b      	adds	r3, r3, r5
 80072e2:	eb44 0406 	adc.w	r4, r4, r6
 80072e6:	f04f 0100 	mov.w	r1, #0
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	0262      	lsls	r2, r4, #9
 80072f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80072f4:	0259      	lsls	r1, r3, #9
 80072f6:	460b      	mov	r3, r1
 80072f8:	4614      	mov	r4, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	4621      	mov	r1, r4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f04f 0400 	mov.w	r4, #0
 8007304:	461a      	mov	r2, r3
 8007306:	4623      	mov	r3, r4
 8007308:	f7f9 fc96 	bl	8000c38 <__aeabi_uldivmod>
 800730c:	4603      	mov	r3, r0
 800730e:	460c      	mov	r4, r1
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	e049      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007314:	4b2f      	ldr	r3, [pc, #188]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	099b      	lsrs	r3, r3, #6
 800731a:	f04f 0400 	mov.w	r4, #0
 800731e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007322:	f04f 0200 	mov.w	r2, #0
 8007326:	ea03 0501 	and.w	r5, r3, r1
 800732a:	ea04 0602 	and.w	r6, r4, r2
 800732e:	4629      	mov	r1, r5
 8007330:	4632      	mov	r2, r6
 8007332:	f04f 0300 	mov.w	r3, #0
 8007336:	f04f 0400 	mov.w	r4, #0
 800733a:	0154      	lsls	r4, r2, #5
 800733c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007340:	014b      	lsls	r3, r1, #5
 8007342:	4619      	mov	r1, r3
 8007344:	4622      	mov	r2, r4
 8007346:	1b49      	subs	r1, r1, r5
 8007348:	eb62 0206 	sbc.w	r2, r2, r6
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	f04f 0400 	mov.w	r4, #0
 8007354:	0194      	lsls	r4, r2, #6
 8007356:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800735a:	018b      	lsls	r3, r1, #6
 800735c:	1a5b      	subs	r3, r3, r1
 800735e:	eb64 0402 	sbc.w	r4, r4, r2
 8007362:	f04f 0100 	mov.w	r1, #0
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	00e2      	lsls	r2, r4, #3
 800736c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007370:	00d9      	lsls	r1, r3, #3
 8007372:	460b      	mov	r3, r1
 8007374:	4614      	mov	r4, r2
 8007376:	195b      	adds	r3, r3, r5
 8007378:	eb44 0406 	adc.w	r4, r4, r6
 800737c:	f04f 0100 	mov.w	r1, #0
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	02a2      	lsls	r2, r4, #10
 8007386:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800738a:	0299      	lsls	r1, r3, #10
 800738c:	460b      	mov	r3, r1
 800738e:	4614      	mov	r4, r2
 8007390:	4618      	mov	r0, r3
 8007392:	4621      	mov	r1, r4
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f04f 0400 	mov.w	r4, #0
 800739a:	461a      	mov	r2, r3
 800739c:	4623      	mov	r3, r4
 800739e:	f7f9 fc4b 	bl	8000c38 <__aeabi_uldivmod>
 80073a2:	4603      	mov	r3, r0
 80073a4:	460c      	mov	r4, r1
 80073a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	3301      	adds	r3, #1
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c0:	60bb      	str	r3, [r7, #8]
      break;
 80073c2:	e002      	b.n	80073ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073c4:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80073c6:	60bb      	str	r3, [r7, #8]
      break;
 80073c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ca:	68bb      	ldr	r3, [r7, #8]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d4:	40023800 	.word	0x40023800
 80073d8:	00f42400 	.word	0x00f42400
 80073dc:	007a1200 	.word	0x007a1200

080073e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073e4:	4b03      	ldr	r3, [pc, #12]	; (80073f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80073e6:	681b      	ldr	r3, [r3, #0]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20000010 	.word	0x20000010

080073f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073fc:	f7ff fff0 	bl	80073e0 <HAL_RCC_GetHCLKFreq>
 8007400:	4601      	mov	r1, r0
 8007402:	4b05      	ldr	r3, [pc, #20]	; (8007418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	0a9b      	lsrs	r3, r3, #10
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	4a03      	ldr	r2, [pc, #12]	; (800741c <HAL_RCC_GetPCLK1Freq+0x24>)
 800740e:	5cd3      	ldrb	r3, [r2, r3]
 8007410:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007414:	4618      	mov	r0, r3
 8007416:	bd80      	pop	{r7, pc}
 8007418:	40023800 	.word	0x40023800
 800741c:	0800a808 	.word	0x0800a808

08007420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007424:	f7ff ffdc 	bl	80073e0 <HAL_RCC_GetHCLKFreq>
 8007428:	4601      	mov	r1, r0
 800742a:	4b05      	ldr	r3, [pc, #20]	; (8007440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	0b5b      	lsrs	r3, r3, #13
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	4a03      	ldr	r2, [pc, #12]	; (8007444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007436:	5cd3      	ldrb	r3, [r2, r3]
 8007438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800743c:	4618      	mov	r0, r3
 800743e:	bd80      	pop	{r7, pc}
 8007440:	40023800 	.word	0x40023800
 8007444:	0800a808 	.word	0x0800a808

08007448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e03f      	b.n	80074da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fb fd8a 	bl	8002f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2224      	movs	r2, #36	; 0x24
 8007478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800748a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f829 	bl	80074e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691a      	ldr	r2, [r3, #16]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695a      	ldr	r2, [r3, #20]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007526:	f023 030c 	bic.w	r3, r3, #12
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6812      	ldr	r2, [r2, #0]
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	430b      	orrs	r3, r1
 8007532:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007552:	f040 818b 	bne.w	800786c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4ac1      	ldr	r2, [pc, #772]	; (8007860 <UART_SetConfig+0x37c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d005      	beq.n	800756c <UART_SetConfig+0x88>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4abf      	ldr	r2, [pc, #764]	; (8007864 <UART_SetConfig+0x380>)
 8007566:	4293      	cmp	r3, r2
 8007568:	f040 80bd 	bne.w	80076e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800756c:	f7ff ff58 	bl	8007420 <HAL_RCC_GetPCLK2Freq>
 8007570:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	461d      	mov	r5, r3
 8007576:	f04f 0600 	mov.w	r6, #0
 800757a:	46a8      	mov	r8, r5
 800757c:	46b1      	mov	r9, r6
 800757e:	eb18 0308 	adds.w	r3, r8, r8
 8007582:	eb49 0409 	adc.w	r4, r9, r9
 8007586:	4698      	mov	r8, r3
 8007588:	46a1      	mov	r9, r4
 800758a:	eb18 0805 	adds.w	r8, r8, r5
 800758e:	eb49 0906 	adc.w	r9, r9, r6
 8007592:	f04f 0100 	mov.w	r1, #0
 8007596:	f04f 0200 	mov.w	r2, #0
 800759a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800759e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075a6:	4688      	mov	r8, r1
 80075a8:	4691      	mov	r9, r2
 80075aa:	eb18 0005 	adds.w	r0, r8, r5
 80075ae:	eb49 0106 	adc.w	r1, r9, r6
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	461d      	mov	r5, r3
 80075b8:	f04f 0600 	mov.w	r6, #0
 80075bc:	196b      	adds	r3, r5, r5
 80075be:	eb46 0406 	adc.w	r4, r6, r6
 80075c2:	461a      	mov	r2, r3
 80075c4:	4623      	mov	r3, r4
 80075c6:	f7f9 fb37 	bl	8000c38 <__aeabi_uldivmod>
 80075ca:	4603      	mov	r3, r0
 80075cc:	460c      	mov	r4, r1
 80075ce:	461a      	mov	r2, r3
 80075d0:	4ba5      	ldr	r3, [pc, #660]	; (8007868 <UART_SetConfig+0x384>)
 80075d2:	fba3 2302 	umull	r2, r3, r3, r2
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	461d      	mov	r5, r3
 80075e0:	f04f 0600 	mov.w	r6, #0
 80075e4:	46a9      	mov	r9, r5
 80075e6:	46b2      	mov	sl, r6
 80075e8:	eb19 0309 	adds.w	r3, r9, r9
 80075ec:	eb4a 040a 	adc.w	r4, sl, sl
 80075f0:	4699      	mov	r9, r3
 80075f2:	46a2      	mov	sl, r4
 80075f4:	eb19 0905 	adds.w	r9, r9, r5
 80075f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80075fc:	f04f 0100 	mov.w	r1, #0
 8007600:	f04f 0200 	mov.w	r2, #0
 8007604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007608:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800760c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007610:	4689      	mov	r9, r1
 8007612:	4692      	mov	sl, r2
 8007614:	eb19 0005 	adds.w	r0, r9, r5
 8007618:	eb4a 0106 	adc.w	r1, sl, r6
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	461d      	mov	r5, r3
 8007622:	f04f 0600 	mov.w	r6, #0
 8007626:	196b      	adds	r3, r5, r5
 8007628:	eb46 0406 	adc.w	r4, r6, r6
 800762c:	461a      	mov	r2, r3
 800762e:	4623      	mov	r3, r4
 8007630:	f7f9 fb02 	bl	8000c38 <__aeabi_uldivmod>
 8007634:	4603      	mov	r3, r0
 8007636:	460c      	mov	r4, r1
 8007638:	461a      	mov	r2, r3
 800763a:	4b8b      	ldr	r3, [pc, #556]	; (8007868 <UART_SetConfig+0x384>)
 800763c:	fba3 1302 	umull	r1, r3, r3, r2
 8007640:	095b      	lsrs	r3, r3, #5
 8007642:	2164      	movs	r1, #100	; 0x64
 8007644:	fb01 f303 	mul.w	r3, r1, r3
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	3332      	adds	r3, #50	; 0x32
 800764e:	4a86      	ldr	r2, [pc, #536]	; (8007868 <UART_SetConfig+0x384>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800765c:	4498      	add	r8, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	461d      	mov	r5, r3
 8007662:	f04f 0600 	mov.w	r6, #0
 8007666:	46a9      	mov	r9, r5
 8007668:	46b2      	mov	sl, r6
 800766a:	eb19 0309 	adds.w	r3, r9, r9
 800766e:	eb4a 040a 	adc.w	r4, sl, sl
 8007672:	4699      	mov	r9, r3
 8007674:	46a2      	mov	sl, r4
 8007676:	eb19 0905 	adds.w	r9, r9, r5
 800767a:	eb4a 0a06 	adc.w	sl, sl, r6
 800767e:	f04f 0100 	mov.w	r1, #0
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800768a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800768e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007692:	4689      	mov	r9, r1
 8007694:	4692      	mov	sl, r2
 8007696:	eb19 0005 	adds.w	r0, r9, r5
 800769a:	eb4a 0106 	adc.w	r1, sl, r6
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	461d      	mov	r5, r3
 80076a4:	f04f 0600 	mov.w	r6, #0
 80076a8:	196b      	adds	r3, r5, r5
 80076aa:	eb46 0406 	adc.w	r4, r6, r6
 80076ae:	461a      	mov	r2, r3
 80076b0:	4623      	mov	r3, r4
 80076b2:	f7f9 fac1 	bl	8000c38 <__aeabi_uldivmod>
 80076b6:	4603      	mov	r3, r0
 80076b8:	460c      	mov	r4, r1
 80076ba:	461a      	mov	r2, r3
 80076bc:	4b6a      	ldr	r3, [pc, #424]	; (8007868 <UART_SetConfig+0x384>)
 80076be:	fba3 1302 	umull	r1, r3, r3, r2
 80076c2:	095b      	lsrs	r3, r3, #5
 80076c4:	2164      	movs	r1, #100	; 0x64
 80076c6:	fb01 f303 	mul.w	r3, r1, r3
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	3332      	adds	r3, #50	; 0x32
 80076d0:	4a65      	ldr	r2, [pc, #404]	; (8007868 <UART_SetConfig+0x384>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	f003 0207 	and.w	r2, r3, #7
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4442      	add	r2, r8
 80076e2:	609a      	str	r2, [r3, #8]
 80076e4:	e26f      	b.n	8007bc6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076e6:	f7ff fe87 	bl	80073f8 <HAL_RCC_GetPCLK1Freq>
 80076ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	461d      	mov	r5, r3
 80076f0:	f04f 0600 	mov.w	r6, #0
 80076f4:	46a8      	mov	r8, r5
 80076f6:	46b1      	mov	r9, r6
 80076f8:	eb18 0308 	adds.w	r3, r8, r8
 80076fc:	eb49 0409 	adc.w	r4, r9, r9
 8007700:	4698      	mov	r8, r3
 8007702:	46a1      	mov	r9, r4
 8007704:	eb18 0805 	adds.w	r8, r8, r5
 8007708:	eb49 0906 	adc.w	r9, r9, r6
 800770c:	f04f 0100 	mov.w	r1, #0
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007718:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800771c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007720:	4688      	mov	r8, r1
 8007722:	4691      	mov	r9, r2
 8007724:	eb18 0005 	adds.w	r0, r8, r5
 8007728:	eb49 0106 	adc.w	r1, r9, r6
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	461d      	mov	r5, r3
 8007732:	f04f 0600 	mov.w	r6, #0
 8007736:	196b      	adds	r3, r5, r5
 8007738:	eb46 0406 	adc.w	r4, r6, r6
 800773c:	461a      	mov	r2, r3
 800773e:	4623      	mov	r3, r4
 8007740:	f7f9 fa7a 	bl	8000c38 <__aeabi_uldivmod>
 8007744:	4603      	mov	r3, r0
 8007746:	460c      	mov	r4, r1
 8007748:	461a      	mov	r2, r3
 800774a:	4b47      	ldr	r3, [pc, #284]	; (8007868 <UART_SetConfig+0x384>)
 800774c:	fba3 2302 	umull	r2, r3, r3, r2
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	461d      	mov	r5, r3
 800775a:	f04f 0600 	mov.w	r6, #0
 800775e:	46a9      	mov	r9, r5
 8007760:	46b2      	mov	sl, r6
 8007762:	eb19 0309 	adds.w	r3, r9, r9
 8007766:	eb4a 040a 	adc.w	r4, sl, sl
 800776a:	4699      	mov	r9, r3
 800776c:	46a2      	mov	sl, r4
 800776e:	eb19 0905 	adds.w	r9, r9, r5
 8007772:	eb4a 0a06 	adc.w	sl, sl, r6
 8007776:	f04f 0100 	mov.w	r1, #0
 800777a:	f04f 0200 	mov.w	r2, #0
 800777e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007782:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007786:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800778a:	4689      	mov	r9, r1
 800778c:	4692      	mov	sl, r2
 800778e:	eb19 0005 	adds.w	r0, r9, r5
 8007792:	eb4a 0106 	adc.w	r1, sl, r6
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	461d      	mov	r5, r3
 800779c:	f04f 0600 	mov.w	r6, #0
 80077a0:	196b      	adds	r3, r5, r5
 80077a2:	eb46 0406 	adc.w	r4, r6, r6
 80077a6:	461a      	mov	r2, r3
 80077a8:	4623      	mov	r3, r4
 80077aa:	f7f9 fa45 	bl	8000c38 <__aeabi_uldivmod>
 80077ae:	4603      	mov	r3, r0
 80077b0:	460c      	mov	r4, r1
 80077b2:	461a      	mov	r2, r3
 80077b4:	4b2c      	ldr	r3, [pc, #176]	; (8007868 <UART_SetConfig+0x384>)
 80077b6:	fba3 1302 	umull	r1, r3, r3, r2
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	2164      	movs	r1, #100	; 0x64
 80077be:	fb01 f303 	mul.w	r3, r1, r3
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	00db      	lsls	r3, r3, #3
 80077c6:	3332      	adds	r3, #50	; 0x32
 80077c8:	4a27      	ldr	r2, [pc, #156]	; (8007868 <UART_SetConfig+0x384>)
 80077ca:	fba2 2303 	umull	r2, r3, r2, r3
 80077ce:	095b      	lsrs	r3, r3, #5
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077d6:	4498      	add	r8, r3
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	461d      	mov	r5, r3
 80077dc:	f04f 0600 	mov.w	r6, #0
 80077e0:	46a9      	mov	r9, r5
 80077e2:	46b2      	mov	sl, r6
 80077e4:	eb19 0309 	adds.w	r3, r9, r9
 80077e8:	eb4a 040a 	adc.w	r4, sl, sl
 80077ec:	4699      	mov	r9, r3
 80077ee:	46a2      	mov	sl, r4
 80077f0:	eb19 0905 	adds.w	r9, r9, r5
 80077f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80077f8:	f04f 0100 	mov.w	r1, #0
 80077fc:	f04f 0200 	mov.w	r2, #0
 8007800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007804:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007808:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800780c:	4689      	mov	r9, r1
 800780e:	4692      	mov	sl, r2
 8007810:	eb19 0005 	adds.w	r0, r9, r5
 8007814:	eb4a 0106 	adc.w	r1, sl, r6
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	461d      	mov	r5, r3
 800781e:	f04f 0600 	mov.w	r6, #0
 8007822:	196b      	adds	r3, r5, r5
 8007824:	eb46 0406 	adc.w	r4, r6, r6
 8007828:	461a      	mov	r2, r3
 800782a:	4623      	mov	r3, r4
 800782c:	f7f9 fa04 	bl	8000c38 <__aeabi_uldivmod>
 8007830:	4603      	mov	r3, r0
 8007832:	460c      	mov	r4, r1
 8007834:	461a      	mov	r2, r3
 8007836:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <UART_SetConfig+0x384>)
 8007838:	fba3 1302 	umull	r1, r3, r3, r2
 800783c:	095b      	lsrs	r3, r3, #5
 800783e:	2164      	movs	r1, #100	; 0x64
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	3332      	adds	r3, #50	; 0x32
 800784a:	4a07      	ldr	r2, [pc, #28]	; (8007868 <UART_SetConfig+0x384>)
 800784c:	fba2 2303 	umull	r2, r3, r2, r3
 8007850:	095b      	lsrs	r3, r3, #5
 8007852:	f003 0207 	and.w	r2, r3, #7
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4442      	add	r2, r8
 800785c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800785e:	e1b2      	b.n	8007bc6 <UART_SetConfig+0x6e2>
 8007860:	40011000 	.word	0x40011000
 8007864:	40011400 	.word	0x40011400
 8007868:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4ad7      	ldr	r2, [pc, #860]	; (8007bd0 <UART_SetConfig+0x6ec>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d005      	beq.n	8007882 <UART_SetConfig+0x39e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4ad6      	ldr	r2, [pc, #856]	; (8007bd4 <UART_SetConfig+0x6f0>)
 800787c:	4293      	cmp	r3, r2
 800787e:	f040 80d1 	bne.w	8007a24 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007882:	f7ff fdcd 	bl	8007420 <HAL_RCC_GetPCLK2Freq>
 8007886:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	469a      	mov	sl, r3
 800788c:	f04f 0b00 	mov.w	fp, #0
 8007890:	46d0      	mov	r8, sl
 8007892:	46d9      	mov	r9, fp
 8007894:	eb18 0308 	adds.w	r3, r8, r8
 8007898:	eb49 0409 	adc.w	r4, r9, r9
 800789c:	4698      	mov	r8, r3
 800789e:	46a1      	mov	r9, r4
 80078a0:	eb18 080a 	adds.w	r8, r8, sl
 80078a4:	eb49 090b 	adc.w	r9, r9, fp
 80078a8:	f04f 0100 	mov.w	r1, #0
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078bc:	4688      	mov	r8, r1
 80078be:	4691      	mov	r9, r2
 80078c0:	eb1a 0508 	adds.w	r5, sl, r8
 80078c4:	eb4b 0609 	adc.w	r6, fp, r9
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	4619      	mov	r1, r3
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	f04f 0300 	mov.w	r3, #0
 80078d6:	f04f 0400 	mov.w	r4, #0
 80078da:	0094      	lsls	r4, r2, #2
 80078dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078e0:	008b      	lsls	r3, r1, #2
 80078e2:	461a      	mov	r2, r3
 80078e4:	4623      	mov	r3, r4
 80078e6:	4628      	mov	r0, r5
 80078e8:	4631      	mov	r1, r6
 80078ea:	f7f9 f9a5 	bl	8000c38 <__aeabi_uldivmod>
 80078ee:	4603      	mov	r3, r0
 80078f0:	460c      	mov	r4, r1
 80078f2:	461a      	mov	r2, r3
 80078f4:	4bb8      	ldr	r3, [pc, #736]	; (8007bd8 <UART_SetConfig+0x6f4>)
 80078f6:	fba3 2302 	umull	r2, r3, r3, r2
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	469b      	mov	fp, r3
 8007904:	f04f 0c00 	mov.w	ip, #0
 8007908:	46d9      	mov	r9, fp
 800790a:	46e2      	mov	sl, ip
 800790c:	eb19 0309 	adds.w	r3, r9, r9
 8007910:	eb4a 040a 	adc.w	r4, sl, sl
 8007914:	4699      	mov	r9, r3
 8007916:	46a2      	mov	sl, r4
 8007918:	eb19 090b 	adds.w	r9, r9, fp
 800791c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007920:	f04f 0100 	mov.w	r1, #0
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800792c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007930:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007934:	4689      	mov	r9, r1
 8007936:	4692      	mov	sl, r2
 8007938:	eb1b 0509 	adds.w	r5, fp, r9
 800793c:	eb4c 060a 	adc.w	r6, ip, sl
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4619      	mov	r1, r3
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	f04f 0300 	mov.w	r3, #0
 800794e:	f04f 0400 	mov.w	r4, #0
 8007952:	0094      	lsls	r4, r2, #2
 8007954:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007958:	008b      	lsls	r3, r1, #2
 800795a:	461a      	mov	r2, r3
 800795c:	4623      	mov	r3, r4
 800795e:	4628      	mov	r0, r5
 8007960:	4631      	mov	r1, r6
 8007962:	f7f9 f969 	bl	8000c38 <__aeabi_uldivmod>
 8007966:	4603      	mov	r3, r0
 8007968:	460c      	mov	r4, r1
 800796a:	461a      	mov	r2, r3
 800796c:	4b9a      	ldr	r3, [pc, #616]	; (8007bd8 <UART_SetConfig+0x6f4>)
 800796e:	fba3 1302 	umull	r1, r3, r3, r2
 8007972:	095b      	lsrs	r3, r3, #5
 8007974:	2164      	movs	r1, #100	; 0x64
 8007976:	fb01 f303 	mul.w	r3, r1, r3
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	3332      	adds	r3, #50	; 0x32
 8007980:	4a95      	ldr	r2, [pc, #596]	; (8007bd8 <UART_SetConfig+0x6f4>)
 8007982:	fba2 2303 	umull	r2, r3, r2, r3
 8007986:	095b      	lsrs	r3, r3, #5
 8007988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800798c:	4498      	add	r8, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	469b      	mov	fp, r3
 8007992:	f04f 0c00 	mov.w	ip, #0
 8007996:	46d9      	mov	r9, fp
 8007998:	46e2      	mov	sl, ip
 800799a:	eb19 0309 	adds.w	r3, r9, r9
 800799e:	eb4a 040a 	adc.w	r4, sl, sl
 80079a2:	4699      	mov	r9, r3
 80079a4:	46a2      	mov	sl, r4
 80079a6:	eb19 090b 	adds.w	r9, r9, fp
 80079aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079ae:	f04f 0100 	mov.w	r1, #0
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079c2:	4689      	mov	r9, r1
 80079c4:	4692      	mov	sl, r2
 80079c6:	eb1b 0509 	adds.w	r5, fp, r9
 80079ca:	eb4c 060a 	adc.w	r6, ip, sl
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	4619      	mov	r1, r3
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	f04f 0400 	mov.w	r4, #0
 80079e0:	0094      	lsls	r4, r2, #2
 80079e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079e6:	008b      	lsls	r3, r1, #2
 80079e8:	461a      	mov	r2, r3
 80079ea:	4623      	mov	r3, r4
 80079ec:	4628      	mov	r0, r5
 80079ee:	4631      	mov	r1, r6
 80079f0:	f7f9 f922 	bl	8000c38 <__aeabi_uldivmod>
 80079f4:	4603      	mov	r3, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	461a      	mov	r2, r3
 80079fa:	4b77      	ldr	r3, [pc, #476]	; (8007bd8 <UART_SetConfig+0x6f4>)
 80079fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	2164      	movs	r1, #100	; 0x64
 8007a04:	fb01 f303 	mul.w	r3, r1, r3
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	3332      	adds	r3, #50	; 0x32
 8007a0e:	4a72      	ldr	r2, [pc, #456]	; (8007bd8 <UART_SetConfig+0x6f4>)
 8007a10:	fba2 2303 	umull	r2, r3, r2, r3
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	f003 020f 	and.w	r2, r3, #15
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4442      	add	r2, r8
 8007a20:	609a      	str	r2, [r3, #8]
 8007a22:	e0d0      	b.n	8007bc6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a24:	f7ff fce8 	bl	80073f8 <HAL_RCC_GetPCLK1Freq>
 8007a28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	469a      	mov	sl, r3
 8007a2e:	f04f 0b00 	mov.w	fp, #0
 8007a32:	46d0      	mov	r8, sl
 8007a34:	46d9      	mov	r9, fp
 8007a36:	eb18 0308 	adds.w	r3, r8, r8
 8007a3a:	eb49 0409 	adc.w	r4, r9, r9
 8007a3e:	4698      	mov	r8, r3
 8007a40:	46a1      	mov	r9, r4
 8007a42:	eb18 080a 	adds.w	r8, r8, sl
 8007a46:	eb49 090b 	adc.w	r9, r9, fp
 8007a4a:	f04f 0100 	mov.w	r1, #0
 8007a4e:	f04f 0200 	mov.w	r2, #0
 8007a52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a5e:	4688      	mov	r8, r1
 8007a60:	4691      	mov	r9, r2
 8007a62:	eb1a 0508 	adds.w	r5, sl, r8
 8007a66:	eb4b 0609 	adc.w	r6, fp, r9
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	f04f 0300 	mov.w	r3, #0
 8007a78:	f04f 0400 	mov.w	r4, #0
 8007a7c:	0094      	lsls	r4, r2, #2
 8007a7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a82:	008b      	lsls	r3, r1, #2
 8007a84:	461a      	mov	r2, r3
 8007a86:	4623      	mov	r3, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	f7f9 f8d4 	bl	8000c38 <__aeabi_uldivmod>
 8007a90:	4603      	mov	r3, r0
 8007a92:	460c      	mov	r4, r1
 8007a94:	461a      	mov	r2, r3
 8007a96:	4b50      	ldr	r3, [pc, #320]	; (8007bd8 <UART_SetConfig+0x6f4>)
 8007a98:	fba3 2302 	umull	r2, r3, r3, r2
 8007a9c:	095b      	lsrs	r3, r3, #5
 8007a9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	469b      	mov	fp, r3
 8007aa6:	f04f 0c00 	mov.w	ip, #0
 8007aaa:	46d9      	mov	r9, fp
 8007aac:	46e2      	mov	sl, ip
 8007aae:	eb19 0309 	adds.w	r3, r9, r9
 8007ab2:	eb4a 040a 	adc.w	r4, sl, sl
 8007ab6:	4699      	mov	r9, r3
 8007ab8:	46a2      	mov	sl, r4
 8007aba:	eb19 090b 	adds.w	r9, r9, fp
 8007abe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ac2:	f04f 0100 	mov.w	r1, #0
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ace:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ad2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ad6:	4689      	mov	r9, r1
 8007ad8:	4692      	mov	sl, r2
 8007ada:	eb1b 0509 	adds.w	r5, fp, r9
 8007ade:	eb4c 060a 	adc.w	r6, ip, sl
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	f04f 0300 	mov.w	r3, #0
 8007af0:	f04f 0400 	mov.w	r4, #0
 8007af4:	0094      	lsls	r4, r2, #2
 8007af6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007afa:	008b      	lsls	r3, r1, #2
 8007afc:	461a      	mov	r2, r3
 8007afe:	4623      	mov	r3, r4
 8007b00:	4628      	mov	r0, r5
 8007b02:	4631      	mov	r1, r6
 8007b04:	f7f9 f898 	bl	8000c38 <__aeabi_uldivmod>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	4b32      	ldr	r3, [pc, #200]	; (8007bd8 <UART_SetConfig+0x6f4>)
 8007b10:	fba3 1302 	umull	r1, r3, r3, r2
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	2164      	movs	r1, #100	; 0x64
 8007b18:	fb01 f303 	mul.w	r3, r1, r3
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	3332      	adds	r3, #50	; 0x32
 8007b22:	4a2d      	ldr	r2, [pc, #180]	; (8007bd8 <UART_SetConfig+0x6f4>)
 8007b24:	fba2 2303 	umull	r2, r3, r2, r3
 8007b28:	095b      	lsrs	r3, r3, #5
 8007b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b2e:	4498      	add	r8, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	469b      	mov	fp, r3
 8007b34:	f04f 0c00 	mov.w	ip, #0
 8007b38:	46d9      	mov	r9, fp
 8007b3a:	46e2      	mov	sl, ip
 8007b3c:	eb19 0309 	adds.w	r3, r9, r9
 8007b40:	eb4a 040a 	adc.w	r4, sl, sl
 8007b44:	4699      	mov	r9, r3
 8007b46:	46a2      	mov	sl, r4
 8007b48:	eb19 090b 	adds.w	r9, r9, fp
 8007b4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b50:	f04f 0100 	mov.w	r1, #0
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b64:	4689      	mov	r9, r1
 8007b66:	4692      	mov	sl, r2
 8007b68:	eb1b 0509 	adds.w	r5, fp, r9
 8007b6c:	eb4c 060a 	adc.w	r6, ip, sl
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	4619      	mov	r1, r3
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	f04f 0400 	mov.w	r4, #0
 8007b82:	0094      	lsls	r4, r2, #2
 8007b84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b88:	008b      	lsls	r3, r1, #2
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	4623      	mov	r3, r4
 8007b8e:	4628      	mov	r0, r5
 8007b90:	4631      	mov	r1, r6
 8007b92:	f7f9 f851 	bl	8000c38 <__aeabi_uldivmod>
 8007b96:	4603      	mov	r3, r0
 8007b98:	460c      	mov	r4, r1
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <UART_SetConfig+0x6f4>)
 8007b9e:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	2164      	movs	r1, #100	; 0x64
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	3332      	adds	r3, #50	; 0x32
 8007bb0:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <UART_SetConfig+0x6f4>)
 8007bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb6:	095b      	lsrs	r3, r3, #5
 8007bb8:	f003 020f 	and.w	r2, r3, #15
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4442      	add	r2, r8
 8007bc2:	609a      	str	r2, [r3, #8]
}
 8007bc4:	e7ff      	b.n	8007bc6 <UART_SetConfig+0x6e2>
 8007bc6:	bf00      	nop
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd0:	40011000 	.word	0x40011000
 8007bd4:	40011400 	.word	0x40011400
 8007bd8:	51eb851f 	.word	0x51eb851f

08007bdc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bee:	2b84      	cmp	r3, #132	; 0x84
 8007bf0:	d005      	beq.n	8007bfe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007bf2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	3303      	adds	r3, #3
 8007bfc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c12:	f3ef 8305 	mrs	r3, IPSR
 8007c16:	607b      	str	r3, [r7, #4]
  return(result);
 8007c18:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bf14      	ite	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	2300      	moveq	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c34:	f000 fd12 	bl	800865c <vTaskStartScheduler>
  
  return osOK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c40:	b089      	sub	sp, #36	; 0x24
 8007c42:	af04      	add	r7, sp, #16
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d020      	beq.n	8007c92 <osThreadCreate+0x54>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01c      	beq.n	8007c92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685c      	ldr	r4, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681d      	ldr	r5, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691e      	ldr	r6, [r3, #16]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff ffb6 	bl	8007bdc <makeFreeRtosPriority>
 8007c70:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c7a:	9202      	str	r2, [sp, #8]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	9100      	str	r1, [sp, #0]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	4632      	mov	r2, r6
 8007c84:	4629      	mov	r1, r5
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 f91c 	bl	8007ec4 <xTaskCreateStatic>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e01c      	b.n	8007ccc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685c      	ldr	r4, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c9e:	b29e      	uxth	r6, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff ff98 	bl	8007bdc <makeFreeRtosPriority>
 8007cac:	4602      	mov	r2, r0
 8007cae:	f107 030c 	add.w	r3, r7, #12
 8007cb2:	9301      	str	r3, [sp, #4]
 8007cb4:	9200      	str	r2, [sp, #0]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	4632      	mov	r2, r6
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 f95a 	bl	8007f76 <xTaskCreate>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d001      	beq.n	8007ccc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e000      	b.n	8007cce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cd6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <osDelay+0x16>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	e000      	b.n	8007cee <osDelay+0x18>
 8007cec:	2301      	movs	r3, #1
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 fae8 	bl	80082c4 <vTaskDelay>
  
  return osOK;
 8007cf4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fb10 	bl	800832c <vTaskSuspend>
  
  return osOK;
 8007d0c:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8007d20:	f7ff ff74 	bl	8007c0c <inHandlerMode>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00e      	beq.n	8007d48 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fc26 	bl	800857c <xTaskResumeFromISR>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d10b      	bne.n	8007d4e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8007d36:	4b08      	ldr	r3, [pc, #32]	; (8007d58 <osThreadResume+0x40>)
 8007d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	e002      	b.n	8007d4e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fbbb 	bl	80084c4 <vTaskResume>
  }
  return osOK;
 8007d4e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f103 0208 	add.w	r2, r3, #8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f04f 32ff 	mov.w	r2, #4294967295
 8007d74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f103 0208 	add.w	r2, r3, #8
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f103 0208 	add.w	r2, r3, #8
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	601a      	str	r2, [r3, #0]
}
 8007df2:	bf00      	nop
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e14:	d103      	bne.n	8007e1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	e00c      	b.n	8007e38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3308      	adds	r3, #8
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	e002      	b.n	8007e2c <vListInsert+0x2e>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d2f6      	bcs.n	8007e26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	601a      	str	r2, [r3, #0]
}
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6892      	ldr	r2, [r2, #8]
 8007e86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6852      	ldr	r2, [r2, #4]
 8007e90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d103      	bne.n	8007ea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	1e5a      	subs	r2, r3, #1
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08e      	sub	sp, #56	; 0x38
 8007ec8:	af04      	add	r7, sp, #16
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	623b      	str	r3, [r7, #32]
 8007eea:	e7fe      	b.n	8007eea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <xTaskCreateStatic+0x42>
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	61fb      	str	r3, [r7, #28]
 8007f04:	e7fe      	b.n	8007f04 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f06:	2354      	movs	r3, #84	; 0x54
 8007f08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b54      	cmp	r3, #84	; 0x54
 8007f0e:	d009      	beq.n	8007f24 <xTaskCreateStatic+0x60>
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	e7fe      	b.n	8007f22 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01e      	beq.n	8007f68 <xTaskCreateStatic+0xa4>
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d01b      	beq.n	8007f68 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f42:	2300      	movs	r3, #0
 8007f44:	9303      	str	r3, [sp, #12]
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	9302      	str	r3, [sp, #8]
 8007f4a:	f107 0314 	add.w	r3, r7, #20
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f850 	bl	8008000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f62:	f000 f8cb 	bl	80080fc <prvAddNewTaskToReadyList>
 8007f66:	e001      	b.n	8007f6c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f6c:	697b      	ldr	r3, [r7, #20]
	}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3728      	adds	r7, #40	; 0x28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b08c      	sub	sp, #48	; 0x30
 8007f7a:	af04      	add	r7, sp, #16
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	603b      	str	r3, [r7, #0]
 8007f82:	4613      	mov	r3, r2
 8007f84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f86:	88fb      	ldrh	r3, [r7, #6]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 f930 	bl	80091f0 <pvPortMalloc>
 8007f90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00e      	beq.n	8007fb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007f98:	2054      	movs	r0, #84	; 0x54
 8007f9a:	f001 f929 	bl	80091f0 <pvPortMalloc>
 8007f9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	631a      	str	r2, [r3, #48]	; 0x30
 8007fac:	e005      	b.n	8007fba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fae:	6978      	ldr	r0, [r7, #20]
 8007fb0:	f001 f9e0 	bl	8009374 <vPortFree>
 8007fb4:	e001      	b.n	8007fba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d017      	beq.n	8007ff0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fc8:	88fa      	ldrh	r2, [r7, #6]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9303      	str	r3, [sp, #12]
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	9302      	str	r3, [sp, #8]
 8007fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f80e 	bl	8008000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fe4:	69f8      	ldr	r0, [r7, #28]
 8007fe6:	f000 f889 	bl	80080fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fea:	2301      	movs	r3, #1
 8007fec:	61bb      	str	r3, [r7, #24]
 8007fee:	e002      	b.n	8007ff6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008018:	3b01      	subs	r3, #1
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	f023 0307 	bic.w	r3, r3, #7
 8008026:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <prvInitialiseNewTask+0x46>
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	e7fe      	b.n	8008044 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008046:	2300      	movs	r3, #0
 8008048:	61fb      	str	r3, [r7, #28]
 800804a:	e012      	b.n	8008072 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	4413      	add	r3, r2
 8008052:	7819      	ldrb	r1, [r3, #0]
 8008054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	3334      	adds	r3, #52	; 0x34
 800805c:	460a      	mov	r2, r1
 800805e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4413      	add	r3, r2
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d006      	beq.n	800807a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	3301      	adds	r3, #1
 8008070:	61fb      	str	r3, [r7, #28]
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	2b0f      	cmp	r3, #15
 8008076:	d9e9      	bls.n	800804c <prvInitialiseNewTask+0x4c>
 8008078:	e000      	b.n	800807c <prvInitialiseNewTask+0x7c>
		{
			break;
 800807a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008086:	2b06      	cmp	r3, #6
 8008088:	d901      	bls.n	800808e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800808a:	2306      	movs	r3, #6
 800808c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008092:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008098:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	2200      	movs	r2, #0
 800809e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	3304      	adds	r3, #4
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff fe79 	bl	8007d9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	3318      	adds	r3, #24
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff fe74 	bl	8007d9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	f1c3 0207 	rsb	r2, r3, #7
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	2200      	movs	r2, #0
 80080ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	69b8      	ldr	r0, [r7, #24]
 80080de:	f000 fe47 	bl	8008d70 <pxPortInitialiseStack>
 80080e2:	4602      	mov	r2, r0
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080f4:	bf00      	nop
 80080f6:	3720      	adds	r7, #32
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008104:	f000 ff5a 	bl	8008fbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008108:	4b2a      	ldr	r3, [pc, #168]	; (80081b4 <prvAddNewTaskToReadyList+0xb8>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3301      	adds	r3, #1
 800810e:	4a29      	ldr	r2, [pc, #164]	; (80081b4 <prvAddNewTaskToReadyList+0xb8>)
 8008110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008112:	4b29      	ldr	r3, [pc, #164]	; (80081b8 <prvAddNewTaskToReadyList+0xbc>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d109      	bne.n	800812e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800811a:	4a27      	ldr	r2, [pc, #156]	; (80081b8 <prvAddNewTaskToReadyList+0xbc>)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008120:	4b24      	ldr	r3, [pc, #144]	; (80081b4 <prvAddNewTaskToReadyList+0xb8>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d110      	bne.n	800814a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008128:	f000 fcde 	bl	8008ae8 <prvInitialiseTaskLists>
 800812c:	e00d      	b.n	800814a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800812e:	4b23      	ldr	r3, [pc, #140]	; (80081bc <prvAddNewTaskToReadyList+0xc0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d109      	bne.n	800814a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008136:	4b20      	ldr	r3, [pc, #128]	; (80081b8 <prvAddNewTaskToReadyList+0xbc>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	429a      	cmp	r2, r3
 8008142:	d802      	bhi.n	800814a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008144:	4a1c      	ldr	r2, [pc, #112]	; (80081b8 <prvAddNewTaskToReadyList+0xbc>)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800814a:	4b1d      	ldr	r3, [pc, #116]	; (80081c0 <prvAddNewTaskToReadyList+0xc4>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3301      	adds	r3, #1
 8008150:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <prvAddNewTaskToReadyList+0xc4>)
 8008152:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	2201      	movs	r2, #1
 800815a:	409a      	lsls	r2, r3
 800815c:	4b19      	ldr	r3, [pc, #100]	; (80081c4 <prvAddNewTaskToReadyList+0xc8>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4313      	orrs	r3, r2
 8008162:	4a18      	ldr	r2, [pc, #96]	; (80081c4 <prvAddNewTaskToReadyList+0xc8>)
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <prvAddNewTaskToReadyList+0xcc>)
 8008174:	441a      	add	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3304      	adds	r3, #4
 800817a:	4619      	mov	r1, r3
 800817c:	4610      	mov	r0, r2
 800817e:	f7ff fe1a 	bl	8007db6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008182:	f000 ff49 	bl	8009018 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008186:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <prvAddNewTaskToReadyList+0xc0>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00e      	beq.n	80081ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800818e:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <prvAddNewTaskToReadyList+0xbc>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	429a      	cmp	r2, r3
 800819a:	d207      	bcs.n	80081ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800819c:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <prvAddNewTaskToReadyList+0xd0>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000424 	.word	0x20000424
 80081b8:	20000324 	.word	0x20000324
 80081bc:	20000430 	.word	0x20000430
 80081c0:	20000440 	.word	0x20000440
 80081c4:	2000042c 	.word	0x2000042c
 80081c8:	20000328 	.word	0x20000328
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08a      	sub	sp, #40	; 0x28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80081da:	2300      	movs	r3, #0
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d109      	bne.n	80081f8 <vTaskDelayUntil+0x28>
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e7fe      	b.n	80081f6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <vTaskDelayUntil+0x42>
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	e7fe      	b.n	8008210 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8008212:	4b29      	ldr	r3, [pc, #164]	; (80082b8 <vTaskDelayUntil+0xe8>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d009      	beq.n	800822e <vTaskDelayUntil+0x5e>
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	e7fe      	b.n	800822c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800822e:	f000 fa73 	bl	8008718 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008232:	4b22      	ldr	r3, [pc, #136]	; (80082bc <vTaskDelayUntil+0xec>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	4413      	add	r3, r2
 8008240:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a3a      	ldr	r2, [r7, #32]
 8008248:	429a      	cmp	r2, r3
 800824a:	d20b      	bcs.n	8008264 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69fa      	ldr	r2, [r7, #28]
 8008252:	429a      	cmp	r2, r3
 8008254:	d211      	bcs.n	800827a <vTaskDelayUntil+0xaa>
 8008256:	69fa      	ldr	r2, [r7, #28]
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	429a      	cmp	r2, r3
 800825c:	d90d      	bls.n	800827a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800825e:	2301      	movs	r3, #1
 8008260:	627b      	str	r3, [r7, #36]	; 0x24
 8008262:	e00a      	b.n	800827a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	69fa      	ldr	r2, [r7, #28]
 800826a:	429a      	cmp	r2, r3
 800826c:	d303      	bcc.n	8008276 <vTaskDelayUntil+0xa6>
 800826e:	69fa      	ldr	r2, [r7, #28]
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	429a      	cmp	r2, r3
 8008274:	d901      	bls.n	800827a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8008276:	2301      	movs	r3, #1
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	2b00      	cmp	r3, #0
 8008284:	d006      	beq.n	8008294 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2100      	movs	r1, #0
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fd08 	bl	8008ca4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008294:	f000 fa4e 	bl	8008734 <xTaskResumeAll>
 8008298:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d107      	bne.n	80082b0 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <vTaskDelayUntil+0xf0>)
 80082a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082b0:	bf00      	nop
 80082b2:	3728      	adds	r7, #40	; 0x28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	2000044c 	.word	0x2000044c
 80082bc:	20000428 	.word	0x20000428
 80082c0:	e000ed04 	.word	0xe000ed04

080082c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d016      	beq.n	8008304 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082d6:	4b13      	ldr	r3, [pc, #76]	; (8008324 <vTaskDelay+0x60>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d009      	beq.n	80082f2 <vTaskDelay+0x2e>
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	60bb      	str	r3, [r7, #8]
 80082f0:	e7fe      	b.n	80082f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80082f2:	f000 fa11 	bl	8008718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082f6:	2100      	movs	r1, #0
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fcd3 	bl	8008ca4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082fe:	f000 fa19 	bl	8008734 <xTaskResumeAll>
 8008302:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d107      	bne.n	800831a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800830a:	4b07      	ldr	r3, [pc, #28]	; (8008328 <vTaskDelay+0x64>)
 800830c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800831a:	bf00      	nop
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	2000044c 	.word	0x2000044c
 8008328:	e000ed04 	.word	0xe000ed04

0800832c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008334:	f000 fe42 	bl	8008fbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <vTaskSuspend+0x18>
 800833e:	4b3c      	ldr	r3, [pc, #240]	; (8008430 <vTaskSuspend+0x104>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	e000      	b.n	8008346 <vTaskSuspend+0x1a>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3304      	adds	r3, #4
 800834c:	4618      	mov	r0, r3
 800834e:	f7ff fd8f 	bl	8007e70 <uxListRemove>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d115      	bne.n	8008384 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835c:	4935      	ldr	r1, [pc, #212]	; (8008434 <vTaskSuspend+0x108>)
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <vTaskSuspend+0x58>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	2201      	movs	r2, #1
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	43da      	mvns	r2, r3
 800837a:	4b2f      	ldr	r3, [pc, #188]	; (8008438 <vTaskSuspend+0x10c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4013      	ands	r3, r2
 8008380:	4a2d      	ldr	r2, [pc, #180]	; (8008438 <vTaskSuspend+0x10c>)
 8008382:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	2b00      	cmp	r3, #0
 800838a:	d004      	beq.n	8008396 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3318      	adds	r3, #24
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff fd6d 	bl	8007e70 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3304      	adds	r3, #4
 800839a:	4619      	mov	r1, r3
 800839c:	4827      	ldr	r0, [pc, #156]	; (800843c <vTaskSuspend+0x110>)
 800839e:	f7ff fd0a 	bl	8007db6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d103      	bne.n	80083b6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80083b6:	f000 fe2f 	bl	8009018 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80083ba:	4b21      	ldr	r3, [pc, #132]	; (8008440 <vTaskSuspend+0x114>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80083c2:	f000 fdfb 	bl	8008fbc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80083c6:	f000 fc29 	bl	8008c1c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80083ca:	f000 fe25 	bl	8009018 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80083ce:	4b18      	ldr	r3, [pc, #96]	; (8008430 <vTaskSuspend+0x104>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d126      	bne.n	8008426 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80083d8:	4b19      	ldr	r3, [pc, #100]	; (8008440 <vTaskSuspend+0x114>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d016      	beq.n	800840e <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80083e0:	4b18      	ldr	r3, [pc, #96]	; (8008444 <vTaskSuspend+0x118>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d009      	beq.n	80083fc <vTaskSuspend+0xd0>
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	e7fe      	b.n	80083fa <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80083fc:	4b12      	ldr	r3, [pc, #72]	; (8008448 <vTaskSuspend+0x11c>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800840c:	e00b      	b.n	8008426 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800840e:	4b0b      	ldr	r3, [pc, #44]	; (800843c <vTaskSuspend+0x110>)
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b0e      	ldr	r3, [pc, #56]	; (800844c <vTaskSuspend+0x120>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d103      	bne.n	8008422 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <vTaskSuspend+0x104>)
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]
	}
 8008420:	e001      	b.n	8008426 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8008422:	f000 faef 	bl	8008a04 <vTaskSwitchContext>
	}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20000324 	.word	0x20000324
 8008434:	20000328 	.word	0x20000328
 8008438:	2000042c 	.word	0x2000042c
 800843c:	20000410 	.word	0x20000410
 8008440:	20000430 	.word	0x20000430
 8008444:	2000044c 	.word	0x2000044c
 8008448:	e000ed04 	.word	0xe000ed04
 800844c:	20000424 	.word	0x20000424

08008450 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d109      	bne.n	800847a <prvTaskIsTaskSuspended+0x2a>
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e7fe      	b.n	8008478 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	4a0f      	ldr	r2, [pc, #60]	; (80084bc <prvTaskIsTaskSuspended+0x6c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d101      	bne.n	8008488 <prvTaskIsTaskSuspended+0x38>
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <prvTaskIsTaskSuspended+0x3a>
 8008488:	2300      	movs	r3, #0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00f      	beq.n	80084ae <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008492:	4a0b      	ldr	r2, [pc, #44]	; (80084c0 <prvTaskIsTaskSuspended+0x70>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d00a      	beq.n	80084ae <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <prvTaskIsTaskSuspended+0x54>
 80084a0:	2301      	movs	r3, #1
 80084a2:	e000      	b.n	80084a6 <prvTaskIsTaskSuspended+0x56>
 80084a4:	2300      	movs	r3, #0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80084aa:	2301      	movs	r3, #1
 80084ac:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084ae:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80084b0:	4618      	mov	r0, r3
 80084b2:	371c      	adds	r7, #28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	20000410 	.word	0x20000410
 80084c0:	200003e4 	.word	0x200003e4

080084c4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d109      	bne.n	80084ea <vTaskResume+0x26>
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	60bb      	str	r3, [r7, #8]
 80084e8:	e7fe      	b.n	80084e8 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d039      	beq.n	8008564 <vTaskResume+0xa0>
 80084f0:	4b1e      	ldr	r3, [pc, #120]	; (800856c <vTaskResume+0xa8>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d034      	beq.n	8008564 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 80084fa:	f000 fd5f 	bl	8008fbc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff ffa6 	bl	8008450 <prvTaskIsTaskSuspended>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d02a      	beq.n	8008560 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3304      	adds	r3, #4
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fcae 	bl	8007e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	2201      	movs	r2, #1
 800851a:	409a      	lsls	r2, r3
 800851c:	4b14      	ldr	r3, [pc, #80]	; (8008570 <vTaskResume+0xac>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4313      	orrs	r3, r2
 8008522:	4a13      	ldr	r2, [pc, #76]	; (8008570 <vTaskResume+0xac>)
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4a10      	ldr	r2, [pc, #64]	; (8008574 <vTaskResume+0xb0>)
 8008534:	441a      	add	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3304      	adds	r3, #4
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f7ff fc3a 	bl	8007db6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <vTaskResume+0xa8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	429a      	cmp	r2, r3
 800854e:	d307      	bcc.n	8008560 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008550:	4b09      	ldr	r3, [pc, #36]	; (8008578 <vTaskResume+0xb4>)
 8008552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008560:	f000 fd5a 	bl	8009018 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008564:	bf00      	nop
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000324 	.word	0x20000324
 8008570:	2000042c 	.word	0x2000042c
 8008574:	20000328 	.word	0x20000328
 8008578:	e000ed04 	.word	0xe000ed04

0800857c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08a      	sub	sp, #40	; 0x28
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8008584:	2300      	movs	r3, #0
 8008586:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <xTaskResumeFromISR+0x2a>
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	61bb      	str	r3, [r7, #24]
 80085a4:	e7fe      	b.n	80085a4 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085a6:	f000 fde5 	bl	8009174 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085aa:	f3ef 8211 	mrs	r2, BASEPRI
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	617a      	str	r2, [r7, #20]
 80085c0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085c2:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085c4:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80085c6:	6a38      	ldr	r0, [r7, #32]
 80085c8:	f7ff ff42 	bl	8008450 <prvTaskIsTaskSuspended>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d02f      	beq.n	8008632 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d2:	4b1d      	ldr	r3, [pc, #116]	; (8008648 <xTaskResumeFromISR+0xcc>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d125      	bne.n	8008626 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085de:	4b1b      	ldr	r3, [pc, #108]	; (800864c <xTaskResumeFromISR+0xd0>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d301      	bcc.n	80085ec <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 80085e8:	2301      	movs	r3, #1
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff fc3d 	bl	8007e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	2201      	movs	r2, #1
 80085fc:	409a      	lsls	r2, r3
 80085fe:	4b14      	ldr	r3, [pc, #80]	; (8008650 <xTaskResumeFromISR+0xd4>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4313      	orrs	r3, r2
 8008604:	4a12      	ldr	r2, [pc, #72]	; (8008650 <xTaskResumeFromISR+0xd4>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4a0f      	ldr	r2, [pc, #60]	; (8008654 <xTaskResumeFromISR+0xd8>)
 8008616:	441a      	add	r2, r3
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7ff fbc9 	bl	8007db6 <vListInsertEnd>
 8008624:	e005      	b.n	8008632 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	3318      	adds	r3, #24
 800862a:	4619      	mov	r1, r3
 800862c:	480a      	ldr	r0, [pc, #40]	; (8008658 <xTaskResumeFromISR+0xdc>)
 800862e:	f7ff fbc2 	bl	8007db6 <vListInsertEnd>
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800863e:	4618      	mov	r0, r3
 8008640:	3728      	adds	r7, #40	; 0x28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	2000044c 	.word	0x2000044c
 800864c:	20000324 	.word	0x20000324
 8008650:	2000042c 	.word	0x2000042c
 8008654:	20000328 	.word	0x20000328
 8008658:	200003e4 	.word	0x200003e4

0800865c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08a      	sub	sp, #40	; 0x28
 8008660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008666:	2300      	movs	r3, #0
 8008668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800866a:	463a      	mov	r2, r7
 800866c:	1d39      	adds	r1, r7, #4
 800866e:	f107 0308 	add.w	r3, r7, #8
 8008672:	4618      	mov	r0, r3
 8008674:	f7f9 f9e4 	bl	8001a40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	9202      	str	r2, [sp, #8]
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	2300      	movs	r3, #0
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	2300      	movs	r3, #0
 8008688:	460a      	mov	r2, r1
 800868a:	491d      	ldr	r1, [pc, #116]	; (8008700 <vTaskStartScheduler+0xa4>)
 800868c:	481d      	ldr	r0, [pc, #116]	; (8008704 <vTaskStartScheduler+0xa8>)
 800868e:	f7ff fc19 	bl	8007ec4 <xTaskCreateStatic>
 8008692:	4602      	mov	r2, r0
 8008694:	4b1c      	ldr	r3, [pc, #112]	; (8008708 <vTaskStartScheduler+0xac>)
 8008696:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008698:	4b1b      	ldr	r3, [pc, #108]	; (8008708 <vTaskStartScheduler+0xac>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086a0:	2301      	movs	r3, #1
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	e001      	b.n	80086aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d115      	bne.n	80086dc <vTaskStartScheduler+0x80>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <vTaskStartScheduler+0xb0>)
 80086c4:	f04f 32ff 	mov.w	r2, #4294967295
 80086c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086ca:	4b11      	ldr	r3, [pc, #68]	; (8008710 <vTaskStartScheduler+0xb4>)
 80086cc:	2201      	movs	r2, #1
 80086ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80086d0:	4b10      	ldr	r3, [pc, #64]	; (8008714 <vTaskStartScheduler+0xb8>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086d6:	f000 fbd3 	bl	8008e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086da:	e00d      	b.n	80086f8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e2:	d109      	bne.n	80086f8 <vTaskStartScheduler+0x9c>
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	e7fe      	b.n	80086f6 <vTaskStartScheduler+0x9a>
}
 80086f8:	bf00      	nop
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	0800a7ec 	.word	0x0800a7ec
 8008704:	08008ab9 	.word	0x08008ab9
 8008708:	20000448 	.word	0x20000448
 800870c:	20000444 	.word	0x20000444
 8008710:	20000430 	.word	0x20000430
 8008714:	20000428 	.word	0x20000428

08008718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800871c:	4b04      	ldr	r3, [pc, #16]	; (8008730 <vTaskSuspendAll+0x18>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3301      	adds	r3, #1
 8008722:	4a03      	ldr	r2, [pc, #12]	; (8008730 <vTaskSuspendAll+0x18>)
 8008724:	6013      	str	r3, [r2, #0]
}
 8008726:	bf00      	nop
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	2000044c 	.word	0x2000044c

08008734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800873e:	2300      	movs	r3, #0
 8008740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008742:	4b41      	ldr	r3, [pc, #260]	; (8008848 <xTaskResumeAll+0x114>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d109      	bne.n	800875e <xTaskResumeAll+0x2a>
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	603b      	str	r3, [r7, #0]
 800875c:	e7fe      	b.n	800875c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800875e:	f000 fc2d 	bl	8008fbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008762:	4b39      	ldr	r3, [pc, #228]	; (8008848 <xTaskResumeAll+0x114>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3b01      	subs	r3, #1
 8008768:	4a37      	ldr	r2, [pc, #220]	; (8008848 <xTaskResumeAll+0x114>)
 800876a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800876c:	4b36      	ldr	r3, [pc, #216]	; (8008848 <xTaskResumeAll+0x114>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d161      	bne.n	8008838 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008774:	4b35      	ldr	r3, [pc, #212]	; (800884c <xTaskResumeAll+0x118>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d05d      	beq.n	8008838 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800877c:	e02e      	b.n	80087dc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800877e:	4b34      	ldr	r3, [pc, #208]	; (8008850 <xTaskResumeAll+0x11c>)
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3318      	adds	r3, #24
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fb70 	bl	8007e70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	3304      	adds	r3, #4
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff fb6b 	bl	8007e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879e:	2201      	movs	r2, #1
 80087a0:	409a      	lsls	r2, r3
 80087a2:	4b2c      	ldr	r3, [pc, #176]	; (8008854 <xTaskResumeAll+0x120>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	4a2a      	ldr	r2, [pc, #168]	; (8008854 <xTaskResumeAll+0x120>)
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4a27      	ldr	r2, [pc, #156]	; (8008858 <xTaskResumeAll+0x124>)
 80087ba:	441a      	add	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3304      	adds	r3, #4
 80087c0:	4619      	mov	r1, r3
 80087c2:	4610      	mov	r0, r2
 80087c4:	f7ff faf7 	bl	8007db6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087cc:	4b23      	ldr	r3, [pc, #140]	; (800885c <xTaskResumeAll+0x128>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d302      	bcc.n	80087dc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80087d6:	4b22      	ldr	r3, [pc, #136]	; (8008860 <xTaskResumeAll+0x12c>)
 80087d8:	2201      	movs	r2, #1
 80087da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087dc:	4b1c      	ldr	r3, [pc, #112]	; (8008850 <xTaskResumeAll+0x11c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1cc      	bne.n	800877e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087ea:	f000 fa17 	bl	8008c1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80087ee:	4b1d      	ldr	r3, [pc, #116]	; (8008864 <xTaskResumeAll+0x130>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d010      	beq.n	800881c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087fa:	f000 f847 	bl	800888c <xTaskIncrementTick>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008804:	4b16      	ldr	r3, [pc, #88]	; (8008860 <xTaskResumeAll+0x12c>)
 8008806:	2201      	movs	r2, #1
 8008808:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3b01      	subs	r3, #1
 800880e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1f1      	bne.n	80087fa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008816:	4b13      	ldr	r3, [pc, #76]	; (8008864 <xTaskResumeAll+0x130>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800881c:	4b10      	ldr	r3, [pc, #64]	; (8008860 <xTaskResumeAll+0x12c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d009      	beq.n	8008838 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008824:	2301      	movs	r3, #1
 8008826:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008828:	4b0f      	ldr	r3, [pc, #60]	; (8008868 <xTaskResumeAll+0x134>)
 800882a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008838:	f000 fbee 	bl	8009018 <vPortExitCritical>

	return xAlreadyYielded;
 800883c:	68bb      	ldr	r3, [r7, #8]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	2000044c 	.word	0x2000044c
 800884c:	20000424 	.word	0x20000424
 8008850:	200003e4 	.word	0x200003e4
 8008854:	2000042c 	.word	0x2000042c
 8008858:	20000328 	.word	0x20000328
 800885c:	20000324 	.word	0x20000324
 8008860:	20000438 	.word	0x20000438
 8008864:	20000434 	.word	0x20000434
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008872:	4b05      	ldr	r3, [pc, #20]	; (8008888 <xTaskGetTickCount+0x1c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008878:	687b      	ldr	r3, [r7, #4]
}
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	20000428 	.word	0x20000428

0800888c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008892:	2300      	movs	r3, #0
 8008894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008896:	4b50      	ldr	r3, [pc, #320]	; (80089d8 <xTaskIncrementTick+0x14c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	f040 808c 	bne.w	80089b8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088a0:	4b4e      	ldr	r3, [pc, #312]	; (80089dc <xTaskIncrementTick+0x150>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088a8:	4a4c      	ldr	r2, [pc, #304]	; (80089dc <xTaskIncrementTick+0x150>)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d11f      	bne.n	80088f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80088b4:	4b4a      	ldr	r3, [pc, #296]	; (80089e0 <xTaskIncrementTick+0x154>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <xTaskIncrementTick+0x46>
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	e7fe      	b.n	80088d0 <xTaskIncrementTick+0x44>
 80088d2:	4b43      	ldr	r3, [pc, #268]	; (80089e0 <xTaskIncrementTick+0x154>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	4b42      	ldr	r3, [pc, #264]	; (80089e4 <xTaskIncrementTick+0x158>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a40      	ldr	r2, [pc, #256]	; (80089e0 <xTaskIncrementTick+0x154>)
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	4a40      	ldr	r2, [pc, #256]	; (80089e4 <xTaskIncrementTick+0x158>)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	4b40      	ldr	r3, [pc, #256]	; (80089e8 <xTaskIncrementTick+0x15c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3301      	adds	r3, #1
 80088ec:	4a3e      	ldr	r2, [pc, #248]	; (80089e8 <xTaskIncrementTick+0x15c>)
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	f000 f994 	bl	8008c1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088f4:	4b3d      	ldr	r3, [pc, #244]	; (80089ec <xTaskIncrementTick+0x160>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d34d      	bcc.n	800899a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088fe:	4b38      	ldr	r3, [pc, #224]	; (80089e0 <xTaskIncrementTick+0x154>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <xTaskIncrementTick+0x80>
 8008908:	2301      	movs	r3, #1
 800890a:	e000      	b.n	800890e <xTaskIncrementTick+0x82>
 800890c:	2300      	movs	r3, #0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008912:	4b36      	ldr	r3, [pc, #216]	; (80089ec <xTaskIncrementTick+0x160>)
 8008914:	f04f 32ff 	mov.w	r2, #4294967295
 8008918:	601a      	str	r2, [r3, #0]
					break;
 800891a:	e03e      	b.n	800899a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800891c:	4b30      	ldr	r3, [pc, #192]	; (80089e0 <xTaskIncrementTick+0x154>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d203      	bcs.n	800893c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008934:	4a2d      	ldr	r2, [pc, #180]	; (80089ec <xTaskIncrementTick+0x160>)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6013      	str	r3, [r2, #0]
						break;
 800893a:	e02e      	b.n	800899a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	3304      	adds	r3, #4
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff fa95 	bl	8007e70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	3318      	adds	r3, #24
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff fa8c 	bl	8007e70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	2201      	movs	r2, #1
 800895e:	409a      	lsls	r2, r3
 8008960:	4b23      	ldr	r3, [pc, #140]	; (80089f0 <xTaskIncrementTick+0x164>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4313      	orrs	r3, r2
 8008966:	4a22      	ldr	r2, [pc, #136]	; (80089f0 <xTaskIncrementTick+0x164>)
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4a1f      	ldr	r2, [pc, #124]	; (80089f4 <xTaskIncrementTick+0x168>)
 8008978:	441a      	add	r2, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	3304      	adds	r3, #4
 800897e:	4619      	mov	r1, r3
 8008980:	4610      	mov	r0, r2
 8008982:	f7ff fa18 	bl	8007db6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898a:	4b1b      	ldr	r3, [pc, #108]	; (80089f8 <xTaskIncrementTick+0x16c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	429a      	cmp	r2, r3
 8008992:	d3b4      	bcc.n	80088fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008994:	2301      	movs	r3, #1
 8008996:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008998:	e7b1      	b.n	80088fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800899a:	4b17      	ldr	r3, [pc, #92]	; (80089f8 <xTaskIncrementTick+0x16c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	4914      	ldr	r1, [pc, #80]	; (80089f4 <xTaskIncrementTick+0x168>)
 80089a2:	4613      	mov	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	440b      	add	r3, r1
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d907      	bls.n	80089c2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80089b2:	2301      	movs	r3, #1
 80089b4:	617b      	str	r3, [r7, #20]
 80089b6:	e004      	b.n	80089c2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80089b8:	4b10      	ldr	r3, [pc, #64]	; (80089fc <xTaskIncrementTick+0x170>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3301      	adds	r3, #1
 80089be:	4a0f      	ldr	r2, [pc, #60]	; (80089fc <xTaskIncrementTick+0x170>)
 80089c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80089c2:	4b0f      	ldr	r3, [pc, #60]	; (8008a00 <xTaskIncrementTick+0x174>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80089ca:	2301      	movs	r3, #1
 80089cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80089ce:	697b      	ldr	r3, [r7, #20]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	2000044c 	.word	0x2000044c
 80089dc:	20000428 	.word	0x20000428
 80089e0:	200003dc 	.word	0x200003dc
 80089e4:	200003e0 	.word	0x200003e0
 80089e8:	2000043c 	.word	0x2000043c
 80089ec:	20000444 	.word	0x20000444
 80089f0:	2000042c 	.word	0x2000042c
 80089f4:	20000328 	.word	0x20000328
 80089f8:	20000324 	.word	0x20000324
 80089fc:	20000434 	.word	0x20000434
 8008a00:	20000438 	.word	0x20000438

08008a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a0a:	4b26      	ldr	r3, [pc, #152]	; (8008aa4 <vTaskSwitchContext+0xa0>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a12:	4b25      	ldr	r3, [pc, #148]	; (8008aa8 <vTaskSwitchContext+0xa4>)
 8008a14:	2201      	movs	r2, #1
 8008a16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a18:	e03e      	b.n	8008a98 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008a1a:	4b23      	ldr	r3, [pc, #140]	; (8008aa8 <vTaskSwitchContext+0xa4>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008a20:	4b22      	ldr	r3, [pc, #136]	; (8008aac <vTaskSwitchContext+0xa8>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	fab3 f383 	clz	r3, r3
 8008a2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	f1c3 031f 	rsb	r3, r3, #31
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	491e      	ldr	r1, [pc, #120]	; (8008ab0 <vTaskSwitchContext+0xac>)
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d109      	bne.n	8008a5e <vTaskSwitchContext+0x5a>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	607b      	str	r3, [r7, #4]
 8008a5c:	e7fe      	b.n	8008a5c <vTaskSwitchContext+0x58>
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	4613      	mov	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4a11      	ldr	r2, [pc, #68]	; (8008ab0 <vTaskSwitchContext+0xac>)
 8008a6a:	4413      	add	r3, r2
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	605a      	str	r2, [r3, #4]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d104      	bne.n	8008a8e <vTaskSwitchContext+0x8a>
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	605a      	str	r2, [r3, #4]
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	4a07      	ldr	r2, [pc, #28]	; (8008ab4 <vTaskSwitchContext+0xb0>)
 8008a96:	6013      	str	r3, [r2, #0]
}
 8008a98:	bf00      	nop
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	2000044c 	.word	0x2000044c
 8008aa8:	20000438 	.word	0x20000438
 8008aac:	2000042c 	.word	0x2000042c
 8008ab0:	20000328 	.word	0x20000328
 8008ab4:	20000324 	.word	0x20000324

08008ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ac0:	f000 f852 	bl	8008b68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ac4:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <prvIdleTask+0x28>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d9f9      	bls.n	8008ac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008acc:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <prvIdleTask+0x2c>)
 8008ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008adc:	e7f0      	b.n	8008ac0 <prvIdleTask+0x8>
 8008ade:	bf00      	nop
 8008ae0:	20000328 	.word	0x20000328
 8008ae4:	e000ed04 	.word	0xe000ed04

08008ae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aee:	2300      	movs	r3, #0
 8008af0:	607b      	str	r3, [r7, #4]
 8008af2:	e00c      	b.n	8008b0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4a12      	ldr	r2, [pc, #72]	; (8008b48 <prvInitialiseTaskLists+0x60>)
 8008b00:	4413      	add	r3, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff f92a 	bl	8007d5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	607b      	str	r3, [r7, #4]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b06      	cmp	r3, #6
 8008b12:	d9ef      	bls.n	8008af4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b14:	480d      	ldr	r0, [pc, #52]	; (8008b4c <prvInitialiseTaskLists+0x64>)
 8008b16:	f7ff f921 	bl	8007d5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b1a:	480d      	ldr	r0, [pc, #52]	; (8008b50 <prvInitialiseTaskLists+0x68>)
 8008b1c:	f7ff f91e 	bl	8007d5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b20:	480c      	ldr	r0, [pc, #48]	; (8008b54 <prvInitialiseTaskLists+0x6c>)
 8008b22:	f7ff f91b 	bl	8007d5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b26:	480c      	ldr	r0, [pc, #48]	; (8008b58 <prvInitialiseTaskLists+0x70>)
 8008b28:	f7ff f918 	bl	8007d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b2c:	480b      	ldr	r0, [pc, #44]	; (8008b5c <prvInitialiseTaskLists+0x74>)
 8008b2e:	f7ff f915 	bl	8007d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b32:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <prvInitialiseTaskLists+0x78>)
 8008b34:	4a05      	ldr	r2, [pc, #20]	; (8008b4c <prvInitialiseTaskLists+0x64>)
 8008b36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b38:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <prvInitialiseTaskLists+0x7c>)
 8008b3a:	4a05      	ldr	r2, [pc, #20]	; (8008b50 <prvInitialiseTaskLists+0x68>)
 8008b3c:	601a      	str	r2, [r3, #0]
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000328 	.word	0x20000328
 8008b4c:	200003b4 	.word	0x200003b4
 8008b50:	200003c8 	.word	0x200003c8
 8008b54:	200003e4 	.word	0x200003e4
 8008b58:	200003f8 	.word	0x200003f8
 8008b5c:	20000410 	.word	0x20000410
 8008b60:	200003dc 	.word	0x200003dc
 8008b64:	200003e0 	.word	0x200003e0

08008b68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b6e:	e019      	b.n	8008ba4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b70:	f000 fa24 	bl	8008fbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <prvCheckTasksWaitingTermination+0x4c>)
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff f975 	bl	8007e70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <prvCheckTasksWaitingTermination+0x50>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	4a0a      	ldr	r2, [pc, #40]	; (8008bb8 <prvCheckTasksWaitingTermination+0x50>)
 8008b8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b90:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <prvCheckTasksWaitingTermination+0x54>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	4a09      	ldr	r2, [pc, #36]	; (8008bbc <prvCheckTasksWaitingTermination+0x54>)
 8008b98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b9a:	f000 fa3d 	bl	8009018 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f80e 	bl	8008bc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ba4:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <prvCheckTasksWaitingTermination+0x54>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e1      	bne.n	8008b70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	200003f8 	.word	0x200003f8
 8008bb8:	20000424 	.word	0x20000424
 8008bbc:	2000040c 	.word	0x2000040c

08008bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d108      	bne.n	8008be4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fbcc 	bl	8009374 <vPortFree>
				vPortFree( pxTCB );
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fbc9 	bl	8009374 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008be2:	e017      	b.n	8008c14 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d103      	bne.n	8008bf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fbc0 	bl	8009374 <vPortFree>
	}
 8008bf4:	e00e      	b.n	8008c14 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d009      	beq.n	8008c14 <prvDeleteTCB+0x54>
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	e7fe      	b.n	8008c12 <prvDeleteTCB+0x52>
	}
 8008c14:	bf00      	nop
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c22:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <prvResetNextTaskUnblockTime+0x44>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <prvResetNextTaskUnblockTime+0x14>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <prvResetNextTaskUnblockTime+0x16>
 8008c30:	2300      	movs	r3, #0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c36:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <prvResetNextTaskUnblockTime+0x48>)
 8008c38:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c3e:	e008      	b.n	8008c52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <prvResetNextTaskUnblockTime+0x44>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	4a05      	ldr	r2, [pc, #20]	; (8008c64 <prvResetNextTaskUnblockTime+0x48>)
 8008c50:	6013      	str	r3, [r2, #0]
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	200003dc 	.word	0x200003dc
 8008c64:	20000444 	.word	0x20000444

08008c68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c6e:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <xTaskGetSchedulerState+0x34>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c76:	2301      	movs	r3, #1
 8008c78:	607b      	str	r3, [r7, #4]
 8008c7a:	e008      	b.n	8008c8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c7c:	4b08      	ldr	r3, [pc, #32]	; (8008ca0 <xTaskGetSchedulerState+0x38>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d102      	bne.n	8008c8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c84:	2302      	movs	r3, #2
 8008c86:	607b      	str	r3, [r7, #4]
 8008c88:	e001      	b.n	8008c8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c8e:	687b      	ldr	r3, [r7, #4]
	}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	20000430 	.word	0x20000430
 8008ca0:	2000044c 	.word	0x2000044c

08008ca4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cae:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb4:	4b28      	ldr	r3, [pc, #160]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff f8d8 	bl	8007e70 <uxListRemove>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10b      	bne.n	8008cde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008cc6:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	2201      	movs	r2, #1
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	43da      	mvns	r2, r3
 8008cd4:	4b21      	ldr	r3, [pc, #132]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	4a20      	ldr	r2, [pc, #128]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce4:	d10a      	bne.n	8008cfc <prvAddCurrentTaskToDelayedList+0x58>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cec:	4b1a      	ldr	r3, [pc, #104]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	481a      	ldr	r0, [pc, #104]	; (8008d60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008cf6:	f7ff f85e 	bl	8007db6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cfa:	e026      	b.n	8008d4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d04:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d209      	bcs.n	8008d28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d14:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7ff f86c 	bl	8007dfe <vListInsert>
}
 8008d26:	e010      	b.n	8008d4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d28:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3304      	adds	r3, #4
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f7ff f862 	bl	8007dfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d3a:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d202      	bcs.n	8008d4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008d44:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6013      	str	r3, [r2, #0]
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000428 	.word	0x20000428
 8008d58:	20000324 	.word	0x20000324
 8008d5c:	2000042c 	.word	0x2000042c
 8008d60:	20000410 	.word	0x20000410
 8008d64:	200003e0 	.word	0x200003e0
 8008d68:	200003dc 	.word	0x200003dc
 8008d6c:	20000444 	.word	0x20000444

08008d70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3b04      	subs	r3, #4
 8008d80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3b04      	subs	r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f023 0201 	bic.w	r2, r3, #1
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3b04      	subs	r3, #4
 8008d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008da0:	4a0c      	ldr	r2, [pc, #48]	; (8008dd4 <pxPortInitialiseStack+0x64>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3b14      	subs	r3, #20
 8008daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3b04      	subs	r3, #4
 8008db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f06f 0202 	mvn.w	r2, #2
 8008dbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3b20      	subs	r3, #32
 8008dc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	08008dd9 	.word	0x08008dd9

08008dd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008de2:	4b11      	ldr	r3, [pc, #68]	; (8008e28 <prvTaskExitError+0x50>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dea:	d009      	beq.n	8008e00 <prvTaskExitError+0x28>
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	e7fe      	b.n	8008dfe <prvTaskExitError+0x26>
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e12:	bf00      	nop
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0fc      	beq.n	8008e14 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e1a:	bf00      	nop
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	2000001c 	.word	0x2000001c
 8008e2c:	00000000 	.word	0x00000000

08008e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e30:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <pxCurrentTCBConst2>)
 8008e32:	6819      	ldr	r1, [r3, #0]
 8008e34:	6808      	ldr	r0, [r1, #0]
 8008e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3a:	f380 8809 	msr	PSP, r0
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f04f 0000 	mov.w	r0, #0
 8008e46:	f380 8811 	msr	BASEPRI, r0
 8008e4a:	4770      	bx	lr
 8008e4c:	f3af 8000 	nop.w

08008e50 <pxCurrentTCBConst2>:
 8008e50:	20000324 	.word	0x20000324
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e58:	4808      	ldr	r0, [pc, #32]	; (8008e7c <prvPortStartFirstTask+0x24>)
 8008e5a:	6800      	ldr	r0, [r0, #0]
 8008e5c:	6800      	ldr	r0, [r0, #0]
 8008e5e:	f380 8808 	msr	MSP, r0
 8008e62:	f04f 0000 	mov.w	r0, #0
 8008e66:	f380 8814 	msr	CONTROL, r0
 8008e6a:	b662      	cpsie	i
 8008e6c:	b661      	cpsie	f
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	df00      	svc	0
 8008e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e7a:	bf00      	nop
 8008e7c:	e000ed08 	.word	0xe000ed08

08008e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e86:	4b44      	ldr	r3, [pc, #272]	; (8008f98 <xPortStartScheduler+0x118>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a44      	ldr	r2, [pc, #272]	; (8008f9c <xPortStartScheduler+0x11c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d109      	bne.n	8008ea4 <xPortStartScheduler+0x24>
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	e7fe      	b.n	8008ea2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ea4:	4b3c      	ldr	r3, [pc, #240]	; (8008f98 <xPortStartScheduler+0x118>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a3d      	ldr	r2, [pc, #244]	; (8008fa0 <xPortStartScheduler+0x120>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d109      	bne.n	8008ec2 <xPortStartScheduler+0x42>
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	e7fe      	b.n	8008ec0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ec2:	4b38      	ldr	r3, [pc, #224]	; (8008fa4 <xPortStartScheduler+0x124>)
 8008ec4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	22ff      	movs	r2, #255	; 0xff
 8008ed2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	4b30      	ldr	r3, [pc, #192]	; (8008fa8 <xPortStartScheduler+0x128>)
 8008ee8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008eea:	4b30      	ldr	r3, [pc, #192]	; (8008fac <xPortStartScheduler+0x12c>)
 8008eec:	2207      	movs	r2, #7
 8008eee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ef0:	e009      	b.n	8008f06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008ef2:	4b2e      	ldr	r3, [pc, #184]	; (8008fac <xPortStartScheduler+0x12c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	4a2c      	ldr	r2, [pc, #176]	; (8008fac <xPortStartScheduler+0x12c>)
 8008efa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0e:	2b80      	cmp	r3, #128	; 0x80
 8008f10:	d0ef      	beq.n	8008ef2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f12:	4b26      	ldr	r3, [pc, #152]	; (8008fac <xPortStartScheduler+0x12c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f1c3 0307 	rsb	r3, r3, #7
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d009      	beq.n	8008f32 <xPortStartScheduler+0xb2>
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	60bb      	str	r3, [r7, #8]
 8008f30:	e7fe      	b.n	8008f30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f32:	4b1e      	ldr	r3, [pc, #120]	; (8008fac <xPortStartScheduler+0x12c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	021b      	lsls	r3, r3, #8
 8008f38:	4a1c      	ldr	r2, [pc, #112]	; (8008fac <xPortStartScheduler+0x12c>)
 8008f3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f3c:	4b1b      	ldr	r3, [pc, #108]	; (8008fac <xPortStartScheduler+0x12c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f44:	4a19      	ldr	r2, [pc, #100]	; (8008fac <xPortStartScheduler+0x12c>)
 8008f46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f50:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <xPortStartScheduler+0x130>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a16      	ldr	r2, [pc, #88]	; (8008fb0 <xPortStartScheduler+0x130>)
 8008f56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f5c:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <xPortStartScheduler+0x130>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a13      	ldr	r2, [pc, #76]	; (8008fb0 <xPortStartScheduler+0x130>)
 8008f62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f68:	f000 f8d6 	bl	8009118 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f6c:	4b11      	ldr	r3, [pc, #68]	; (8008fb4 <xPortStartScheduler+0x134>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f72:	f000 f8f5 	bl	8009160 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f76:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <xPortStartScheduler+0x138>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a0f      	ldr	r2, [pc, #60]	; (8008fb8 <xPortStartScheduler+0x138>)
 8008f7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f82:	f7ff ff69 	bl	8008e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f86:	f7ff fd3d 	bl	8008a04 <vTaskSwitchContext>
	prvTaskExitError();
 8008f8a:	f7ff ff25 	bl	8008dd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3718      	adds	r7, #24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	e000ed00 	.word	0xe000ed00
 8008f9c:	410fc271 	.word	0x410fc271
 8008fa0:	410fc270 	.word	0x410fc270
 8008fa4:	e000e400 	.word	0xe000e400
 8008fa8:	20000450 	.word	0x20000450
 8008fac:	20000454 	.word	0x20000454
 8008fb0:	e000ed20 	.word	0xe000ed20
 8008fb4:	2000001c 	.word	0x2000001c
 8008fb8:	e000ef34 	.word	0xe000ef34

08008fbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fd4:	4b0e      	ldr	r3, [pc, #56]	; (8009010 <vPortEnterCritical+0x54>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	4a0d      	ldr	r2, [pc, #52]	; (8009010 <vPortEnterCritical+0x54>)
 8008fdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fde:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <vPortEnterCritical+0x54>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d10e      	bne.n	8009004 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	; (8009014 <vPortEnterCritical+0x58>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d009      	beq.n	8009004 <vPortEnterCritical+0x48>
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	603b      	str	r3, [r7, #0]
 8009002:	e7fe      	b.n	8009002 <vPortEnterCritical+0x46>
	}
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	2000001c 	.word	0x2000001c
 8009014:	e000ed04 	.word	0xe000ed04

08009018 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800901e:	4b11      	ldr	r3, [pc, #68]	; (8009064 <vPortExitCritical+0x4c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <vPortExitCritical+0x22>
 8009026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	607b      	str	r3, [r7, #4]
 8009038:	e7fe      	b.n	8009038 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800903a:	4b0a      	ldr	r3, [pc, #40]	; (8009064 <vPortExitCritical+0x4c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3b01      	subs	r3, #1
 8009040:	4a08      	ldr	r2, [pc, #32]	; (8009064 <vPortExitCritical+0x4c>)
 8009042:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009044:	4b07      	ldr	r3, [pc, #28]	; (8009064 <vPortExitCritical+0x4c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d104      	bne.n	8009056 <vPortExitCritical+0x3e>
 800904c:	2300      	movs	r3, #0
 800904e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	2000001c 	.word	0x2000001c
	...

08009070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009070:	f3ef 8009 	mrs	r0, PSP
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <pxCurrentTCBConst>)
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	f01e 0f10 	tst.w	lr, #16
 8009080:	bf08      	it	eq
 8009082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908a:	6010      	str	r0, [r2, #0]
 800908c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009094:	f380 8811 	msr	BASEPRI, r0
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f7ff fcb0 	bl	8008a04 <vTaskSwitchContext>
 80090a4:	f04f 0000 	mov.w	r0, #0
 80090a8:	f380 8811 	msr	BASEPRI, r0
 80090ac:	bc09      	pop	{r0, r3}
 80090ae:	6819      	ldr	r1, [r3, #0]
 80090b0:	6808      	ldr	r0, [r1, #0]
 80090b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b6:	f01e 0f10 	tst.w	lr, #16
 80090ba:	bf08      	it	eq
 80090bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090c0:	f380 8809 	msr	PSP, r0
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	f3af 8000 	nop.w

080090d0 <pxCurrentTCBConst>:
 80090d0:	20000324 	.word	0x20000324
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop

080090d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090f0:	f7ff fbcc 	bl	800888c <xTaskIncrementTick>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090fa:	4b06      	ldr	r3, [pc, #24]	; (8009114 <xPortSysTickHandler+0x3c>)
 80090fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	2300      	movs	r3, #0
 8009104:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	e000ed04 	.word	0xe000ed04

08009118 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009118:	b480      	push	{r7}
 800911a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800911c:	4b0b      	ldr	r3, [pc, #44]	; (800914c <vPortSetupTimerInterrupt+0x34>)
 800911e:	2200      	movs	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009122:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <vPortSetupTimerInterrupt+0x38>)
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009128:	4b0a      	ldr	r3, [pc, #40]	; (8009154 <vPortSetupTimerInterrupt+0x3c>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a0a      	ldr	r2, [pc, #40]	; (8009158 <vPortSetupTimerInterrupt+0x40>)
 800912e:	fba2 2303 	umull	r2, r3, r2, r3
 8009132:	099b      	lsrs	r3, r3, #6
 8009134:	4a09      	ldr	r2, [pc, #36]	; (800915c <vPortSetupTimerInterrupt+0x44>)
 8009136:	3b01      	subs	r3, #1
 8009138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800913a:	4b04      	ldr	r3, [pc, #16]	; (800914c <vPortSetupTimerInterrupt+0x34>)
 800913c:	2207      	movs	r2, #7
 800913e:	601a      	str	r2, [r3, #0]
}
 8009140:	bf00      	nop
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	e000e010 	.word	0xe000e010
 8009150:	e000e018 	.word	0xe000e018
 8009154:	20000010 	.word	0x20000010
 8009158:	10624dd3 	.word	0x10624dd3
 800915c:	e000e014 	.word	0xe000e014

08009160 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009160:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009170 <vPortEnableVFP+0x10>
 8009164:	6801      	ldr	r1, [r0, #0]
 8009166:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800916a:	6001      	str	r1, [r0, #0]
 800916c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800916e:	bf00      	nop
 8009170:	e000ed88 	.word	0xe000ed88

08009174 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800917a:	f3ef 8305 	mrs	r3, IPSR
 800917e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b0f      	cmp	r3, #15
 8009184:	d913      	bls.n	80091ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009186:	4a16      	ldr	r2, [pc, #88]	; (80091e0 <vPortValidateInterruptPriority+0x6c>)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4413      	add	r3, r2
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009190:	4b14      	ldr	r3, [pc, #80]	; (80091e4 <vPortValidateInterruptPriority+0x70>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	7afa      	ldrb	r2, [r7, #11]
 8009196:	429a      	cmp	r2, r3
 8009198:	d209      	bcs.n	80091ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	607b      	str	r3, [r7, #4]
 80091ac:	e7fe      	b.n	80091ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091ae:	4b0e      	ldr	r3, [pc, #56]	; (80091e8 <vPortValidateInterruptPriority+0x74>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091b6:	4b0d      	ldr	r3, [pc, #52]	; (80091ec <vPortValidateInterruptPriority+0x78>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d909      	bls.n	80091d2 <vPortValidateInterruptPriority+0x5e>
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	e7fe      	b.n	80091d0 <vPortValidateInterruptPriority+0x5c>
	}
 80091d2:	bf00      	nop
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	e000e3f0 	.word	0xe000e3f0
 80091e4:	20000450 	.word	0x20000450
 80091e8:	e000ed0c 	.word	0xe000ed0c
 80091ec:	20000454 	.word	0x20000454

080091f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08a      	sub	sp, #40	; 0x28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091f8:	2300      	movs	r3, #0
 80091fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091fc:	f7ff fa8c 	bl	8008718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009200:	4b57      	ldr	r3, [pc, #348]	; (8009360 <pvPortMalloc+0x170>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009208:	f000 f90c 	bl	8009424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800920c:	4b55      	ldr	r3, [pc, #340]	; (8009364 <pvPortMalloc+0x174>)
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4013      	ands	r3, r2
 8009214:	2b00      	cmp	r3, #0
 8009216:	f040 808c 	bne.w	8009332 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01c      	beq.n	800925a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009220:	2208      	movs	r2, #8
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4413      	add	r3, r2
 8009226:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f003 0307 	and.w	r3, r3, #7
 800922e:	2b00      	cmp	r3, #0
 8009230:	d013      	beq.n	800925a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f023 0307 	bic.w	r3, r3, #7
 8009238:	3308      	adds	r3, #8
 800923a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	2b00      	cmp	r3, #0
 8009244:	d009      	beq.n	800925a <pvPortMalloc+0x6a>
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	617b      	str	r3, [r7, #20]
 8009258:	e7fe      	b.n	8009258 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d068      	beq.n	8009332 <pvPortMalloc+0x142>
 8009260:	4b41      	ldr	r3, [pc, #260]	; (8009368 <pvPortMalloc+0x178>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	429a      	cmp	r2, r3
 8009268:	d863      	bhi.n	8009332 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800926a:	4b40      	ldr	r3, [pc, #256]	; (800936c <pvPortMalloc+0x17c>)
 800926c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800926e:	4b3f      	ldr	r3, [pc, #252]	; (800936c <pvPortMalloc+0x17c>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009274:	e004      	b.n	8009280 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	d903      	bls.n	8009292 <pvPortMalloc+0xa2>
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1f1      	bne.n	8009276 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009292:	4b33      	ldr	r3, [pc, #204]	; (8009360 <pvPortMalloc+0x170>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009298:	429a      	cmp	r2, r3
 800929a:	d04a      	beq.n	8009332 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2208      	movs	r2, #8
 80092a2:	4413      	add	r3, r2
 80092a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	1ad2      	subs	r2, r2, r3
 80092b6:	2308      	movs	r3, #8
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d91e      	bls.n	80092fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4413      	add	r3, r2
 80092c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d009      	beq.n	80092e4 <pvPortMalloc+0xf4>
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	613b      	str	r3, [r7, #16]
 80092e2:	e7fe      	b.n	80092e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	1ad2      	subs	r2, r2, r3
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092f6:	69b8      	ldr	r0, [r7, #24]
 80092f8:	f000 f8f6 	bl	80094e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092fc:	4b1a      	ldr	r3, [pc, #104]	; (8009368 <pvPortMalloc+0x178>)
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	4a18      	ldr	r2, [pc, #96]	; (8009368 <pvPortMalloc+0x178>)
 8009308:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800930a:	4b17      	ldr	r3, [pc, #92]	; (8009368 <pvPortMalloc+0x178>)
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	4b18      	ldr	r3, [pc, #96]	; (8009370 <pvPortMalloc+0x180>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d203      	bcs.n	800931e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009316:	4b14      	ldr	r3, [pc, #80]	; (8009368 <pvPortMalloc+0x178>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a15      	ldr	r2, [pc, #84]	; (8009370 <pvPortMalloc+0x180>)
 800931c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	4b10      	ldr	r3, [pc, #64]	; (8009364 <pvPortMalloc+0x174>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	431a      	orrs	r2, r3
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009332:	f7ff f9ff 	bl	8008734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	2b00      	cmp	r3, #0
 800933e:	d009      	beq.n	8009354 <pvPortMalloc+0x164>
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	e7fe      	b.n	8009352 <pvPortMalloc+0x162>
	return pvReturn;
 8009354:	69fb      	ldr	r3, [r7, #28]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3728      	adds	r7, #40	; 0x28
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20004060 	.word	0x20004060
 8009364:	2000406c 	.word	0x2000406c
 8009368:	20004064 	.word	0x20004064
 800936c:	20004058 	.word	0x20004058
 8009370:	20004068 	.word	0x20004068

08009374 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d046      	beq.n	8009414 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009386:	2308      	movs	r3, #8
 8009388:	425b      	negs	r3, r3
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	4413      	add	r3, r2
 800938e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	4b20      	ldr	r3, [pc, #128]	; (800941c <vPortFree+0xa8>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4013      	ands	r3, r2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d109      	bne.n	80093b6 <vPortFree+0x42>
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	e7fe      	b.n	80093b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <vPortFree+0x5e>
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	60bb      	str	r3, [r7, #8]
 80093d0:	e7fe      	b.n	80093d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	4b11      	ldr	r3, [pc, #68]	; (800941c <vPortFree+0xa8>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4013      	ands	r3, r2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d019      	beq.n	8009414 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d115      	bne.n	8009414 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	4b0b      	ldr	r3, [pc, #44]	; (800941c <vPortFree+0xa8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	43db      	mvns	r3, r3
 80093f2:	401a      	ands	r2, r3
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093f8:	f7ff f98e 	bl	8008718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	4b07      	ldr	r3, [pc, #28]	; (8009420 <vPortFree+0xac>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4413      	add	r3, r2
 8009406:	4a06      	ldr	r2, [pc, #24]	; (8009420 <vPortFree+0xac>)
 8009408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800940a:	6938      	ldr	r0, [r7, #16]
 800940c:	f000 f86c 	bl	80094e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009410:	f7ff f990 	bl	8008734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009414:	bf00      	nop
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	2000406c 	.word	0x2000406c
 8009420:	20004064 	.word	0x20004064

08009424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800942a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800942e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009430:	4b27      	ldr	r3, [pc, #156]	; (80094d0 <prvHeapInit+0xac>)
 8009432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00c      	beq.n	8009458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3307      	adds	r3, #7
 8009442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0307 	bic.w	r3, r3, #7
 800944a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	4a1f      	ldr	r2, [pc, #124]	; (80094d0 <prvHeapInit+0xac>)
 8009454:	4413      	add	r3, r2
 8009456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800945c:	4a1d      	ldr	r2, [pc, #116]	; (80094d4 <prvHeapInit+0xb0>)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009462:	4b1c      	ldr	r3, [pc, #112]	; (80094d4 <prvHeapInit+0xb0>)
 8009464:	2200      	movs	r2, #0
 8009466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	4413      	add	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009470:	2208      	movs	r2, #8
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	1a9b      	subs	r3, r3, r2
 8009476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0307 	bic.w	r3, r3, #7
 800947e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4a15      	ldr	r2, [pc, #84]	; (80094d8 <prvHeapInit+0xb4>)
 8009484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009486:	4b14      	ldr	r3, [pc, #80]	; (80094d8 <prvHeapInit+0xb4>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2200      	movs	r2, #0
 800948c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800948e:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <prvHeapInit+0xb4>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2200      	movs	r2, #0
 8009494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	1ad2      	subs	r2, r2, r3
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094a4:	4b0c      	ldr	r3, [pc, #48]	; (80094d8 <prvHeapInit+0xb4>)
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	4a0a      	ldr	r2, [pc, #40]	; (80094dc <prvHeapInit+0xb8>)
 80094b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	4a09      	ldr	r2, [pc, #36]	; (80094e0 <prvHeapInit+0xbc>)
 80094ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094bc:	4b09      	ldr	r3, [pc, #36]	; (80094e4 <prvHeapInit+0xc0>)
 80094be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094c2:	601a      	str	r2, [r3, #0]
}
 80094c4:	bf00      	nop
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	20000458 	.word	0x20000458
 80094d4:	20004058 	.word	0x20004058
 80094d8:	20004060 	.word	0x20004060
 80094dc:	20004068 	.word	0x20004068
 80094e0:	20004064 	.word	0x20004064
 80094e4:	2000406c 	.word	0x2000406c

080094e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094f0:	4b28      	ldr	r3, [pc, #160]	; (8009594 <prvInsertBlockIntoFreeList+0xac>)
 80094f2:	60fb      	str	r3, [r7, #12]
 80094f4:	e002      	b.n	80094fc <prvInsertBlockIntoFreeList+0x14>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	60fb      	str	r3, [r7, #12]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	429a      	cmp	r2, r3
 8009504:	d8f7      	bhi.n	80094f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	4413      	add	r3, r2
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	d108      	bne.n	800952a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	441a      	add	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	441a      	add	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	429a      	cmp	r2, r3
 800953c:	d118      	bne.n	8009570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	4b15      	ldr	r3, [pc, #84]	; (8009598 <prvInsertBlockIntoFreeList+0xb0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d00d      	beq.n	8009566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	441a      	add	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	e008      	b.n	8009578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009566:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <prvInsertBlockIntoFreeList+0xb0>)
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	601a      	str	r2, [r3, #0]
 800956e:	e003      	b.n	8009578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	429a      	cmp	r2, r3
 800957e:	d002      	beq.n	8009586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009586:	bf00      	nop
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20004058 	.word	0x20004058
 8009598:	20004060 	.word	0x20004060

0800959c <__errno>:
 800959c:	4b01      	ldr	r3, [pc, #4]	; (80095a4 <__errno+0x8>)
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20000020 	.word	0x20000020

080095a8 <__libc_init_array>:
 80095a8:	b570      	push	{r4, r5, r6, lr}
 80095aa:	4e0d      	ldr	r6, [pc, #52]	; (80095e0 <__libc_init_array+0x38>)
 80095ac:	4c0d      	ldr	r4, [pc, #52]	; (80095e4 <__libc_init_array+0x3c>)
 80095ae:	1ba4      	subs	r4, r4, r6
 80095b0:	10a4      	asrs	r4, r4, #2
 80095b2:	2500      	movs	r5, #0
 80095b4:	42a5      	cmp	r5, r4
 80095b6:	d109      	bne.n	80095cc <__libc_init_array+0x24>
 80095b8:	4e0b      	ldr	r6, [pc, #44]	; (80095e8 <__libc_init_array+0x40>)
 80095ba:	4c0c      	ldr	r4, [pc, #48]	; (80095ec <__libc_init_array+0x44>)
 80095bc:	f000 ffca 	bl	800a554 <_init>
 80095c0:	1ba4      	subs	r4, r4, r6
 80095c2:	10a4      	asrs	r4, r4, #2
 80095c4:	2500      	movs	r5, #0
 80095c6:	42a5      	cmp	r5, r4
 80095c8:	d105      	bne.n	80095d6 <__libc_init_array+0x2e>
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
 80095cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095d0:	4798      	blx	r3
 80095d2:	3501      	adds	r5, #1
 80095d4:	e7ee      	b.n	80095b4 <__libc_init_array+0xc>
 80095d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095da:	4798      	blx	r3
 80095dc:	3501      	adds	r5, #1
 80095de:	e7f2      	b.n	80095c6 <__libc_init_array+0x1e>
 80095e0:	0800a880 	.word	0x0800a880
 80095e4:	0800a880 	.word	0x0800a880
 80095e8:	0800a880 	.word	0x0800a880
 80095ec:	0800a884 	.word	0x0800a884

080095f0 <__itoa>:
 80095f0:	1e93      	subs	r3, r2, #2
 80095f2:	2b22      	cmp	r3, #34	; 0x22
 80095f4:	b510      	push	{r4, lr}
 80095f6:	460c      	mov	r4, r1
 80095f8:	d904      	bls.n	8009604 <__itoa+0x14>
 80095fa:	2300      	movs	r3, #0
 80095fc:	700b      	strb	r3, [r1, #0]
 80095fe:	461c      	mov	r4, r3
 8009600:	4620      	mov	r0, r4
 8009602:	bd10      	pop	{r4, pc}
 8009604:	2a0a      	cmp	r2, #10
 8009606:	d109      	bne.n	800961c <__itoa+0x2c>
 8009608:	2800      	cmp	r0, #0
 800960a:	da07      	bge.n	800961c <__itoa+0x2c>
 800960c:	232d      	movs	r3, #45	; 0x2d
 800960e:	700b      	strb	r3, [r1, #0]
 8009610:	4240      	negs	r0, r0
 8009612:	2101      	movs	r1, #1
 8009614:	4421      	add	r1, r4
 8009616:	f000 f839 	bl	800968c <__utoa>
 800961a:	e7f1      	b.n	8009600 <__itoa+0x10>
 800961c:	2100      	movs	r1, #0
 800961e:	e7f9      	b.n	8009614 <__itoa+0x24>

08009620 <itoa>:
 8009620:	f7ff bfe6 	b.w	80095f0 <__itoa>

08009624 <memcpy>:
 8009624:	b510      	push	{r4, lr}
 8009626:	1e43      	subs	r3, r0, #1
 8009628:	440a      	add	r2, r1
 800962a:	4291      	cmp	r1, r2
 800962c:	d100      	bne.n	8009630 <memcpy+0xc>
 800962e:	bd10      	pop	{r4, pc}
 8009630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009638:	e7f7      	b.n	800962a <memcpy+0x6>

0800963a <memset>:
 800963a:	4402      	add	r2, r0
 800963c:	4603      	mov	r3, r0
 800963e:	4293      	cmp	r3, r2
 8009640:	d100      	bne.n	8009644 <memset+0xa>
 8009642:	4770      	bx	lr
 8009644:	f803 1b01 	strb.w	r1, [r3], #1
 8009648:	e7f9      	b.n	800963e <memset+0x4>
	...

0800964c <siprintf>:
 800964c:	b40e      	push	{r1, r2, r3}
 800964e:	b500      	push	{lr}
 8009650:	b09c      	sub	sp, #112	; 0x70
 8009652:	ab1d      	add	r3, sp, #116	; 0x74
 8009654:	9002      	str	r0, [sp, #8]
 8009656:	9006      	str	r0, [sp, #24]
 8009658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800965c:	4809      	ldr	r0, [pc, #36]	; (8009684 <siprintf+0x38>)
 800965e:	9107      	str	r1, [sp, #28]
 8009660:	9104      	str	r1, [sp, #16]
 8009662:	4909      	ldr	r1, [pc, #36]	; (8009688 <siprintf+0x3c>)
 8009664:	f853 2b04 	ldr.w	r2, [r3], #4
 8009668:	9105      	str	r1, [sp, #20]
 800966a:	6800      	ldr	r0, [r0, #0]
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	a902      	add	r1, sp, #8
 8009670:	f000 f8a4 	bl	80097bc <_svfiprintf_r>
 8009674:	9b02      	ldr	r3, [sp, #8]
 8009676:	2200      	movs	r2, #0
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	b01c      	add	sp, #112	; 0x70
 800967c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009680:	b003      	add	sp, #12
 8009682:	4770      	bx	lr
 8009684:	20000020 	.word	0x20000020
 8009688:	ffff0208 	.word	0xffff0208

0800968c <__utoa>:
 800968c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800968e:	4b1d      	ldr	r3, [pc, #116]	; (8009704 <__utoa+0x78>)
 8009690:	b08b      	sub	sp, #44	; 0x2c
 8009692:	4605      	mov	r5, r0
 8009694:	460c      	mov	r4, r1
 8009696:	466e      	mov	r6, sp
 8009698:	f103 0c20 	add.w	ip, r3, #32
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	6859      	ldr	r1, [r3, #4]
 80096a0:	4637      	mov	r7, r6
 80096a2:	c703      	stmia	r7!, {r0, r1}
 80096a4:	3308      	adds	r3, #8
 80096a6:	4563      	cmp	r3, ip
 80096a8:	463e      	mov	r6, r7
 80096aa:	d1f7      	bne.n	800969c <__utoa+0x10>
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	791b      	ldrb	r3, [r3, #4]
 80096b0:	713b      	strb	r3, [r7, #4]
 80096b2:	1e93      	subs	r3, r2, #2
 80096b4:	2b22      	cmp	r3, #34	; 0x22
 80096b6:	6038      	str	r0, [r7, #0]
 80096b8:	f04f 0300 	mov.w	r3, #0
 80096bc:	d904      	bls.n	80096c8 <__utoa+0x3c>
 80096be:	7023      	strb	r3, [r4, #0]
 80096c0:	461c      	mov	r4, r3
 80096c2:	4620      	mov	r0, r4
 80096c4:	b00b      	add	sp, #44	; 0x2c
 80096c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096c8:	1e66      	subs	r6, r4, #1
 80096ca:	fbb5 f0f2 	udiv	r0, r5, r2
 80096ce:	af0a      	add	r7, sp, #40	; 0x28
 80096d0:	fb02 5510 	mls	r5, r2, r0, r5
 80096d4:	443d      	add	r5, r7
 80096d6:	1c59      	adds	r1, r3, #1
 80096d8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80096dc:	f806 5f01 	strb.w	r5, [r6, #1]!
 80096e0:	4605      	mov	r5, r0
 80096e2:	b968      	cbnz	r0, 8009700 <__utoa+0x74>
 80096e4:	5460      	strb	r0, [r4, r1]
 80096e6:	4423      	add	r3, r4
 80096e8:	4622      	mov	r2, r4
 80096ea:	1b19      	subs	r1, r3, r4
 80096ec:	1b10      	subs	r0, r2, r4
 80096ee:	4281      	cmp	r1, r0
 80096f0:	dde7      	ble.n	80096c2 <__utoa+0x36>
 80096f2:	7811      	ldrb	r1, [r2, #0]
 80096f4:	7818      	ldrb	r0, [r3, #0]
 80096f6:	f802 0b01 	strb.w	r0, [r2], #1
 80096fa:	f803 1901 	strb.w	r1, [r3], #-1
 80096fe:	e7f4      	b.n	80096ea <__utoa+0x5e>
 8009700:	460b      	mov	r3, r1
 8009702:	e7e2      	b.n	80096ca <__utoa+0x3e>
 8009704:	0800a818 	.word	0x0800a818

08009708 <__ssputs_r>:
 8009708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800970c:	688e      	ldr	r6, [r1, #8]
 800970e:	429e      	cmp	r6, r3
 8009710:	4682      	mov	sl, r0
 8009712:	460c      	mov	r4, r1
 8009714:	4690      	mov	r8, r2
 8009716:	4699      	mov	r9, r3
 8009718:	d837      	bhi.n	800978a <__ssputs_r+0x82>
 800971a:	898a      	ldrh	r2, [r1, #12]
 800971c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009720:	d031      	beq.n	8009786 <__ssputs_r+0x7e>
 8009722:	6825      	ldr	r5, [r4, #0]
 8009724:	6909      	ldr	r1, [r1, #16]
 8009726:	1a6f      	subs	r7, r5, r1
 8009728:	6965      	ldr	r5, [r4, #20]
 800972a:	2302      	movs	r3, #2
 800972c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009730:	fb95 f5f3 	sdiv	r5, r5, r3
 8009734:	f109 0301 	add.w	r3, r9, #1
 8009738:	443b      	add	r3, r7
 800973a:	429d      	cmp	r5, r3
 800973c:	bf38      	it	cc
 800973e:	461d      	movcc	r5, r3
 8009740:	0553      	lsls	r3, r2, #21
 8009742:	d530      	bpl.n	80097a6 <__ssputs_r+0x9e>
 8009744:	4629      	mov	r1, r5
 8009746:	f000 fb21 	bl	8009d8c <_malloc_r>
 800974a:	4606      	mov	r6, r0
 800974c:	b950      	cbnz	r0, 8009764 <__ssputs_r+0x5c>
 800974e:	230c      	movs	r3, #12
 8009750:	f8ca 3000 	str.w	r3, [sl]
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009764:	463a      	mov	r2, r7
 8009766:	6921      	ldr	r1, [r4, #16]
 8009768:	f7ff ff5c 	bl	8009624 <memcpy>
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009776:	81a3      	strh	r3, [r4, #12]
 8009778:	6126      	str	r6, [r4, #16]
 800977a:	6165      	str	r5, [r4, #20]
 800977c:	443e      	add	r6, r7
 800977e:	1bed      	subs	r5, r5, r7
 8009780:	6026      	str	r6, [r4, #0]
 8009782:	60a5      	str	r5, [r4, #8]
 8009784:	464e      	mov	r6, r9
 8009786:	454e      	cmp	r6, r9
 8009788:	d900      	bls.n	800978c <__ssputs_r+0x84>
 800978a:	464e      	mov	r6, r9
 800978c:	4632      	mov	r2, r6
 800978e:	4641      	mov	r1, r8
 8009790:	6820      	ldr	r0, [r4, #0]
 8009792:	f000 fa93 	bl	8009cbc <memmove>
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	1b9b      	subs	r3, r3, r6
 800979a:	60a3      	str	r3, [r4, #8]
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	441e      	add	r6, r3
 80097a0:	6026      	str	r6, [r4, #0]
 80097a2:	2000      	movs	r0, #0
 80097a4:	e7dc      	b.n	8009760 <__ssputs_r+0x58>
 80097a6:	462a      	mov	r2, r5
 80097a8:	f000 fb4a 	bl	8009e40 <_realloc_r>
 80097ac:	4606      	mov	r6, r0
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d1e2      	bne.n	8009778 <__ssputs_r+0x70>
 80097b2:	6921      	ldr	r1, [r4, #16]
 80097b4:	4650      	mov	r0, sl
 80097b6:	f000 fa9b 	bl	8009cf0 <_free_r>
 80097ba:	e7c8      	b.n	800974e <__ssputs_r+0x46>

080097bc <_svfiprintf_r>:
 80097bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c0:	461d      	mov	r5, r3
 80097c2:	898b      	ldrh	r3, [r1, #12]
 80097c4:	061f      	lsls	r7, r3, #24
 80097c6:	b09d      	sub	sp, #116	; 0x74
 80097c8:	4680      	mov	r8, r0
 80097ca:	460c      	mov	r4, r1
 80097cc:	4616      	mov	r6, r2
 80097ce:	d50f      	bpl.n	80097f0 <_svfiprintf_r+0x34>
 80097d0:	690b      	ldr	r3, [r1, #16]
 80097d2:	b96b      	cbnz	r3, 80097f0 <_svfiprintf_r+0x34>
 80097d4:	2140      	movs	r1, #64	; 0x40
 80097d6:	f000 fad9 	bl	8009d8c <_malloc_r>
 80097da:	6020      	str	r0, [r4, #0]
 80097dc:	6120      	str	r0, [r4, #16]
 80097de:	b928      	cbnz	r0, 80097ec <_svfiprintf_r+0x30>
 80097e0:	230c      	movs	r3, #12
 80097e2:	f8c8 3000 	str.w	r3, [r8]
 80097e6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ea:	e0c8      	b.n	800997e <_svfiprintf_r+0x1c2>
 80097ec:	2340      	movs	r3, #64	; 0x40
 80097ee:	6163      	str	r3, [r4, #20]
 80097f0:	2300      	movs	r3, #0
 80097f2:	9309      	str	r3, [sp, #36]	; 0x24
 80097f4:	2320      	movs	r3, #32
 80097f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097fa:	2330      	movs	r3, #48	; 0x30
 80097fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009800:	9503      	str	r5, [sp, #12]
 8009802:	f04f 0b01 	mov.w	fp, #1
 8009806:	4637      	mov	r7, r6
 8009808:	463d      	mov	r5, r7
 800980a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800980e:	b10b      	cbz	r3, 8009814 <_svfiprintf_r+0x58>
 8009810:	2b25      	cmp	r3, #37	; 0x25
 8009812:	d13e      	bne.n	8009892 <_svfiprintf_r+0xd6>
 8009814:	ebb7 0a06 	subs.w	sl, r7, r6
 8009818:	d00b      	beq.n	8009832 <_svfiprintf_r+0x76>
 800981a:	4653      	mov	r3, sl
 800981c:	4632      	mov	r2, r6
 800981e:	4621      	mov	r1, r4
 8009820:	4640      	mov	r0, r8
 8009822:	f7ff ff71 	bl	8009708 <__ssputs_r>
 8009826:	3001      	adds	r0, #1
 8009828:	f000 80a4 	beq.w	8009974 <_svfiprintf_r+0x1b8>
 800982c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982e:	4453      	add	r3, sl
 8009830:	9309      	str	r3, [sp, #36]	; 0x24
 8009832:	783b      	ldrb	r3, [r7, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 809d 	beq.w	8009974 <_svfiprintf_r+0x1b8>
 800983a:	2300      	movs	r3, #0
 800983c:	f04f 32ff 	mov.w	r2, #4294967295
 8009840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009844:	9304      	str	r3, [sp, #16]
 8009846:	9307      	str	r3, [sp, #28]
 8009848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800984c:	931a      	str	r3, [sp, #104]	; 0x68
 800984e:	462f      	mov	r7, r5
 8009850:	2205      	movs	r2, #5
 8009852:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009856:	4850      	ldr	r0, [pc, #320]	; (8009998 <_svfiprintf_r+0x1dc>)
 8009858:	f7f6 fcc2 	bl	80001e0 <memchr>
 800985c:	9b04      	ldr	r3, [sp, #16]
 800985e:	b9d0      	cbnz	r0, 8009896 <_svfiprintf_r+0xda>
 8009860:	06d9      	lsls	r1, r3, #27
 8009862:	bf44      	itt	mi
 8009864:	2220      	movmi	r2, #32
 8009866:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800986a:	071a      	lsls	r2, r3, #28
 800986c:	bf44      	itt	mi
 800986e:	222b      	movmi	r2, #43	; 0x2b
 8009870:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009874:	782a      	ldrb	r2, [r5, #0]
 8009876:	2a2a      	cmp	r2, #42	; 0x2a
 8009878:	d015      	beq.n	80098a6 <_svfiprintf_r+0xea>
 800987a:	9a07      	ldr	r2, [sp, #28]
 800987c:	462f      	mov	r7, r5
 800987e:	2000      	movs	r0, #0
 8009880:	250a      	movs	r5, #10
 8009882:	4639      	mov	r1, r7
 8009884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009888:	3b30      	subs	r3, #48	; 0x30
 800988a:	2b09      	cmp	r3, #9
 800988c:	d94d      	bls.n	800992a <_svfiprintf_r+0x16e>
 800988e:	b1b8      	cbz	r0, 80098c0 <_svfiprintf_r+0x104>
 8009890:	e00f      	b.n	80098b2 <_svfiprintf_r+0xf6>
 8009892:	462f      	mov	r7, r5
 8009894:	e7b8      	b.n	8009808 <_svfiprintf_r+0x4c>
 8009896:	4a40      	ldr	r2, [pc, #256]	; (8009998 <_svfiprintf_r+0x1dc>)
 8009898:	1a80      	subs	r0, r0, r2
 800989a:	fa0b f000 	lsl.w	r0, fp, r0
 800989e:	4318      	orrs	r0, r3
 80098a0:	9004      	str	r0, [sp, #16]
 80098a2:	463d      	mov	r5, r7
 80098a4:	e7d3      	b.n	800984e <_svfiprintf_r+0x92>
 80098a6:	9a03      	ldr	r2, [sp, #12]
 80098a8:	1d11      	adds	r1, r2, #4
 80098aa:	6812      	ldr	r2, [r2, #0]
 80098ac:	9103      	str	r1, [sp, #12]
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	db01      	blt.n	80098b6 <_svfiprintf_r+0xfa>
 80098b2:	9207      	str	r2, [sp, #28]
 80098b4:	e004      	b.n	80098c0 <_svfiprintf_r+0x104>
 80098b6:	4252      	negs	r2, r2
 80098b8:	f043 0302 	orr.w	r3, r3, #2
 80098bc:	9207      	str	r2, [sp, #28]
 80098be:	9304      	str	r3, [sp, #16]
 80098c0:	783b      	ldrb	r3, [r7, #0]
 80098c2:	2b2e      	cmp	r3, #46	; 0x2e
 80098c4:	d10c      	bne.n	80098e0 <_svfiprintf_r+0x124>
 80098c6:	787b      	ldrb	r3, [r7, #1]
 80098c8:	2b2a      	cmp	r3, #42	; 0x2a
 80098ca:	d133      	bne.n	8009934 <_svfiprintf_r+0x178>
 80098cc:	9b03      	ldr	r3, [sp, #12]
 80098ce:	1d1a      	adds	r2, r3, #4
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	9203      	str	r2, [sp, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	bfb8      	it	lt
 80098d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80098dc:	3702      	adds	r7, #2
 80098de:	9305      	str	r3, [sp, #20]
 80098e0:	4d2e      	ldr	r5, [pc, #184]	; (800999c <_svfiprintf_r+0x1e0>)
 80098e2:	7839      	ldrb	r1, [r7, #0]
 80098e4:	2203      	movs	r2, #3
 80098e6:	4628      	mov	r0, r5
 80098e8:	f7f6 fc7a 	bl	80001e0 <memchr>
 80098ec:	b138      	cbz	r0, 80098fe <_svfiprintf_r+0x142>
 80098ee:	2340      	movs	r3, #64	; 0x40
 80098f0:	1b40      	subs	r0, r0, r5
 80098f2:	fa03 f000 	lsl.w	r0, r3, r0
 80098f6:	9b04      	ldr	r3, [sp, #16]
 80098f8:	4303      	orrs	r3, r0
 80098fa:	3701      	adds	r7, #1
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	7839      	ldrb	r1, [r7, #0]
 8009900:	4827      	ldr	r0, [pc, #156]	; (80099a0 <_svfiprintf_r+0x1e4>)
 8009902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009906:	2206      	movs	r2, #6
 8009908:	1c7e      	adds	r6, r7, #1
 800990a:	f7f6 fc69 	bl	80001e0 <memchr>
 800990e:	2800      	cmp	r0, #0
 8009910:	d038      	beq.n	8009984 <_svfiprintf_r+0x1c8>
 8009912:	4b24      	ldr	r3, [pc, #144]	; (80099a4 <_svfiprintf_r+0x1e8>)
 8009914:	bb13      	cbnz	r3, 800995c <_svfiprintf_r+0x1a0>
 8009916:	9b03      	ldr	r3, [sp, #12]
 8009918:	3307      	adds	r3, #7
 800991a:	f023 0307 	bic.w	r3, r3, #7
 800991e:	3308      	adds	r3, #8
 8009920:	9303      	str	r3, [sp, #12]
 8009922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009924:	444b      	add	r3, r9
 8009926:	9309      	str	r3, [sp, #36]	; 0x24
 8009928:	e76d      	b.n	8009806 <_svfiprintf_r+0x4a>
 800992a:	fb05 3202 	mla	r2, r5, r2, r3
 800992e:	2001      	movs	r0, #1
 8009930:	460f      	mov	r7, r1
 8009932:	e7a6      	b.n	8009882 <_svfiprintf_r+0xc6>
 8009934:	2300      	movs	r3, #0
 8009936:	3701      	adds	r7, #1
 8009938:	9305      	str	r3, [sp, #20]
 800993a:	4619      	mov	r1, r3
 800993c:	250a      	movs	r5, #10
 800993e:	4638      	mov	r0, r7
 8009940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009944:	3a30      	subs	r2, #48	; 0x30
 8009946:	2a09      	cmp	r2, #9
 8009948:	d903      	bls.n	8009952 <_svfiprintf_r+0x196>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0c8      	beq.n	80098e0 <_svfiprintf_r+0x124>
 800994e:	9105      	str	r1, [sp, #20]
 8009950:	e7c6      	b.n	80098e0 <_svfiprintf_r+0x124>
 8009952:	fb05 2101 	mla	r1, r5, r1, r2
 8009956:	2301      	movs	r3, #1
 8009958:	4607      	mov	r7, r0
 800995a:	e7f0      	b.n	800993e <_svfiprintf_r+0x182>
 800995c:	ab03      	add	r3, sp, #12
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	4622      	mov	r2, r4
 8009962:	4b11      	ldr	r3, [pc, #68]	; (80099a8 <_svfiprintf_r+0x1ec>)
 8009964:	a904      	add	r1, sp, #16
 8009966:	4640      	mov	r0, r8
 8009968:	f3af 8000 	nop.w
 800996c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009970:	4681      	mov	r9, r0
 8009972:	d1d6      	bne.n	8009922 <_svfiprintf_r+0x166>
 8009974:	89a3      	ldrh	r3, [r4, #12]
 8009976:	065b      	lsls	r3, r3, #25
 8009978:	f53f af35 	bmi.w	80097e6 <_svfiprintf_r+0x2a>
 800997c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800997e:	b01d      	add	sp, #116	; 0x74
 8009980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009984:	ab03      	add	r3, sp, #12
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	4622      	mov	r2, r4
 800998a:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <_svfiprintf_r+0x1ec>)
 800998c:	a904      	add	r1, sp, #16
 800998e:	4640      	mov	r0, r8
 8009990:	f000 f882 	bl	8009a98 <_printf_i>
 8009994:	e7ea      	b.n	800996c <_svfiprintf_r+0x1b0>
 8009996:	bf00      	nop
 8009998:	0800a83d 	.word	0x0800a83d
 800999c:	0800a843 	.word	0x0800a843
 80099a0:	0800a847 	.word	0x0800a847
 80099a4:	00000000 	.word	0x00000000
 80099a8:	08009709 	.word	0x08009709

080099ac <_printf_common>:
 80099ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	4691      	mov	r9, r2
 80099b2:	461f      	mov	r7, r3
 80099b4:	688a      	ldr	r2, [r1, #8]
 80099b6:	690b      	ldr	r3, [r1, #16]
 80099b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099bc:	4293      	cmp	r3, r2
 80099be:	bfb8      	it	lt
 80099c0:	4613      	movlt	r3, r2
 80099c2:	f8c9 3000 	str.w	r3, [r9]
 80099c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099ca:	4606      	mov	r6, r0
 80099cc:	460c      	mov	r4, r1
 80099ce:	b112      	cbz	r2, 80099d6 <_printf_common+0x2a>
 80099d0:	3301      	adds	r3, #1
 80099d2:	f8c9 3000 	str.w	r3, [r9]
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	0699      	lsls	r1, r3, #26
 80099da:	bf42      	ittt	mi
 80099dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80099e0:	3302      	addmi	r3, #2
 80099e2:	f8c9 3000 	strmi.w	r3, [r9]
 80099e6:	6825      	ldr	r5, [r4, #0]
 80099e8:	f015 0506 	ands.w	r5, r5, #6
 80099ec:	d107      	bne.n	80099fe <_printf_common+0x52>
 80099ee:	f104 0a19 	add.w	sl, r4, #25
 80099f2:	68e3      	ldr	r3, [r4, #12]
 80099f4:	f8d9 2000 	ldr.w	r2, [r9]
 80099f8:	1a9b      	subs	r3, r3, r2
 80099fa:	42ab      	cmp	r3, r5
 80099fc:	dc28      	bgt.n	8009a50 <_printf_common+0xa4>
 80099fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009a02:	6822      	ldr	r2, [r4, #0]
 8009a04:	3300      	adds	r3, #0
 8009a06:	bf18      	it	ne
 8009a08:	2301      	movne	r3, #1
 8009a0a:	0692      	lsls	r2, r2, #26
 8009a0c:	d42d      	bmi.n	8009a6a <_printf_common+0xbe>
 8009a0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a12:	4639      	mov	r1, r7
 8009a14:	4630      	mov	r0, r6
 8009a16:	47c0      	blx	r8
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d020      	beq.n	8009a5e <_printf_common+0xb2>
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	68e5      	ldr	r5, [r4, #12]
 8009a20:	f8d9 2000 	ldr.w	r2, [r9]
 8009a24:	f003 0306 	and.w	r3, r3, #6
 8009a28:	2b04      	cmp	r3, #4
 8009a2a:	bf08      	it	eq
 8009a2c:	1aad      	subeq	r5, r5, r2
 8009a2e:	68a3      	ldr	r3, [r4, #8]
 8009a30:	6922      	ldr	r2, [r4, #16]
 8009a32:	bf0c      	ite	eq
 8009a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a38:	2500      	movne	r5, #0
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	bfc4      	itt	gt
 8009a3e:	1a9b      	subgt	r3, r3, r2
 8009a40:	18ed      	addgt	r5, r5, r3
 8009a42:	f04f 0900 	mov.w	r9, #0
 8009a46:	341a      	adds	r4, #26
 8009a48:	454d      	cmp	r5, r9
 8009a4a:	d11a      	bne.n	8009a82 <_printf_common+0xd6>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	e008      	b.n	8009a62 <_printf_common+0xb6>
 8009a50:	2301      	movs	r3, #1
 8009a52:	4652      	mov	r2, sl
 8009a54:	4639      	mov	r1, r7
 8009a56:	4630      	mov	r0, r6
 8009a58:	47c0      	blx	r8
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d103      	bne.n	8009a66 <_printf_common+0xba>
 8009a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a66:	3501      	adds	r5, #1
 8009a68:	e7c3      	b.n	80099f2 <_printf_common+0x46>
 8009a6a:	18e1      	adds	r1, r4, r3
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	2030      	movs	r0, #48	; 0x30
 8009a70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a74:	4422      	add	r2, r4
 8009a76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a7e:	3302      	adds	r3, #2
 8009a80:	e7c5      	b.n	8009a0e <_printf_common+0x62>
 8009a82:	2301      	movs	r3, #1
 8009a84:	4622      	mov	r2, r4
 8009a86:	4639      	mov	r1, r7
 8009a88:	4630      	mov	r0, r6
 8009a8a:	47c0      	blx	r8
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d0e6      	beq.n	8009a5e <_printf_common+0xb2>
 8009a90:	f109 0901 	add.w	r9, r9, #1
 8009a94:	e7d8      	b.n	8009a48 <_printf_common+0x9c>
	...

08009a98 <_printf_i>:
 8009a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	7e09      	ldrb	r1, [r1, #24]
 8009aa4:	b085      	sub	sp, #20
 8009aa6:	296e      	cmp	r1, #110	; 0x6e
 8009aa8:	4617      	mov	r7, r2
 8009aaa:	4606      	mov	r6, r0
 8009aac:	4698      	mov	r8, r3
 8009aae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ab0:	f000 80b3 	beq.w	8009c1a <_printf_i+0x182>
 8009ab4:	d822      	bhi.n	8009afc <_printf_i+0x64>
 8009ab6:	2963      	cmp	r1, #99	; 0x63
 8009ab8:	d036      	beq.n	8009b28 <_printf_i+0x90>
 8009aba:	d80a      	bhi.n	8009ad2 <_printf_i+0x3a>
 8009abc:	2900      	cmp	r1, #0
 8009abe:	f000 80b9 	beq.w	8009c34 <_printf_i+0x19c>
 8009ac2:	2958      	cmp	r1, #88	; 0x58
 8009ac4:	f000 8083 	beq.w	8009bce <_printf_i+0x136>
 8009ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009acc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009ad0:	e032      	b.n	8009b38 <_printf_i+0xa0>
 8009ad2:	2964      	cmp	r1, #100	; 0x64
 8009ad4:	d001      	beq.n	8009ada <_printf_i+0x42>
 8009ad6:	2969      	cmp	r1, #105	; 0x69
 8009ad8:	d1f6      	bne.n	8009ac8 <_printf_i+0x30>
 8009ada:	6820      	ldr	r0, [r4, #0]
 8009adc:	6813      	ldr	r3, [r2, #0]
 8009ade:	0605      	lsls	r5, r0, #24
 8009ae0:	f103 0104 	add.w	r1, r3, #4
 8009ae4:	d52a      	bpl.n	8009b3c <_printf_i+0xa4>
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6011      	str	r1, [r2, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	da03      	bge.n	8009af6 <_printf_i+0x5e>
 8009aee:	222d      	movs	r2, #45	; 0x2d
 8009af0:	425b      	negs	r3, r3
 8009af2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009af6:	486f      	ldr	r0, [pc, #444]	; (8009cb4 <_printf_i+0x21c>)
 8009af8:	220a      	movs	r2, #10
 8009afa:	e039      	b.n	8009b70 <_printf_i+0xd8>
 8009afc:	2973      	cmp	r1, #115	; 0x73
 8009afe:	f000 809d 	beq.w	8009c3c <_printf_i+0x1a4>
 8009b02:	d808      	bhi.n	8009b16 <_printf_i+0x7e>
 8009b04:	296f      	cmp	r1, #111	; 0x6f
 8009b06:	d020      	beq.n	8009b4a <_printf_i+0xb2>
 8009b08:	2970      	cmp	r1, #112	; 0x70
 8009b0a:	d1dd      	bne.n	8009ac8 <_printf_i+0x30>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	f043 0320 	orr.w	r3, r3, #32
 8009b12:	6023      	str	r3, [r4, #0]
 8009b14:	e003      	b.n	8009b1e <_printf_i+0x86>
 8009b16:	2975      	cmp	r1, #117	; 0x75
 8009b18:	d017      	beq.n	8009b4a <_printf_i+0xb2>
 8009b1a:	2978      	cmp	r1, #120	; 0x78
 8009b1c:	d1d4      	bne.n	8009ac8 <_printf_i+0x30>
 8009b1e:	2378      	movs	r3, #120	; 0x78
 8009b20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b24:	4864      	ldr	r0, [pc, #400]	; (8009cb8 <_printf_i+0x220>)
 8009b26:	e055      	b.n	8009bd4 <_printf_i+0x13c>
 8009b28:	6813      	ldr	r3, [r2, #0]
 8009b2a:	1d19      	adds	r1, r3, #4
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6011      	str	r1, [r2, #0]
 8009b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e08c      	b.n	8009c56 <_printf_i+0x1be>
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6011      	str	r1, [r2, #0]
 8009b40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b44:	bf18      	it	ne
 8009b46:	b21b      	sxthne	r3, r3
 8009b48:	e7cf      	b.n	8009aea <_printf_i+0x52>
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	6825      	ldr	r5, [r4, #0]
 8009b4e:	1d18      	adds	r0, r3, #4
 8009b50:	6010      	str	r0, [r2, #0]
 8009b52:	0628      	lsls	r0, r5, #24
 8009b54:	d501      	bpl.n	8009b5a <_printf_i+0xc2>
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	e002      	b.n	8009b60 <_printf_i+0xc8>
 8009b5a:	0668      	lsls	r0, r5, #25
 8009b5c:	d5fb      	bpl.n	8009b56 <_printf_i+0xbe>
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	4854      	ldr	r0, [pc, #336]	; (8009cb4 <_printf_i+0x21c>)
 8009b62:	296f      	cmp	r1, #111	; 0x6f
 8009b64:	bf14      	ite	ne
 8009b66:	220a      	movne	r2, #10
 8009b68:	2208      	moveq	r2, #8
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b70:	6865      	ldr	r5, [r4, #4]
 8009b72:	60a5      	str	r5, [r4, #8]
 8009b74:	2d00      	cmp	r5, #0
 8009b76:	f2c0 8095 	blt.w	8009ca4 <_printf_i+0x20c>
 8009b7a:	6821      	ldr	r1, [r4, #0]
 8009b7c:	f021 0104 	bic.w	r1, r1, #4
 8009b80:	6021      	str	r1, [r4, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d13d      	bne.n	8009c02 <_printf_i+0x16a>
 8009b86:	2d00      	cmp	r5, #0
 8009b88:	f040 808e 	bne.w	8009ca8 <_printf_i+0x210>
 8009b8c:	4665      	mov	r5, ip
 8009b8e:	2a08      	cmp	r2, #8
 8009b90:	d10b      	bne.n	8009baa <_printf_i+0x112>
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	07db      	lsls	r3, r3, #31
 8009b96:	d508      	bpl.n	8009baa <_printf_i+0x112>
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	6862      	ldr	r2, [r4, #4]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	bfde      	ittt	le
 8009ba0:	2330      	movle	r3, #48	; 0x30
 8009ba2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ba6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009baa:	ebac 0305 	sub.w	r3, ip, r5
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	f8cd 8000 	str.w	r8, [sp]
 8009bb4:	463b      	mov	r3, r7
 8009bb6:	aa03      	add	r2, sp, #12
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff fef6 	bl	80099ac <_printf_common>
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d14d      	bne.n	8009c60 <_printf_i+0x1c8>
 8009bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc8:	b005      	add	sp, #20
 8009bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bce:	4839      	ldr	r0, [pc, #228]	; (8009cb4 <_printf_i+0x21c>)
 8009bd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009bd4:	6813      	ldr	r3, [r2, #0]
 8009bd6:	6821      	ldr	r1, [r4, #0]
 8009bd8:	1d1d      	adds	r5, r3, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6015      	str	r5, [r2, #0]
 8009bde:	060a      	lsls	r2, r1, #24
 8009be0:	d50b      	bpl.n	8009bfa <_printf_i+0x162>
 8009be2:	07ca      	lsls	r2, r1, #31
 8009be4:	bf44      	itt	mi
 8009be6:	f041 0120 	orrmi.w	r1, r1, #32
 8009bea:	6021      	strmi	r1, [r4, #0]
 8009bec:	b91b      	cbnz	r3, 8009bf6 <_printf_i+0x15e>
 8009bee:	6822      	ldr	r2, [r4, #0]
 8009bf0:	f022 0220 	bic.w	r2, r2, #32
 8009bf4:	6022      	str	r2, [r4, #0]
 8009bf6:	2210      	movs	r2, #16
 8009bf8:	e7b7      	b.n	8009b6a <_printf_i+0xd2>
 8009bfa:	064d      	lsls	r5, r1, #25
 8009bfc:	bf48      	it	mi
 8009bfe:	b29b      	uxthmi	r3, r3
 8009c00:	e7ef      	b.n	8009be2 <_printf_i+0x14a>
 8009c02:	4665      	mov	r5, ip
 8009c04:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c08:	fb02 3311 	mls	r3, r2, r1, r3
 8009c0c:	5cc3      	ldrb	r3, [r0, r3]
 8009c0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009c12:	460b      	mov	r3, r1
 8009c14:	2900      	cmp	r1, #0
 8009c16:	d1f5      	bne.n	8009c04 <_printf_i+0x16c>
 8009c18:	e7b9      	b.n	8009b8e <_printf_i+0xf6>
 8009c1a:	6813      	ldr	r3, [r2, #0]
 8009c1c:	6825      	ldr	r5, [r4, #0]
 8009c1e:	6961      	ldr	r1, [r4, #20]
 8009c20:	1d18      	adds	r0, r3, #4
 8009c22:	6010      	str	r0, [r2, #0]
 8009c24:	0628      	lsls	r0, r5, #24
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	d501      	bpl.n	8009c2e <_printf_i+0x196>
 8009c2a:	6019      	str	r1, [r3, #0]
 8009c2c:	e002      	b.n	8009c34 <_printf_i+0x19c>
 8009c2e:	066a      	lsls	r2, r5, #25
 8009c30:	d5fb      	bpl.n	8009c2a <_printf_i+0x192>
 8009c32:	8019      	strh	r1, [r3, #0]
 8009c34:	2300      	movs	r3, #0
 8009c36:	6123      	str	r3, [r4, #16]
 8009c38:	4665      	mov	r5, ip
 8009c3a:	e7b9      	b.n	8009bb0 <_printf_i+0x118>
 8009c3c:	6813      	ldr	r3, [r2, #0]
 8009c3e:	1d19      	adds	r1, r3, #4
 8009c40:	6011      	str	r1, [r2, #0]
 8009c42:	681d      	ldr	r5, [r3, #0]
 8009c44:	6862      	ldr	r2, [r4, #4]
 8009c46:	2100      	movs	r1, #0
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f7f6 fac9 	bl	80001e0 <memchr>
 8009c4e:	b108      	cbz	r0, 8009c54 <_printf_i+0x1bc>
 8009c50:	1b40      	subs	r0, r0, r5
 8009c52:	6060      	str	r0, [r4, #4]
 8009c54:	6863      	ldr	r3, [r4, #4]
 8009c56:	6123      	str	r3, [r4, #16]
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c5e:	e7a7      	b.n	8009bb0 <_printf_i+0x118>
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	462a      	mov	r2, r5
 8009c64:	4639      	mov	r1, r7
 8009c66:	4630      	mov	r0, r6
 8009c68:	47c0      	blx	r8
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	d0aa      	beq.n	8009bc4 <_printf_i+0x12c>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	079b      	lsls	r3, r3, #30
 8009c72:	d413      	bmi.n	8009c9c <_printf_i+0x204>
 8009c74:	68e0      	ldr	r0, [r4, #12]
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	4298      	cmp	r0, r3
 8009c7a:	bfb8      	it	lt
 8009c7c:	4618      	movlt	r0, r3
 8009c7e:	e7a3      	b.n	8009bc8 <_printf_i+0x130>
 8009c80:	2301      	movs	r3, #1
 8009c82:	464a      	mov	r2, r9
 8009c84:	4639      	mov	r1, r7
 8009c86:	4630      	mov	r0, r6
 8009c88:	47c0      	blx	r8
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d09a      	beq.n	8009bc4 <_printf_i+0x12c>
 8009c8e:	3501      	adds	r5, #1
 8009c90:	68e3      	ldr	r3, [r4, #12]
 8009c92:	9a03      	ldr	r2, [sp, #12]
 8009c94:	1a9b      	subs	r3, r3, r2
 8009c96:	42ab      	cmp	r3, r5
 8009c98:	dcf2      	bgt.n	8009c80 <_printf_i+0x1e8>
 8009c9a:	e7eb      	b.n	8009c74 <_printf_i+0x1dc>
 8009c9c:	2500      	movs	r5, #0
 8009c9e:	f104 0919 	add.w	r9, r4, #25
 8009ca2:	e7f5      	b.n	8009c90 <_printf_i+0x1f8>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1ac      	bne.n	8009c02 <_printf_i+0x16a>
 8009ca8:	7803      	ldrb	r3, [r0, #0]
 8009caa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cb2:	e76c      	b.n	8009b8e <_printf_i+0xf6>
 8009cb4:	0800a84e 	.word	0x0800a84e
 8009cb8:	0800a85f 	.word	0x0800a85f

08009cbc <memmove>:
 8009cbc:	4288      	cmp	r0, r1
 8009cbe:	b510      	push	{r4, lr}
 8009cc0:	eb01 0302 	add.w	r3, r1, r2
 8009cc4:	d807      	bhi.n	8009cd6 <memmove+0x1a>
 8009cc6:	1e42      	subs	r2, r0, #1
 8009cc8:	4299      	cmp	r1, r3
 8009cca:	d00a      	beq.n	8009ce2 <memmove+0x26>
 8009ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009cd4:	e7f8      	b.n	8009cc8 <memmove+0xc>
 8009cd6:	4283      	cmp	r3, r0
 8009cd8:	d9f5      	bls.n	8009cc6 <memmove+0xa>
 8009cda:	1881      	adds	r1, r0, r2
 8009cdc:	1ad2      	subs	r2, r2, r3
 8009cde:	42d3      	cmn	r3, r2
 8009ce0:	d100      	bne.n	8009ce4 <memmove+0x28>
 8009ce2:	bd10      	pop	{r4, pc}
 8009ce4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ce8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009cec:	e7f7      	b.n	8009cde <memmove+0x22>
	...

08009cf0 <_free_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	d045      	beq.n	8009d84 <_free_r+0x94>
 8009cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cfc:	1f0c      	subs	r4, r1, #4
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	bfb8      	it	lt
 8009d02:	18e4      	addlt	r4, r4, r3
 8009d04:	f000 f8d2 	bl	8009eac <__malloc_lock>
 8009d08:	4a1f      	ldr	r2, [pc, #124]	; (8009d88 <_free_r+0x98>)
 8009d0a:	6813      	ldr	r3, [r2, #0]
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	b933      	cbnz	r3, 8009d1e <_free_r+0x2e>
 8009d10:	6063      	str	r3, [r4, #4]
 8009d12:	6014      	str	r4, [r2, #0]
 8009d14:	4628      	mov	r0, r5
 8009d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d1a:	f000 b8c8 	b.w	8009eae <__malloc_unlock>
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	d90c      	bls.n	8009d3c <_free_r+0x4c>
 8009d22:	6821      	ldr	r1, [r4, #0]
 8009d24:	1862      	adds	r2, r4, r1
 8009d26:	4293      	cmp	r3, r2
 8009d28:	bf04      	itt	eq
 8009d2a:	681a      	ldreq	r2, [r3, #0]
 8009d2c:	685b      	ldreq	r3, [r3, #4]
 8009d2e:	6063      	str	r3, [r4, #4]
 8009d30:	bf04      	itt	eq
 8009d32:	1852      	addeq	r2, r2, r1
 8009d34:	6022      	streq	r2, [r4, #0]
 8009d36:	6004      	str	r4, [r0, #0]
 8009d38:	e7ec      	b.n	8009d14 <_free_r+0x24>
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	b10a      	cbz	r2, 8009d44 <_free_r+0x54>
 8009d40:	42a2      	cmp	r2, r4
 8009d42:	d9fa      	bls.n	8009d3a <_free_r+0x4a>
 8009d44:	6819      	ldr	r1, [r3, #0]
 8009d46:	1858      	adds	r0, r3, r1
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d10b      	bne.n	8009d64 <_free_r+0x74>
 8009d4c:	6820      	ldr	r0, [r4, #0]
 8009d4e:	4401      	add	r1, r0
 8009d50:	1858      	adds	r0, r3, r1
 8009d52:	4282      	cmp	r2, r0
 8009d54:	6019      	str	r1, [r3, #0]
 8009d56:	d1dd      	bne.n	8009d14 <_free_r+0x24>
 8009d58:	6810      	ldr	r0, [r2, #0]
 8009d5a:	6852      	ldr	r2, [r2, #4]
 8009d5c:	605a      	str	r2, [r3, #4]
 8009d5e:	4401      	add	r1, r0
 8009d60:	6019      	str	r1, [r3, #0]
 8009d62:	e7d7      	b.n	8009d14 <_free_r+0x24>
 8009d64:	d902      	bls.n	8009d6c <_free_r+0x7c>
 8009d66:	230c      	movs	r3, #12
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	e7d3      	b.n	8009d14 <_free_r+0x24>
 8009d6c:	6820      	ldr	r0, [r4, #0]
 8009d6e:	1821      	adds	r1, r4, r0
 8009d70:	428a      	cmp	r2, r1
 8009d72:	bf04      	itt	eq
 8009d74:	6811      	ldreq	r1, [r2, #0]
 8009d76:	6852      	ldreq	r2, [r2, #4]
 8009d78:	6062      	str	r2, [r4, #4]
 8009d7a:	bf04      	itt	eq
 8009d7c:	1809      	addeq	r1, r1, r0
 8009d7e:	6021      	streq	r1, [r4, #0]
 8009d80:	605c      	str	r4, [r3, #4]
 8009d82:	e7c7      	b.n	8009d14 <_free_r+0x24>
 8009d84:	bd38      	pop	{r3, r4, r5, pc}
 8009d86:	bf00      	nop
 8009d88:	20004070 	.word	0x20004070

08009d8c <_malloc_r>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	1ccd      	adds	r5, r1, #3
 8009d90:	f025 0503 	bic.w	r5, r5, #3
 8009d94:	3508      	adds	r5, #8
 8009d96:	2d0c      	cmp	r5, #12
 8009d98:	bf38      	it	cc
 8009d9a:	250c      	movcc	r5, #12
 8009d9c:	2d00      	cmp	r5, #0
 8009d9e:	4606      	mov	r6, r0
 8009da0:	db01      	blt.n	8009da6 <_malloc_r+0x1a>
 8009da2:	42a9      	cmp	r1, r5
 8009da4:	d903      	bls.n	8009dae <_malloc_r+0x22>
 8009da6:	230c      	movs	r3, #12
 8009da8:	6033      	str	r3, [r6, #0]
 8009daa:	2000      	movs	r0, #0
 8009dac:	bd70      	pop	{r4, r5, r6, pc}
 8009dae:	f000 f87d 	bl	8009eac <__malloc_lock>
 8009db2:	4a21      	ldr	r2, [pc, #132]	; (8009e38 <_malloc_r+0xac>)
 8009db4:	6814      	ldr	r4, [r2, #0]
 8009db6:	4621      	mov	r1, r4
 8009db8:	b991      	cbnz	r1, 8009de0 <_malloc_r+0x54>
 8009dba:	4c20      	ldr	r4, [pc, #128]	; (8009e3c <_malloc_r+0xb0>)
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	b91b      	cbnz	r3, 8009dc8 <_malloc_r+0x3c>
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f000 f863 	bl	8009e8c <_sbrk_r>
 8009dc6:	6020      	str	r0, [r4, #0]
 8009dc8:	4629      	mov	r1, r5
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f000 f85e 	bl	8009e8c <_sbrk_r>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d124      	bne.n	8009e1e <_malloc_r+0x92>
 8009dd4:	230c      	movs	r3, #12
 8009dd6:	6033      	str	r3, [r6, #0]
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f000 f868 	bl	8009eae <__malloc_unlock>
 8009dde:	e7e4      	b.n	8009daa <_malloc_r+0x1e>
 8009de0:	680b      	ldr	r3, [r1, #0]
 8009de2:	1b5b      	subs	r3, r3, r5
 8009de4:	d418      	bmi.n	8009e18 <_malloc_r+0x8c>
 8009de6:	2b0b      	cmp	r3, #11
 8009de8:	d90f      	bls.n	8009e0a <_malloc_r+0x7e>
 8009dea:	600b      	str	r3, [r1, #0]
 8009dec:	50cd      	str	r5, [r1, r3]
 8009dee:	18cc      	adds	r4, r1, r3
 8009df0:	4630      	mov	r0, r6
 8009df2:	f000 f85c 	bl	8009eae <__malloc_unlock>
 8009df6:	f104 000b 	add.w	r0, r4, #11
 8009dfa:	1d23      	adds	r3, r4, #4
 8009dfc:	f020 0007 	bic.w	r0, r0, #7
 8009e00:	1ac3      	subs	r3, r0, r3
 8009e02:	d0d3      	beq.n	8009dac <_malloc_r+0x20>
 8009e04:	425a      	negs	r2, r3
 8009e06:	50e2      	str	r2, [r4, r3]
 8009e08:	e7d0      	b.n	8009dac <_malloc_r+0x20>
 8009e0a:	428c      	cmp	r4, r1
 8009e0c:	684b      	ldr	r3, [r1, #4]
 8009e0e:	bf16      	itet	ne
 8009e10:	6063      	strne	r3, [r4, #4]
 8009e12:	6013      	streq	r3, [r2, #0]
 8009e14:	460c      	movne	r4, r1
 8009e16:	e7eb      	b.n	8009df0 <_malloc_r+0x64>
 8009e18:	460c      	mov	r4, r1
 8009e1a:	6849      	ldr	r1, [r1, #4]
 8009e1c:	e7cc      	b.n	8009db8 <_malloc_r+0x2c>
 8009e1e:	1cc4      	adds	r4, r0, #3
 8009e20:	f024 0403 	bic.w	r4, r4, #3
 8009e24:	42a0      	cmp	r0, r4
 8009e26:	d005      	beq.n	8009e34 <_malloc_r+0xa8>
 8009e28:	1a21      	subs	r1, r4, r0
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f000 f82e 	bl	8009e8c <_sbrk_r>
 8009e30:	3001      	adds	r0, #1
 8009e32:	d0cf      	beq.n	8009dd4 <_malloc_r+0x48>
 8009e34:	6025      	str	r5, [r4, #0]
 8009e36:	e7db      	b.n	8009df0 <_malloc_r+0x64>
 8009e38:	20004070 	.word	0x20004070
 8009e3c:	20004074 	.word	0x20004074

08009e40 <_realloc_r>:
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	4607      	mov	r7, r0
 8009e44:	4614      	mov	r4, r2
 8009e46:	460e      	mov	r6, r1
 8009e48:	b921      	cbnz	r1, 8009e54 <_realloc_r+0x14>
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e50:	f7ff bf9c 	b.w	8009d8c <_malloc_r>
 8009e54:	b922      	cbnz	r2, 8009e60 <_realloc_r+0x20>
 8009e56:	f7ff ff4b 	bl	8009cf0 <_free_r>
 8009e5a:	4625      	mov	r5, r4
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e60:	f000 f826 	bl	8009eb0 <_malloc_usable_size_r>
 8009e64:	42a0      	cmp	r0, r4
 8009e66:	d20f      	bcs.n	8009e88 <_realloc_r+0x48>
 8009e68:	4621      	mov	r1, r4
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	f7ff ff8e 	bl	8009d8c <_malloc_r>
 8009e70:	4605      	mov	r5, r0
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d0f2      	beq.n	8009e5c <_realloc_r+0x1c>
 8009e76:	4631      	mov	r1, r6
 8009e78:	4622      	mov	r2, r4
 8009e7a:	f7ff fbd3 	bl	8009624 <memcpy>
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4638      	mov	r0, r7
 8009e82:	f7ff ff35 	bl	8009cf0 <_free_r>
 8009e86:	e7e9      	b.n	8009e5c <_realloc_r+0x1c>
 8009e88:	4635      	mov	r5, r6
 8009e8a:	e7e7      	b.n	8009e5c <_realloc_r+0x1c>

08009e8c <_sbrk_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4c06      	ldr	r4, [pc, #24]	; (8009ea8 <_sbrk_r+0x1c>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	4605      	mov	r5, r0
 8009e94:	4608      	mov	r0, r1
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	f7f9 f90e 	bl	80030b8 <_sbrk>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d102      	bne.n	8009ea6 <_sbrk_r+0x1a>
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	b103      	cbz	r3, 8009ea6 <_sbrk_r+0x1a>
 8009ea4:	602b      	str	r3, [r5, #0]
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	20004404 	.word	0x20004404

08009eac <__malloc_lock>:
 8009eac:	4770      	bx	lr

08009eae <__malloc_unlock>:
 8009eae:	4770      	bx	lr

08009eb0 <_malloc_usable_size_r>:
 8009eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb4:	1f18      	subs	r0, r3, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfbc      	itt	lt
 8009eba:	580b      	ldrlt	r3, [r1, r0]
 8009ebc:	18c0      	addlt	r0, r0, r3
 8009ebe:	4770      	bx	lr

08009ec0 <floor>:
 8009ec0:	ec51 0b10 	vmov	r0, r1, d0
 8009ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009ecc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009ed0:	2e13      	cmp	r6, #19
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	ee10 5a10 	vmov	r5, s0
 8009ed8:	4680      	mov	r8, r0
 8009eda:	dc34      	bgt.n	8009f46 <floor+0x86>
 8009edc:	2e00      	cmp	r6, #0
 8009ede:	da16      	bge.n	8009f0e <floor+0x4e>
 8009ee0:	a335      	add	r3, pc, #212	; (adr r3, 8009fb8 <floor+0xf8>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	f7f6 f9d1 	bl	800028c <__adddf3>
 8009eea:	2200      	movs	r2, #0
 8009eec:	2300      	movs	r3, #0
 8009eee:	f7f6 fe13 	bl	8000b18 <__aeabi_dcmpgt>
 8009ef2:	b148      	cbz	r0, 8009f08 <floor+0x48>
 8009ef4:	2c00      	cmp	r4, #0
 8009ef6:	da59      	bge.n	8009fac <floor+0xec>
 8009ef8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009efc:	4a30      	ldr	r2, [pc, #192]	; (8009fc0 <floor+0x100>)
 8009efe:	432b      	orrs	r3, r5
 8009f00:	2500      	movs	r5, #0
 8009f02:	42ab      	cmp	r3, r5
 8009f04:	bf18      	it	ne
 8009f06:	4614      	movne	r4, r2
 8009f08:	4621      	mov	r1, r4
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	e025      	b.n	8009f5a <floor+0x9a>
 8009f0e:	4f2d      	ldr	r7, [pc, #180]	; (8009fc4 <floor+0x104>)
 8009f10:	4137      	asrs	r7, r6
 8009f12:	ea01 0307 	and.w	r3, r1, r7
 8009f16:	4303      	orrs	r3, r0
 8009f18:	d01f      	beq.n	8009f5a <floor+0x9a>
 8009f1a:	a327      	add	r3, pc, #156	; (adr r3, 8009fb8 <floor+0xf8>)
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	f7f6 f9b4 	bl	800028c <__adddf3>
 8009f24:	2200      	movs	r2, #0
 8009f26:	2300      	movs	r3, #0
 8009f28:	f7f6 fdf6 	bl	8000b18 <__aeabi_dcmpgt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d0eb      	beq.n	8009f08 <floor+0x48>
 8009f30:	2c00      	cmp	r4, #0
 8009f32:	bfbe      	ittt	lt
 8009f34:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009f38:	fa43 f606 	asrlt.w	r6, r3, r6
 8009f3c:	19a4      	addlt	r4, r4, r6
 8009f3e:	ea24 0407 	bic.w	r4, r4, r7
 8009f42:	2500      	movs	r5, #0
 8009f44:	e7e0      	b.n	8009f08 <floor+0x48>
 8009f46:	2e33      	cmp	r6, #51	; 0x33
 8009f48:	dd0b      	ble.n	8009f62 <floor+0xa2>
 8009f4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009f4e:	d104      	bne.n	8009f5a <floor+0x9a>
 8009f50:	ee10 2a10 	vmov	r2, s0
 8009f54:	460b      	mov	r3, r1
 8009f56:	f7f6 f999 	bl	800028c <__adddf3>
 8009f5a:	ec41 0b10 	vmov	d0, r0, r1
 8009f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f62:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009f66:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6a:	fa23 f707 	lsr.w	r7, r3, r7
 8009f6e:	4207      	tst	r7, r0
 8009f70:	d0f3      	beq.n	8009f5a <floor+0x9a>
 8009f72:	a311      	add	r3, pc, #68	; (adr r3, 8009fb8 <floor+0xf8>)
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	f7f6 f988 	bl	800028c <__adddf3>
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f7f6 fdca 	bl	8000b18 <__aeabi_dcmpgt>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d0bf      	beq.n	8009f08 <floor+0x48>
 8009f88:	2c00      	cmp	r4, #0
 8009f8a:	da02      	bge.n	8009f92 <floor+0xd2>
 8009f8c:	2e14      	cmp	r6, #20
 8009f8e:	d103      	bne.n	8009f98 <floor+0xd8>
 8009f90:	3401      	adds	r4, #1
 8009f92:	ea25 0507 	bic.w	r5, r5, r7
 8009f96:	e7b7      	b.n	8009f08 <floor+0x48>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009f9e:	fa03 f606 	lsl.w	r6, r3, r6
 8009fa2:	4435      	add	r5, r6
 8009fa4:	4545      	cmp	r5, r8
 8009fa6:	bf38      	it	cc
 8009fa8:	18e4      	addcc	r4, r4, r3
 8009faa:	e7f2      	b.n	8009f92 <floor+0xd2>
 8009fac:	2500      	movs	r5, #0
 8009fae:	462c      	mov	r4, r5
 8009fb0:	e7aa      	b.n	8009f08 <floor+0x48>
 8009fb2:	bf00      	nop
 8009fb4:	f3af 8000 	nop.w
 8009fb8:	8800759c 	.word	0x8800759c
 8009fbc:	7e37e43c 	.word	0x7e37e43c
 8009fc0:	bff00000 	.word	0xbff00000
 8009fc4:	000fffff 	.word	0x000fffff

08009fc8 <log10>:
 8009fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fca:	ed2d 8b02 	vpush	{d8}
 8009fce:	b08b      	sub	sp, #44	; 0x2c
 8009fd0:	ec55 4b10 	vmov	r4, r5, d0
 8009fd4:	f000 f878 	bl	800a0c8 <__ieee754_log10>
 8009fd8:	4b36      	ldr	r3, [pc, #216]	; (800a0b4 <log10+0xec>)
 8009fda:	eeb0 8a40 	vmov.f32	s16, s0
 8009fde:	eef0 8a60 	vmov.f32	s17, s1
 8009fe2:	f993 6000 	ldrsb.w	r6, [r3]
 8009fe6:	1c73      	adds	r3, r6, #1
 8009fe8:	d05c      	beq.n	800a0a4 <log10+0xdc>
 8009fea:	4622      	mov	r2, r4
 8009fec:	462b      	mov	r3, r5
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 fd9b 	bl	8000b2c <__aeabi_dcmpun>
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d153      	bne.n	800a0a4 <log10+0xdc>
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2300      	movs	r3, #0
 800a000:	4620      	mov	r0, r4
 800a002:	4629      	mov	r1, r5
 800a004:	f7f6 fd74 	bl	8000af0 <__aeabi_dcmple>
 800a008:	2800      	cmp	r0, #0
 800a00a:	d04b      	beq.n	800a0a4 <log10+0xdc>
 800a00c:	4b2a      	ldr	r3, [pc, #168]	; (800a0b8 <log10+0xf0>)
 800a00e:	9301      	str	r3, [sp, #4]
 800a010:	9708      	str	r7, [sp, #32]
 800a012:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a016:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a01a:	b9a6      	cbnz	r6, 800a046 <log10+0x7e>
 800a01c:	4b27      	ldr	r3, [pc, #156]	; (800a0bc <log10+0xf4>)
 800a01e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a022:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a026:	4620      	mov	r0, r4
 800a028:	2200      	movs	r2, #0
 800a02a:	2300      	movs	r3, #0
 800a02c:	4629      	mov	r1, r5
 800a02e:	f7f6 fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a032:	bb40      	cbnz	r0, 800a086 <log10+0xbe>
 800a034:	2301      	movs	r3, #1
 800a036:	2e02      	cmp	r6, #2
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	d119      	bne.n	800a070 <log10+0xa8>
 800a03c:	f7ff faae 	bl	800959c <__errno>
 800a040:	2321      	movs	r3, #33	; 0x21
 800a042:	6003      	str	r3, [r0, #0]
 800a044:	e019      	b.n	800a07a <log10+0xb2>
 800a046:	4b1e      	ldr	r3, [pc, #120]	; (800a0c0 <log10+0xf8>)
 800a048:	2200      	movs	r2, #0
 800a04a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a04e:	4620      	mov	r0, r4
 800a050:	2200      	movs	r2, #0
 800a052:	2300      	movs	r3, #0
 800a054:	4629      	mov	r1, r5
 800a056:	f7f6 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d0ea      	beq.n	800a034 <log10+0x6c>
 800a05e:	2302      	movs	r3, #2
 800a060:	429e      	cmp	r6, r3
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	d111      	bne.n	800a08a <log10+0xc2>
 800a066:	f7ff fa99 	bl	800959c <__errno>
 800a06a:	2322      	movs	r3, #34	; 0x22
 800a06c:	6003      	str	r3, [r0, #0]
 800a06e:	e011      	b.n	800a094 <log10+0xcc>
 800a070:	4668      	mov	r0, sp
 800a072:	f000 f8b3 	bl	800a1dc <matherr>
 800a076:	2800      	cmp	r0, #0
 800a078:	d0e0      	beq.n	800a03c <log10+0x74>
 800a07a:	4812      	ldr	r0, [pc, #72]	; (800a0c4 <log10+0xfc>)
 800a07c:	f000 f8b0 	bl	800a1e0 <nan>
 800a080:	ed8d 0b06 	vstr	d0, [sp, #24]
 800a084:	e006      	b.n	800a094 <log10+0xcc>
 800a086:	2302      	movs	r3, #2
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	4668      	mov	r0, sp
 800a08c:	f000 f8a6 	bl	800a1dc <matherr>
 800a090:	2800      	cmp	r0, #0
 800a092:	d0e8      	beq.n	800a066 <log10+0x9e>
 800a094:	9b08      	ldr	r3, [sp, #32]
 800a096:	b11b      	cbz	r3, 800a0a0 <log10+0xd8>
 800a098:	f7ff fa80 	bl	800959c <__errno>
 800a09c:	9b08      	ldr	r3, [sp, #32]
 800a09e:	6003      	str	r3, [r0, #0]
 800a0a0:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a0a4:	eeb0 0a48 	vmov.f32	s0, s16
 800a0a8:	eef0 0a68 	vmov.f32	s1, s17
 800a0ac:	b00b      	add	sp, #44	; 0x2c
 800a0ae:	ecbd 8b02 	vpop	{d8}
 800a0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0b4:	20000084 	.word	0x20000084
 800a0b8:	0800a870 	.word	0x0800a870
 800a0bc:	c7efffff 	.word	0xc7efffff
 800a0c0:	fff00000 	.word	0xfff00000
 800a0c4:	0800a842 	.word	0x0800a842

0800a0c8 <__ieee754_log10>:
 800a0c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0cc:	ec55 4b10 	vmov	r4, r5, d0
 800a0d0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	da2f      	bge.n	800a138 <__ieee754_log10+0x70>
 800a0d8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800a0dc:	4322      	orrs	r2, r4
 800a0de:	d10a      	bne.n	800a0f6 <__ieee754_log10+0x2e>
 800a0e0:	493b      	ldr	r1, [pc, #236]	; (800a1d0 <__ieee754_log10+0x108>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	f7f6 fbb0 	bl	800084c <__aeabi_ddiv>
 800a0ec:	ec41 0b10 	vmov	d0, r0, r1
 800a0f0:	b003      	add	sp, #12
 800a0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f6:	2d00      	cmp	r5, #0
 800a0f8:	da08      	bge.n	800a10c <__ieee754_log10+0x44>
 800a0fa:	ee10 2a10 	vmov	r2, s0
 800a0fe:	4620      	mov	r0, r4
 800a100:	4629      	mov	r1, r5
 800a102:	f7f6 f8c1 	bl	8000288 <__aeabi_dsub>
 800a106:	2200      	movs	r2, #0
 800a108:	2300      	movs	r3, #0
 800a10a:	e7ed      	b.n	800a0e8 <__ieee754_log10+0x20>
 800a10c:	2200      	movs	r2, #0
 800a10e:	4b31      	ldr	r3, [pc, #196]	; (800a1d4 <__ieee754_log10+0x10c>)
 800a110:	4629      	mov	r1, r5
 800a112:	ee10 0a10 	vmov	r0, s0
 800a116:	f7f6 fa6f 	bl	80005f8 <__aeabi_dmul>
 800a11a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800a11e:	4604      	mov	r4, r0
 800a120:	460d      	mov	r5, r1
 800a122:	460b      	mov	r3, r1
 800a124:	492c      	ldr	r1, [pc, #176]	; (800a1d8 <__ieee754_log10+0x110>)
 800a126:	428b      	cmp	r3, r1
 800a128:	dd08      	ble.n	800a13c <__ieee754_log10+0x74>
 800a12a:	4622      	mov	r2, r4
 800a12c:	462b      	mov	r3, r5
 800a12e:	4620      	mov	r0, r4
 800a130:	4629      	mov	r1, r5
 800a132:	f7f6 f8ab 	bl	800028c <__adddf3>
 800a136:	e7d9      	b.n	800a0ec <__ieee754_log10+0x24>
 800a138:	2200      	movs	r2, #0
 800a13a:	e7f3      	b.n	800a124 <__ieee754_log10+0x5c>
 800a13c:	1518      	asrs	r0, r3, #20
 800a13e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800a142:	4410      	add	r0, r2
 800a144:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800a148:	4448      	add	r0, r9
 800a14a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800a14e:	f7f6 f9e9 	bl	8000524 <__aeabi_i2d>
 800a152:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800a156:	3303      	adds	r3, #3
 800a158:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800a15c:	ec45 4b10 	vmov	d0, r4, r5
 800a160:	4606      	mov	r6, r0
 800a162:	460f      	mov	r7, r1
 800a164:	f000 f844 	bl	800a1f0 <__ieee754_log>
 800a168:	a313      	add	r3, pc, #76	; (adr r3, 800a1b8 <__ieee754_log10+0xf0>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	4630      	mov	r0, r6
 800a170:	4639      	mov	r1, r7
 800a172:	ed8d 0b00 	vstr	d0, [sp]
 800a176:	f7f6 fa3f 	bl	80005f8 <__aeabi_dmul>
 800a17a:	ed9d 0b00 	vldr	d0, [sp]
 800a17e:	4604      	mov	r4, r0
 800a180:	460d      	mov	r5, r1
 800a182:	a30f      	add	r3, pc, #60	; (adr r3, 800a1c0 <__ieee754_log10+0xf8>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	ec51 0b10 	vmov	r0, r1, d0
 800a18c:	f7f6 fa34 	bl	80005f8 <__aeabi_dmul>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	4620      	mov	r0, r4
 800a196:	4629      	mov	r1, r5
 800a198:	f7f6 f878 	bl	800028c <__adddf3>
 800a19c:	a30a      	add	r3, pc, #40	; (adr r3, 800a1c8 <__ieee754_log10+0x100>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	460d      	mov	r5, r1
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	f7f6 fa25 	bl	80005f8 <__aeabi_dmul>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	e7bc      	b.n	800a132 <__ieee754_log10+0x6a>
 800a1b8:	11f12b36 	.word	0x11f12b36
 800a1bc:	3d59fef3 	.word	0x3d59fef3
 800a1c0:	1526e50e 	.word	0x1526e50e
 800a1c4:	3fdbcb7b 	.word	0x3fdbcb7b
 800a1c8:	509f6000 	.word	0x509f6000
 800a1cc:	3fd34413 	.word	0x3fd34413
 800a1d0:	c3500000 	.word	0xc3500000
 800a1d4:	43500000 	.word	0x43500000
 800a1d8:	7fefffff 	.word	0x7fefffff

0800a1dc <matherr>:
 800a1dc:	2000      	movs	r0, #0
 800a1de:	4770      	bx	lr

0800a1e0 <nan>:
 800a1e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a1e8 <nan+0x8>
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	00000000 	.word	0x00000000
 800a1ec:	7ff80000 	.word	0x7ff80000

0800a1f0 <__ieee754_log>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	ec51 0b10 	vmov	r0, r1, d0
 800a1f8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a1fc:	b087      	sub	sp, #28
 800a1fe:	460d      	mov	r5, r1
 800a200:	da27      	bge.n	800a252 <__ieee754_log+0x62>
 800a202:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a206:	4303      	orrs	r3, r0
 800a208:	ee10 2a10 	vmov	r2, s0
 800a20c:	d10a      	bne.n	800a224 <__ieee754_log+0x34>
 800a20e:	49cc      	ldr	r1, [pc, #816]	; (800a540 <__ieee754_log+0x350>)
 800a210:	2200      	movs	r2, #0
 800a212:	2300      	movs	r3, #0
 800a214:	2000      	movs	r0, #0
 800a216:	f7f6 fb19 	bl	800084c <__aeabi_ddiv>
 800a21a:	ec41 0b10 	vmov	d0, r0, r1
 800a21e:	b007      	add	sp, #28
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a224:	2900      	cmp	r1, #0
 800a226:	da05      	bge.n	800a234 <__ieee754_log+0x44>
 800a228:	460b      	mov	r3, r1
 800a22a:	f7f6 f82d 	bl	8000288 <__aeabi_dsub>
 800a22e:	2200      	movs	r2, #0
 800a230:	2300      	movs	r3, #0
 800a232:	e7f0      	b.n	800a216 <__ieee754_log+0x26>
 800a234:	4bc3      	ldr	r3, [pc, #780]	; (800a544 <__ieee754_log+0x354>)
 800a236:	2200      	movs	r2, #0
 800a238:	f7f6 f9de 	bl	80005f8 <__aeabi_dmul>
 800a23c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a240:	460d      	mov	r5, r1
 800a242:	4ac1      	ldr	r2, [pc, #772]	; (800a548 <__ieee754_log+0x358>)
 800a244:	4295      	cmp	r5, r2
 800a246:	dd06      	ble.n	800a256 <__ieee754_log+0x66>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	f7f6 f81e 	bl	800028c <__adddf3>
 800a250:	e7e3      	b.n	800a21a <__ieee754_log+0x2a>
 800a252:	2300      	movs	r3, #0
 800a254:	e7f5      	b.n	800a242 <__ieee754_log+0x52>
 800a256:	152c      	asrs	r4, r5, #20
 800a258:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a25c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a260:	441c      	add	r4, r3
 800a262:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a266:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a26a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a26e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a272:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a276:	ea42 0105 	orr.w	r1, r2, r5
 800a27a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a27e:	2200      	movs	r2, #0
 800a280:	4bb2      	ldr	r3, [pc, #712]	; (800a54c <__ieee754_log+0x35c>)
 800a282:	f7f6 f801 	bl	8000288 <__aeabi_dsub>
 800a286:	1cab      	adds	r3, r5, #2
 800a288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	4682      	mov	sl, r0
 800a290:	468b      	mov	fp, r1
 800a292:	f04f 0200 	mov.w	r2, #0
 800a296:	dc53      	bgt.n	800a340 <__ieee754_log+0x150>
 800a298:	2300      	movs	r3, #0
 800a29a:	f7f6 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 800a29e:	b1d0      	cbz	r0, 800a2d6 <__ieee754_log+0xe6>
 800a2a0:	2c00      	cmp	r4, #0
 800a2a2:	f000 8120 	beq.w	800a4e6 <__ieee754_log+0x2f6>
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f7f6 f93c 	bl	8000524 <__aeabi_i2d>
 800a2ac:	a390      	add	r3, pc, #576	; (adr r3, 800a4f0 <__ieee754_log+0x300>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	460f      	mov	r7, r1
 800a2b6:	f7f6 f99f 	bl	80005f8 <__aeabi_dmul>
 800a2ba:	a38f      	add	r3, pc, #572	; (adr r3, 800a4f8 <__ieee754_log+0x308>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	f7f6 f996 	bl	80005f8 <__aeabi_dmul>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	e7ba      	b.n	800a24c <__ieee754_log+0x5c>
 800a2d6:	a38a      	add	r3, pc, #552	; (adr r3, 800a500 <__ieee754_log+0x310>)
 800a2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2dc:	4650      	mov	r0, sl
 800a2de:	4659      	mov	r1, fp
 800a2e0:	f7f6 f98a 	bl	80005f8 <__aeabi_dmul>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	4999      	ldr	r1, [pc, #612]	; (800a550 <__ieee754_log+0x360>)
 800a2ec:	f7f5 ffcc 	bl	8000288 <__aeabi_dsub>
 800a2f0:	4652      	mov	r2, sl
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	460f      	mov	r7, r1
 800a2f6:	465b      	mov	r3, fp
 800a2f8:	4650      	mov	r0, sl
 800a2fa:	4659      	mov	r1, fp
 800a2fc:	f7f6 f97c 	bl	80005f8 <__aeabi_dmul>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4630      	mov	r0, r6
 800a306:	4639      	mov	r1, r7
 800a308:	f7f6 f976 	bl	80005f8 <__aeabi_dmul>
 800a30c:	4606      	mov	r6, r0
 800a30e:	460f      	mov	r7, r1
 800a310:	b914      	cbnz	r4, 800a318 <__ieee754_log+0x128>
 800a312:	4632      	mov	r2, r6
 800a314:	463b      	mov	r3, r7
 800a316:	e0a0      	b.n	800a45a <__ieee754_log+0x26a>
 800a318:	4620      	mov	r0, r4
 800a31a:	f7f6 f903 	bl	8000524 <__aeabi_i2d>
 800a31e:	a374      	add	r3, pc, #464	; (adr r3, 800a4f0 <__ieee754_log+0x300>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	4680      	mov	r8, r0
 800a326:	4689      	mov	r9, r1
 800a328:	f7f6 f966 	bl	80005f8 <__aeabi_dmul>
 800a32c:	a372      	add	r3, pc, #456	; (adr r3, 800a4f8 <__ieee754_log+0x308>)
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	4604      	mov	r4, r0
 800a334:	460d      	mov	r5, r1
 800a336:	4640      	mov	r0, r8
 800a338:	4649      	mov	r1, r9
 800a33a:	f7f6 f95d 	bl	80005f8 <__aeabi_dmul>
 800a33e:	e0a5      	b.n	800a48c <__ieee754_log+0x29c>
 800a340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a344:	f7f5 ffa2 	bl	800028c <__adddf3>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	4650      	mov	r0, sl
 800a34e:	4659      	mov	r1, fp
 800a350:	f7f6 fa7c 	bl	800084c <__aeabi_ddiv>
 800a354:	e9cd 0100 	strd	r0, r1, [sp]
 800a358:	4620      	mov	r0, r4
 800a35a:	f7f6 f8e3 	bl	8000524 <__aeabi_i2d>
 800a35e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a366:	4610      	mov	r0, r2
 800a368:	4619      	mov	r1, r3
 800a36a:	f7f6 f945 	bl	80005f8 <__aeabi_dmul>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a376:	f7f6 f93f 	bl	80005f8 <__aeabi_dmul>
 800a37a:	a363      	add	r3, pc, #396	; (adr r3, 800a508 <__ieee754_log+0x318>)
 800a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a380:	4680      	mov	r8, r0
 800a382:	4689      	mov	r9, r1
 800a384:	f7f6 f938 	bl	80005f8 <__aeabi_dmul>
 800a388:	a361      	add	r3, pc, #388	; (adr r3, 800a510 <__ieee754_log+0x320>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f5 ff7d 	bl	800028c <__adddf3>
 800a392:	4642      	mov	r2, r8
 800a394:	464b      	mov	r3, r9
 800a396:	f7f6 f92f 	bl	80005f8 <__aeabi_dmul>
 800a39a:	a35f      	add	r3, pc, #380	; (adr r3, 800a518 <__ieee754_log+0x328>)
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	f7f5 ff74 	bl	800028c <__adddf3>
 800a3a4:	4642      	mov	r2, r8
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	f7f6 f926 	bl	80005f8 <__aeabi_dmul>
 800a3ac:	a35c      	add	r3, pc, #368	; (adr r3, 800a520 <__ieee754_log+0x330>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f7f5 ff6b 	bl	800028c <__adddf3>
 800a3b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3ba:	f7f6 f91d 	bl	80005f8 <__aeabi_dmul>
 800a3be:	a35a      	add	r3, pc, #360	; (adr r3, 800a528 <__ieee754_log+0x338>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	f7f6 f914 	bl	80005f8 <__aeabi_dmul>
 800a3d0:	a357      	add	r3, pc, #348	; (adr r3, 800a530 <__ieee754_log+0x340>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f5 ff59 	bl	800028c <__adddf3>
 800a3da:	4642      	mov	r2, r8
 800a3dc:	464b      	mov	r3, r9
 800a3de:	f7f6 f90b 	bl	80005f8 <__aeabi_dmul>
 800a3e2:	a355      	add	r3, pc, #340	; (adr r3, 800a538 <__ieee754_log+0x348>)
 800a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e8:	f7f5 ff50 	bl	800028c <__adddf3>
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	f7f6 f902 	bl	80005f8 <__aeabi_dmul>
 800a3f4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a404:	f7f5 ff42 	bl	800028c <__adddf3>
 800a408:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800a40c:	3551      	adds	r5, #81	; 0x51
 800a40e:	4335      	orrs	r5, r6
 800a410:	2d00      	cmp	r5, #0
 800a412:	4680      	mov	r8, r0
 800a414:	4689      	mov	r9, r1
 800a416:	dd48      	ble.n	800a4aa <__ieee754_log+0x2ba>
 800a418:	2200      	movs	r2, #0
 800a41a:	4b4d      	ldr	r3, [pc, #308]	; (800a550 <__ieee754_log+0x360>)
 800a41c:	4650      	mov	r0, sl
 800a41e:	4659      	mov	r1, fp
 800a420:	f7f6 f8ea 	bl	80005f8 <__aeabi_dmul>
 800a424:	4652      	mov	r2, sl
 800a426:	465b      	mov	r3, fp
 800a428:	f7f6 f8e6 	bl	80005f8 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4606      	mov	r6, r0
 800a432:	460f      	mov	r7, r1
 800a434:	4640      	mov	r0, r8
 800a436:	4649      	mov	r1, r9
 800a438:	f7f5 ff28 	bl	800028c <__adddf3>
 800a43c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a440:	f7f6 f8da 	bl	80005f8 <__aeabi_dmul>
 800a444:	4680      	mov	r8, r0
 800a446:	4689      	mov	r9, r1
 800a448:	b964      	cbnz	r4, 800a464 <__ieee754_log+0x274>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4630      	mov	r0, r6
 800a450:	4639      	mov	r1, r7
 800a452:	f7f5 ff19 	bl	8000288 <__aeabi_dsub>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4650      	mov	r0, sl
 800a45c:	4659      	mov	r1, fp
 800a45e:	f7f5 ff13 	bl	8000288 <__aeabi_dsub>
 800a462:	e6da      	b.n	800a21a <__ieee754_log+0x2a>
 800a464:	a322      	add	r3, pc, #136	; (adr r3, 800a4f0 <__ieee754_log+0x300>)
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a46e:	f7f6 f8c3 	bl	80005f8 <__aeabi_dmul>
 800a472:	a321      	add	r3, pc, #132	; (adr r3, 800a4f8 <__ieee754_log+0x308>)
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	4604      	mov	r4, r0
 800a47a:	460d      	mov	r5, r1
 800a47c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a480:	f7f6 f8ba 	bl	80005f8 <__aeabi_dmul>
 800a484:	4642      	mov	r2, r8
 800a486:	464b      	mov	r3, r9
 800a488:	f7f5 ff00 	bl	800028c <__adddf3>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4630      	mov	r0, r6
 800a492:	4639      	mov	r1, r7
 800a494:	f7f5 fef8 	bl	8000288 <__aeabi_dsub>
 800a498:	4652      	mov	r2, sl
 800a49a:	465b      	mov	r3, fp
 800a49c:	f7f5 fef4 	bl	8000288 <__aeabi_dsub>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	e7d9      	b.n	800a45e <__ieee754_log+0x26e>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	4659      	mov	r1, fp
 800a4b2:	f7f5 fee9 	bl	8000288 <__aeabi_dsub>
 800a4b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4ba:	f7f6 f89d 	bl	80005f8 <__aeabi_dmul>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	460f      	mov	r7, r1
 800a4c2:	2c00      	cmp	r4, #0
 800a4c4:	f43f af25 	beq.w	800a312 <__ieee754_log+0x122>
 800a4c8:	a309      	add	r3, pc, #36	; (adr r3, 800a4f0 <__ieee754_log+0x300>)
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4d2:	f7f6 f891 	bl	80005f8 <__aeabi_dmul>
 800a4d6:	a308      	add	r3, pc, #32	; (adr r3, 800a4f8 <__ieee754_log+0x308>)
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	4604      	mov	r4, r0
 800a4de:	460d      	mov	r5, r1
 800a4e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4e4:	e729      	b.n	800a33a <__ieee754_log+0x14a>
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	e696      	b.n	800a21a <__ieee754_log+0x2a>
 800a4ec:	f3af 8000 	nop.w
 800a4f0:	fee00000 	.word	0xfee00000
 800a4f4:	3fe62e42 	.word	0x3fe62e42
 800a4f8:	35793c76 	.word	0x35793c76
 800a4fc:	3dea39ef 	.word	0x3dea39ef
 800a500:	55555555 	.word	0x55555555
 800a504:	3fd55555 	.word	0x3fd55555
 800a508:	df3e5244 	.word	0xdf3e5244
 800a50c:	3fc2f112 	.word	0x3fc2f112
 800a510:	96cb03de 	.word	0x96cb03de
 800a514:	3fc74664 	.word	0x3fc74664
 800a518:	94229359 	.word	0x94229359
 800a51c:	3fd24924 	.word	0x3fd24924
 800a520:	55555593 	.word	0x55555593
 800a524:	3fe55555 	.word	0x3fe55555
 800a528:	d078c69f 	.word	0xd078c69f
 800a52c:	3fc39a09 	.word	0x3fc39a09
 800a530:	1d8e78af 	.word	0x1d8e78af
 800a534:	3fcc71c5 	.word	0x3fcc71c5
 800a538:	9997fa04 	.word	0x9997fa04
 800a53c:	3fd99999 	.word	0x3fd99999
 800a540:	c3500000 	.word	0xc3500000
 800a544:	43500000 	.word	0x43500000
 800a548:	7fefffff 	.word	0x7fefffff
 800a54c:	3ff00000 	.word	0x3ff00000
 800a550:	3fe00000 	.word	0x3fe00000

0800a554 <_init>:
 800a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a556:	bf00      	nop
 800a558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55a:	bc08      	pop	{r3}
 800a55c:	469e      	mov	lr, r3
 800a55e:	4770      	bx	lr

0800a560 <_fini>:
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a562:	bf00      	nop
 800a564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a566:	bc08      	pop	{r3}
 800a568:	469e      	mov	lr, r3
 800a56a:	4770      	bx	lr
