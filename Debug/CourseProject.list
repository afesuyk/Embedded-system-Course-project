
CourseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009228  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  080093c8  080093c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009634  08009634  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800963c  0800963c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009640  08009640  00019640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004378  20000088  080096cc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004400  080096cc  00024400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013903  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d0c  00000000  00000000  000339bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  000366c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  00037640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018959  00000000  00000000  00038480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d7a7  00000000  00000000  00050dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009117a  00000000  00000000  0005e580  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef6fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042cc  00000000  00000000  000ef778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093b0 	.word	0x080093b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080093b0 	.word	0x080093b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9bd 	b.w	800061c <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b972 	b.w	800061c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	4688      	mov	r8, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14b      	bne.n	80003f6 <__udivmoddi4+0xa6>
 800035e:	428a      	cmp	r2, r1
 8000360:	4615      	mov	r5, r2
 8000362:	d967      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0720 	rsb	r7, r2, #32
 800036e:	fa01 f302 	lsl.w	r3, r1, r2
 8000372:	fa20 f707 	lsr.w	r7, r0, r7
 8000376:	4095      	lsls	r5, r2
 8000378:	ea47 0803 	orr.w	r8, r7, r3
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbb8 f7fe 	udiv	r7, r8, lr
 8000388:	fa1f fc85 	uxth.w	ip, r5
 800038c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000390:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000394:	fb07 f10c 	mul.w	r1, r7, ip
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18eb      	adds	r3, r5, r3
 800039e:	f107 30ff 	add.w	r0, r7, #4294967295
 80003a2:	f080 811b 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8118 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003ac:	3f02      	subs	r7, #2
 80003ae:	442b      	add	r3, r5
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	192c      	adds	r4, r5, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003d8:	3802      	subs	r0, #2
 80003da:	442c      	add	r4, r5
 80003dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003e0:	eba4 040c 	sub.w	r4, r4, ip
 80003e4:	2700      	movs	r7, #0
 80003e6:	b11e      	cbz	r6, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c6 4300 	strd	r4, r3, [r6]
 80003f0:	4639      	mov	r1, r7
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xbe>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80eb 	beq.w	80005d6 <__udivmoddi4+0x286>
 8000400:	2700      	movs	r7, #0
 8000402:	e9c6 0100 	strd	r0, r1, [r6]
 8000406:	4638      	mov	r0, r7
 8000408:	4639      	mov	r1, r7
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f783 	clz	r7, r3
 8000412:	2f00      	cmp	r7, #0
 8000414:	d147      	bne.n	80004a6 <__udivmoddi4+0x156>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd0>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80fa 	bhi.w	8000614 <__udivmoddi4+0x2c4>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	4698      	mov	r8, r3
 800042a:	2e00      	cmp	r6, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800042e:	e9c6 4800 	strd	r4, r8, [r6]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xe8>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 808f 	bne.w	8000560 <__udivmoddi4+0x210>
 8000442:	1b49      	subs	r1, r1, r5
 8000444:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000448:	fa1f f885 	uxth.w	r8, r5
 800044c:	2701      	movs	r7, #1
 800044e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000452:	0c23      	lsrs	r3, r4, #16
 8000454:	fb0e 111c 	mls	r1, lr, ip, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb08 f10c 	mul.w	r1, r8, ip
 8000460:	4299      	cmp	r1, r3
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x124>
 8000464:	18eb      	adds	r3, r5, r3
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4299      	cmp	r1, r3
 800046e:	f200 80cd 	bhi.w	800060c <__udivmoddi4+0x2bc>
 8000472:	4684      	mov	ip, r0
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000480:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x14c>
 800048c:	192c      	adds	r4, r5, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x14a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80b6 	bhi.w	8000606 <__udivmoddi4+0x2b6>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e79f      	b.n	80003e6 <__udivmoddi4+0x96>
 80004a6:	f1c7 0c20 	rsb	ip, r7, #32
 80004aa:	40bb      	lsls	r3, r7
 80004ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b4:	fa01 f407 	lsl.w	r4, r1, r7
 80004b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004c4:	4325      	orrs	r5, r4
 80004c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ca:	0c2c      	lsrs	r4, r5, #16
 80004cc:	fb08 3319 	mls	r3, r8, r9, r3
 80004d0:	fa1f fa8e 	uxth.w	sl, lr
 80004d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004d8:	fb09 f40a 	mul.w	r4, r9, sl
 80004dc:	429c      	cmp	r4, r3
 80004de:	fa02 f207 	lsl.w	r2, r2, r7
 80004e2:	fa00 f107 	lsl.w	r1, r0, r7
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f0:	f080 8087 	bcs.w	8000602 <__udivmoddi4+0x2b2>
 80004f4:	429c      	cmp	r4, r3
 80004f6:	f240 8084 	bls.w	8000602 <__udivmoddi4+0x2b2>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4473      	add	r3, lr
 8000500:	1b1b      	subs	r3, r3, r4
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3310 	mls	r3, r8, r0, r3
 800050c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000510:	fb00 fa0a 	mul.w	sl, r0, sl
 8000514:	45a2      	cmp	sl, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1e 0404 	adds.w	r4, lr, r4
 800051c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000520:	d26b      	bcs.n	80005fa <__udivmoddi4+0x2aa>
 8000522:	45a2      	cmp	sl, r4
 8000524:	d969      	bls.n	80005fa <__udivmoddi4+0x2aa>
 8000526:	3802      	subs	r0, #2
 8000528:	4474      	add	r4, lr
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	fba0 8902 	umull	r8, r9, r0, r2
 8000532:	eba4 040a 	sub.w	r4, r4, sl
 8000536:	454c      	cmp	r4, r9
 8000538:	46c2      	mov	sl, r8
 800053a:	464b      	mov	r3, r9
 800053c:	d354      	bcc.n	80005e8 <__udivmoddi4+0x298>
 800053e:	d051      	beq.n	80005e4 <__udivmoddi4+0x294>
 8000540:	2e00      	cmp	r6, #0
 8000542:	d069      	beq.n	8000618 <__udivmoddi4+0x2c8>
 8000544:	ebb1 050a 	subs.w	r5, r1, sl
 8000548:	eb64 0403 	sbc.w	r4, r4, r3
 800054c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000550:	40fd      	lsrs	r5, r7
 8000552:	40fc      	lsrs	r4, r7
 8000554:	ea4c 0505 	orr.w	r5, ip, r5
 8000558:	e9c6 5400 	strd	r5, r4, [r6]
 800055c:	2700      	movs	r7, #0
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000560:	f1c2 0320 	rsb	r3, r2, #32
 8000564:	fa20 f703 	lsr.w	r7, r0, r3
 8000568:	4095      	lsls	r5, r2
 800056a:	fa01 f002 	lsl.w	r0, r1, r2
 800056e:	fa21 f303 	lsr.w	r3, r1, r3
 8000572:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000576:	4338      	orrs	r0, r7
 8000578:	0c01      	lsrs	r1, r0, #16
 800057a:	fbb3 f7fe 	udiv	r7, r3, lr
 800057e:	fa1f f885 	uxth.w	r8, r5
 8000582:	fb0e 3317 	mls	r3, lr, r7, r3
 8000586:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058a:	fb07 f308 	mul.w	r3, r7, r8
 800058e:	428b      	cmp	r3, r1
 8000590:	fa04 f402 	lsl.w	r4, r4, r2
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x256>
 8000596:	1869      	adds	r1, r5, r1
 8000598:	f107 3cff 	add.w	ip, r7, #4294967295
 800059c:	d22f      	bcs.n	80005fe <__udivmoddi4+0x2ae>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d92d      	bls.n	80005fe <__udivmoddi4+0x2ae>
 80005a2:	3f02      	subs	r7, #2
 80005a4:	4429      	add	r1, r5
 80005a6:	1acb      	subs	r3, r1, r3
 80005a8:	b281      	uxth	r1, r0
 80005aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80005b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b6:	fb00 f308 	mul.w	r3, r0, r8
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d907      	bls.n	80005ce <__udivmoddi4+0x27e>
 80005be:	1869      	adds	r1, r5, r1
 80005c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005c4:	d217      	bcs.n	80005f6 <__udivmoddi4+0x2a6>
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d915      	bls.n	80005f6 <__udivmoddi4+0x2a6>
 80005ca:	3802      	subs	r0, #2
 80005cc:	4429      	add	r1, r5
 80005ce:	1ac9      	subs	r1, r1, r3
 80005d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005d4:	e73b      	b.n	800044e <__udivmoddi4+0xfe>
 80005d6:	4637      	mov	r7, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e709      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005dc:	4607      	mov	r7, r0
 80005de:	e6e7      	b.n	80003b0 <__udivmoddi4+0x60>
 80005e0:	4618      	mov	r0, r3
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e4:	4541      	cmp	r1, r8
 80005e6:	d2ab      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ec:	eb69 020e 	sbc.w	r2, r9, lr
 80005f0:	3801      	subs	r0, #1
 80005f2:	4613      	mov	r3, r2
 80005f4:	e7a4      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f6:	4660      	mov	r0, ip
 80005f8:	e7e9      	b.n	80005ce <__udivmoddi4+0x27e>
 80005fa:	4618      	mov	r0, r3
 80005fc:	e795      	b.n	800052a <__udivmoddi4+0x1da>
 80005fe:	4667      	mov	r7, ip
 8000600:	e7d1      	b.n	80005a6 <__udivmoddi4+0x256>
 8000602:	4681      	mov	r9, r0
 8000604:	e77c      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000606:	3802      	subs	r0, #2
 8000608:	442c      	add	r4, r5
 800060a:	e747      	b.n	800049c <__udivmoddi4+0x14c>
 800060c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000610:	442b      	add	r3, r5
 8000612:	e72f      	b.n	8000474 <__udivmoddi4+0x124>
 8000614:	4638      	mov	r0, r7
 8000616:	e708      	b.n	800042a <__udivmoddi4+0xda>
 8000618:	4637      	mov	r7, r6
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0xa0>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <bcdToDec>:

uint8_t decToBcd(int val) {
  return (uint8_t)( (val/10*16) + (val%10) );
}

int bcdToDec(uint8_t val) {
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	091b      	lsrs	r3, r3, #4
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	4613      	mov	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	461a      	mov	r2, r3
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	4413      	add	r3, r2
}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <Get_Time>:
	set_time[5] = decToBcd(month);
	set_time[6] = decToBcd(year);
	HAL_I2C_Mem_Write(hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time (I2C_HandleTypeDef *hi2c3) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af04      	add	r7, sp, #16
 8000656:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	2307      	movs	r3, #7
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	2200      	movs	r2, #0
 800066c:	21d0      	movs	r1, #208	; 0xd0
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f003 fa4e 	bl	8003b10 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000674:	7a3b      	ldrb	r3, [r7, #8]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffd2 	bl	8000620 <bcdToDec>
 800067c:	4603      	mov	r3, r0
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <Get_Time+0x9c>)
 8000682:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000684:	7a7b      	ldrb	r3, [r7, #9]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ffca 	bl	8000620 <bcdToDec>
 800068c:	4603      	mov	r3, r0
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <Get_Time+0x9c>)
 8000692:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000694:	7abb      	ldrb	r3, [r7, #10]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffc2 	bl	8000620 <bcdToDec>
 800069c:	4603      	mov	r3, r0
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <Get_Time+0x9c>)
 80006a2:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80006a4:	7afb      	ldrb	r3, [r7, #11]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ffba 	bl	8000620 <bcdToDec>
 80006ac:	4603      	mov	r3, r0
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <Get_Time+0x9c>)
 80006b2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80006b4:	7b3b      	ldrb	r3, [r7, #12]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffb2 	bl	8000620 <bcdToDec>
 80006bc:	4603      	mov	r3, r0
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <Get_Time+0x9c>)
 80006c2:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80006c4:	7b7b      	ldrb	r3, [r7, #13]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffaa 	bl	8000620 <bcdToDec>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <Get_Time+0x9c>)
 80006d2:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80006d4:	7bbb      	ldrb	r3, [r7, #14]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffa2 	bl	8000620 <bcdToDec>
 80006dc:	4603      	mov	r3, r0
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b02      	ldr	r3, [pc, #8]	; (80006ec <Get_Time+0x9c>)
 80006e2:	719a      	strb	r2, [r3, #6]
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20004074 	.word	0x20004074

080006f0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2203      	movs	r2, #3
 80006fc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2203      	movs	r2, #3
 8000708:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2203      	movs	r2, #3
 800070e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2203      	movs	r2, #3
 8000714:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2203      	movs	r2, #3
 800071a:	715a      	strb	r2, [r3, #5]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af04      	add	r7, sp, #16
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	460b      	mov	r3, r1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	b29a      	uxth	r2, r3
 8000746:	8af9      	ldrh	r1, [r7, #22]
 8000748:	f241 3388 	movw	r3, #5000	; 0x1388
 800074c:	9302      	str	r3, [sp, #8]
 800074e:	2302      	movs	r3, #2
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	f003 f9d9 	bl	8003b10 <HAL_I2C_Mem_Read>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d10b      	bne.n	800077c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000764:	7d7b      	ldrb	r3, [r7, #21]
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	b21a      	sxth	r2, r3
 800076a:	7d3b      	ldrb	r3, [r7, #20]
 800076c:	b21b      	sxth	r3, r3
 800076e:	4313      	orrs	r3, r2
 8000770:	b21b      	sxth	r3, r3
 8000772:	b29a      	uxth	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	801a      	strh	r2, [r3, #0]
		return true;
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <read_register16+0x56>
	} else
		return false;
 800077c:	2300      	movs	r3, #0

}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000786:	b590      	push	{r4, r7, lr}
 8000788:	b08b      	sub	sp, #44	; 0x2c
 800078a:	af04      	add	r7, sp, #16
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	461a      	mov	r2, r3
 8000792:	460b      	mov	r3, r1
 8000794:	72fb      	strb	r3, [r7, #11]
 8000796:	4613      	mov	r3, r2
 8000798:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007a6:	7afb      	ldrb	r3, [r7, #11]
 80007a8:	b29c      	uxth	r4, r3
 80007aa:	7abb      	ldrb	r3, [r7, #10]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	8af9      	ldrh	r1, [r7, #22]
 80007b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80007b4:	9202      	str	r2, [sp, #8]
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	4622      	mov	r2, r4
 80007c0:	f003 f9a6 	bl	8003b10 <HAL_I2C_Mem_Read>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d101      	bne.n	80007ce <read_data+0x48>
		return 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e000      	b.n	80007d0 <read_data+0x4a>
	else
		return 1;
 80007ce:	2301      	movs	r3, #1

}
 80007d0:	4618      	mov	r0, r3
 80007d2:	371c      	adds	r7, #28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}

080007d8 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	461a      	mov	r2, r3
 80007e4:	2188      	movs	r1, #136	; 0x88
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff9e 	bl	8000728 <read_register16>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d06f      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3302      	adds	r3, #2
 80007f6:	461a      	mov	r2, r3
 80007f8:	218a      	movs	r1, #138	; 0x8a
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff94 	bl	8000728 <read_register16>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d065      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3304      	adds	r3, #4
 800080a:	461a      	mov	r2, r3
 800080c:	218c      	movs	r1, #140	; 0x8c
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff8a 	bl	8000728 <read_register16>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d05b      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3306      	adds	r3, #6
 800081e:	461a      	mov	r2, r3
 8000820:	218e      	movs	r1, #142	; 0x8e
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff80 	bl	8000728 <read_register16>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d051      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3308      	adds	r3, #8
 8000832:	461a      	mov	r2, r3
 8000834:	2190      	movs	r1, #144	; 0x90
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ff76 	bl	8000728 <read_register16>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d047      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	330a      	adds	r3, #10
 8000846:	461a      	mov	r2, r3
 8000848:	2192      	movs	r1, #146	; 0x92
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ff6c 	bl	8000728 <read_register16>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d03d      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	330c      	adds	r3, #12
 800085a:	461a      	mov	r2, r3
 800085c:	2194      	movs	r1, #148	; 0x94
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ff62 	bl	8000728 <read_register16>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d033      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	330e      	adds	r3, #14
 800086e:	461a      	mov	r2, r3
 8000870:	2196      	movs	r1, #150	; 0x96
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ff58 	bl	8000728 <read_register16>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d029      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3310      	adds	r3, #16
 8000882:	461a      	mov	r2, r3
 8000884:	2198      	movs	r1, #152	; 0x98
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ff4e 	bl	8000728 <read_register16>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d01f      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3312      	adds	r3, #18
 8000896:	461a      	mov	r2, r3
 8000898:	219a      	movs	r1, #154	; 0x9a
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff44 	bl	8000728 <read_register16>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d015      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3314      	adds	r3, #20
 80008aa:	461a      	mov	r2, r3
 80008ac:	219c      	movs	r1, #156	; 0x9c
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ff3a 	bl	8000728 <read_register16>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00b      	beq.n	80008d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80008be:	461a      	mov	r2, r3
 80008c0:	219e      	movs	r1, #158	; 0x9e
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ff30 	bl	8000728 <read_register16>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <read_calibration_data+0xfa>

		return true;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e000      	b.n	80008d4 <read_calibration_data+0xfc>
	}

	return false;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f103 0218 	add.w	r2, r3, #24
 80008ea:	2301      	movs	r3, #1
 80008ec:	21a1      	movs	r1, #161	; 0xa1
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ff49 	bl	8000786 <read_data>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d14b      	bne.n	8000992 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	331a      	adds	r3, #26
 80008fe:	461a      	mov	r2, r3
 8000900:	21e1      	movs	r1, #225	; 0xe1
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff10 	bl	8000728 <read_register16>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d041      	beq.n	8000992 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f103 021c 	add.w	r2, r3, #28
 8000914:	2301      	movs	r3, #1
 8000916:	21e3      	movs	r1, #227	; 0xe3
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff34 	bl	8000786 <read_data>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d136      	bne.n	8000992 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000924:	f107 030e 	add.w	r3, r7, #14
 8000928:	461a      	mov	r2, r3
 800092a:	21e4      	movs	r1, #228	; 0xe4
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fefb 	bl	8000728 <read_register16>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d02c      	beq.n	8000992 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	461a      	mov	r2, r3
 800093e:	21e5      	movs	r1, #229	; 0xe5
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fef1 	bl	8000728 <read_register16>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d022      	beq.n	8000992 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000952:	2301      	movs	r3, #1
 8000954:	21e7      	movs	r1, #231	; 0xe7
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ff15 	bl	8000786 <read_data>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d117      	bne.n	8000992 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	b21b      	sxth	r3, r3
 8000968:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800096c:	b21a      	sxth	r2, r3
 800096e:	89fb      	ldrh	r3, [r7, #14]
 8000970:	121b      	asrs	r3, r3, #8
 8000972:	b21b      	sxth	r3, r3
 8000974:	f003 030f 	and.w	r3, r3, #15
 8000978:	b21b      	sxth	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b21a      	sxth	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000982:	89bb      	ldrh	r3, [r7, #12]
 8000984:	091b      	lsrs	r3, r3, #4
 8000986:	b29b      	uxth	r3, r3
 8000988:	b21a      	sxth	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	841a      	strh	r2, [r3, #32]

		return true;
 800098e:	2301      	movs	r3, #1
 8000990:	e000      	b.n	8000994 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af04      	add	r7, sp, #16
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
 80009a8:	4613      	mov	r3, r2
 80009aa:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	89f9      	ldrh	r1, [r7, #14]
 80009be:	f242 7310 	movw	r3, #10000	; 0x2710
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2301      	movs	r3, #1
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	1cbb      	adds	r3, r7, #2
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2301      	movs	r3, #1
 80009ce:	f002 ffa5 	bl	800391c <HAL_I2C_Mem_Write>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <write_register8+0x40>
		return false;
 80009d8:	2300      	movs	r3, #0
 80009da:	e000      	b.n	80009de <write_register8+0x42>
	else
		return true;
 80009dc:	2301      	movs	r3, #1
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009f4:	2b76      	cmp	r3, #118	; 0x76
 80009f6:	d005      	beq.n	8000a04 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009fc:	2b77      	cmp	r3, #119	; 0x77
 80009fe:	d001      	beq.n	8000a04 <bmp280_init+0x1e>

		return false;
 8000a00:	2300      	movs	r3, #0
 8000a02:	e099      	b.n	8000b38 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	21d0      	movs	r1, #208	; 0xd0
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff feb9 	bl	8000786 <read_data>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <bmp280_init+0x38>
		return false;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e08c      	b.n	8000b38 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000a24:	2b58      	cmp	r3, #88	; 0x58
 8000a26:	d006      	beq.n	8000a36 <bmp280_init+0x50>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000a2e:	2b60      	cmp	r3, #96	; 0x60
 8000a30:	d001      	beq.n	8000a36 <bmp280_init+0x50>

		return false;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e080      	b.n	8000b38 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000a36:	22b6      	movs	r2, #182	; 0xb6
 8000a38:	21e0      	movs	r1, #224	; 0xe0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffae 	bl	800099c <write_register8>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <bmp280_init+0x64>
		return false;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e076      	b.n	8000b38 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000a4a:	f107 020c 	add.w	r2, r7, #12
 8000a4e:	2301      	movs	r3, #1
 8000a50:	21f3      	movs	r1, #243	; 0xf3
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fe97 	bl	8000786 <read_data>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f5      	bne.n	8000a4a <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000a5e:	7b3b      	ldrb	r3, [r7, #12]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f0      	bne.n	8000a4a <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff feb5 	bl	80007d8 <read_calibration_data>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f083 0301 	eor.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d100      	bne.n	8000a7c <bmp280_init+0x96>
 8000a7a:	e001      	b.n	8000a80 <bmp280_init+0x9a>
		return false;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e05b      	b.n	8000b38 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000a86:	2b60      	cmp	r3, #96	; 0x60
 8000a88:	d10a      	bne.n	8000aa0 <bmp280_init+0xba>
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ff26 	bl	80008dc <read_hum_calibration_data>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f083 0301 	eor.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <bmp280_init+0xba>
		return false;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e04b      	b.n	8000b38 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	795b      	ldrb	r3, [r3, #5]
 8000aa4:	015b      	lsls	r3, r3, #5
 8000aa6:	b25a      	sxtb	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	21f5      	movs	r1, #245	; 0xf5
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff6d 	bl	800099c <write_register8>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <bmp280_init+0xe6>
		return false;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e035      	b.n	8000b38 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d102      	bne.n	8000ada <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	78db      	ldrb	r3, [r3, #3]
 8000ade:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000ae0:	b25a      	sxtb	r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	789b      	ldrb	r3, [r3, #2]
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b25a      	sxtb	r2, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000af8:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000b00:	2b60      	cmp	r3, #96	; 0x60
 8000b02:	d10d      	bne.n	8000b20 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000b0a:	7b7b      	ldrb	r3, [r7, #13]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	21f2      	movs	r1, #242	; 0xf2
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff43 	bl	800099c <write_register8>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <bmp280_init+0x13a>
			return false;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e00b      	b.n	8000b38 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	461a      	mov	r2, r3
 8000b24:	21f4      	movs	r1, #244	; 0xf4
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff38 	bl	800099c <write_register8>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <bmp280_init+0x150>
		return false;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <bmp280_init+0x152>
	}

	return true;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	10da      	asrs	r2, r3, #3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000b5e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000b62:	12db      	asrs	r3, r3, #11
 8000b64:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	111b      	asrs	r3, r3, #4
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	8812      	ldrh	r2, [r2, #0]
 8000b6e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	1112      	asrs	r2, r2, #4
 8000b74:	68f9      	ldr	r1, [r7, #12]
 8000b76:	8809      	ldrh	r1, [r1, #0]
 8000b78:	1a52      	subs	r2, r2, r1
 8000b7a:	fb02 f303 	mul.w	r3, r2, r3
 8000b7e:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000b86:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000b8a:	139b      	asrs	r3, r3, #14
 8000b8c:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	441a      	add	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	3380      	adds	r3, #128	; 0x80
 8000ba4:	121b      	asrs	r3, r3, #8
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	371c      	adds	r7, #28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000bb2:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000bc8:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8000bcc:	f142 34ff 	adc.w	r4, r2, #4294967295
 8000bd0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	6a3a      	ldr	r2, [r7, #32]
 8000bd8:	fb02 f203 	mul.w	r2, r2, r3
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	6a39      	ldr	r1, [r7, #32]
 8000be0:	fb01 f303 	mul.w	r3, r1, r3
 8000be4:	441a      	add	r2, r3
 8000be6:	6a39      	ldr	r1, [r7, #32]
 8000be8:	6a3b      	ldr	r3, [r7, #32]
 8000bea:	fba1 3403 	umull	r3, r4, r1, r3
 8000bee:	4422      	add	r2, r4
 8000bf0:	4614      	mov	r4, r2
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000bf8:	b211      	sxth	r1, r2
 8000bfa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000bfe:	fb01 f504 	mul.w	r5, r1, r4
 8000c02:	fb03 f002 	mul.w	r0, r3, r2
 8000c06:	4428      	add	r0, r5
 8000c08:	fba3 3401 	umull	r3, r4, r3, r1
 8000c0c:	1902      	adds	r2, r0, r4
 8000c0e:	4614      	mov	r4, r2
 8000c10:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8000c14:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000c24:	6a3a      	ldr	r2, [r7, #32]
 8000c26:	fb04 f102 	mul.w	r1, r4, r2
 8000c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c2c:	fb03 f202 	mul.w	r2, r3, r2
 8000c30:	1888      	adds	r0, r1, r2
 8000c32:	6a3a      	ldr	r2, [r7, #32]
 8000c34:	fba2 1203 	umull	r1, r2, r2, r3
 8000c38:	1883      	adds	r3, r0, r2
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	f04f 0500 	mov.w	r5, #0
 8000c40:	f04f 0600 	mov.w	r6, #0
 8000c44:	0456      	lsls	r6, r2, #17
 8000c46:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8000c4a:	044d      	lsls	r5, r1, #17
 8000c4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000c50:	186b      	adds	r3, r5, r1
 8000c52:	eb46 0402 	adc.w	r4, r6, r2
 8000c56:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c60:	b219      	sxth	r1, r3
 8000c62:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000c66:	f04f 0500 	mov.w	r5, #0
 8000c6a:	f04f 0600 	mov.w	r6, #0
 8000c6e:	00ce      	lsls	r6, r1, #3
 8000c70:	2500      	movs	r5, #0
 8000c72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000c76:	186b      	adds	r3, r5, r1
 8000c78:	eb46 0402 	adc.w	r4, r6, r2
 8000c7c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	6a3a      	ldr	r2, [r7, #32]
 8000c84:	fb02 f203 	mul.w	r2, r2, r3
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	6a39      	ldr	r1, [r7, #32]
 8000c8c:	fb01 f303 	mul.w	r3, r1, r3
 8000c90:	441a      	add	r2, r3
 8000c92:	6a39      	ldr	r1, [r7, #32]
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	fba1 3403 	umull	r3, r4, r1, r3
 8000c9a:	4422      	add	r2, r4
 8000c9c:	4614      	mov	r4, r2
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000ca4:	b211      	sxth	r1, r2
 8000ca6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000caa:	fb01 f504 	mul.w	r5, r1, r4
 8000cae:	fb03 f002 	mul.w	r0, r3, r2
 8000cb2:	4428      	add	r0, r5
 8000cb4:	fba3 3401 	umull	r3, r4, r3, r1
 8000cb8:	1902      	adds	r2, r0, r4
 8000cba:	4614      	mov	r4, r2
 8000cbc:	f04f 0100 	mov.w	r1, #0
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	0a19      	lsrs	r1, r3, #8
 8000cc6:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8000cca:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000cd8:	6a38      	ldr	r0, [r7, #32]
 8000cda:	fb04 f500 	mul.w	r5, r4, r0
 8000cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ce0:	fb03 f000 	mul.w	r0, r3, r0
 8000ce4:	4428      	add	r0, r5
 8000ce6:	6a3d      	ldr	r5, [r7, #32]
 8000ce8:	fba5 5603 	umull	r5, r6, r5, r3
 8000cec:	1983      	adds	r3, r0, r6
 8000cee:	461e      	mov	r6, r3
 8000cf0:	f04f 0b00 	mov.w	fp, #0
 8000cf4:	f04f 0c00 	mov.w	ip, #0
 8000cf8:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8000cfc:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8000d00:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000d04:	eb1b 0301 	adds.w	r3, fp, r1
 8000d08:	eb4c 0402 	adc.w	r4, ip, r2
 8000d0c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000d10:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000d14:	1c19      	adds	r1, r3, #0
 8000d16:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	88db      	ldrh	r3, [r3, #6]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	f04f 0400 	mov.w	r4, #0
 8000d24:	fb03 f502 	mul.w	r5, r3, r2
 8000d28:	fb01 f004 	mul.w	r0, r1, r4
 8000d2c:	4428      	add	r0, r5
 8000d2e:	fba1 3403 	umull	r3, r4, r1, r3
 8000d32:	1902      	adds	r2, r0, r4
 8000d34:	4614      	mov	r4, r2
 8000d36:	f04f 0100 	mov.w	r1, #0
 8000d3a:	f04f 0200 	mov.w	r2, #0
 8000d3e:	1061      	asrs	r1, r4, #1
 8000d40:	17e2      	asrs	r2, r4, #31
 8000d42:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8000d46:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	d101      	bne.n	8000d52 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e0d4      	b.n	8000efc <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000d58:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000d5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	ea4f 0963 	mov.w	r9, r3, asr #1
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8000d6c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000d70:	4645      	mov	r5, r8
 8000d72:	464e      	mov	r6, r9
 8000d74:	1aed      	subs	r5, r5, r3
 8000d76:	eb66 0604 	sbc.w	r6, r6, r4
 8000d7a:	46a8      	mov	r8, r5
 8000d7c:	46b1      	mov	r9, r6
 8000d7e:	eb18 0308 	adds.w	r3, r8, r8
 8000d82:	eb49 0409 	adc.w	r4, r9, r9
 8000d86:	4698      	mov	r8, r3
 8000d88:	46a1      	mov	r9, r4
 8000d8a:	eb18 0805 	adds.w	r8, r8, r5
 8000d8e:	eb49 0906 	adc.w	r9, r9, r6
 8000d92:	f04f 0100 	mov.w	r1, #0
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8000d9e:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8000da2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8000da6:	eb18 0801 	adds.w	r8, r8, r1
 8000daa:	eb49 0902 	adc.w	r9, r9, r2
 8000dae:	f04f 0100 	mov.w	r1, #0
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8000dba:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8000dbe:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8000dc2:	4688      	mov	r8, r1
 8000dc4:	4691      	mov	r9, r2
 8000dc6:	eb18 0805 	adds.w	r8, r8, r5
 8000dca:	eb49 0906 	adc.w	r9, r9, r6
 8000dce:	f04f 0100 	mov.w	r1, #0
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8000dda:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8000dde:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8000de2:	4688      	mov	r8, r1
 8000de4:	4691      	mov	r9, r2
 8000de6:	eb18 0005 	adds.w	r0, r8, r5
 8000dea:	eb49 0106 	adc.w	r1, r9, r6
 8000dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000df2:	f7ff fa45 	bl	8000280 <__aeabi_ldivmod>
 8000df6:	4603      	mov	r3, r0
 8000df8:	460c      	mov	r4, r1
 8000dfa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e04:	b219      	sxth	r1, r3
 8000e06:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000e0a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	f04f 0400 	mov.w	r4, #0
 8000e16:	0b6b      	lsrs	r3, r5, #13
 8000e18:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8000e1c:	1374      	asrs	r4, r6, #13
 8000e1e:	fb03 f502 	mul.w	r5, r3, r2
 8000e22:	fb01 f004 	mul.w	r0, r1, r4
 8000e26:	4428      	add	r0, r5
 8000e28:	fba1 1203 	umull	r1, r2, r1, r3
 8000e2c:	1883      	adds	r3, r0, r2
 8000e2e:	461a      	mov	r2, r3
 8000e30:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	f04f 0400 	mov.w	r4, #0
 8000e3c:	0b6b      	lsrs	r3, r5, #13
 8000e3e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8000e42:	1374      	asrs	r4, r6, #13
 8000e44:	fb03 f502 	mul.w	r5, r3, r2
 8000e48:	fb01 f004 	mul.w	r0, r1, r4
 8000e4c:	4428      	add	r0, r5
 8000e4e:	fba1 1203 	umull	r1, r2, r1, r3
 8000e52:	1883      	adds	r3, r0, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	f04f 0400 	mov.w	r4, #0
 8000e5e:	0e4b      	lsrs	r3, r1, #25
 8000e60:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8000e64:	1654      	asrs	r4, r2, #25
 8000e66:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	fb04 f102 	mul.w	r1, r4, r2
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	fb03 f202 	mul.w	r2, r3, r2
 8000e82:	1888      	adds	r0, r1, r2
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	fba2 1203 	umull	r1, r2, r2, r3
 8000e8a:	1883      	adds	r3, r0, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	f04f 0400 	mov.w	r4, #0
 8000e96:	0ccb      	lsrs	r3, r1, #19
 8000e98:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000e9c:	14d4      	asrs	r4, r2, #19
 8000e9e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8000ea2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000ea6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000eaa:	eb11 0803 	adds.w	r8, r1, r3
 8000eae:	eb42 0904 	adc.w	r9, r2, r4
 8000eb2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000eb6:	eb13 0508 	adds.w	r5, r3, r8
 8000eba:	eb44 0609 	adc.w	r6, r4, r9
 8000ebe:	f04f 0100 	mov.w	r1, #0
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	0a29      	lsrs	r1, r5, #8
 8000ec8:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8000ecc:	1232      	asrs	r2, r6, #8
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000ed4:	b21d      	sxth	r5, r3
 8000ed6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8000eda:	f04f 0800 	mov.w	r8, #0
 8000ede:	f04f 0900 	mov.w	r9, #0
 8000ee2:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8000ee6:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8000eea:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8000eee:	eb18 0301 	adds.w	r3, r8, r1
 8000ef2:	eb49 0402 	adc.w	r4, r9, r2
 8000ef6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8000efa:	693b      	ldr	r3, [r7, #16]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08000f06 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8000f06:	b480      	push	{r7}
 8000f08:	b087      	sub	sp, #28
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8000f18:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	039a      	lsls	r2, r3, #14
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000f24:	051b      	lsls	r3, r3, #20
 8000f26:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fb03 f301 	mul.w	r3, r3, r1
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000f3c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8000f44:	4611      	mov	r1, r2
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	fb02 f201 	mul.w	r2, r2, r1
 8000f4c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000f4e:	68f9      	ldr	r1, [r7, #12]
 8000f50:	7f09      	ldrb	r1, [r1, #28]
 8000f52:	4608      	mov	r0, r1
 8000f54:	6979      	ldr	r1, [r7, #20]
 8000f56:	fb01 f100 	mul.w	r1, r1, r0
 8000f5a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000f5c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000f60:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000f64:	1292      	asrs	r2, r2, #10
 8000f66:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8000f6a:	68f9      	ldr	r1, [r7, #12]
 8000f6c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8000f70:	fb01 f202 	mul.w	r2, r1, r2
 8000f74:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000f78:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	13db      	asrs	r3, r3, #15
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	13d2      	asrs	r2, r2, #15
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	7e12      	ldrb	r2, [r2, #24]
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000fa4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8000fac:	bfa8      	it	ge
 8000fae:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8000fb2:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	131b      	asrs	r3, r3, #12
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000fd8:	2b60      	cmp	r3, #96	; 0x60
 8000fda:	d007      	beq.n	8000fec <bmp280_read_fixed+0x28>
		if (humidity)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <bmp280_read_fixed+0x32>
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	e000      	b.n	8000ff8 <bmp280_read_fixed+0x34>
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f107 0218 	add.w	r2, r7, #24
 8001002:	21f7      	movs	r1, #247	; 0xf7
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff fbbe 	bl	8000786 <read_data>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <bmp280_read_fixed+0x50>
		return false;
 8001010:	2300      	movs	r3, #0
 8001012:	e038      	b.n	8001086 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001014:	7e3b      	ldrb	r3, [r7, #24]
 8001016:	031a      	lsls	r2, r3, #12
 8001018:	7e7b      	ldrb	r3, [r7, #25]
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	4313      	orrs	r3, r2
 800101e:	7eba      	ldrb	r2, [r7, #26]
 8001020:	0912      	lsrs	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	4313      	orrs	r3, r2
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001028:	7efb      	ldrb	r3, [r7, #27]
 800102a:	031a      	lsls	r2, r3, #12
 800102c:	7f3b      	ldrb	r3, [r7, #28]
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	4313      	orrs	r3, r2
 8001032:	7f7a      	ldrb	r2, [r7, #29]
 8001034:	0912      	lsrs	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	4313      	orrs	r3, r2
 800103a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	461a      	mov	r2, r3
 8001042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f7ff fd7b 	bl	8000b40 <compensate_temperature>
 800104a:	4602      	mov	r2, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	461a      	mov	r2, r3
 8001054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff fdab 	bl	8000bb2 <compensate_pressure>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00d      	beq.n	8001084 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001068:	7fbb      	ldrb	r3, [r7, #30]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	7ffa      	ldrb	r2, [r7, #31]
 800106e:	4313      	orrs	r3, r2
 8001070:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	461a      	mov	r2, r3
 8001076:	6a39      	ldr	r1, [r7, #32]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff ff44 	bl	8000f06 <compensate_humidity>
 800107e:	4602      	mov	r2, r0
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001084:	2301      	movs	r3, #1
}
 8001086:	4618      	mov	r0, r3
 8001088:	3730      	adds	r7, #48	; 0x30
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <bmp280_read_float+0x1a>
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	e000      	b.n	80010ac <bmp280_read_float+0x1c>
 80010aa:	2300      	movs	r3, #0
 80010ac:	f107 0218 	add.w	r2, r7, #24
 80010b0:	f107 011c 	add.w	r1, r7, #28
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f7ff ff85 	bl	8000fc4 <bmp280_read_fixed>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d028      	beq.n	8001112 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ca:	eddf 6a14 	vldr	s13, [pc, #80]	; 800111c <bmp280_read_float+0x8c>
 80010ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001120 <bmp280_read_float+0x90>
 80010e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00b      	beq.n	800110e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001100:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001124 <bmp280_read_float+0x94>
 8001104:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <bmp280_read_float+0x84>
	}

	return false;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	42c80000 	.word	0x42c80000
 8001120:	43800000 	.word	0x43800000
 8001124:	44800000 	.word	0x44800000

08001128 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4a07      	ldr	r2, [pc, #28]	; (8001154 <vApplicationGetIdleTaskMemory+0x2c>)
 8001138:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <vApplicationGetIdleTaskMemory+0x30>)
 800113e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	200000a4 	.word	0x200000a4
 8001158:	200000f8 	.word	0x200000f8

0800115c <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	70fb      	strb	r3, [r7, #3]
 800116e:	460b      	mov	r3, r1
 8001170:	70bb      	strb	r3, [r7, #2]
 8001172:	4613      	mov	r3, r2
 8001174:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 800117a:	4a4f      	ldr	r2, [pc, #316]	; (80012b8 <lcdInit+0x15c>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <lcdInit+0x15c>)
 8001188:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 800118a:	4a4b      	ldr	r2, [pc, #300]	; (80012b8 <lcdInit+0x15c>)
 800118c:	78bb      	ldrb	r3, [r7, #2]
 800118e:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001190:	4a49      	ldr	r2, [pc, #292]	; (80012b8 <lcdInit+0x15c>)
 8001192:	787b      	ldrb	r3, [r7, #1]
 8001194:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001196:	4b48      	ldr	r3, [pc, #288]	; (80012b8 <lcdInit+0x15c>)
 8001198:	2208      	movs	r2, #8
 800119a:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <lcdInit+0x160>)
 800119e:	2234      	movs	r2, #52	; 0x34
 80011a0:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <lcdInit+0x160>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b45      	ldr	r3, [pc, #276]	; (80012bc <lcdInit+0x160>)
 80011a8:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 80011aa:	4b44      	ldr	r3, [pc, #272]	; (80012bc <lcdInit+0x160>)
 80011ac:	2230      	movs	r2, #48	; 0x30
 80011ae:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 80011b0:	2300      	movs	r3, #0
 80011b2:	75fb      	strb	r3, [r7, #23]
 80011b4:	e030      	b.n	8001218 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80011b6:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <lcdInit+0x15c>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <lcdInit+0x15c>)
 80011bc:	799b      	ldrb	r3, [r3, #6]
 80011be:	b299      	uxth	r1, r3
 80011c0:	2303      	movs	r3, #3
 80011c2:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <lcdInit+0x160>)
 80011c4:	f002 fa94 	bl	80036f0 <HAL_I2C_Master_Transmit_DMA>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <lcdInit+0x76>
            return false;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e06d      	b.n	80012ae <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 80011d2:	f006 fdbf 	bl	8007d54 <xTaskGetTickCount>
 80011d6:	4603      	mov	r3, r0
 80011d8:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80011da:	e002      	b.n	80011e2 <lcdInit+0x86>
            vTaskDelay(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f006 fae5 	bl	80077ac <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80011e2:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <lcdInit+0x15c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f92d 	bl	8004446 <HAL_I2C_GetState>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b20      	cmp	r3, #32
 80011f0:	d1f4      	bne.n	80011dc <lcdInit+0x80>
        }

        if (i == 2) {
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d106      	bne.n	8001206 <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	2101      	movs	r1, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 fa5a 	bl	80076b8 <vTaskDelayUntil>
 8001204:	e005      	b.n	8001212 <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	2105      	movs	r1, #5
 800120c:	4618      	mov	r0, r3
 800120e:	f006 fa53 	bl	80076b8 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	3301      	adds	r3, #1
 8001216:	75fb      	strb	r3, [r7, #23]
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d9cb      	bls.n	80011b6 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <lcdInit+0x160>)
 8001220:	222c      	movs	r2, #44	; 0x2c
 8001222:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <lcdInit+0x160>)
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <lcdInit+0x160>)
 800122a:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <lcdInit+0x160>)
 800122e:	2228      	movs	r2, #40	; 0x28
 8001230:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <lcdInit+0x15c>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <lcdInit+0x15c>)
 8001238:	799b      	ldrb	r3, [r3, #6]
 800123a:	b299      	uxth	r1, r3
 800123c:	2303      	movs	r3, #3
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <lcdInit+0x160>)
 8001240:	f002 fa56 	bl	80036f0 <HAL_I2C_Master_Transmit_DMA>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <lcdInit+0xf8>
        return false;
 800124a:	2300      	movs	r3, #0
 800124c:	e02f      	b.n	80012ae <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f006 faac 	bl	80077ac <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <lcdInit+0x15c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f003 f8f4 	bl	8004446 <HAL_I2C_GetState>
 800125e:	4603      	mov	r3, r0
 8001260:	2b20      	cmp	r3, #32
 8001262:	d1f4      	bne.n	800124e <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	b2db      	uxtb	r3, r3
 800126c:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <lcdInit+0x15c>)
 8001270:	791b      	ldrb	r3, [r3, #4]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d904      	bls.n	8001280 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	b2db      	uxtb	r3, r3
 800127e:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001280:	f107 030f 	add.w	r3, r7, #15
 8001284:	4619      	mov	r1, r3
 8001286:	2000      	movs	r0, #0
 8001288:	f000 f962 	bl	8001550 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 800128c:	2101      	movs	r1, #1
 800128e:	2001      	movs	r0, #1
 8001290:	f000 f816 	bl	80012c0 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001294:	2101      	movs	r1, #1
 8001296:	2007      	movs	r0, #7
 8001298:	f000 f812 	bl	80012c0 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 800129c:	2101      	movs	r1, #1
 800129e:	2002      	movs	r0, #2
 80012a0:	f000 f80e 	bl	80012c0 <lcdCommand>
    lcdCursorHome();
 80012a4:	2101      	movs	r1, #1
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 f80a 	bl	80012c0 <lcdCommand>

    return true;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000300 	.word	0x20000300
 80012bc:	200002f8 	.word	0x200002f8

080012c0 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	460a      	mov	r2, r1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d06e      	beq.n	80013b8 <lcdCommand+0xf8>
 80012da:	2b01      	cmp	r3, #1
 80012dc:	f040 80b4 	bne.w	8001448 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	2b07      	cmp	r3, #7
 80012e6:	d864      	bhi.n	80013b2 <lcdCommand+0xf2>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <lcdCommand+0x30>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001311 	.word	0x08001311
 80012f4:	08001341 	.word	0x08001341
 80012f8:	08001321 	.word	0x08001321
 80012fc:	08001331 	.word	0x08001331
 8001300:	08001365 	.word	0x08001365
 8001304:	08001399 	.word	0x08001399
 8001308:	08001389 	.word	0x08001389
 800130c:	080013a3 	.word	0x080013a3
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001310:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <lcdCommand+0x1f0>)
 8001312:	7a1b      	ldrb	r3, [r3, #8]
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b65      	ldr	r3, [pc, #404]	; (80014b0 <lcdCommand+0x1f0>)
 800131c:	721a      	strb	r2, [r3, #8]
                    break;
 800131e:	e04a      	b.n	80013b6 <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8001320:	4b63      	ldr	r3, [pc, #396]	; (80014b0 <lcdCommand+0x1f0>)
 8001322:	7a1b      	ldrb	r3, [r3, #8]
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b61      	ldr	r3, [pc, #388]	; (80014b0 <lcdCommand+0x1f0>)
 800132c:	721a      	strb	r2, [r3, #8]
                    break;
 800132e:	e042      	b.n	80013b6 <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001330:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <lcdCommand+0x1f0>)
 8001332:	7a1b      	ldrb	r3, [r3, #8]
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <lcdCommand+0x1f0>)
 800133c:	721a      	strb	r2, [r3, #8]
                    break;
 800133e:	e03a      	b.n	80013b6 <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001344:	f107 030f 	add.w	r3, r7, #15
 8001348:	4619      	mov	r1, r3
 800134a:	2000      	movs	r0, #0
 800134c:	f000 f900 	bl	8001550 <lcdWriteByte>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <lcdCommand+0x9a>
                        return false;
 8001356:	2300      	movs	r3, #0
 8001358:	e0a6      	b.n	80014a8 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 800135a:	2002      	movs	r0, #2
 800135c:	f006 fa26 	bl	80077ac <vTaskDelay>
                        return true;
 8001360:	2301      	movs	r3, #1
 8001362:	e0a1      	b.n	80014a8 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001364:	2302      	movs	r3, #2
 8001366:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001368:	f107 030f 	add.w	r3, r7, #15
 800136c:	4619      	mov	r1, r3
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f8ee 	bl	8001550 <lcdWriteByte>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <lcdCommand+0xbe>
                        return false;
 800137a:	2300      	movs	r3, #0
 800137c:	e094      	b.n	80014a8 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 800137e:	2002      	movs	r0, #2
 8001380:	f006 fa14 	bl	80077ac <vTaskDelay>
                        return true;
 8001384:	2301      	movs	r3, #1
 8001386:	e08f      	b.n	80014a8 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001388:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <lcdCommand+0x1f0>)
 800138a:	7a5b      	ldrb	r3, [r3, #9]
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <lcdCommand+0x1f0>)
 8001394:	725a      	strb	r2, [r3, #9]
                    break;
 8001396:	e00e      	b.n	80013b6 <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <lcdCommand+0x1f0>)
 800139a:	7a5a      	ldrb	r2, [r3, #9]
 800139c:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <lcdCommand+0x1f0>)
 800139e:	725a      	strb	r2, [r3, #9]
                    break;
 80013a0:	e009      	b.n	80013b6 <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <lcdCommand+0x1f0>)
 80013a4:	7a5b      	ldrb	r3, [r3, #9]
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <lcdCommand+0x1f0>)
 80013ae:	725a      	strb	r2, [r3, #9]
                    break;
 80013b0:	e001      	b.n	80013b6 <lcdCommand+0xf6>

                default:
                    return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e078      	b.n	80014a8 <lcdCommand+0x1e8>
            }

            break;
 80013b6:	e049      	b.n	800144c <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	2b07      	cmp	r3, #7
 80013be:	d840      	bhi.n	8001442 <lcdCommand+0x182>
 80013c0:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <lcdCommand+0x108>)
 80013c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c6:	bf00      	nop
 80013c8:	080013e9 	.word	0x080013e9
 80013cc:	08001443 	.word	0x08001443
 80013d0:	080013f9 	.word	0x080013f9
 80013d4:	08001409 	.word	0x08001409
 80013d8:	08001443 	.word	0x08001443
 80013dc:	08001429 	.word	0x08001429
 80013e0:	08001419 	.word	0x08001419
 80013e4:	08001433 	.word	0x08001433
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 80013e8:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <lcdCommand+0x1f0>)
 80013ea:	7a1b      	ldrb	r3, [r3, #8]
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <lcdCommand+0x1f0>)
 80013f4:	721a      	strb	r2, [r3, #8]
                    break;
 80013f6:	e026      	b.n	8001446 <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <lcdCommand+0x1f0>)
 80013fa:	7a1b      	ldrb	r3, [r3, #8]
 80013fc:	f023 0302 	bic.w	r3, r3, #2
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <lcdCommand+0x1f0>)
 8001404:	721a      	strb	r2, [r3, #8]
                    break;
 8001406:	e01e      	b.n	8001446 <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <lcdCommand+0x1f0>)
 800140a:	7a1b      	ldrb	r3, [r3, #8]
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <lcdCommand+0x1f0>)
 8001414:	721a      	strb	r2, [r3, #8]
                    break;
 8001416:	e016      	b.n	8001446 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <lcdCommand+0x1f0>)
 800141a:	7a5b      	ldrb	r3, [r3, #9]
 800141c:	f023 0302 	bic.w	r3, r3, #2
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <lcdCommand+0x1f0>)
 8001424:	725a      	strb	r2, [r3, #9]
                    break;
 8001426:	e00e      	b.n	8001446 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <lcdCommand+0x1f0>)
 800142a:	7a5a      	ldrb	r2, [r3, #9]
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <lcdCommand+0x1f0>)
 800142e:	725a      	strb	r2, [r3, #9]
                    break;
 8001430:	e009      	b.n	8001446 <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <lcdCommand+0x1f0>)
 8001434:	7a5b      	ldrb	r3, [r3, #9]
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <lcdCommand+0x1f0>)
 800143e:	725a      	strb	r2, [r3, #9]
                    break;
 8001440:	e001      	b.n	8001446 <lcdCommand+0x186>

                default:
                    return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e030      	b.n	80014a8 <lcdCommand+0x1e8>
            }

            break;
 8001446:	e001      	b.n	800144c <lcdCommand+0x18c>

        default:
            return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e02d      	b.n	80014a8 <lcdCommand+0x1e8>
    }

    /* Now lets send the command */
    switch (command) {
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	3b01      	subs	r3, #1
 8001450:	2b07      	cmp	r3, #7
 8001452:	d821      	bhi.n	8001498 <lcdCommand+0x1d8>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <lcdCommand+0x19c>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	0800147d 	.word	0x0800147d
 8001460:	08001499 	.word	0x08001499
 8001464:	0800147d 	.word	0x0800147d
 8001468:	0800147d 	.word	0x0800147d
 800146c:	08001499 	.word	0x08001499
 8001470:	0800148b 	.word	0x0800148b
 8001474:	0800148b 	.word	0x0800148b
 8001478:	0800148b 	.word	0x0800148b
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <lcdCommand+0x1f0>)
 800147e:	7a1b      	ldrb	r3, [r3, #8]
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	b2db      	uxtb	r3, r3
 8001486:	73fb      	strb	r3, [r7, #15]
            break;
 8001488:	e007      	b.n	800149a <lcdCommand+0x1da>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <lcdCommand+0x1f0>)
 800148c:	7a5b      	ldrb	r3, [r3, #9]
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	b2db      	uxtb	r3, r3
 8001494:	73fb      	strb	r3, [r7, #15]
            break;
 8001496:	e000      	b.n	800149a <lcdCommand+0x1da>

        default:
            break;
 8001498:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800149a:	f107 030f 	add.w	r3, r7, #15
 800149e:	4619      	mov	r1, r3
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 f855 	bl	8001550 <lcdWriteByte>
 80014a6:	4603      	mov	r3, r0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000300 	.word	0x20000300

080014b4 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <lcdSetCursorPosition+0x50>)
 80014c6:	791b      	ldrb	r3, [r3, #4]
 80014c8:	79ba      	ldrb	r2, [r7, #6]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d303      	bcc.n	80014d6 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <lcdSetCursorPosition+0x50>)
 80014d0:	791b      	ldrb	r3, [r3, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <lcdSetCursorPosition+0x54>)
 80014da:	5cd2      	ldrb	r2, [r2, r3]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4413      	add	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 80014ee:	f107 030f 	add.w	r3, r7, #15
 80014f2:	4619      	mov	r1, r3
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f82b 	bl	8001550 <lcdWriteByte>
 80014fa:	4603      	mov	r3, r0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000300 	.word	0x20000300
 8001508:	080095b8 	.word	0x080095b8

0800150c <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e00e      	b.n	800153c <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	4619      	mov	r1, r3
 8001526:	2001      	movs	r0, #1
 8001528:	f000 f812 	bl	8001550 <lcdWriteByte>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <lcdPrintStr+0x2a>
            return false;
 8001532:	2300      	movs	r3, #0
 8001534:	e007      	b.n	8001546 <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3301      	adds	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	429a      	cmp	r2, r3
 8001542:	d3ec      	bcc.n	800151e <lcdPrintStr+0x12>
        }
    }

    return true;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <lcdWriteByte+0xdc>)
 800155e:	79da      	ldrb	r2, [r3, #7]
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4313      	orrs	r3, r2
 8001564:	b2da      	uxtb	r2, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f023 030f 	bic.w	r3, r3, #15
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <lcdWriteByte+0xe0>)
 800157c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <lcdWriteByte+0xe0>)
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <lcdWriteByte+0xe0>)
 8001584:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <lcdWriteByte+0xdc>)
 8001588:	79da      	ldrb	r2, [r3, #7]
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4313      	orrs	r3, r2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	b25a      	sxtb	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b25b      	sxtb	r3, r3
 8001598:	f023 030f 	bic.w	r3, r3, #15
 800159c:	b25b      	sxtb	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <lcdWriteByte+0xe0>)
 80015a6:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 80015a8:	4b20      	ldr	r3, [pc, #128]	; (800162c <lcdWriteByte+0xdc>)
 80015aa:	79da      	ldrb	r2, [r3, #7]
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <lcdWriteByte+0xe0>)
 80015c6:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <lcdWriteByte+0xe0>)
 80015ca:	78da      	ldrb	r2, [r3, #3]
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <lcdWriteByte+0xe0>)
 80015ce:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <lcdWriteByte+0xdc>)
 80015d2:	79da      	ldrb	r2, [r3, #7]
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <lcdWriteByte+0xe0>)
 80015ec:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <lcdWriteByte+0xdc>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <lcdWriteByte+0xdc>)
 80015f4:	799b      	ldrb	r3, [r3, #6]
 80015f6:	b299      	uxth	r1, r3
 80015f8:	2306      	movs	r3, #6
 80015fa:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <lcdWriteByte+0xe0>)
 80015fc:	f002 f878 	bl	80036f0 <HAL_I2C_Master_Transmit_DMA>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <lcdWriteByte+0xc0>
        return false;
 8001606:	2300      	movs	r3, #0
 8001608:	e00b      	b.n	8001622 <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f006 f8ce 	bl	80077ac <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <lcdWriteByte+0xdc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f002 ff16 	bl	8004446 <HAL_I2C_GetState>
 800161a:	4603      	mov	r3, r0
 800161c:	2b20      	cmp	r3, #32
 800161e:	d1f4      	bne.n	800160a <lcdWriteByte+0xba>
    }

    return true;
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000300 	.word	0x20000300
 8001630:	200002f8 	.word	0x200002f8

08001634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b0aa      	sub	sp, #168	; 0xa8
 8001638:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163a:	f001 f81d 	bl	8002678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163e:	f000 f8a1 	bl	8001784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001642:	f000 f9e5 	bl	8001a10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001646:	f000 f9bb 	bl	80019c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800164a:	f000 f98f 	bl	800196c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800164e:	f000 f903 	bl	8001858 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 f92f 	bl	80018b4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001656:	f000 f95b 	bl	8001910 <MX_I2C3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800165a:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <main+0x120>)
 800165c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001660:	461d      	mov	r5, r3
 8001662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800166a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800166e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f005 fd56 	bl	8007126 <osThreadCreate>
 800167a:	4602      	mov	r2, r0
 800167c:	4b36      	ldr	r3, [pc, #216]	; (8001758 <main+0x124>)
 800167e:	601a      	str	r2, [r3, #0]

  /* definition and creation of printLcdTask */
  osThreadDef(printLcdTask, StartLcdTask, osPriorityNormal, 0, 128);
 8001680:	4b36      	ldr	r3, [pc, #216]	; (800175c <main+0x128>)
 8001682:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001686:	461d      	mov	r5, r3
 8001688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  printLcdTaskHandle = osThreadCreate(osThread(printLcdTask), NULL);
 8001694:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f005 fd43 	bl	8007126 <osThreadCreate>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <main+0x12c>)
 80016a4:	601a      	str	r2, [r3, #0]

  /* definition and creation of checkDataSensor */
  osThreadDef(checkDataSensor, StartDataSensor, osPriorityNormal, 0, 128);
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <main+0x130>)
 80016a8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80016ac:	461d      	mov	r5, r3
 80016ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkDataSensorHandle = osThreadCreate(osThread(checkDataSensor), NULL);
 80016ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f005 fd30 	bl	8007126 <osThreadCreate>
 80016c6:	4602      	mov	r2, r0
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <main+0x134>)
 80016ca:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBtnTask */
  osThreadDef(myBtnTask, StartBtnTask, osPriorityNormal, 0, 128);
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <main+0x138>)
 80016ce:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80016d2:	461d      	mov	r5, r3
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myBtnTaskHandle = osThreadCreate(osThread(myBtnTask), NULL);
 80016e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f005 fd1d 	bl	8007126 <osThreadCreate>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <main+0x13c>)
 80016f0:	601a      	str	r2, [r3, #0]

  /* definition and creation of myPrintTime */
  osThreadDef(myPrintTime, StartTimeTask, osPriorityNormal, 0, 128);
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <main+0x140>)
 80016f4:	f107 041c 	add.w	r4, r7, #28
 80016f8:	461d      	mov	r5, r3
 80016fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001702:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPrintTimeHandle = osThreadCreate(osThread(myPrintTime), NULL);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f005 fd0a 	bl	8007126 <osThreadCreate>
 8001712:	4602      	mov	r2, r0
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <main+0x144>)
 8001716:	601a      	str	r2, [r3, #0]

  /* definition and creation of myStatusTemp */
  osThreadDef(myStatusTemp, StartStatusTemp, osPriorityNormal, 0, 128);
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <main+0x148>)
 800171a:	463c      	mov	r4, r7
 800171c:	461d      	mov	r5, r3
 800171e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001722:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myStatusTempHandle = osThreadCreate(osThread(myStatusTemp), NULL);
 800172a:	463b      	mov	r3, r7
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f005 fcf9 	bl	8007126 <osThreadCreate>
 8001734:	4602      	mov	r2, r0
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <main+0x14c>)
 8001738:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  vTaskSuspend(printLcdTaskHandle);
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <main+0x12c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f006 f868 	bl	8007814 <vTaskSuspend>
  vTaskSuspend(myPrintTimeHandle);
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <main+0x144>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f006 f863 	bl	8007814 <vTaskSuspend>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800174e:	f005 fce3 	bl	8007118 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001752:	e7fe      	b.n	8001752 <main+0x11e>
 8001754:	080093d4 	.word	0x080093d4
 8001758:	2000407c 	.word	0x2000407c
 800175c:	08009400 	.word	0x08009400
 8001760:	200041e8 	.word	0x200041e8
 8001764:	0800942c 	.word	0x0800942c
 8001768:	20004308 	.word	0x20004308
 800176c:	08009454 	.word	0x08009454
 8001770:	20004370 	.word	0x20004370
 8001774:	0800947c 	.word	0x0800947c
 8001778:	200043f4 	.word	0x200043f4
 800177c:	080094a8 	.word	0x080094a8
 8001780:	200043f0 	.word	0x200043f0

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b094      	sub	sp, #80	; 0x50
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	2230      	movs	r2, #48	; 0x30
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f007 f9c9 	bl	8008b2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <SystemClock_Config+0xcc>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <SystemClock_Config+0xcc>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <SystemClock_Config+0xcc>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	4b22      	ldr	r3, [pc, #136]	; (8001854 <SystemClock_Config+0xd0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a21      	ldr	r2, [pc, #132]	; (8001854 <SystemClock_Config+0xd0>)
 80017ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <SystemClock_Config+0xd0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e4:	2301      	movs	r3, #1
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e8:	2310      	movs	r3, #16
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ec:	2302      	movs	r3, #2
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017f4:	2310      	movs	r3, #16
 80017f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017fe:	2304      	movs	r3, #4
 8001800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001802:	2304      	movs	r3, #4
 8001804:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fc2e 	bl	800606c <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001816:	f000 fc9d 	bl	8002154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	230f      	movs	r3, #15
 800181c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181e:	2302      	movs	r3, #2
 8001820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2102      	movs	r1, #2
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fe88 	bl	800654c <HAL_RCC_ClockConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001842:	f000 fc87 	bl	8002154 <Error_Handler>
  }
}
 8001846:	bf00      	nop
 8001848:	3750      	adds	r7, #80	; 0x50
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40007000 	.word	0x40007000

08001858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_I2C1_Init+0x50>)
 800185e:	4a13      	ldr	r2, [pc, #76]	; (80018ac <MX_I2C1_Init+0x54>)
 8001860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <MX_I2C1_Init+0x58>)
 8001866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_I2C1_Init+0x50>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <MX_I2C1_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <MX_I2C1_Init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001896:	f001 fdf3 	bl	8003480 <HAL_I2C_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018a0:	f000 fc58 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2000413c 	.word	0x2000413c
 80018ac:	40005400 	.word	0x40005400
 80018b0:	000186a0 	.word	0x000186a0

080018b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_I2C2_Init+0x50>)
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <MX_I2C2_Init+0x54>)
 80018bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_I2C2_Init+0x50>)
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <MX_I2C2_Init+0x58>)
 80018c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_I2C2_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_I2C2_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_I2C2_Init+0x50>)
 80018d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <MX_I2C2_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_I2C2_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <MX_I2C2_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_I2C2_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_I2C2_Init+0x50>)
 80018f2:	f001 fdc5 	bl	8003480 <HAL_I2C_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018fc:	f000 fc2a 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20004190 	.word	0x20004190
 8001908:	40005800 	.word	0x40005800
 800190c:	000186a0 	.word	0x000186a0

08001910 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_I2C3_Init+0x50>)
 8001916:	4a13      	ldr	r2, [pc, #76]	; (8001964 <MX_I2C3_Init+0x54>)
 8001918:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_I2C3_Init+0x50>)
 800191c:	4a12      	ldr	r2, [pc, #72]	; (8001968 <MX_I2C3_Init+0x58>)
 800191e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_I2C3_Init+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_I2C3_Init+0x50>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_I2C3_Init+0x50>)
 800192e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001932:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <MX_I2C3_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_I2C3_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <MX_I2C3_Init+0x50>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_I2C3_Init+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_I2C3_Init+0x50>)
 800194e:	f001 fd97 	bl	8003480 <HAL_I2C_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001958:	f000 fbfc 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20004080 	.word	0x20004080
 8001964:	40005c00 	.word	0x40005c00
 8001968:	000186a0 	.word	0x000186a0

0800196c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <MX_USART2_UART_Init+0x50>)
 8001974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 80019a4:	f004 ffc4 	bl	8006930 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ae:	f000 fbd1 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200043b0 	.word	0x200043b0
 80019bc:	40004400 	.word	0x40004400

080019c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <MX_DMA_Init+0x4c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <MX_DMA_Init+0x4c>)
 80019d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <MX_DMA_Init+0x4c>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2105      	movs	r1, #5
 80019e6:	200b      	movs	r0, #11
 80019e8:	f000 ffb5 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019ec:	200b      	movs	r0, #11
 80019ee:	f000 ffce 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2105      	movs	r1, #5
 80019f6:	200c      	movs	r0, #12
 80019f8:	f000 ffad 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019fc:	200c      	movs	r0, #12
 80019fe:	f000 ffc6 	bl	800298e <HAL_NVIC_EnableIRQ>

}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a32      	ldr	r2, [pc, #200]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a2b      	ldr	r2, [pc, #172]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a24      	ldr	r2, [pc, #144]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin|RGB_led2_Pin|RGB_led3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2133      	movs	r1, #51	; 0x33
 8001a9a:	4818      	ldr	r0, [pc, #96]	; (8001afc <MX_GPIO_Init+0xec>)
 8001a9c:	f001 fcd6 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_GPIO_Init+0xf0>)
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4813      	ldr	r0, [pc, #76]	; (8001b04 <MX_GPIO_Init+0xf4>)
 8001ab6:	f001 fb2f 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : SensorBtn_Pin */
  GPIO_InitStruct.Pin = SensorBtn_Pin;
 8001aba:	2301      	movs	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SensorBtn_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <MX_GPIO_Init+0xf4>)
 8001ace:	f001 fb23 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_led1_Pin RGB_led2_Pin RGB_led3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RGB_led1_Pin|RGB_led2_Pin|RGB_led3_Pin|LD2_Pin;
 8001ad2:	2333      	movs	r3, #51	; 0x33
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_GPIO_Init+0xec>)
 8001aea:	f001 fb15 	bl	8003118 <HAL_GPIO_Init>

}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	10210000 	.word	0x10210000
 8001b04:	40020800 	.word	0x40020800

08001b08 <initBME280>:

/* USER CODE BEGIN 4 */
void initBME280(I2C_HandleTypeDef *i2c) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8001b10:	2314      	movs	r3, #20
 8001b12:	2204      	movs	r2, #4
 8001b14:	2127      	movs	r1, #39	; 0x27
 8001b16:	4829      	ldr	r0, [pc, #164]	; (8001bbc <initBME280+0xb4>)
 8001b18:	f7ff fb20 	bl	800115c <lcdInit>

	bmp280_init_default_params(&bmp280.params);
 8001b1c:	4828      	ldr	r0, [pc, #160]	; (8001bc0 <initBME280+0xb8>)
 8001b1e:	f7fe fde7 	bl	80006f0 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001b22:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <initBME280+0xbc>)
 8001b24:	2276      	movs	r2, #118	; 0x76
 8001b26:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = i2c;
 8001b28:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <initBME280+0xbc>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6293      	str	r3, [r2, #40]	; 0x28

    while (!bmp280_init(&bmp280, &bmp280.params))
 8001b2e:	e00f      	b.n	8001b50 <initBME280+0x48>
    {
    	lcdSetCursorPosition(0, 0);
 8001b30:	2100      	movs	r1, #0
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff fcbe 	bl	80014b4 <lcdSetCursorPosition>
    	lcdPrintStr((uint8_t*)"BMP280 - failed", 15);
 8001b38:	210f      	movs	r1, #15
 8001b3a:	4823      	ldr	r0, [pc, #140]	; (8001bc8 <initBME280+0xc0>)
 8001b3c:	f7ff fce6 	bl	800150c <lcdPrintStr>
    	HAL_Delay(1000);
 8001b40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b44:	f000 fe0a 	bl	800275c <HAL_Delay>
    	lcdDisplayClear();
 8001b48:	2101      	movs	r1, #1
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f7ff fbb8 	bl	80012c0 <lcdCommand>
    while (!bmp280_init(&bmp280, &bmp280.params))
 8001b50:	491b      	ldr	r1, [pc, #108]	; (8001bc0 <initBME280+0xb8>)
 8001b52:	481c      	ldr	r0, [pc, #112]	; (8001bc4 <initBME280+0xbc>)
 8001b54:	f7fe ff47 	bl	80009e6 <bmp280_init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f083 0301 	eor.w	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1e5      	bne.n	8001b30 <initBME280+0x28>
	}

    bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <initBME280+0xbc>)
 8001b66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b6a:	2b60      	cmp	r3, #96	; 0x60
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	2300      	movne	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]

	lcdSetCursorPosition(0, 1);
 8001b74:	2101      	movs	r1, #1
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff fc9c 	bl	80014b4 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Our sensor is ", 14);
 8001b7c:	210e      	movs	r1, #14
 8001b7e:	4813      	ldr	r0, [pc, #76]	; (8001bcc <initBME280+0xc4>)
 8001b80:	f7ff fcc4 	bl	800150c <lcdPrintStr>

	lcdSetCursorPosition(14, 1);
 8001b84:	2101      	movs	r1, #1
 8001b86:	200e      	movs	r0, #14
 8001b88:	f7ff fc94 	bl	80014b4 <lcdSetCursorPosition>

    if(bme280p)
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <initBME280+0x94>
    {
    	lcdPrintStr((uint8_t*) bmeStr, 6);
 8001b92:	2106      	movs	r1, #6
 8001b94:	480e      	ldr	r0, [pc, #56]	; (8001bd0 <initBME280+0xc8>)
 8001b96:	f7ff fcb9 	bl	800150c <lcdPrintStr>
 8001b9a:	e003      	b.n	8001ba4 <initBME280+0x9c>
    }
    else
    {
    	lcdPrintStr((uint8_t*) bmpStr, 6);
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <initBME280+0xcc>)
 8001ba0:	f7ff fcb4 	bl	800150c <lcdPrintStr>
    }

    HAL_Delay(2000);
 8001ba4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ba8:	f000 fdd8 	bl	800275c <HAL_Delay>
    lcdDisplayClear();
 8001bac:	2101      	movs	r1, #1
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f7ff fb86 	bl	80012c0 <lcdCommand>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000413c 	.word	0x2000413c
 8001bc0:	200043a8 	.word	0x200043a8
 8001bc4:	2000437c 	.word	0x2000437c
 8001bc8:	080094c4 	.word	0x080094c4
 8001bcc:	080094d4 	.word	0x080094d4
 8001bd0:	20000004 	.word	0x20000004
 8001bd4:	2000000c 	.word	0x2000000c

08001bd8 <checkBME280>:

void checkBME280(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	while(!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 8001bdc:	e017      	b.n	8001c0e <checkBME280+0x36>
	{
		lcdSetCursorPosition(0, 1);
 8001bde:	2101      	movs	r1, #1
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff fc67 	bl	80014b4 <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) "Read data - failed!", 18);
 8001be6:	2112      	movs	r1, #18
 8001be8:	482d      	ldr	r0, [pc, #180]	; (8001ca0 <checkBME280+0xc8>)
 8001bea:	f7ff fc8f 	bl	800150c <lcdPrintStr>
		lcdSetCursorPosition(0, 2);
 8001bee:	2102      	movs	r1, #2
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fc5f 	bl	80014b4 <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) "Check connection!", 17);
 8001bf6:	2111      	movs	r1, #17
 8001bf8:	482a      	ldr	r0, [pc, #168]	; (8001ca4 <checkBME280+0xcc>)
 8001bfa:	f7ff fc87 	bl	800150c <lcdPrintStr>
		HAL_Delay(1000);
 8001bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c02:	f000 fdab 	bl	800275c <HAL_Delay>
		lcdDisplayClear();
 8001c06:	2101      	movs	r1, #1
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f7ff fb59 	bl	80012c0 <lcdCommand>
	while(!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <checkBME280+0xd0>)
 8001c10:	4a26      	ldr	r2, [pc, #152]	; (8001cac <checkBME280+0xd4>)
 8001c12:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <checkBME280+0xd8>)
 8001c14:	4827      	ldr	r0, [pc, #156]	; (8001cb4 <checkBME280+0xdc>)
 8001c16:	f7ff fa3b 	bl	8001090 <bmp280_read_float>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1db      	bne.n	8001bde <checkBME280+0x6>
	}

	fPart = (int) temperature;
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <checkBME280+0xd8>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c30:	ee17 2a90 	vmov	r2, s15
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <checkBME280+0xe0>)
 8001c36:	601a      	str	r2, [r3, #0]
	sPart = (temperature - fPart) * 1000;
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <checkBME280+0xd8>)
 8001c3a:	ed93 7a00 	vldr	s14, [r3]
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <checkBME280+0xe0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001cbc <checkBME280+0xe4>
 8001c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5a:	ee17 2a90 	vmov	r2, s15
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <checkBME280+0xe8>)
 8001c60:	601a      	str	r2, [r3, #0]

	MMPressure = pressure / 133;
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <checkBME280+0xd4>)
 8001c64:	ed93 7a00 	vldr	s14, [r3]
 8001c68:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001cc4 <checkBME280+0xec>
 8001c6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <checkBME280+0xf0>)
 8001c72:	edc3 7a00 	vstr	s15, [r3]
	fPartPressure = (int) MMPressure;
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <checkBME280+0xf0>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c80:	ee17 2a90 	vmov	r2, s15
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <checkBME280+0xf4>)
 8001c86:	601a      	str	r2, [r3, #0]

	fHumidity = (int) humidity;
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <checkBME280+0xd0>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c92:	ee17 2a90 	vmov	r2, s15
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <checkBME280+0xf8>)
 8001c98:	601a      	str	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	080094e4 	.word	0x080094e4
 8001ca4:	080094f8 	.word	0x080094f8
 8001ca8:	200041f0 	.word	0x200041f0
 8001cac:	200041ec 	.word	0x200041ec
 8001cb0:	200041e4 	.word	0x200041e4
 8001cb4:	2000437c 	.word	0x2000437c
 8001cb8:	20004374 	.word	0x20004374
 8001cbc:	447a0000 	.word	0x447a0000
 8001cc0:	200040d4 	.word	0x200040d4
 8001cc4:	43050000 	.word	0x43050000
 8001cc8:	200041f4 	.word	0x200041f4
 8001ccc:	20004378 	.word	0x20004378
 8001cd0:	200040d8 	.word	0x200040d8

08001cd4 <convertData>:

void convertData(void) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	itoa(fPart, firstPart, 10);
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <convertData+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	220a      	movs	r2, #10
 8001cde:	490e      	ldr	r1, [pc, #56]	; (8001d18 <convertData+0x44>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f006 ff15 	bl	8008b10 <itoa>
	itoa(sPart, secondPart, 10);
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <convertData+0x48>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	220a      	movs	r2, #10
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <convertData+0x4c>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f006 ff0e 	bl	8008b10 <itoa>
	itoa(fPartPressure, PressureStr, 10);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <convertData+0x50>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	220a      	movs	r2, #10
 8001cfa:	490b      	ldr	r1, [pc, #44]	; (8001d28 <convertData+0x54>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f006 ff07 	bl	8008b10 <itoa>
	itoa(fHumidity, HumidityStr, 10);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <convertData+0x58>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	220a      	movs	r2, #10
 8001d08:	4909      	ldr	r1, [pc, #36]	; (8001d30 <convertData+0x5c>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f006 ff00 	bl	8008b10 <itoa>
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20004374 	.word	0x20004374
 8001d18:	2000030c 	.word	0x2000030c
 8001d1c:	200040d4 	.word	0x200040d4
 8001d20:	20000310 	.word	0x20000310
 8001d24:	20004378 	.word	0x20004378
 8001d28:	20000314 	.word	0x20000314
 8001d2c:	200040d8 	.word	0x200040d8
 8001d30:	20000318 	.word	0x20000318

08001d34 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
	  checkBME280();
 8001d3c:	f7ff ff4c 	bl	8001bd8 <checkBME280>
	  vTaskDelay(1000);
 8001d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d44:	f005 fd32 	bl	80077ac <vTaskDelay>
	  checkBME280();
 8001d48:	e7f8      	b.n	8001d3c <StartDefaultTask+0x8>
	...

08001d4c <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void const * argument)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8001d54:	2314      	movs	r3, #20
 8001d56:	2204      	movs	r2, #4
 8001d58:	2127      	movs	r1, #39	; 0x27
 8001d5a:	480f      	ldr	r0, [pc, #60]	; (8001d98 <StartLcdTask+0x4c>)
 8001d5c:	f7ff f9fe 	bl	800115c <lcdInit>

  for(;;)
  {
	  lcdDisplayClear();
 8001d60:	2101      	movs	r1, #1
 8001d62:	2002      	movs	r0, #2
 8001d64:	f7ff faac 	bl	80012c0 <lcdCommand>

      lcdSetCursorPosition(0, 0);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff fba2 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Have a nice day!", 16);
 8001d70:	2110      	movs	r1, #16
 8001d72:	480a      	ldr	r0, [pc, #40]	; (8001d9c <StartLcdTask+0x50>)
 8001d74:	f7ff fbca 	bl	800150c <lcdPrintStr>

      lcdSetCursorPosition(0, 1);
 8001d78:	2101      	movs	r1, #1
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff fb9a 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Just a line...", 14);
 8001d80:	210e      	movs	r1, #14
 8001d82:	4807      	ldr	r0, [pc, #28]	; (8001da0 <StartLcdTask+0x54>)
 8001d84:	f7ff fbc2 	bl	800150c <lcdPrintStr>

	  HAL_Delay(1000);
 8001d88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d8c:	f000 fce6 	bl	800275c <HAL_Delay>

	  vTaskDelay(100);
 8001d90:	2064      	movs	r0, #100	; 0x64
 8001d92:	f005 fd0b 	bl	80077ac <vTaskDelay>
	  lcdDisplayClear();
 8001d96:	e7e3      	b.n	8001d60 <StartLcdTask+0x14>
 8001d98:	2000413c 	.word	0x2000413c
 8001d9c:	0800950c 	.word	0x0800950c
 8001da0:	08009520 	.word	0x08009520

08001da4 <StartDataSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDataSensor */
void StartDataSensor(void const * argument)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDataSensor */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8001dac:	2314      	movs	r3, #20
 8001dae:	2204      	movs	r2, #4
 8001db0:	2127      	movs	r1, #39	; 0x27
 8001db2:	483a      	ldr	r0, [pc, #232]	; (8001e9c <StartDataSensor+0xf8>)
 8001db4:	f7ff f9d2 	bl	800115c <lcdInit>

  initBME280(&hi2c2);
 8001db8:	4839      	ldr	r0, [pc, #228]	; (8001ea0 <StartDataSensor+0xfc>)
 8001dba:	f7ff fea5 	bl	8001b08 <initBME280>

  for(;;) {

	  lcdDisplayClear();
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	f7ff fa7d 	bl	80012c0 <lcdCommand>

	  convertData();
 8001dc6:	f7ff ff85 	bl	8001cd4 <convertData>

	  lcdSetCursorPosition(0, 0);
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fb71 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Sensor data:", 12);
 8001dd2:	210c      	movs	r1, #12
 8001dd4:	4833      	ldr	r0, [pc, #204]	; (8001ea4 <StartDataSensor+0x100>)
 8001dd6:	f7ff fb99 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(0, 1);
 8001dda:	2101      	movs	r1, #1
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fb69 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Humidity = ", 11);
 8001de2:	210b      	movs	r1, #11
 8001de4:	4830      	ldr	r0, [pc, #192]	; (8001ea8 <StartDataSensor+0x104>)
 8001de6:	f7ff fb91 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(11, 1);
 8001dea:	2101      	movs	r1, #1
 8001dec:	200b      	movs	r0, #11
 8001dee:	f7ff fb61 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) HumidityStr, 2);
 8001df2:	2102      	movs	r1, #2
 8001df4:	482d      	ldr	r0, [pc, #180]	; (8001eac <StartDataSensor+0x108>)
 8001df6:	f7ff fb89 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(14, 1);
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	200e      	movs	r0, #14
 8001dfe:	f7ff fb59 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "%", 1);
 8001e02:	2101      	movs	r1, #1
 8001e04:	482a      	ldr	r0, [pc, #168]	; (8001eb0 <StartDataSensor+0x10c>)
 8001e06:	f7ff fb81 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(0, 2);
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fb51 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Pressure = ", 11);
 8001e12:	210b      	movs	r1, #11
 8001e14:	4827      	ldr	r0, [pc, #156]	; (8001eb4 <StartDataSensor+0x110>)
 8001e16:	f7ff fb79 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(11, 2);
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	200b      	movs	r0, #11
 8001e1e:	f7ff fb49 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) PressureStr, 3);
 8001e22:	2103      	movs	r1, #3
 8001e24:	4824      	ldr	r0, [pc, #144]	; (8001eb8 <StartDataSensor+0x114>)
 8001e26:	f7ff fb71 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(15, 2);
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	200f      	movs	r0, #15
 8001e2e:	f7ff fb41 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "mmHg", 4);
 8001e32:	2104      	movs	r1, #4
 8001e34:	4821      	ldr	r0, [pc, #132]	; (8001ebc <StartDataSensor+0x118>)
 8001e36:	f7ff fb69 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(0, 3);
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff fb39 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Temp = ", 7);
 8001e42:	2107      	movs	r1, #7
 8001e44:	481e      	ldr	r0, [pc, #120]	; (8001ec0 <StartDataSensor+0x11c>)
 8001e46:	f7ff fb61 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(7, 3);
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	2007      	movs	r0, #7
 8001e4e:	f7ff fb31 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)firstPart, 2);
 8001e52:	2102      	movs	r1, #2
 8001e54:	481b      	ldr	r0, [pc, #108]	; (8001ec4 <StartDataSensor+0x120>)
 8001e56:	f7ff fb59 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(9, 3);
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	2009      	movs	r0, #9
 8001e5e:	f7ff fb29 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)".", 1);
 8001e62:	2101      	movs	r1, #1
 8001e64:	4818      	ldr	r0, [pc, #96]	; (8001ec8 <StartDataSensor+0x124>)
 8001e66:	f7ff fb51 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(10, 3);
 8001e6a:	2103      	movs	r1, #3
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f7ff fb21 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)secondPart, 2);
 8001e72:	2102      	movs	r1, #2
 8001e74:	4815      	ldr	r0, [pc, #84]	; (8001ecc <StartDataSensor+0x128>)
 8001e76:	f7ff fb49 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(13, 3);
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	200d      	movs	r0, #13
 8001e7e:	f7ff fb19 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Celsius", 7);
 8001e82:	2107      	movs	r1, #7
 8001e84:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <StartDataSensor+0x12c>)
 8001e86:	f7ff fb41 	bl	800150c <lcdPrintStr>

	  HAL_Delay(1800);
 8001e8a:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001e8e:	f000 fc65 	bl	800275c <HAL_Delay>

	  vTaskDelay(100);
 8001e92:	2064      	movs	r0, #100	; 0x64
 8001e94:	f005 fc8a 	bl	80077ac <vTaskDelay>
	  lcdDisplayClear();
 8001e98:	e791      	b.n	8001dbe <StartDataSensor+0x1a>
 8001e9a:	bf00      	nop
 8001e9c:	2000413c 	.word	0x2000413c
 8001ea0:	20004190 	.word	0x20004190
 8001ea4:	08009530 	.word	0x08009530
 8001ea8:	08009540 	.word	0x08009540
 8001eac:	20000318 	.word	0x20000318
 8001eb0:	0800954c 	.word	0x0800954c
 8001eb4:	08009550 	.word	0x08009550
 8001eb8:	20000314 	.word	0x20000314
 8001ebc:	0800955c 	.word	0x0800955c
 8001ec0:	08009564 	.word	0x08009564
 8001ec4:	2000030c 	.word	0x2000030c
 8001ec8:	0800956c 	.word	0x0800956c
 8001ecc:	20000310 	.word	0x20000310
 8001ed0:	08009570 	.word	0x08009570

08001ed4 <StartBtnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBtnTask */
void StartBtnTask(void const * argument)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBtnTask */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(SensorBtn_GPIO_Port, SensorBtn_Pin) == GPIO_PIN_SET)
 8001edc:	2101      	movs	r1, #1
 8001ede:	4835      	ldr	r0, [pc, #212]	; (8001fb4 <StartBtnTask+0xe0>)
 8001ee0:	f001 fa9c 	bl	800341c <HAL_GPIO_ReadPin>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d15f      	bne.n	8001faa <StartBtnTask+0xd6>
	  {
		  osDelay(100);
 8001eea:	2064      	movs	r0, #100	; 0x64
 8001eec:	f005 f967 	bl	80071be <osDelay>

		  if(numTask == 3)
 8001ef0:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <StartBtnTask+0xe4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d102      	bne.n	8001efe <StartBtnTask+0x2a>
		  {
			  numTask = 0;
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <StartBtnTask+0xe4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
		  }

		  if(numTask == 0)
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <StartBtnTask+0xe4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <StartBtnTask+0x64>
		  {
			  osThreadSuspend(printLcdTaskHandle);
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <StartBtnTask+0xe8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f005 f96b 	bl	80071e6 <osThreadSuspend>
			  osThreadSuspend(myPrintTimeHandle);
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <StartBtnTask+0xec>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f005 f966 	bl	80071e6 <osThreadSuspend>
			  lcdDisplayClear();
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7ff f9cf 	bl	80012c0 <lcdCommand>
			  osThreadResume(checkDataSensorHandle);
 8001f22:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <StartBtnTask+0xf0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 f96a 	bl	8007200 <osThreadResume>
			  numTask++;
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <StartBtnTask+0xe4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <StartBtnTask+0xe4>)
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e038      	b.n	8001faa <StartBtnTask+0xd6>
		  }
		  else if(numTask == 1)
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <StartBtnTask+0xe4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d118      	bne.n	8001f72 <StartBtnTask+0x9e>
		  {
			  osThreadSuspend(checkDataSensorHandle);
 8001f40:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <StartBtnTask+0xf0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f005 f94e 	bl	80071e6 <osThreadSuspend>
			  osThreadSuspend(myPrintTimeHandle);
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <StartBtnTask+0xec>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f005 f949 	bl	80071e6 <osThreadSuspend>
			  lcdDisplayClear();
 8001f54:	2101      	movs	r1, #1
 8001f56:	2002      	movs	r0, #2
 8001f58:	f7ff f9b2 	bl	80012c0 <lcdCommand>
			  osThreadResume(printLcdTaskHandle);
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <StartBtnTask+0xe8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 f94d 	bl	8007200 <osThreadResume>
			  numTask++;
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <StartBtnTask+0xe4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <StartBtnTask+0xe4>)
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	e01b      	b.n	8001faa <StartBtnTask+0xd6>
		  }
		  else if(numTask == 2)
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <StartBtnTask+0xe4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d117      	bne.n	8001faa <StartBtnTask+0xd6>
		  {
			  osThreadSuspend(checkDataSensorHandle);
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <StartBtnTask+0xf0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f005 f931 	bl	80071e6 <osThreadSuspend>
			  osThreadSuspend(printLcdTaskHandle);
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <StartBtnTask+0xe8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 f92c 	bl	80071e6 <osThreadSuspend>
			  lcdDisplayClear();
 8001f8e:	2101      	movs	r1, #1
 8001f90:	2002      	movs	r0, #2
 8001f92:	f7ff f995 	bl	80012c0 <lcdCommand>
			  osThreadResume(myPrintTimeHandle);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <StartBtnTask+0xec>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f005 f930 	bl	8007200 <osThreadResume>
			  numTask++;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <StartBtnTask+0xe4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <StartBtnTask+0xe4>)
 8001fa8:	6013      	str	r3, [r2, #0]
		  }
	  }
	  vTaskDelay(100);
 8001faa:	2064      	movs	r0, #100	; 0x64
 8001fac:	f005 fbfe 	bl	80077ac <vTaskDelay>
	  if(HAL_GPIO_ReadPin(SensorBtn_GPIO_Port, SensorBtn_Pin) == GPIO_PIN_SET)
 8001fb0:	e794      	b.n	8001edc <StartBtnTask+0x8>
 8001fb2:	bf00      	nop
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	200041e8 	.word	0x200041e8
 8001fc0:	200043f4 	.word	0x200043f4
 8001fc4:	20004308 	.word	0x20004308

08001fc8 <StartTimeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimeTask */
void StartTimeTask(void const * argument)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeTask */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8001fd0:	2314      	movs	r3, #20
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	2127      	movs	r1, #39	; 0x27
 8001fd6:	4825      	ldr	r0, [pc, #148]	; (800206c <StartTimeTask+0xa4>)
 8001fd8:	f7ff f8c0 	bl	800115c <lcdInit>

  for(;;)
  {
	  lcdDisplayClear();
 8001fdc:	2101      	movs	r1, #1
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f7ff f96e 	bl	80012c0 <lcdCommand>

	  Get_Time(&hi2c3);
 8001fe4:	4822      	ldr	r0, [pc, #136]	; (8002070 <StartTimeTask+0xa8>)
 8001fe6:	f7fe fb33 	bl	8000650 <Get_Time>

	  lcdSetCursorPosition(0, 0);
 8001fea:	2100      	movs	r1, #0
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff fa61 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Your time: ", 11);
 8001ff2:	210b      	movs	r1, #11
 8001ff4:	481f      	ldr	r0, [pc, #124]	; (8002074 <StartTimeTask+0xac>)
 8001ff6:	f7ff fa89 	bl	800150c <lcdPrintStr>

	  sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <StartTimeTask+0xb0>)
 8001ffc:	789b      	ldrb	r3, [r3, #2]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <StartTimeTask+0xb0>)
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	4619      	mov	r1, r3
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <StartTimeTask+0xb0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	460b      	mov	r3, r1
 800200e:	491b      	ldr	r1, [pc, #108]	; (800207c <StartTimeTask+0xb4>)
 8002010:	481b      	ldr	r0, [pc, #108]	; (8002080 <StartTimeTask+0xb8>)
 8002012:	f006 fd93 	bl	8008b3c <siprintf>
	  lcdSetCursorPosition(11, 0);
 8002016:	2100      	movs	r1, #0
 8002018:	200b      	movs	r0, #11
 800201a:	f7ff fa4b 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 8);
 800201e:	2108      	movs	r1, #8
 8002020:	4817      	ldr	r0, [pc, #92]	; (8002080 <StartTimeTask+0xb8>)
 8002022:	f7ff fa73 	bl	800150c <lcdPrintStr>

	  lcdSetCursorPosition(0, 2);
 8002026:	2102      	movs	r1, #2
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff fa43 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Date: ", 6);
 800202e:	2106      	movs	r1, #6
 8002030:	4814      	ldr	r0, [pc, #80]	; (8002084 <StartTimeTask+0xbc>)
 8002032:	f7ff fa6b 	bl	800150c <lcdPrintStr>

	  sprintf(buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <StartTimeTask+0xb0>)
 8002038:	791b      	ldrb	r3, [r3, #4]
 800203a:	461a      	mov	r2, r3
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <StartTimeTask+0xb0>)
 800203e:	795b      	ldrb	r3, [r3, #5]
 8002040:	4619      	mov	r1, r3
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <StartTimeTask+0xb0>)
 8002044:	799b      	ldrb	r3, [r3, #6]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	460b      	mov	r3, r1
 800204a:	490f      	ldr	r1, [pc, #60]	; (8002088 <StartTimeTask+0xc0>)
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <StartTimeTask+0xb8>)
 800204e:	f006 fd75 	bl	8008b3c <siprintf>
	  lcdSetCursorPosition(6, 2);
 8002052:	2102      	movs	r1, #2
 8002054:	2006      	movs	r0, #6
 8002056:	f7ff fa2d 	bl	80014b4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 10);
 800205a:	210a      	movs	r1, #10
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <StartTimeTask+0xb8>)
 800205e:	f7ff fa55 	bl	800150c <lcdPrintStr>

	  osDelay(1000);
 8002062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002066:	f005 f8aa 	bl	80071be <osDelay>
	  lcdDisplayClear();
 800206a:	e7b7      	b.n	8001fdc <StartTimeTask+0x14>
 800206c:	2000413c 	.word	0x2000413c
 8002070:	20004080 	.word	0x20004080
 8002074:	08009578 	.word	0x08009578
 8002078:	20004074 	.word	0x20004074
 800207c:	08009584 	.word	0x08009584
 8002080:	200042f8 	.word	0x200042f8
 8002084:	08009594 	.word	0x08009594
 8002088:	0800959c 	.word	0x0800959c

0800208c <StartStatusTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusTemp */
void StartStatusTemp(void const * argument)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusTemp */
  for(;;)
  {
	  if(temperature >= 18 && temperature < 20)
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <StartStatusTemp+0xc0>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 800209e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a6:	db19      	blt.n	80020dc <StartStatusTemp+0x50>
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <StartStatusTemp+0xc0>)
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80020b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ba:	d50f      	bpl.n	80020dc <StartStatusTemp+0x50>
	  {
		  HAL_GPIO_WritePin(GPIOA, RGB_led2_Pin, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	2102      	movs	r1, #2
 80020c0:	4823      	ldr	r0, [pc, #140]	; (8002150 <StartStatusTemp+0xc4>)
 80020c2:	f001 f9c3 	bl	800344c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin, GPIO_PIN_SET);
 80020c6:	2201      	movs	r2, #1
 80020c8:	2101      	movs	r1, #1
 80020ca:	4821      	ldr	r0, [pc, #132]	; (8002150 <StartStatusTemp+0xc4>)
 80020cc:	f001 f9be 	bl	800344c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led3_Pin, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	2110      	movs	r1, #16
 80020d4:	481e      	ldr	r0, [pc, #120]	; (8002150 <StartStatusTemp+0xc4>)
 80020d6:	f001 f9b9 	bl	800344c <HAL_GPIO_WritePin>
 80020da:	e032      	b.n	8002142 <StartStatusTemp+0xb6>
	  }
	  else if(temperature >= 20 && temperature <= 23)
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <StartStatusTemp+0xc0>)
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80020e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	db19      	blt.n	8002124 <StartStatusTemp+0x98>
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <StartStatusTemp+0xc0>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80020fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	d80f      	bhi.n	8002124 <StartStatusTemp+0x98>
	  {
		  HAL_GPIO_WritePin(GPIOA, RGB_led2_Pin, GPIO_PIN_SET);
 8002104:	2201      	movs	r2, #1
 8002106:	2102      	movs	r1, #2
 8002108:	4811      	ldr	r0, [pc, #68]	; (8002150 <StartStatusTemp+0xc4>)
 800210a:	f001 f99f 	bl	800344c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	2101      	movs	r1, #1
 8002112:	480f      	ldr	r0, [pc, #60]	; (8002150 <StartStatusTemp+0xc4>)
 8002114:	f001 f99a 	bl	800344c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led3_Pin, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2110      	movs	r1, #16
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <StartStatusTemp+0xc4>)
 800211e:	f001 f995 	bl	800344c <HAL_GPIO_WritePin>
 8002122:	e00e      	b.n	8002142 <StartStatusTemp+0xb6>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, RGB_led2_Pin, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
 8002126:	2102      	movs	r1, #2
 8002128:	4809      	ldr	r0, [pc, #36]	; (8002150 <StartStatusTemp+0xc4>)
 800212a:	f001 f98f 	bl	800344c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin, GPIO_PIN_SET);
 800212e:	2201      	movs	r2, #1
 8002130:	2101      	movs	r1, #1
 8002132:	4807      	ldr	r0, [pc, #28]	; (8002150 <StartStatusTemp+0xc4>)
 8002134:	f001 f98a 	bl	800344c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led3_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	2110      	movs	r1, #16
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <StartStatusTemp+0xc4>)
 800213e:	f001 f985 	bl	800344c <HAL_GPIO_WritePin>
	  }

      vTaskDelay(1000);
 8002142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002146:	f005 fb31 	bl	80077ac <vTaskDelay>
	  if(temperature >= 18 && temperature < 20)
 800214a:	e7a3      	b.n	8002094 <StartStatusTemp+0x8>
 800214c:	200041e4 	.word	0x200041e4
 8002150:	40020000 	.word	0x40020000

08002154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_MspInit+0x54>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_MspInit+0x54>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_MspInit+0x54>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_MspInit+0x54>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_MspInit+0x54>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_MspInit+0x54>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	210f      	movs	r1, #15
 80021a6:	f06f 0001 	mvn.w	r0, #1
 80021aa:	f000 fbd4 	bl	8002956 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800

080021bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08e      	sub	sp, #56	; 0x38
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a9a      	ldr	r2, [pc, #616]	; (8002444 <HAL_I2C_MspInit+0x288>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	f040 8098 	bne.w	8002310 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
 80021e4:	4b98      	ldr	r3, [pc, #608]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4a97      	ldr	r2, [pc, #604]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	6313      	str	r3, [r2, #48]	; 0x30
 80021f0:	4b95      	ldr	r3, [pc, #596]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021fc:	23c0      	movs	r3, #192	; 0xc0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002200:	2312      	movs	r3, #18
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002204:	2301      	movs	r3, #1
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800220c:	2304      	movs	r3, #4
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	4619      	mov	r1, r3
 8002216:	488d      	ldr	r0, [pc, #564]	; (800244c <HAL_I2C_MspInit+0x290>)
 8002218:	f000 ff7e 	bl	8003118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	4b89      	ldr	r3, [pc, #548]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	4a88      	ldr	r2, [pc, #544]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 8002226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800222a:	6413      	str	r3, [r2, #64]	; 0x40
 800222c:	4b86      	ldr	r3, [pc, #536]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	69fb      	ldr	r3, [r7, #28]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002238:	4b85      	ldr	r3, [pc, #532]	; (8002450 <HAL_I2C_MspInit+0x294>)
 800223a:	4a86      	ldr	r2, [pc, #536]	; (8002454 <HAL_I2C_MspInit+0x298>)
 800223c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800223e:	4b84      	ldr	r3, [pc, #528]	; (8002450 <HAL_I2C_MspInit+0x294>)
 8002240:	2200      	movs	r2, #0
 8002242:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002244:	4b82      	ldr	r3, [pc, #520]	; (8002450 <HAL_I2C_MspInit+0x294>)
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800224a:	4b81      	ldr	r3, [pc, #516]	; (8002450 <HAL_I2C_MspInit+0x294>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002250:	4b7f      	ldr	r3, [pc, #508]	; (8002450 <HAL_I2C_MspInit+0x294>)
 8002252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002256:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002258:	4b7d      	ldr	r3, [pc, #500]	; (8002450 <HAL_I2C_MspInit+0x294>)
 800225a:	2200      	movs	r2, #0
 800225c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225e:	4b7c      	ldr	r3, [pc, #496]	; (8002450 <HAL_I2C_MspInit+0x294>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002264:	4b7a      	ldr	r3, [pc, #488]	; (8002450 <HAL_I2C_MspInit+0x294>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800226a:	4b79      	ldr	r3, [pc, #484]	; (8002450 <HAL_I2C_MspInit+0x294>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002270:	4b77      	ldr	r3, [pc, #476]	; (8002450 <HAL_I2C_MspInit+0x294>)
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002276:	4876      	ldr	r0, [pc, #472]	; (8002450 <HAL_I2C_MspInit+0x294>)
 8002278:	f000 fba4 	bl	80029c4 <HAL_DMA_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002282:	f7ff ff67 	bl	8002154 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a71      	ldr	r2, [pc, #452]	; (8002450 <HAL_I2C_MspInit+0x294>)
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
 800228c:	4a70      	ldr	r2, [pc, #448]	; (8002450 <HAL_I2C_MspInit+0x294>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002292:	4b71      	ldr	r3, [pc, #452]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 8002294:	4a71      	ldr	r2, [pc, #452]	; (800245c <HAL_I2C_MspInit+0x2a0>)
 8002296:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002298:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 800229a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022a0:	4b6d      	ldr	r3, [pc, #436]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a6:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022b4:	4b68      	ldr	r3, [pc, #416]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80022c0:	4b65      	ldr	r3, [pc, #404]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022c6:	4b64      	ldr	r3, [pc, #400]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022cc:	4b62      	ldr	r3, [pc, #392]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80022d2:	4861      	ldr	r0, [pc, #388]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022d4:	f000 fb76 	bl	80029c4 <HAL_DMA_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80022de:	f7ff ff39 	bl	8002154 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a5c      	ldr	r2, [pc, #368]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38
 80022e8:	4a5b      	ldr	r2, [pc, #364]	; (8002458 <HAL_I2C_MspInit+0x29c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2105      	movs	r1, #5
 80022f2:	201f      	movs	r0, #31
 80022f4:	f000 fb2f 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022f8:	201f      	movs	r0, #31
 80022fa:	f000 fb48 	bl	800298e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2105      	movs	r1, #5
 8002302:	2020      	movs	r0, #32
 8002304:	f000 fb27 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002308:	2020      	movs	r0, #32
 800230a:	f000 fb40 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800230e:	e094      	b.n	800243a <HAL_I2C_MspInit+0x27e>
  else if(hi2c->Instance==I2C2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a52      	ldr	r2, [pc, #328]	; (8002460 <HAL_I2C_MspInit+0x2a4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d13e      	bne.n	8002398 <HAL_I2C_MspInit+0x1dc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a49      	ldr	r2, [pc, #292]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800233c:	2312      	movs	r3, #18
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002340:	2301      	movs	r3, #1
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002348:	2304      	movs	r3, #4
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002350:	4619      	mov	r1, r3
 8002352:	483e      	ldr	r0, [pc, #248]	; (800244c <HAL_I2C_MspInit+0x290>)
 8002354:	f000 fee0 	bl	8003118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800235e:	2312      	movs	r3, #18
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002362:	2301      	movs	r3, #1
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800236a:	2309      	movs	r3, #9
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002372:	4619      	mov	r1, r3
 8002374:	4835      	ldr	r0, [pc, #212]	; (800244c <HAL_I2C_MspInit+0x290>)
 8002376:	f000 fecf 	bl	8003118 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	4b32      	ldr	r3, [pc, #200]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a31      	ldr	r2, [pc, #196]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 8002384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]
}
 8002396:	e050      	b.n	800243a <HAL_I2C_MspInit+0x27e>
  else if(hi2c->Instance==I2C3)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a31      	ldr	r2, [pc, #196]	; (8002464 <HAL_I2C_MspInit+0x2a8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d14b      	bne.n	800243a <HAL_I2C_MspInit+0x27e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4b28      	ldr	r3, [pc, #160]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a27      	ldr	r2, [pc, #156]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a20      	ldr	r2, [pc, #128]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e0:	2312      	movs	r3, #18
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023ec:	2304      	movs	r3, #4
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f4:	4619      	mov	r1, r3
 80023f6:	481c      	ldr	r0, [pc, #112]	; (8002468 <HAL_I2C_MspInit+0x2ac>)
 80023f8:	f000 fe8e 	bl	8003118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002402:	2312      	movs	r3, #18
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002406:	2301      	movs	r3, #1
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800240e:	2304      	movs	r3, #4
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002416:	4619      	mov	r1, r3
 8002418:	4814      	ldr	r0, [pc, #80]	; (800246c <HAL_I2C_MspInit+0x2b0>)
 800241a:	f000 fe7d 	bl	8003118 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a08      	ldr	r2, [pc, #32]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 8002428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_I2C_MspInit+0x28c>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
}
 800243a:	bf00      	nop
 800243c:	3738      	adds	r7, #56	; 0x38
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40005400 	.word	0x40005400
 8002448:	40023800 	.word	0x40023800
 800244c:	40020400 	.word	0x40020400
 8002450:	200040dc 	.word	0x200040dc
 8002454:	40026028 	.word	0x40026028
 8002458:	20004310 	.word	0x20004310
 800245c:	40026010 	.word	0x40026010
 8002460:	40005800 	.word	0x40005800
 8002464:	40005c00 	.word	0x40005c00
 8002468:	40020800 	.word	0x40020800
 800246c:	40020000 	.word	0x40020000

08002470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_UART_MspInit+0x84>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d12b      	bne.n	80024ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_UART_MspInit+0x88>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <HAL_UART_MspInit+0x88>)
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_UART_MspInit+0x88>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_UART_MspInit+0x88>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_UART_MspInit+0x88>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_UART_MspInit+0x88>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024ca:	230c      	movs	r3, #12
 80024cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d6:	2303      	movs	r3, #3
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024da:	2307      	movs	r3, #7
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	4805      	ldr	r0, [pc, #20]	; (80024fc <HAL_UART_MspInit+0x8c>)
 80024e6:	f000 fe17 	bl	8003118 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024ea:	bf00      	nop
 80024ec:	3728      	adds	r7, #40	; 0x28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40004400 	.word	0x40004400
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <HardFault_Handler+0x4>

08002514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <MemManage_Handler+0x4>

0800251a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <UsageFault_Handler+0x4>

08002526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002538:	f000 f8f0 	bl	800271c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800253c:	f005 fe08 	bl	8008150 <xTaskGetSchedulerState>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002546:	f006 f83f 	bl	80085c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <DMA1_Stream0_IRQHandler+0x10>)
 8002556:	f000 fb5d 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20004310 	.word	0x20004310

08002564 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <DMA1_Stream1_IRQHandler+0x10>)
 800256a:	f000 fb53 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200040dc 	.word	0x200040dc

08002578 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <I2C1_EV_IRQHandler+0x10>)
 800257e:	f001 fced 	bl	8003f5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000413c 	.word	0x2000413c

0800258c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <I2C1_ER_IRQHandler+0x10>)
 8002592:	f001 fe49 	bl	8004228 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2000413c 	.word	0x2000413c

080025a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_sbrk+0x50>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x16>
		heap_end = &end;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <_sbrk+0x50>)
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <_sbrk+0x54>)
 80025b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <_sbrk+0x50>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <_sbrk+0x50>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	466a      	mov	r2, sp
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d907      	bls.n	80025da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025ca:	f006 fa5f 	bl	8008a8c <__errno>
 80025ce:	4602      	mov	r2, r0
 80025d0:	230c      	movs	r3, #12
 80025d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	e006      	b.n	80025e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <_sbrk+0x50>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <_sbrk+0x50>)
 80025e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	2000031c 	.word	0x2000031c
 80025f4:	20004400 	.word	0x20004400

080025f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <SystemInit+0x28>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <SystemInit+0x28>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <SystemInit+0x28>)
 800260e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002612:	609a      	str	r2, [r3, #8]
#endif
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800265c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002628:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800262a:	e003      	b.n	8002634 <LoopCopyDataInit>

0800262c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800262e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002630:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002632:	3104      	adds	r1, #4

08002634 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002634:	480b      	ldr	r0, [pc, #44]	; (8002664 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002638:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800263a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800263c:	d3f6      	bcc.n	800262c <CopyDataInit>
  ldr  r2, =_sbss
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002640:	e002      	b.n	8002648 <LoopFillZerobss>

08002642 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002642:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002644:	f842 3b04 	str.w	r3, [r2], #4

08002648 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800264a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800264c:	d3f9      	bcc.n	8002642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800264e:	f7ff ffd3 	bl	80025f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002652:	f006 fa21 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002656:	f7fe ffed 	bl	8001634 <main>
  bx  lr    
 800265a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800265c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002660:	08009644 	.word	0x08009644
  ldr  r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002668:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 800266c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002670:	20004400 	.word	0x20004400

08002674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <ADC_IRQHandler>
	...

08002678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <HAL_Init+0x40>)
 8002682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <HAL_Init+0x40>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <HAL_Init+0x40>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 f94d 	bl	8002940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a6:	200f      	movs	r0, #15
 80026a8:	f000 f808 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ac:	f7ff fd5a 	bl	8002164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00

080026bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_InitTick+0x54>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_InitTick+0x58>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f965 	bl	80029aa <HAL_SYSTICK_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00e      	b.n	8002708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d80a      	bhi.n	8002706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f000 f92d 	bl	8002956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026fc:	4a06      	ldr	r2, [pc, #24]	; (8002718 <HAL_InitTick+0x5c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000014 	.word	0x20000014
 8002714:	2000001c 	.word	0x2000001c
 8002718:	20000018 	.word	0x20000018

0800271c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	2000001c 	.word	0x2000001c
 8002740:	200043f8 	.word	0x200043f8

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	200043f8 	.word	0x200043f8

0800275c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_Delay+0x40>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffde 	bl	8002744 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2000001c 	.word	0x2000001c

080027a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290c:	d301      	bcc.n	8002912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <SysTick_Config+0x40>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291a:	210f      	movs	r1, #15
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f7ff ff8e 	bl	8002840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <SysTick_Config+0x40>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <SysTick_Config+0x40>)
 800292c:	2207      	movs	r2, #7
 800292e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff29 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002968:	f7ff ff3e 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 800296c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f7ff ff8e 	bl	8002894 <NVIC_EncodePriority>
 8002978:	4602      	mov	r2, r0
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff5d 	bl	8002840 <__NVIC_SetPriority>
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff31 	bl	8002804 <__NVIC_EnableIRQ>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffa2 	bl	80028fc <SysTick_Config>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff feb8 	bl	8002744 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e099      	b.n	8002b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a00:	e00f      	b.n	8002a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a02:	f7ff fe9f 	bl	8002744 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d908      	bls.n	8002a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e078      	b.n	8002b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e8      	bne.n	8002a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_DMA_Init+0x158>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d107      	bne.n	8002a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4313      	orrs	r3, r2
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 0307 	bic.w	r3, r3, #7
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d117      	bne.n	8002ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 faab 	bl	8003024 <DMA_CheckFifoParam>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e016      	b.n	8002b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa62 	bl	8002fb8 <DMA_CalcBaseAndBitshift>
 8002af4:	4603      	mov	r3, r0
 8002af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	223f      	movs	r2, #63	; 0x3f
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	f010803f 	.word	0xf010803f

08002b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_Start_IT+0x26>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e040      	b.n	8002bc8 <HAL_DMA_Start_IT+0xa8>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d12f      	bne.n	8002bba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f9f4 	bl	8002f5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	223f      	movs	r2, #63	; 0x3f
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0216 	orr.w	r2, r2, #22
 8002b8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0208 	orr.w	r2, r2, #8
 8002ba6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e005      	b.n	8002bc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d004      	beq.n	8002bee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00c      	b.n	8002c08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c20:	4b92      	ldr	r3, [pc, #584]	; (8002e6c <HAL_DMA_IRQHandler+0x258>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a92      	ldr	r2, [pc, #584]	; (8002e70 <HAL_DMA_IRQHandler+0x25c>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0a9b      	lsrs	r3, r3, #10
 8002c2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	2208      	movs	r2, #8
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01a      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0204 	bic.w	r2, r2, #4
 8002c66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	2201      	movs	r2, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	f043 0202 	orr.w	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	2204      	movs	r2, #4
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d012      	beq.n	8002cec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	2204      	movs	r2, #4
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d043      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d03c      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	2210      	movs	r2, #16
 8002d10:	409a      	lsls	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d018      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d108      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d024      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
 8002d42:	e01f      	b.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
 8002d54:	e016      	b.n	8002d84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d107      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0208 	bic.w	r2, r2, #8
 8002d72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	2220      	movs	r2, #32
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 808e 	beq.w	8002eb2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8086 	beq.w	8002eb2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	2220      	movs	r2, #32
 8002dac:	409a      	lsls	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d136      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0216 	bic.w	r2, r2, #22
 8002dcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ddc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_DMA_IRQHandler+0x1da>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0208 	bic.w	r2, r2, #8
 8002dfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	223f      	movs	r2, #63	; 0x3f
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d07d      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
        }
        return;
 8002e2a:	e078      	b.n	8002f1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01c      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d108      	bne.n	8002e5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d030      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
 8002e58:	e02b      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d027      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
 8002e6a:	e022      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x29e>
 8002e6c:	20000014 	.word	0x20000014
 8002e70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0210 	bic.w	r2, r2, #16
 8002e90:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d032      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d022      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2205      	movs	r2, #5
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d307      	bcc.n	8002efa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f2      	bne.n	8002ede <HAL_DMA_IRQHandler+0x2ca>
 8002ef8:	e000      	b.n	8002efc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002efa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
 8002f1c:	e000      	b.n	8002f20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f1e:	bf00      	nop
    }
  }
}
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop

08002f28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f36:	b2db      	uxtb	r3, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d108      	bne.n	8002f9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f9a:	e007      	b.n	8002fac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	60da      	str	r2, [r3, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3b10      	subs	r3, #16
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <DMA_CalcBaseAndBitshift+0x64>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fd2:	4a13      	ldr	r2, [pc, #76]	; (8003020 <DMA_CalcBaseAndBitshift+0x68>)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d909      	bls.n	8002ffa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ff8:	e007      	b.n	800300a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	aaaaaaab 	.word	0xaaaaaaab
 8003020:	080095d4 	.word	0x080095d4

08003024 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d11f      	bne.n	800307e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d855      	bhi.n	80030f0 <DMA_CheckFifoParam+0xcc>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <DMA_CheckFifoParam+0x28>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	0800305d 	.word	0x0800305d
 8003050:	0800306f 	.word	0x0800306f
 8003054:	0800305d 	.word	0x0800305d
 8003058:	080030f1 	.word	0x080030f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d045      	beq.n	80030f4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e042      	b.n	80030f4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003076:	d13f      	bne.n	80030f8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307c:	e03c      	b.n	80030f8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	d121      	bne.n	80030cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d836      	bhi.n	80030fc <DMA_CheckFifoParam+0xd8>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <DMA_CheckFifoParam+0x70>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030ab 	.word	0x080030ab
 800309c:	080030a5 	.word	0x080030a5
 80030a0:	080030bd 	.word	0x080030bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      break;
 80030a8:	e02f      	b.n	800310a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d024      	beq.n	8003100 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ba:	e021      	b.n	8003100 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030c4:	d11e      	bne.n	8003104 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030ca:	e01b      	b.n	8003104 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d902      	bls.n	80030d8 <DMA_CheckFifoParam+0xb4>
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d003      	beq.n	80030de <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030d6:	e018      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e015      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00e      	beq.n	8003108 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      break;
 80030ee:	e00b      	b.n	8003108 <DMA_CheckFifoParam+0xe4>
      break;
 80030f0:	bf00      	nop
 80030f2:	e00a      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      break;
 80030f4:	bf00      	nop
 80030f6:	e008      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      break;
 80030f8:	bf00      	nop
 80030fa:	e006      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      break;
 80030fc:	bf00      	nop
 80030fe:	e004      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      break;
 8003100:	bf00      	nop
 8003102:	e002      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      break;   
 8003104:	bf00      	nop
 8003106:	e000      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      break;
 8003108:	bf00      	nop
    }
  } 
  
  return status; 
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	; 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	e159      	b.n	80033e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003134:	2201      	movs	r2, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	f040 8148 	bne.w	80033e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d00b      	beq.n	8003172 <HAL_GPIO_Init+0x5a>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d007      	beq.n	8003172 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003166:	2b11      	cmp	r3, #17
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b12      	cmp	r3, #18
 8003170:	d130      	bne.n	80031d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 0201 	and.w	r2, r3, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0xfc>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b12      	cmp	r3, #18
 8003212:	d123      	bne.n	800325c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	08da      	lsrs	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3208      	adds	r2, #8
 800321c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	220f      	movs	r2, #15
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	69b9      	ldr	r1, [r7, #24]
 8003258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0203 	and.w	r2, r3, #3
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a2 	beq.w	80033e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b56      	ldr	r3, [pc, #344]	; (80033fc <HAL_GPIO_Init+0x2e4>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	4a55      	ldr	r2, [pc, #340]	; (80033fc <HAL_GPIO_Init+0x2e4>)
 80032a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ac:	6453      	str	r3, [r2, #68]	; 0x44
 80032ae:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_GPIO_Init+0x2e4>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ba:	4a51      	ldr	r2, [pc, #324]	; (8003400 <HAL_GPIO_Init+0x2e8>)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	3302      	adds	r3, #2
 80032c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	220f      	movs	r2, #15
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a48      	ldr	r2, [pc, #288]	; (8003404 <HAL_GPIO_Init+0x2ec>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d019      	beq.n	800331a <HAL_GPIO_Init+0x202>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a47      	ldr	r2, [pc, #284]	; (8003408 <HAL_GPIO_Init+0x2f0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_GPIO_Init+0x1fe>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a46      	ldr	r2, [pc, #280]	; (800340c <HAL_GPIO_Init+0x2f4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00d      	beq.n	8003312 <HAL_GPIO_Init+0x1fa>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a45      	ldr	r2, [pc, #276]	; (8003410 <HAL_GPIO_Init+0x2f8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <HAL_GPIO_Init+0x1f6>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a44      	ldr	r2, [pc, #272]	; (8003414 <HAL_GPIO_Init+0x2fc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_GPIO_Init+0x1f2>
 8003306:	2304      	movs	r3, #4
 8003308:	e008      	b.n	800331c <HAL_GPIO_Init+0x204>
 800330a:	2307      	movs	r3, #7
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x204>
 800330e:	2303      	movs	r3, #3
 8003310:	e004      	b.n	800331c <HAL_GPIO_Init+0x204>
 8003312:	2302      	movs	r3, #2
 8003314:	e002      	b.n	800331c <HAL_GPIO_Init+0x204>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_GPIO_Init+0x204>
 800331a:	2300      	movs	r3, #0
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	f002 0203 	and.w	r2, r2, #3
 8003322:	0092      	lsls	r2, r2, #2
 8003324:	4093      	lsls	r3, r2
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800332c:	4934      	ldr	r1, [pc, #208]	; (8003400 <HAL_GPIO_Init+0x2e8>)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	3302      	adds	r3, #2
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <HAL_GPIO_Init+0x300>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800335e:	4a2e      	ldr	r2, [pc, #184]	; (8003418 <HAL_GPIO_Init+0x300>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003364:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_GPIO_Init+0x300>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003388:	4a23      	ldr	r2, [pc, #140]	; (8003418 <HAL_GPIO_Init+0x300>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_GPIO_Init+0x300>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b2:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_GPIO_Init+0x300>)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033b8:	4b17      	ldr	r3, [pc, #92]	; (8003418 <HAL_GPIO_Init+0x300>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033dc:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <HAL_GPIO_Init+0x300>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3301      	adds	r3, #1
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	f67f aea2 	bls.w	8003134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f0:	bf00      	nop
 80033f2:	3724      	adds	r7, #36	; 0x24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40023800 	.word	0x40023800
 8003400:	40013800 	.word	0x40013800
 8003404:	40020000 	.word	0x40020000
 8003408:	40020400 	.word	0x40020400
 800340c:	40020800 	.word	0x40020800
 8003410:	40020c00 	.word	0x40020c00
 8003414:	40021000 	.word	0x40021000
 8003418:	40013c00 	.word	0x40013c00

0800341c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	887b      	ldrh	r3, [r7, #2]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e001      	b.n	800343e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
 8003458:	4613      	mov	r3, r2
 800345a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800345c:	787b      	ldrb	r3, [r7, #1]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003468:	e003      	b.n	8003472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800346a:	887b      	ldrh	r3, [r7, #2]
 800346c:	041a      	lsls	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	619a      	str	r2, [r3, #24]
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e11f      	b.n	80036d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fe fe88 	bl	80021bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2224      	movs	r2, #36	; 0x24
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e4:	f003 f9fc 	bl	80068e0 <HAL_RCC_GetPCLK1Freq>
 80034e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4a7b      	ldr	r2, [pc, #492]	; (80036dc <HAL_I2C_Init+0x25c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d807      	bhi.n	8003504 <HAL_I2C_Init+0x84>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a7a      	ldr	r2, [pc, #488]	; (80036e0 <HAL_I2C_Init+0x260>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	bf94      	ite	ls
 80034fc:	2301      	movls	r3, #1
 80034fe:	2300      	movhi	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e006      	b.n	8003512 <HAL_I2C_Init+0x92>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a77      	ldr	r2, [pc, #476]	; (80036e4 <HAL_I2C_Init+0x264>)
 8003508:	4293      	cmp	r3, r2
 800350a:	bf94      	ite	ls
 800350c:	2301      	movls	r3, #1
 800350e:	2300      	movhi	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0db      	b.n	80036d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a72      	ldr	r2, [pc, #456]	; (80036e8 <HAL_I2C_Init+0x268>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9b      	lsrs	r3, r3, #18
 8003524:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a64      	ldr	r2, [pc, #400]	; (80036dc <HAL_I2C_Init+0x25c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d802      	bhi.n	8003554 <HAL_I2C_Init+0xd4>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	e009      	b.n	8003568 <HAL_I2C_Init+0xe8>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	4a63      	ldr	r2, [pc, #396]	; (80036ec <HAL_I2C_Init+0x26c>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	099b      	lsrs	r3, r3, #6
 8003566:	3301      	adds	r3, #1
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	430b      	orrs	r3, r1
 800356e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800357a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4956      	ldr	r1, [pc, #344]	; (80036dc <HAL_I2C_Init+0x25c>)
 8003584:	428b      	cmp	r3, r1
 8003586:	d80d      	bhi.n	80035a4 <HAL_I2C_Init+0x124>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1e59      	subs	r1, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fbb1 f3f3 	udiv	r3, r1, r3
 8003596:	3301      	adds	r3, #1
 8003598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359c:	2b04      	cmp	r3, #4
 800359e:	bf38      	it	cc
 80035a0:	2304      	movcc	r3, #4
 80035a2:	e04f      	b.n	8003644 <HAL_I2C_Init+0x1c4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d111      	bne.n	80035d0 <HAL_I2C_Init+0x150>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e012      	b.n	80035f6 <HAL_I2C_Init+0x176>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e58      	subs	r0, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	0099      	lsls	r1, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x17e>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e022      	b.n	8003644 <HAL_I2C_Init+0x1c4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <HAL_I2C_Init+0x1a4>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1e58      	subs	r0, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	440b      	add	r3, r1
 8003614:	fbb0 f3f3 	udiv	r3, r0, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Init+0x1c4>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	0099      	lsls	r1, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6911      	ldr	r1, [r2, #16]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	430b      	orrs	r3, r1
 8003686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	000186a0 	.word	0x000186a0
 80036e0:	001e847f 	.word	0x001e847f
 80036e4:	003d08ff 	.word	0x003d08ff
 80036e8:	431bde83 	.word	0x431bde83
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	461a      	mov	r2, r3
 80036fc:	460b      	mov	r3, r1
 80036fe:	817b      	strh	r3, [r7, #10]
 8003700:	4613      	mov	r3, r2
 8003702:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b20      	cmp	r3, #32
 8003712:	f040 80f4 	bne.w	80038fe <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003716:	4b7c      	ldr	r3, [pc, #496]	; (8003908 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	08db      	lsrs	r3, r3, #3
 800371c:	4a7b      	ldr	r2, [pc, #492]	; (800390c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0a1a      	lsrs	r2, r3, #8
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009a      	lsls	r2, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	3b01      	subs	r3, #1
 8003734:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d116      	bne.n	800376a <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f043 0220 	orr.w	r2, r3, #32
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0ca      	b.n	8003900 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b02      	cmp	r3, #2
 8003776:	d0db      	beq.n	8003730 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_I2C_Master_Transmit_DMA+0x96>
 8003782:	2302      	movs	r3, #2
 8003784:	e0bc      	b.n	8003900 <HAL_I2C_Master_Transmit_DMA+0x210>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d007      	beq.n	80037ac <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2221      	movs	r2, #33	; 0x21
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2210      	movs	r2, #16
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	893a      	ldrh	r2, [r7, #8]
 80037dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a49      	ldr	r2, [pc, #292]	; (8003910 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80037ee:	897a      	ldrh	r2, [r7, #10]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d062      	beq.n	80038c2 <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	4a44      	ldr	r2, [pc, #272]	; (8003914 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8003802:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	4a43      	ldr	r2, [pc, #268]	; (8003918 <HAL_I2C_Master_Transmit_DMA+0x228>)
 800380a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003810:	2200      	movs	r2, #0
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	2200      	movs	r2, #0
 800381a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003820:	2200      	movs	r2, #0
 8003822:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003828:	2200      	movs	r2, #0
 800382a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	4619      	mov	r1, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3310      	adds	r3, #16
 800383c:	461a      	mov	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	f7ff f96d 	bl	8002b20 <HAL_DMA_Start_IT>
 8003846:	4603      	mov	r3, r0
 8003848:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d124      	bne.n	800389a <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800385e:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003886:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	e02f      	b.n	80038fa <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e01e      	b.n	8003900 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d0:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e0:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80038f8:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000014 	.word	0x20000014
 800390c:	14f8b589 	.word	0x14f8b589
 8003910:	ffff0000 	.word	0xffff0000
 8003914:	08005959 	.word	0x08005959
 8003918:	08005b03 	.word	0x08005b03

0800391c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	817b      	strh	r3, [r7, #10]
 800392e:	460b      	mov	r3, r1
 8003930:	813b      	strh	r3, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003936:	f7fe ff05 	bl	8002744 <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b20      	cmp	r3, #32
 8003946:	f040 80d9 	bne.w	8003afc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	2319      	movs	r3, #25
 8003950:	2201      	movs	r2, #1
 8003952:	496d      	ldr	r1, [pc, #436]	; (8003b08 <HAL_I2C_Mem_Write+0x1ec>)
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f002 f990 	bl	8005c7a <I2C_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
 8003962:	e0cc      	b.n	8003afe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_I2C_Mem_Write+0x56>
 800396e:	2302      	movs	r3, #2
 8003970:	e0c5      	b.n	8003afe <HAL_I2C_Mem_Write+0x1e2>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d007      	beq.n	8003998 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2221      	movs	r2, #33	; 0x21
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2240      	movs	r2, #64	; 0x40
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a3a      	ldr	r2, [r7, #32]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a4d      	ldr	r2, [pc, #308]	; (8003b0c <HAL_I2C_Mem_Write+0x1f0>)
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039da:	88f8      	ldrh	r0, [r7, #6]
 80039dc:	893a      	ldrh	r2, [r7, #8]
 80039de:	8979      	ldrh	r1, [r7, #10]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	4603      	mov	r3, r0
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f001 fe3a 	bl	8005664 <I2C_RequestMemoryWrite>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d052      	beq.n	8003a9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e081      	b.n	8003afe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f002 fa11 	bl	8005e26 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d107      	bne.n	8003a22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e06b      	b.n	8003afe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	781a      	ldrb	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d11b      	bne.n	8003a9c <HAL_I2C_Mem_Write+0x180>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d017      	beq.n	8003a9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1aa      	bne.n	80039fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f002 f9fd 	bl	8005ea8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d107      	bne.n	8003acc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e016      	b.n	8003afe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e000      	b.n	8003afe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	00100002 	.word	0x00100002
 8003b0c:	ffff0000 	.word	0xffff0000

08003b10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	817b      	strh	r3, [r7, #10]
 8003b22:	460b      	mov	r3, r1
 8003b24:	813b      	strh	r3, [r7, #8]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b2a:	f7fe fe0b 	bl	8002744 <HAL_GetTick>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	f040 8208 	bne.w	8003f4e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2319      	movs	r3, #25
 8003b44:	2201      	movs	r2, #1
 8003b46:	497b      	ldr	r1, [pc, #492]	; (8003d34 <HAL_I2C_Mem_Read+0x224>)
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f002 f896 	bl	8005c7a <I2C_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
 8003b56:	e1fb      	b.n	8003f50 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_I2C_Mem_Read+0x56>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e1f4      	b.n	8003f50 <HAL_I2C_Mem_Read+0x440>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d007      	beq.n	8003b8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2222      	movs	r2, #34	; 0x22
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2240      	movs	r2, #64	; 0x40
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a5b      	ldr	r2, [pc, #364]	; (8003d38 <HAL_I2C_Mem_Read+0x228>)
 8003bcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bce:	88f8      	ldrh	r0, [r7, #6]
 8003bd0:	893a      	ldrh	r2, [r7, #8]
 8003bd2:	8979      	ldrh	r1, [r7, #10]
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4603      	mov	r3, r0
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f001 fdd4 	bl	800578c <I2C_RequestMemoryRead>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e1b0      	b.n	8003f50 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d113      	bne.n	8003c1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	623b      	str	r3, [r7, #32]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e184      	b.n	8003f28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d11b      	bne.n	8003c5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e164      	b.n	8003f28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d11b      	bne.n	8003c9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	e144      	b.n	8003f28 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cb4:	e138      	b.n	8003f28 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	f200 80f1 	bhi.w	8003ea2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d123      	bne.n	8003d10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f002 f92c 	bl	8005f2a <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e139      	b.n	8003f50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d0e:	e10b      	b.n	8003f28 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d14e      	bne.n	8003db6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	2200      	movs	r2, #0
 8003d20:	4906      	ldr	r1, [pc, #24]	; (8003d3c <HAL_I2C_Mem_Read+0x22c>)
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f001 ffa9 	bl	8005c7a <I2C_WaitOnFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e10e      	b.n	8003f50 <HAL_I2C_Mem_Read+0x440>
 8003d32:	bf00      	nop
 8003d34:	00100002 	.word	0x00100002
 8003d38:	ffff0000 	.word	0xffff0000
 8003d3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003db4:	e0b8      	b.n	8003f28 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4966      	ldr	r1, [pc, #408]	; (8003f58 <HAL_I2C_Mem_Read+0x448>)
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f001 ff5a 	bl	8005c7a <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0bf      	b.n	8003f50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	2200      	movs	r2, #0
 8003e1a:	494f      	ldr	r1, [pc, #316]	; (8003f58 <HAL_I2C_Mem_Read+0x448>)
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f001 ff2c 	bl	8005c7a <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e091      	b.n	8003f50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ea0:	e042      	b.n	8003f28 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f002 f83f 	bl	8005f2a <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e04c      	b.n	8003f50 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d118      	bne.n	8003f28 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f47f aec2 	bne.w	8003cb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e000      	b.n	8003f50 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
  }
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3728      	adds	r7, #40	; 0x28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	00010004 	.word	0x00010004

08003f5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d003      	beq.n	8003f94 <HAL_I2C_EV_IRQHandler+0x38>
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	f040 80b6 	bne.w	8004100 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10d      	bne.n	8003fca <HAL_I2C_EV_IRQHandler+0x6e>
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003fb4:	d003      	beq.n	8003fbe <HAL_I2C_EV_IRQHandler+0x62>
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x66>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_I2C_EV_IRQHandler+0x68>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	f000 8127 	beq.w	8004218 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00c      	beq.n	8003fee <HAL_I2C_EV_IRQHandler+0x92>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	0a5b      	lsrs	r3, r3, #9
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f002 f827 	bl	8006034 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fd2a 	bl	8004a40 <I2C_Master_SB>
 8003fec:	e087      	b.n	80040fe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	08db      	lsrs	r3, r3, #3
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_I2C_EV_IRQHandler+0xb2>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	0a5b      	lsrs	r3, r3, #9
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fda0 	bl	8004b4c <I2C_Master_ADD10>
 800400c:	e077      	b.n	80040fe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_I2C_EV_IRQHandler+0xd2>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	0a5b      	lsrs	r3, r3, #9
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fdba 	bl	8004ba0 <I2C_Master_ADDR>
 800402c:	e067      	b.n	80040fe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d030      	beq.n	800409c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004048:	f000 80e8 	beq.w	800421c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	09db      	lsrs	r3, r3, #7
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00f      	beq.n	8004078 <HAL_I2C_EV_IRQHandler+0x11c>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	0a9b      	lsrs	r3, r3, #10
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <HAL_I2C_EV_IRQHandler+0x11c>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	089b      	lsrs	r3, r3, #2
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d103      	bne.n	8004078 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f9f6 	bl	8004462 <I2C_MasterTransmit_TXE>
 8004076:	e042      	b.n	80040fe <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	089b      	lsrs	r3, r3, #2
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80cb 	beq.w	800421c <HAL_I2C_EV_IRQHandler+0x2c0>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	0a5b      	lsrs	r3, r3, #9
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80c4 	beq.w	800421c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fa80 	bl	800459a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800409a:	e0bf      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040aa:	f000 80b7 	beq.w	800421c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	099b      	lsrs	r3, r3, #6
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00f      	beq.n	80040da <HAL_I2C_EV_IRQHandler+0x17e>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	0a9b      	lsrs	r3, r3, #10
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_I2C_EV_IRQHandler+0x17e>
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fb48 	bl	8004768 <I2C_MasterReceive_RXNE>
 80040d8:	e011      	b.n	80040fe <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	089b      	lsrs	r3, r3, #2
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 809a 	beq.w	800421c <HAL_I2C_EV_IRQHandler+0x2c0>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	0a5b      	lsrs	r3, r3, #9
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8093 	beq.w	800421c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fbb8 	bl	800486c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040fc:	e08e      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2c0>
 80040fe:	e08d      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d004      	beq.n	8004112 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e007      	b.n	8004122 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d012      	beq.n	8004154 <HAL_I2C_EV_IRQHandler+0x1f8>
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	0a5b      	lsrs	r3, r3, #9
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800414a:	69b9      	ldr	r1, [r7, #24]
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 ff76 	bl	800503e <I2C_Slave_ADDR>
 8004152:	e066      	b.n	8004222 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	091b      	lsrs	r3, r3, #4
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <HAL_I2C_EV_IRQHandler+0x218>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	0a5b      	lsrs	r3, r3, #9
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 ffab 	bl	80050c8 <I2C_Slave_STOPF>
 8004172:	e056      	b.n	8004222 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004174:	7bbb      	ldrb	r3, [r7, #14]
 8004176:	2b21      	cmp	r3, #33	; 0x21
 8004178:	d002      	beq.n	8004180 <HAL_I2C_EV_IRQHandler+0x224>
 800417a:	7bbb      	ldrb	r3, [r7, #14]
 800417c:	2b29      	cmp	r3, #41	; 0x29
 800417e:	d125      	bne.n	80041cc <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	09db      	lsrs	r3, r3, #7
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00f      	beq.n	80041ac <HAL_I2C_EV_IRQHandler+0x250>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	0a9b      	lsrs	r3, r3, #10
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_I2C_EV_IRQHandler+0x250>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	089b      	lsrs	r3, r3, #2
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fe8c 	bl	8004ec2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041aa:	e039      	b.n	8004220 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d033      	beq.n	8004220 <HAL_I2C_EV_IRQHandler+0x2c4>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	0a5b      	lsrs	r3, r3, #9
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d02d      	beq.n	8004220 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 feb9 	bl	8004f3c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ca:	e029      	b.n	8004220 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	099b      	lsrs	r3, r3, #6
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00f      	beq.n	80041f8 <HAL_I2C_EV_IRQHandler+0x29c>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	0a9b      	lsrs	r3, r3, #10
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d009      	beq.n	80041f8 <HAL_I2C_EV_IRQHandler+0x29c>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fec4 	bl	8004f7e <I2C_SlaveReceive_RXNE>
 80041f6:	e014      	b.n	8004222 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	0a5b      	lsrs	r3, r3, #9
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fef2 	bl	8004ffa <I2C_SlaveReceive_BTF>
 8004216:	e004      	b.n	8004222 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004218:	bf00      	nop
 800421a:	e002      	b.n	8004222 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800421c:	bf00      	nop
 800421e:	e000      	b.n	8004222 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004220:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004240:	2300      	movs	r3, #0
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00e      	beq.n	8004276 <HAL_I2C_ER_IRQHandler+0x4e>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004274:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	0a5b      	lsrs	r3, r3, #9
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00e      	beq.n	80042a0 <HAL_I2C_ER_IRQHandler+0x78>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800429e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	0a9b      	lsrs	r3, r3, #10
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d03f      	beq.n	800432c <HAL_I2C_ER_IRQHandler+0x104>
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d039      	beq.n	800432c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80042b8:	7efb      	ldrb	r3, [r7, #27]
 80042ba:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80042d2:	7ebb      	ldrb	r3, [r7, #26]
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d112      	bne.n	80042fe <HAL_I2C_ER_IRQHandler+0xd6>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10f      	bne.n	80042fe <HAL_I2C_ER_IRQHandler+0xd6>
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b21      	cmp	r3, #33	; 0x21
 80042e2:	d008      	beq.n	80042f6 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	2b29      	cmp	r3, #41	; 0x29
 80042e8:	d005      	beq.n	80042f6 <HAL_I2C_ER_IRQHandler+0xce>
 80042ea:	7cfb      	ldrb	r3, [r7, #19]
 80042ec:	2b28      	cmp	r3, #40	; 0x28
 80042ee:	d106      	bne.n	80042fe <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b21      	cmp	r3, #33	; 0x21
 80042f4:	d103      	bne.n	80042fe <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f001 f816 	bl	8005328 <I2C_Slave_AF>
 80042fc:	e016      	b.n	800432c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004306:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	f043 0304 	orr.w	r3, r3, #4
 800430e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004310:	7efb      	ldrb	r3, [r7, #27]
 8004312:	2b10      	cmp	r3, #16
 8004314:	d002      	beq.n	800431c <HAL_I2C_ER_IRQHandler+0xf4>
 8004316:	7efb      	ldrb	r3, [r7, #27]
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d107      	bne.n	800432c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	0adb      	lsrs	r3, r3, #11
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <HAL_I2C_ER_IRQHandler+0x12e>
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	f043 0308 	orr.w	r3, r3, #8
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004354:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f001 f84d 	bl	8005408 <I2C_ITError>
  }
}
 800436e:	bf00      	nop
 8004370:	3728      	adds	r7, #40	; 0x28
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	70fb      	strb	r3, [r7, #3]
 80043d2:	4613      	mov	r3, r2
 80043d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
}
 8004456:	4618      	mov	r0, r3
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004470:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004478:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	2b00      	cmp	r3, #0
 8004486:	d150      	bne.n	800452a <I2C_MasterTransmit_TXE+0xc8>
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	2b21      	cmp	r3, #33	; 0x21
 800448c:	d14d      	bne.n	800452a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d01d      	beq.n	80044d0 <I2C_MasterTransmit_TXE+0x6e>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b20      	cmp	r3, #32
 8004498:	d01a      	beq.n	80044d0 <I2C_MasterTransmit_TXE+0x6e>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044a0:	d016      	beq.n	80044d0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044b0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2211      	movs	r2, #17
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ff54 	bl	8004376 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044ce:	e060      	b.n	8004592 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044de:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d107      	bne.n	800451a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff ff6f 	bl	80043f6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004518:	e03b      	b.n	8004592 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ff27 	bl	8004376 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004528:	e033      	b.n	8004592 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2b21      	cmp	r3, #33	; 0x21
 800452e:	d005      	beq.n	800453c <I2C_MasterTransmit_TXE+0xda>
 8004530:	7bbb      	ldrb	r3, [r7, #14]
 8004532:	2b40      	cmp	r3, #64	; 0x40
 8004534:	d12d      	bne.n	8004592 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b22      	cmp	r3, #34	; 0x22
 800453a:	d12a      	bne.n	8004592 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d108      	bne.n	8004558 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004556:	e01c      	b.n	8004592 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d103      	bne.n	800456c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f898 	bl	800469a <I2C_MemoryTransmit_TXE_BTF>
}
 800456a:	e012      	b.n	8004592 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004590:	e7ff      	b.n	8004592 <I2C_MasterTransmit_TXE+0x130>
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b21      	cmp	r3, #33	; 0x21
 80045b2:	d165      	bne.n	8004680 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d012      	beq.n	80045e4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80045e2:	e056      	b.n	8004692 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d01d      	beq.n	8004626 <I2C_MasterTransmit_BTF+0x8c>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d01a      	beq.n	8004626 <I2C_MasterTransmit_BTF+0x8c>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045f6:	d016      	beq.n	8004626 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004606:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2211      	movs	r2, #17
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fea9 	bl	8004376 <HAL_I2C_MasterTxCpltCallback>
}
 8004624:	e035      	b.n	8004692 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004634:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004644:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d107      	bne.n	8004670 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff fec4 	bl	80043f6 <HAL_I2C_MemTxCpltCallback>
}
 800466e:	e010      	b.n	8004692 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff fe7c 	bl	8004376 <HAL_I2C_MasterTxCpltCallback>
}
 800467e:	e008      	b.n	8004692 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d102      	bne.n	8004692 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f804 	bl	800469a <I2C_MemoryTransmit_TXE_BTF>
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11d      	bne.n	80046e6 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d10b      	bne.n	80046ca <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c2:	1c9a      	adds	r2, r3, #2
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80046c8:	e048      	b.n	800475c <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	121b      	asrs	r3, r3, #8
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046e4:	e03a      	b.n	800475c <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d10b      	bne.n	8004706 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004704:	e02a      	b.n	800475c <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470a:	2b02      	cmp	r3, #2
 800470c:	d126      	bne.n	800475c <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b22      	cmp	r3, #34	; 0x22
 8004718:	d108      	bne.n	800472c <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004728:	601a      	str	r2, [r3, #0]
}
 800472a:	e017      	b.n	800475c <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b21      	cmp	r3, #33	; 0x21
 8004736:	d111      	bne.n	800475c <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b22      	cmp	r3, #34	; 0x22
 800477a:	d173      	bne.n	8004864 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d920      	bls.n	80047cc <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d154      	bne.n	8004864 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80047ca:	e04b      	b.n	8004864 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d047      	beq.n	8004864 <I2C_MasterReceive_RXNE+0xfc>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d002      	beq.n	80047e0 <I2C_MasterReceive_RXNE+0x78>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d141      	bne.n	8004864 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ee:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047fe:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d10a      	bne.n	8004850 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff fdde 	bl	800440a <HAL_I2C_MemRxCpltCallback>
}
 800484e:	e009      	b.n	8004864 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2212      	movs	r2, #18
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff fd93 	bl	800438a <HAL_I2C_MasterRxCpltCallback>
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b04      	cmp	r3, #4
 8004882:	d11b      	bne.n	80048bc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004892:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80048ba:	e0bd      	b.n	8004a38 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d129      	bne.n	800491a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d00a      	beq.n	80048f2 <I2C_MasterReceive_BTF+0x86>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d007      	beq.n	80048f2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004918:	e08e      	b.n	8004a38 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d176      	bne.n	8004a12 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d002      	beq.n	8004930 <I2C_MasterReceive_BTF+0xc4>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b10      	cmp	r3, #16
 800492e:	d108      	bne.n	8004942 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e019      	b.n	8004976 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b04      	cmp	r3, #4
 8004946:	d002      	beq.n	800494e <I2C_MasterReceive_BTF+0xe2>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d108      	bne.n	8004960 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e00a      	b.n	8004976 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b10      	cmp	r3, #16
 8004964:	d007      	beq.n	8004976 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004974:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	d10a      	bne.n	80049fc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fd08 	bl	800440a <HAL_I2C_MemRxCpltCallback>
}
 80049fa:	e01d      	b.n	8004a38 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2212      	movs	r2, #18
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff fcbd 	bl	800438a <HAL_I2C_MasterRxCpltCallback>
}
 8004a10:	e012      	b.n	8004a38 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d117      	bne.n	8004a84 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a6c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a6e:	e067      	b.n	8004b40 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	611a      	str	r2, [r3, #16]
}
 8004a82:	e05d      	b.n	8004b40 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a8c:	d133      	bne.n	8004af6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b21      	cmp	r3, #33	; 0x21
 8004a98:	d109      	bne.n	8004aae <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aaa:	611a      	str	r2, [r3, #16]
 8004aac:	e008      	b.n	8004ac0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <I2C_Master_SB+0x92>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d108      	bne.n	8004ae4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d032      	beq.n	8004b40 <I2C_Master_SB+0x100>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d02d      	beq.n	8004b40 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af2:	605a      	str	r2, [r3, #4]
}
 8004af4:	e024      	b.n	8004b40 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10e      	bne.n	8004b1c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	11db      	asrs	r3, r3, #7
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 0306 	and.w	r3, r3, #6
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f063 030f 	orn	r3, r3, #15
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]
}
 8004b1a:	e011      	b.n	8004b40 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10d      	bne.n	8004b40 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	11db      	asrs	r3, r3, #7
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0306 	and.w	r3, r3, #6
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f063 030e 	orn	r3, r3, #14
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <I2C_Master_ADD10+0x24>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d011      	beq.n	8004b94 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <I2C_Master_ADD10+0x38>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b92:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b091      	sub	sp, #68	; 0x44
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b22      	cmp	r3, #34	; 0x22
 8004bc8:	f040 8169 	bne.w	8004e9e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10f      	bne.n	8004bf4 <I2C_Master_ADDR+0x54>
 8004bd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d10b      	bne.n	8004bf4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	633b      	str	r3, [r7, #48]	; 0x30
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	e160      	b.n	8004eb6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d11d      	bne.n	8004c38 <I2C_Master_ADDR+0x98>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c04:	d118      	bne.n	8004c38 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c06:	2300      	movs	r3, #0
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	651a      	str	r2, [r3, #80]	; 0x50
 8004c36:	e13e      	b.n	8004eb6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d113      	bne.n	8004c6a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c42:	2300      	movs	r3, #0
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	e115      	b.n	8004e96 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f040 808a 	bne.w	8004d8a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c7c:	d137      	bne.n	8004cee <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9c:	d113      	bne.n	8004cc6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cac:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	e0e7      	b.n	8004e96 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	623b      	str	r3, [r7, #32]
 8004cda:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	e0d3      	b.n	8004e96 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d02e      	beq.n	8004d52 <I2C_Master_ADDR+0x1b2>
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d02b      	beq.n	8004d52 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfc:	2b12      	cmp	r3, #18
 8004cfe:	d102      	bne.n	8004d06 <I2C_Master_ADDR+0x166>
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d125      	bne.n	8004d52 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d00e      	beq.n	8004d2a <I2C_Master_ADDR+0x18a>
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d00b      	beq.n	8004d2a <I2C_Master_ADDR+0x18a>
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d008      	beq.n	8004d2a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e007      	b.n	8004d3a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d38:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	e0a1      	b.n	8004e96 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d60:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e085      	b.n	8004e96 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d14d      	bne.n	8004e30 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d016      	beq.n	8004dc8 <I2C_Master_ADDR+0x228>
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d013      	beq.n	8004dc8 <I2C_Master_ADDR+0x228>
 8004da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d010      	beq.n	8004dc8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e007      	b.n	8004dd8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dd6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de6:	d117      	bne.n	8004e18 <I2C_Master_ADDR+0x278>
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dee:	d00b      	beq.n	8004e08 <I2C_Master_ADDR+0x268>
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d008      	beq.n	8004e08 <I2C_Master_ADDR+0x268>
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d005      	beq.n	8004e08 <I2C_Master_ADDR+0x268>
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d002      	beq.n	8004e08 <I2C_Master_ADDR+0x268>
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d107      	bne.n	8004e18 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e16:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	e032      	b.n	8004e96 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e3e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4e:	d117      	bne.n	8004e80 <I2C_Master_ADDR+0x2e0>
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e56:	d00b      	beq.n	8004e70 <I2C_Master_ADDR+0x2d0>
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d008      	beq.n	8004e70 <I2C_Master_ADDR+0x2d0>
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d005      	beq.n	8004e70 <I2C_Master_ADDR+0x2d0>
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	2b10      	cmp	r3, #16
 8004e68:	d002      	beq.n	8004e70 <I2C_Master_ADDR+0x2d0>
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d107      	bne.n	8004e80 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e7e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e9c:	e00b      	b.n	8004eb6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
}
 8004eb4:	e7ff      	b.n	8004eb6 <I2C_Master_ADDR+0x316>
 8004eb6:	bf00      	nop
 8004eb8:	3744      	adds	r7, #68	; 0x44
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d02b      	beq.n	8004f34 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d114      	bne.n	8004f34 <I2C_SlaveTransmit_TXE+0x72>
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b29      	cmp	r3, #41	; 0x29
 8004f0e:	d111      	bne.n	8004f34 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2221      	movs	r2, #33	; 0x21
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2228      	movs	r2, #40	; 0x28
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fa35 	bl	800439e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d011      	beq.n	8004f72 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	781a      	ldrb	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02c      	beq.n	8004ff2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d114      	bne.n	8004ff2 <I2C_SlaveReceive_RXNE+0x74>
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b2a      	cmp	r3, #42	; 0x2a
 8004fcc:	d111      	bne.n	8004ff2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fdc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2222      	movs	r2, #34	; 0x22
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2228      	movs	r2, #40	; 0x28
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff f9e0 	bl	80043b2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d012      	beq.n	8005032 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005048:	2300      	movs	r3, #0
 800504a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005058:	2b28      	cmp	r3, #40	; 0x28
 800505a:	d127      	bne.n	80050ac <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	09db      	lsrs	r3, r3, #7
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	81bb      	strh	r3, [r7, #12]
 800508e:	e002      	b.n	8005096 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800509e:	89ba      	ldrh	r2, [r7, #12]
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff f98e 	bl	80043c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80050aa:	e008      	b.n	80050be <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0202 	mvn.w	r2, #2
 80050b4:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050e8:	2300      	movs	r3, #0
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005114:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d172      	bne.n	800520c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b22      	cmp	r3, #34	; 0x22
 800512a:	d002      	beq.n	8005132 <I2C_Slave_STOPF+0x6a>
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	2b2a      	cmp	r3, #42	; 0x2a
 8005130:	d135      	bne.n	800519e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b29a      	uxth	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f043 0204 	orr.w	r2, r3, #4
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005164:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd fedc 	bl	8002f28 <HAL_DMA_GetState>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d049      	beq.n	800520a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	4a69      	ldr	r2, [pc, #420]	; (8005320 <I2C_Slave_STOPF+0x258>)
 800517c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	4618      	mov	r0, r3
 8005184:	f7fd fd24 	bl	8002bd0 <HAL_DMA_Abort_IT>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d03d      	beq.n	800520a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005198:	4610      	mov	r0, r2
 800519a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800519c:	e035      	b.n	800520a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f043 0204 	orr.w	r2, r3, #4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fd fea6 	bl	8002f28 <HAL_DMA_GetState>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d014      	beq.n	800520c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e6:	4a4e      	ldr	r2, [pc, #312]	; (8005320 <I2C_Slave_STOPF+0x258>)
 80051e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd fcee 	bl	8002bd0 <HAL_DMA_Abort_IT>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005204:	4610      	mov	r0, r2
 8005206:	4798      	blx	r3
 8005208:	e000      	b.n	800520c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800520a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d03e      	beq.n	8005294 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b04      	cmp	r3, #4
 8005222:	d112      	bne.n	800524a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	d112      	bne.n	800527e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	f043 0204 	orr.w	r2, r3, #4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f8b3 	bl	8005408 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80052a2:	e039      	b.n	8005318 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b2a      	cmp	r3, #42	; 0x2a
 80052a8:	d109      	bne.n	80052be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2228      	movs	r2, #40	; 0x28
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff f87a 	bl	80043b2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b28      	cmp	r3, #40	; 0x28
 80052c8:	d111      	bne.n	80052ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a15      	ldr	r2, [pc, #84]	; (8005324 <I2C_Slave_STOPF+0x25c>)
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff f87b 	bl	80043e2 <HAL_I2C_ListenCpltCallback>
}
 80052ec:	e014      	b.n	8005318 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	2b22      	cmp	r3, #34	; 0x22
 80052f4:	d002      	beq.n	80052fc <I2C_Slave_STOPF+0x234>
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b22      	cmp	r3, #34	; 0x22
 80052fa:	d10d      	bne.n	8005318 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff f84d 	bl	80043b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	08005b7d 	.word	0x08005b7d
 8005324:	ffff0000 	.word	0xffff0000

08005328 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005336:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d002      	beq.n	800534a <I2C_Slave_AF+0x22>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b20      	cmp	r3, #32
 8005348:	d129      	bne.n	800539e <I2C_Slave_AF+0x76>
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	2b28      	cmp	r3, #40	; 0x28
 800534e:	d126      	bne.n	800539e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a2c      	ldr	r2, [pc, #176]	; (8005404 <I2C_Slave_AF+0xdc>)
 8005354:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005364:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800536e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff f823 	bl	80043e2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800539c:	e02e      	b.n	80053fc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b21      	cmp	r3, #33	; 0x21
 80053a2:	d126      	bne.n	80053f2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a17      	ldr	r2, [pc, #92]	; (8005404 <I2C_Slave_AF+0xdc>)
 80053a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2221      	movs	r2, #33	; 0x21
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fe ffd7 	bl	800439e <HAL_I2C_SlaveTxCpltCallback>
}
 80053f0:	e004      	b.n	80053fc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053fa:	615a      	str	r2, [r3, #20]
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	ffff0000 	.word	0xffff0000

08005408 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005416:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b10      	cmp	r3, #16
 8005422:	d10a      	bne.n	800543a <I2C_ITError+0x32>
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b22      	cmp	r3, #34	; 0x22
 8005428:	d107      	bne.n	800543a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005438:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005440:	2b28      	cmp	r3, #40	; 0x28
 8005442:	d107      	bne.n	8005454 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2228      	movs	r2, #40	; 0x28
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005452:	e015      	b.n	8005480 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005462:	d006      	beq.n	8005472 <I2C_ITError+0x6a>
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b60      	cmp	r3, #96	; 0x60
 8005468:	d003      	beq.n	8005472 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548e:	d162      	bne.n	8005556 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800549e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d020      	beq.n	80054f0 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	4a6a      	ldr	r2, [pc, #424]	; (800565c <I2C_ITError+0x254>)
 80054b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fd fb88 	bl	8002bd0 <HAL_DMA_Abort_IT>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8089 	beq.w	80055da <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ea:	4610      	mov	r0, r2
 80054ec:	4798      	blx	r3
 80054ee:	e074      	b.n	80055da <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	4a59      	ldr	r2, [pc, #356]	; (800565c <I2C_ITError+0x254>)
 80054f6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fd fb67 	bl	8002bd0 <HAL_DMA_Abort_IT>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d068      	beq.n	80055da <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d10b      	bne.n	800552e <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005550:	4610      	mov	r0, r2
 8005552:	4798      	blx	r3
 8005554:	e041      	b.n	80055da <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b60      	cmp	r3, #96	; 0x60
 8005560:	d125      	bne.n	80055ae <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557a:	2b40      	cmp	r3, #64	; 0x40
 800557c:	d10b      	bne.n	8005596 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fe ff43 	bl	8004432 <HAL_I2C_AbortCpltCallback>
 80055ac:	e015      	b.n	80055da <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d10b      	bne.n	80055d4 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7fe ff22 	bl	800441e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10e      	bne.n	8005608 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d109      	bne.n	8005608 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005616:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d113      	bne.n	8005654 <I2C_ITError+0x24c>
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b28      	cmp	r3, #40	; 0x28
 8005630:	d110      	bne.n	8005654 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <I2C_ITError+0x258>)
 8005636:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fe fec7 	bl	80043e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	08005b7d 	.word	0x08005b7d
 8005660:	ffff0000 	.word	0xffff0000

08005664 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	4608      	mov	r0, r1
 800566e:	4611      	mov	r1, r2
 8005670:	461a      	mov	r2, r3
 8005672:	4603      	mov	r3, r0
 8005674:	817b      	strh	r3, [r7, #10]
 8005676:	460b      	mov	r3, r1
 8005678:	813b      	strh	r3, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	2200      	movs	r2, #0
 8005696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 faed 	bl	8005c7a <I2C_WaitOnFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00c      	beq.n	80056c0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e05f      	b.n	8005780 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056c0:	897b      	ldrh	r3, [r7, #10]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	6a3a      	ldr	r2, [r7, #32]
 80056d4:	492c      	ldr	r1, [pc, #176]	; (8005788 <I2C_RequestMemoryWrite+0x124>)
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fb26 	bl	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e04c      	b.n	8005780 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fe:	6a39      	ldr	r1, [r7, #32]
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fb90 	bl	8005e26 <I2C_WaitOnTXEFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	2b04      	cmp	r3, #4
 8005712:	d107      	bne.n	8005724 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005722:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e02b      	b.n	8005780 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d105      	bne.n	800573a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800572e:	893b      	ldrh	r3, [r7, #8]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	611a      	str	r2, [r3, #16]
 8005738:	e021      	b.n	800577e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800573a:	893b      	ldrh	r3, [r7, #8]
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	b29b      	uxth	r3, r3
 8005740:	b2da      	uxtb	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574a:	6a39      	ldr	r1, [r7, #32]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fb6a 	bl	8005e26 <I2C_WaitOnTXEFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00d      	beq.n	8005774 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	2b04      	cmp	r3, #4
 800575e:	d107      	bne.n	8005770 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800576e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e005      	b.n	8005780 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	00010002 	.word	0x00010002

0800578c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	4608      	mov	r0, r1
 8005796:	4611      	mov	r1, r2
 8005798:	461a      	mov	r2, r3
 800579a:	4603      	mov	r3, r0
 800579c:	817b      	strh	r3, [r7, #10]
 800579e:	460b      	mov	r3, r1
 80057a0:	813b      	strh	r3, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 fa51 	bl	8005c7a <I2C_WaitOnFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00c      	beq.n	80057f8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e0a9      	b.n	800594c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057f8:	897b      	ldrh	r3, [r7, #10]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005806:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	4951      	ldr	r1, [pc, #324]	; (8005954 <I2C_RequestMemoryRead+0x1c8>)
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fa8a 	bl	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e096      	b.n	800594c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005836:	6a39      	ldr	r1, [r7, #32]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 faf4 	bl	8005e26 <I2C_WaitOnTXEFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00d      	beq.n	8005860 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	2b04      	cmp	r3, #4
 800584a:	d107      	bne.n	800585c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800585a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e075      	b.n	800594c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d105      	bne.n	8005872 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005866:	893b      	ldrh	r3, [r7, #8]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	611a      	str	r2, [r3, #16]
 8005870:	e021      	b.n	80058b6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005872:	893b      	ldrh	r3, [r7, #8]
 8005874:	0a1b      	lsrs	r3, r3, #8
 8005876:	b29b      	uxth	r3, r3
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005882:	6a39      	ldr	r1, [r7, #32]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 face 	bl	8005e26 <I2C_WaitOnTXEFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00d      	beq.n	80058ac <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	2b04      	cmp	r3, #4
 8005896:	d107      	bne.n	80058a8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e04f      	b.n	800594c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058ac:	893b      	ldrh	r3, [r7, #8]
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	6a39      	ldr	r1, [r7, #32]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fab3 	bl	8005e26 <I2C_WaitOnTXEFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00d      	beq.n	80058e2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d107      	bne.n	80058de <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e034      	b.n	800594c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f9bb 	bl	8005c7a <I2C_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e013      	b.n	800594c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005924:	897b      	ldrh	r3, [r7, #10]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	b2da      	uxtb	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	6a3a      	ldr	r2, [r7, #32]
 8005938:	4906      	ldr	r1, [pc, #24]	; (8005954 <I2C_RequestMemoryRead+0x1c8>)
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f9f4 	bl	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	00010002 	.word	0x00010002

08005958 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005974:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800598a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	2200      	movs	r2, #0
 800599a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	2200      	movs	r2, #0
 80059aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80059ac:	7cfb      	ldrb	r3, [r7, #19]
 80059ae:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80059b2:	2b21      	cmp	r3, #33	; 0x21
 80059b4:	d007      	beq.n	80059c6 <I2C_DMAXferCplt+0x6e>
 80059b6:	7cfb      	ldrb	r3, [r7, #19]
 80059b8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80059bc:	2b22      	cmp	r3, #34	; 0x22
 80059be:	d131      	bne.n	8005a24 <I2C_DMAXferCplt+0xcc>
 80059c0:	7cbb      	ldrb	r3, [r7, #18]
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d12e      	bne.n	8005a24 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2200      	movs	r2, #0
 80059da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80059dc:	7cfb      	ldrb	r3, [r7, #19]
 80059de:	2b29      	cmp	r3, #41	; 0x29
 80059e0:	d10a      	bne.n	80059f8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2221      	movs	r2, #33	; 0x21
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2228      	movs	r2, #40	; 0x28
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059f0:	6978      	ldr	r0, [r7, #20]
 80059f2:	f7fe fcd4 	bl	800439e <HAL_I2C_SlaveTxCpltCallback>
 80059f6:	e00c      	b.n	8005a12 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059f8:	7cfb      	ldrb	r3, [r7, #19]
 80059fa:	2b2a      	cmp	r3, #42	; 0x2a
 80059fc:	d109      	bne.n	8005a12 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2222      	movs	r2, #34	; 0x22
 8005a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2228      	movs	r2, #40	; 0x28
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a0c:	6978      	ldr	r0, [r7, #20]
 8005a0e:	f7fe fcd0 	bl	80043b2 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005a20:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005a22:	e06a      	b.n	8005afa <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d064      	beq.n	8005afa <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d107      	bne.n	8005a4a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a48:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005a58:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a60:	d009      	beq.n	8005a76 <I2C_DMAXferCplt+0x11e>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d006      	beq.n	8005a76 <I2C_DMAXferCplt+0x11e>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a6e:	d002      	beq.n	8005a76 <I2C_DMAXferCplt+0x11e>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d107      	bne.n	8005a86 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a84:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a94:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aa4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005ab4:	6978      	ldr	r0, [r7, #20]
 8005ab6:	f7fe fcb2 	bl	800441e <HAL_I2C_ErrorCallback>
}
 8005aba:	e01e      	b.n	8005afa <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d10a      	bne.n	8005ae6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005ade:	6978      	ldr	r0, [r7, #20]
 8005ae0:	f7fe fc93 	bl	800440a <HAL_I2C_MemRxCpltCallback>
}
 8005ae4:	e009      	b.n	8005afa <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2212      	movs	r2, #18
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005af4:	6978      	ldr	r0, [r7, #20]
 8005af6:	f7fe fc48 	bl	800438a <HAL_I2C_MasterRxCpltCallback>
}
 8005afa:	bf00      	nop
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fd fa07 	bl	8002f44 <HAL_DMA_GetError>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d01b      	beq.n	8005b74 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f043 0210 	orr.w	r2, r3, #16
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f7fe fc55 	bl	800441e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b74:	bf00      	nop
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b90:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	2200      	movs	r2, #0
 8005bb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	2200      	movs	r2, #0
 8005be6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b60      	cmp	r3, #96	; 0x60
 8005c02:	d10e      	bne.n	8005c22 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7fe fc09 	bl	8004432 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c20:	e027      	b.n	8005c72 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c22:	7afb      	ldrb	r3, [r7, #11]
 8005c24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c28:	2b28      	cmp	r3, #40	; 0x28
 8005c2a:	d117      	bne.n	8005c5c <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2228      	movs	r2, #40	; 0x28
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c5a:	e007      	b.n	8005c6c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7fe fbd6 	bl	800441e <HAL_I2C_ErrorCallback>
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	4613      	mov	r3, r2
 8005c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c8a:	e025      	b.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	d021      	beq.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c94:	f7fc fd56 	bl	8002744 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d302      	bcc.n	8005caa <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d116      	bne.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	f043 0220 	orr.w	r2, r3, #32
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e023      	b.n	8005d20 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d10d      	bne.n	8005cfe <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	43da      	mvns	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4013      	ands	r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bf0c      	ite	eq
 8005cf4:	2301      	moveq	r3, #1
 8005cf6:	2300      	movne	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	e00c      	b.n	8005d18 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	43da      	mvns	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	bf0c      	ite	eq
 8005d10:	2301      	moveq	r3, #1
 8005d12:	2300      	movne	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d0b6      	beq.n	8005c8c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d36:	e051      	b.n	8005ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d46:	d123      	bne.n	8005d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	f043 0204 	orr.w	r2, r3, #4
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e046      	b.n	8005e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	d021      	beq.n	8005ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d98:	f7fc fcd4 	bl	8002744 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d302      	bcc.n	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d116      	bne.n	8005ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	f043 0220 	orr.w	r2, r3, #32
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e020      	b.n	8005e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	0c1b      	lsrs	r3, r3, #16
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d10c      	bne.n	8005e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	43da      	mvns	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4013      	ands	r3, r2
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bf14      	ite	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	2300      	moveq	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e00b      	b.n	8005e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	43da      	mvns	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bf14      	ite	ne
 8005e12:	2301      	movne	r3, #1
 8005e14:	2300      	moveq	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d18d      	bne.n	8005d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e32:	e02d      	b.n	8005e90 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f8ce 	bl	8005fd6 <I2C_IsAcknowledgeFailed>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e02d      	b.n	8005ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d021      	beq.n	8005e90 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4c:	f7fc fc7a 	bl	8002744 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d302      	bcc.n	8005e62 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d116      	bne.n	8005e90 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	f043 0220 	orr.w	r2, r3, #32
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e007      	b.n	8005ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9a:	2b80      	cmp	r3, #128	; 0x80
 8005e9c:	d1ca      	bne.n	8005e34 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005eb4:	e02d      	b.n	8005f12 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f88d 	bl	8005fd6 <I2C_IsAcknowledgeFailed>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e02d      	b.n	8005f22 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ecc:	d021      	beq.n	8005f12 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ece:	f7fc fc39 	bl	8002744 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d302      	bcc.n	8005ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d116      	bne.n	8005f12 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f043 0220 	orr.w	r2, r3, #32
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e007      	b.n	8005f22 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d1ca      	bne.n	8005eb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f36:	e042      	b.n	8005fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	2b10      	cmp	r3, #16
 8005f44:	d119      	bne.n	8005f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f06f 0210 	mvn.w	r2, #16
 8005f4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e029      	b.n	8005fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7a:	f7fc fbe3 	bl	8002744 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d116      	bne.n	8005fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e007      	b.n	8005fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	d1b5      	bne.n	8005f38 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fec:	d11b      	bne.n	8006026 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ff6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f043 0204 	orr.w	r2, r3, #4
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006044:	d103      	bne.n	800604e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800604c:	e007      	b.n	800605e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006056:	d102      	bne.n	800605e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2208      	movs	r2, #8
 800605c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e25b      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d075      	beq.n	8006176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800608a:	4ba3      	ldr	r3, [pc, #652]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
 8006092:	2b04      	cmp	r3, #4
 8006094:	d00c      	beq.n	80060b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006096:	4ba0      	ldr	r3, [pc, #640]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d112      	bne.n	80060c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060a2:	4b9d      	ldr	r3, [pc, #628]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ae:	d10b      	bne.n	80060c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b0:	4b99      	ldr	r3, [pc, #612]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d05b      	beq.n	8006174 <HAL_RCC_OscConfig+0x108>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d157      	bne.n	8006174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e236      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d0:	d106      	bne.n	80060e0 <HAL_RCC_OscConfig+0x74>
 80060d2:	4b91      	ldr	r3, [pc, #580]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a90      	ldr	r2, [pc, #576]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80060d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e01d      	b.n	800611c <HAL_RCC_OscConfig+0xb0>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060e8:	d10c      	bne.n	8006104 <HAL_RCC_OscConfig+0x98>
 80060ea:	4b8b      	ldr	r3, [pc, #556]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a8a      	ldr	r2, [pc, #552]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80060f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b88      	ldr	r3, [pc, #544]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a87      	ldr	r2, [pc, #540]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e00b      	b.n	800611c <HAL_RCC_OscConfig+0xb0>
 8006104:	4b84      	ldr	r3, [pc, #528]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a83      	ldr	r2, [pc, #524]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 800610a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b81      	ldr	r3, [pc, #516]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a80      	ldr	r2, [pc, #512]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800611a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d013      	beq.n	800614c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006124:	f7fc fb0e 	bl	8002744 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800612c:	f7fc fb0a 	bl	8002744 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b64      	cmp	r3, #100	; 0x64
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e1fb      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	4b76      	ldr	r3, [pc, #472]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0xc0>
 800614a:	e014      	b.n	8006176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614c:	f7fc fafa 	bl	8002744 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006154:	f7fc faf6 	bl	8002744 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	; 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e1e7      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006166:	4b6c      	ldr	r3, [pc, #432]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0xe8>
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d063      	beq.n	800624a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006182:	4b65      	ldr	r3, [pc, #404]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800618e:	4b62      	ldr	r3, [pc, #392]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006196:	2b08      	cmp	r3, #8
 8006198:	d11c      	bne.n	80061d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800619a:	4b5f      	ldr	r3, [pc, #380]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d116      	bne.n	80061d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a6:	4b5c      	ldr	r3, [pc, #368]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_RCC_OscConfig+0x152>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d001      	beq.n	80061be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e1bb      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	4b56      	ldr	r3, [pc, #344]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	4952      	ldr	r1, [pc, #328]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061d2:	e03a      	b.n	800624a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d020      	beq.n	800621e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061dc:	4b4f      	ldr	r3, [pc, #316]	; (800631c <HAL_RCC_OscConfig+0x2b0>)
 80061de:	2201      	movs	r2, #1
 80061e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e2:	f7fc faaf 	bl	8002744 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ea:	f7fc faab 	bl	8002744 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e19c      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fc:	4b46      	ldr	r3, [pc, #280]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0f0      	beq.n	80061ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006208:	4b43      	ldr	r3, [pc, #268]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	4940      	ldr	r1, [pc, #256]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006218:	4313      	orrs	r3, r2
 800621a:	600b      	str	r3, [r1, #0]
 800621c:	e015      	b.n	800624a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800621e:	4b3f      	ldr	r3, [pc, #252]	; (800631c <HAL_RCC_OscConfig+0x2b0>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006224:	f7fc fa8e 	bl	8002744 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800622c:	f7fc fa8a 	bl	8002744 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e17b      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800623e:	4b36      	ldr	r3, [pc, #216]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d030      	beq.n	80062b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d016      	beq.n	800628c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800625e:	4b30      	ldr	r3, [pc, #192]	; (8006320 <HAL_RCC_OscConfig+0x2b4>)
 8006260:	2201      	movs	r2, #1
 8006262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006264:	f7fc fa6e 	bl	8002744 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800626c:	f7fc fa6a 	bl	8002744 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e15b      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800627e:	4b26      	ldr	r3, [pc, #152]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 8006280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0x200>
 800628a:	e015      	b.n	80062b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800628c:	4b24      	ldr	r3, [pc, #144]	; (8006320 <HAL_RCC_OscConfig+0x2b4>)
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006292:	f7fc fa57 	bl	8002744 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800629a:	f7fc fa53 	bl	8002744 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e144      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062ac:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80062ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1f0      	bne.n	800629a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80a0 	beq.w	8006406 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ca:	4b13      	ldr	r3, [pc, #76]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10f      	bne.n	80062f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]
 80062da:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	4a0e      	ldr	r2, [pc, #56]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80062e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e4:	6413      	str	r3, [r2, #64]	; 0x40
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <HAL_RCC_OscConfig+0x2ac>)
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ee:	60bb      	str	r3, [r7, #8]
 80062f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_RCC_OscConfig+0x2b8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d121      	bne.n	8006346 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006302:	4b08      	ldr	r3, [pc, #32]	; (8006324 <HAL_RCC_OscConfig+0x2b8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a07      	ldr	r2, [pc, #28]	; (8006324 <HAL_RCC_OscConfig+0x2b8>)
 8006308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800630e:	f7fc fa19 	bl	8002744 <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006314:	e011      	b.n	800633a <HAL_RCC_OscConfig+0x2ce>
 8006316:	bf00      	nop
 8006318:	40023800 	.word	0x40023800
 800631c:	42470000 	.word	0x42470000
 8006320:	42470e80 	.word	0x42470e80
 8006324:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006328:	f7fc fa0c 	bl	8002744 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e0fd      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800633a:	4b81      	ldr	r3, [pc, #516]	; (8006540 <HAL_RCC_OscConfig+0x4d4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d106      	bne.n	800635c <HAL_RCC_OscConfig+0x2f0>
 800634e:	4b7d      	ldr	r3, [pc, #500]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	4a7c      	ldr	r2, [pc, #496]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	6713      	str	r3, [r2, #112]	; 0x70
 800635a:	e01c      	b.n	8006396 <HAL_RCC_OscConfig+0x32a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b05      	cmp	r3, #5
 8006362:	d10c      	bne.n	800637e <HAL_RCC_OscConfig+0x312>
 8006364:	4b77      	ldr	r3, [pc, #476]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006368:	4a76      	ldr	r2, [pc, #472]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 800636a:	f043 0304 	orr.w	r3, r3, #4
 800636e:	6713      	str	r3, [r2, #112]	; 0x70
 8006370:	4b74      	ldr	r3, [pc, #464]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	4a73      	ldr	r2, [pc, #460]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	6713      	str	r3, [r2, #112]	; 0x70
 800637c:	e00b      	b.n	8006396 <HAL_RCC_OscConfig+0x32a>
 800637e:	4b71      	ldr	r3, [pc, #452]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	4a70      	ldr	r2, [pc, #448]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	6713      	str	r3, [r2, #112]	; 0x70
 800638a:	4b6e      	ldr	r3, [pc, #440]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	4a6d      	ldr	r2, [pc, #436]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006390:	f023 0304 	bic.w	r3, r3, #4
 8006394:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d015      	beq.n	80063ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639e:	f7fc f9d1 	bl	8002744 <HAL_GetTick>
 80063a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a4:	e00a      	b.n	80063bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a6:	f7fc f9cd 	bl	8002744 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e0bc      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063bc:	4b61      	ldr	r3, [pc, #388]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 80063be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0ee      	beq.n	80063a6 <HAL_RCC_OscConfig+0x33a>
 80063c8:	e014      	b.n	80063f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ca:	f7fc f9bb 	bl	8002744 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063d0:	e00a      	b.n	80063e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063d2:	f7fc f9b7 	bl	8002744 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e0a6      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063e8:	4b56      	ldr	r3, [pc, #344]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 80063ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1ee      	bne.n	80063d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d105      	bne.n	8006406 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063fa:	4b52      	ldr	r3, [pc, #328]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	4a51      	ldr	r2, [pc, #324]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006404:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 8092 	beq.w	8006534 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006410:	4b4c      	ldr	r3, [pc, #304]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
 8006418:	2b08      	cmp	r3, #8
 800641a:	d05c      	beq.n	80064d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d141      	bne.n	80064a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006424:	4b48      	ldr	r3, [pc, #288]	; (8006548 <HAL_RCC_OscConfig+0x4dc>)
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642a:	f7fc f98b 	bl	8002744 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006432:	f7fc f987 	bl	8002744 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e078      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006444:	4b3f      	ldr	r3, [pc, #252]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1f0      	bne.n	8006432 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	019b      	lsls	r3, r3, #6
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	085b      	lsrs	r3, r3, #1
 8006468:	3b01      	subs	r3, #1
 800646a:	041b      	lsls	r3, r3, #16
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	061b      	lsls	r3, r3, #24
 8006474:	4933      	ldr	r1, [pc, #204]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 8006476:	4313      	orrs	r3, r2
 8006478:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800647a:	4b33      	ldr	r3, [pc, #204]	; (8006548 <HAL_RCC_OscConfig+0x4dc>)
 800647c:	2201      	movs	r2, #1
 800647e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006480:	f7fc f960 	bl	8002744 <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006488:	f7fc f95c 	bl	8002744 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e04d      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649a:	4b2a      	ldr	r3, [pc, #168]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f0      	beq.n	8006488 <HAL_RCC_OscConfig+0x41c>
 80064a6:	e045      	b.n	8006534 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a8:	4b27      	ldr	r3, [pc, #156]	; (8006548 <HAL_RCC_OscConfig+0x4dc>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ae:	f7fc f949 	bl	8002744 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064b6:	f7fc f945 	bl	8002744 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e036      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064c8:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1f0      	bne.n	80064b6 <HAL_RCC_OscConfig+0x44a>
 80064d4:	e02e      	b.n	8006534 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e029      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064e2:	4b18      	ldr	r3, [pc, #96]	; (8006544 <HAL_RCC_OscConfig+0x4d8>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d11c      	bne.n	8006530 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d115      	bne.n	8006530 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800650a:	4013      	ands	r3, r2
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006510:	4293      	cmp	r3, r2
 8006512:	d10d      	bne.n	8006530 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800651e:	429a      	cmp	r2, r3
 8006520:	d106      	bne.n	8006530 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800652c:	429a      	cmp	r2, r3
 800652e:	d001      	beq.n	8006534 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40007000 	.word	0x40007000
 8006544:	40023800 	.word	0x40023800
 8006548:	42470060 	.word	0x42470060

0800654c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e0cc      	b.n	80066fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006560:	4b68      	ldr	r3, [pc, #416]	; (8006704 <HAL_RCC_ClockConfig+0x1b8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d90c      	bls.n	8006588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656e:	4b65      	ldr	r3, [pc, #404]	; (8006704 <HAL_RCC_ClockConfig+0x1b8>)
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006576:	4b63      	ldr	r3, [pc, #396]	; (8006704 <HAL_RCC_ClockConfig+0x1b8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d001      	beq.n	8006588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e0b8      	b.n	80066fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d020      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065a0:	4b59      	ldr	r3, [pc, #356]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4a58      	ldr	r2, [pc, #352]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80065a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065b8:	4b53      	ldr	r3, [pc, #332]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	4a52      	ldr	r2, [pc, #328]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065c4:	4b50      	ldr	r3, [pc, #320]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	494d      	ldr	r1, [pc, #308]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d044      	beq.n	800666c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d107      	bne.n	80065fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ea:	4b47      	ldr	r3, [pc, #284]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d119      	bne.n	800662a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e07f      	b.n	80066fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d003      	beq.n	800660a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006606:	2b03      	cmp	r3, #3
 8006608:	d107      	bne.n	800661a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800660a:	4b3f      	ldr	r3, [pc, #252]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e06f      	b.n	80066fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800661a:	4b3b      	ldr	r3, [pc, #236]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e067      	b.n	80066fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800662a:	4b37      	ldr	r3, [pc, #220]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f023 0203 	bic.w	r2, r3, #3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	4934      	ldr	r1, [pc, #208]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 8006638:	4313      	orrs	r3, r2
 800663a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800663c:	f7fc f882 	bl	8002744 <HAL_GetTick>
 8006640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006642:	e00a      	b.n	800665a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006644:	f7fc f87e 	bl	8002744 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006652:	4293      	cmp	r3, r2
 8006654:	d901      	bls.n	800665a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e04f      	b.n	80066fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800665a:	4b2b      	ldr	r3, [pc, #172]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 020c 	and.w	r2, r3, #12
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	429a      	cmp	r2, r3
 800666a:	d1eb      	bne.n	8006644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800666c:	4b25      	ldr	r3, [pc, #148]	; (8006704 <HAL_RCC_ClockConfig+0x1b8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d20c      	bcs.n	8006694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800667a:	4b22      	ldr	r3, [pc, #136]	; (8006704 <HAL_RCC_ClockConfig+0x1b8>)
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006682:	4b20      	ldr	r3, [pc, #128]	; (8006704 <HAL_RCC_ClockConfig+0x1b8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d001      	beq.n	8006694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e032      	b.n	80066fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066a0:	4b19      	ldr	r3, [pc, #100]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	4916      	ldr	r1, [pc, #88]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066be:	4b12      	ldr	r3, [pc, #72]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	490e      	ldr	r1, [pc, #56]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066d2:	f000 f821 	bl	8006718 <HAL_RCC_GetSysClockFreq>
 80066d6:	4601      	mov	r1, r0
 80066d8:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <HAL_RCC_ClockConfig+0x1bc>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	091b      	lsrs	r3, r3, #4
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	4a0a      	ldr	r2, [pc, #40]	; (800670c <HAL_RCC_ClockConfig+0x1c0>)
 80066e4:	5cd3      	ldrb	r3, [r2, r3]
 80066e6:	fa21 f303 	lsr.w	r3, r1, r3
 80066ea:	4a09      	ldr	r2, [pc, #36]	; (8006710 <HAL_RCC_ClockConfig+0x1c4>)
 80066ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <HAL_RCC_ClockConfig+0x1c8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fb ffe2 	bl	80026bc <HAL_InitTick>

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40023c00 	.word	0x40023c00
 8006708:	40023800 	.word	0x40023800
 800670c:	080095bc 	.word	0x080095bc
 8006710:	20000014 	.word	0x20000014
 8006714:	20000018 	.word	0x20000018

08006718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	607b      	str	r3, [r7, #4]
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	2300      	movs	r3, #0
 8006728:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800672e:	4b63      	ldr	r3, [pc, #396]	; (80068bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 030c 	and.w	r3, r3, #12
 8006736:	2b04      	cmp	r3, #4
 8006738:	d007      	beq.n	800674a <HAL_RCC_GetSysClockFreq+0x32>
 800673a:	2b08      	cmp	r3, #8
 800673c:	d008      	beq.n	8006750 <HAL_RCC_GetSysClockFreq+0x38>
 800673e:	2b00      	cmp	r3, #0
 8006740:	f040 80b4 	bne.w	80068ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006744:	4b5e      	ldr	r3, [pc, #376]	; (80068c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006746:	60bb      	str	r3, [r7, #8]
       break;
 8006748:	e0b3      	b.n	80068b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800674a:	4b5e      	ldr	r3, [pc, #376]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800674c:	60bb      	str	r3, [r7, #8]
      break;
 800674e:	e0b0      	b.n	80068b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006750:	4b5a      	ldr	r3, [pc, #360]	; (80068bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006758:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800675a:	4b58      	ldr	r3, [pc, #352]	; (80068bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d04a      	beq.n	80067fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006766:	4b55      	ldr	r3, [pc, #340]	; (80068bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	099b      	lsrs	r3, r3, #6
 800676c:	f04f 0400 	mov.w	r4, #0
 8006770:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	ea03 0501 	and.w	r5, r3, r1
 800677c:	ea04 0602 	and.w	r6, r4, r2
 8006780:	4629      	mov	r1, r5
 8006782:	4632      	mov	r2, r6
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	f04f 0400 	mov.w	r4, #0
 800678c:	0154      	lsls	r4, r2, #5
 800678e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006792:	014b      	lsls	r3, r1, #5
 8006794:	4619      	mov	r1, r3
 8006796:	4622      	mov	r2, r4
 8006798:	1b49      	subs	r1, r1, r5
 800679a:	eb62 0206 	sbc.w	r2, r2, r6
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	f04f 0400 	mov.w	r4, #0
 80067a6:	0194      	lsls	r4, r2, #6
 80067a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80067ac:	018b      	lsls	r3, r1, #6
 80067ae:	1a5b      	subs	r3, r3, r1
 80067b0:	eb64 0402 	sbc.w	r4, r4, r2
 80067b4:	f04f 0100 	mov.w	r1, #0
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	00e2      	lsls	r2, r4, #3
 80067be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80067c2:	00d9      	lsls	r1, r3, #3
 80067c4:	460b      	mov	r3, r1
 80067c6:	4614      	mov	r4, r2
 80067c8:	195b      	adds	r3, r3, r5
 80067ca:	eb44 0406 	adc.w	r4, r4, r6
 80067ce:	f04f 0100 	mov.w	r1, #0
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	0262      	lsls	r2, r4, #9
 80067d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80067dc:	0259      	lsls	r1, r3, #9
 80067de:	460b      	mov	r3, r1
 80067e0:	4614      	mov	r4, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	4621      	mov	r1, r4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f04f 0400 	mov.w	r4, #0
 80067ec:	461a      	mov	r2, r3
 80067ee:	4623      	mov	r3, r4
 80067f0:	f7f9 fd96 	bl	8000320 <__aeabi_uldivmod>
 80067f4:	4603      	mov	r3, r0
 80067f6:	460c      	mov	r4, r1
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e049      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067fc:	4b2f      	ldr	r3, [pc, #188]	; (80068bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	099b      	lsrs	r3, r3, #6
 8006802:	f04f 0400 	mov.w	r4, #0
 8006806:	f240 11ff 	movw	r1, #511	; 0x1ff
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	ea03 0501 	and.w	r5, r3, r1
 8006812:	ea04 0602 	and.w	r6, r4, r2
 8006816:	4629      	mov	r1, r5
 8006818:	4632      	mov	r2, r6
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	f04f 0400 	mov.w	r4, #0
 8006822:	0154      	lsls	r4, r2, #5
 8006824:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006828:	014b      	lsls	r3, r1, #5
 800682a:	4619      	mov	r1, r3
 800682c:	4622      	mov	r2, r4
 800682e:	1b49      	subs	r1, r1, r5
 8006830:	eb62 0206 	sbc.w	r2, r2, r6
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	f04f 0400 	mov.w	r4, #0
 800683c:	0194      	lsls	r4, r2, #6
 800683e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006842:	018b      	lsls	r3, r1, #6
 8006844:	1a5b      	subs	r3, r3, r1
 8006846:	eb64 0402 	sbc.w	r4, r4, r2
 800684a:	f04f 0100 	mov.w	r1, #0
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	00e2      	lsls	r2, r4, #3
 8006854:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006858:	00d9      	lsls	r1, r3, #3
 800685a:	460b      	mov	r3, r1
 800685c:	4614      	mov	r4, r2
 800685e:	195b      	adds	r3, r3, r5
 8006860:	eb44 0406 	adc.w	r4, r4, r6
 8006864:	f04f 0100 	mov.w	r1, #0
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	02a2      	lsls	r2, r4, #10
 800686e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006872:	0299      	lsls	r1, r3, #10
 8006874:	460b      	mov	r3, r1
 8006876:	4614      	mov	r4, r2
 8006878:	4618      	mov	r0, r3
 800687a:	4621      	mov	r1, r4
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f04f 0400 	mov.w	r4, #0
 8006882:	461a      	mov	r2, r3
 8006884:	4623      	mov	r3, r4
 8006886:	f7f9 fd4b 	bl	8000320 <__aeabi_uldivmod>
 800688a:	4603      	mov	r3, r0
 800688c:	460c      	mov	r4, r1
 800688e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006890:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	0c1b      	lsrs	r3, r3, #16
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	3301      	adds	r3, #1
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a8:	60bb      	str	r3, [r7, #8]
      break;
 80068aa:	e002      	b.n	80068b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80068ae:	60bb      	str	r3, [r7, #8]
      break;
 80068b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068b2:	68bb      	ldr	r3, [r7, #8]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068bc:	40023800 	.word	0x40023800
 80068c0:	00f42400 	.word	0x00f42400
 80068c4:	007a1200 	.word	0x007a1200

080068c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068cc:	4b03      	ldr	r3, [pc, #12]	; (80068dc <HAL_RCC_GetHCLKFreq+0x14>)
 80068ce:	681b      	ldr	r3, [r3, #0]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20000014 	.word	0x20000014

080068e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068e4:	f7ff fff0 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 80068e8:	4601      	mov	r1, r0
 80068ea:	4b05      	ldr	r3, [pc, #20]	; (8006900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	0a9b      	lsrs	r3, r3, #10
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	4a03      	ldr	r2, [pc, #12]	; (8006904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068f6:	5cd3      	ldrb	r3, [r2, r3]
 80068f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40023800 	.word	0x40023800
 8006904:	080095cc 	.word	0x080095cc

08006908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800690c:	f7ff ffdc 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 8006910:	4601      	mov	r1, r0
 8006912:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	0b5b      	lsrs	r3, r3, #13
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	4a03      	ldr	r2, [pc, #12]	; (800692c <HAL_RCC_GetPCLK2Freq+0x24>)
 800691e:	5cd3      	ldrb	r3, [r2, r3]
 8006920:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006924:	4618      	mov	r0, r3
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40023800 	.word	0x40023800
 800692c:	080095cc 	.word	0x080095cc

08006930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e03f      	b.n	80069c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fb fd8a 	bl	8002470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2224      	movs	r2, #36	; 0x24
 8006960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f829 	bl	80069cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695a      	ldr	r2, [r3, #20]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a0e:	f023 030c 	bic.w	r3, r3, #12
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	68f9      	ldr	r1, [r7, #12]
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a3a:	f040 818b 	bne.w	8006d54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4ac1      	ldr	r2, [pc, #772]	; (8006d48 <UART_SetConfig+0x37c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d005      	beq.n	8006a54 <UART_SetConfig+0x88>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4abf      	ldr	r2, [pc, #764]	; (8006d4c <UART_SetConfig+0x380>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	f040 80bd 	bne.w	8006bce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a54:	f7ff ff58 	bl	8006908 <HAL_RCC_GetPCLK2Freq>
 8006a58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	461d      	mov	r5, r3
 8006a5e:	f04f 0600 	mov.w	r6, #0
 8006a62:	46a8      	mov	r8, r5
 8006a64:	46b1      	mov	r9, r6
 8006a66:	eb18 0308 	adds.w	r3, r8, r8
 8006a6a:	eb49 0409 	adc.w	r4, r9, r9
 8006a6e:	4698      	mov	r8, r3
 8006a70:	46a1      	mov	r9, r4
 8006a72:	eb18 0805 	adds.w	r8, r8, r5
 8006a76:	eb49 0906 	adc.w	r9, r9, r6
 8006a7a:	f04f 0100 	mov.w	r1, #0
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a8e:	4688      	mov	r8, r1
 8006a90:	4691      	mov	r9, r2
 8006a92:	eb18 0005 	adds.w	r0, r8, r5
 8006a96:	eb49 0106 	adc.w	r1, r9, r6
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	461d      	mov	r5, r3
 8006aa0:	f04f 0600 	mov.w	r6, #0
 8006aa4:	196b      	adds	r3, r5, r5
 8006aa6:	eb46 0406 	adc.w	r4, r6, r6
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4623      	mov	r3, r4
 8006aae:	f7f9 fc37 	bl	8000320 <__aeabi_uldivmod>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	4ba5      	ldr	r3, [pc, #660]	; (8006d50 <UART_SetConfig+0x384>)
 8006aba:	fba3 2302 	umull	r2, r3, r3, r2
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	461d      	mov	r5, r3
 8006ac8:	f04f 0600 	mov.w	r6, #0
 8006acc:	46a9      	mov	r9, r5
 8006ace:	46b2      	mov	sl, r6
 8006ad0:	eb19 0309 	adds.w	r3, r9, r9
 8006ad4:	eb4a 040a 	adc.w	r4, sl, sl
 8006ad8:	4699      	mov	r9, r3
 8006ada:	46a2      	mov	sl, r4
 8006adc:	eb19 0905 	adds.w	r9, r9, r5
 8006ae0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ae4:	f04f 0100 	mov.w	r1, #0
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006af0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006af4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006af8:	4689      	mov	r9, r1
 8006afa:	4692      	mov	sl, r2
 8006afc:	eb19 0005 	adds.w	r0, r9, r5
 8006b00:	eb4a 0106 	adc.w	r1, sl, r6
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	461d      	mov	r5, r3
 8006b0a:	f04f 0600 	mov.w	r6, #0
 8006b0e:	196b      	adds	r3, r5, r5
 8006b10:	eb46 0406 	adc.w	r4, r6, r6
 8006b14:	461a      	mov	r2, r3
 8006b16:	4623      	mov	r3, r4
 8006b18:	f7f9 fc02 	bl	8000320 <__aeabi_uldivmod>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	461a      	mov	r2, r3
 8006b22:	4b8b      	ldr	r3, [pc, #556]	; (8006d50 <UART_SetConfig+0x384>)
 8006b24:	fba3 1302 	umull	r1, r3, r3, r2
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	2164      	movs	r1, #100	; 0x64
 8006b2c:	fb01 f303 	mul.w	r3, r1, r3
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	3332      	adds	r3, #50	; 0x32
 8006b36:	4a86      	ldr	r2, [pc, #536]	; (8006d50 <UART_SetConfig+0x384>)
 8006b38:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b44:	4498      	add	r8, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	461d      	mov	r5, r3
 8006b4a:	f04f 0600 	mov.w	r6, #0
 8006b4e:	46a9      	mov	r9, r5
 8006b50:	46b2      	mov	sl, r6
 8006b52:	eb19 0309 	adds.w	r3, r9, r9
 8006b56:	eb4a 040a 	adc.w	r4, sl, sl
 8006b5a:	4699      	mov	r9, r3
 8006b5c:	46a2      	mov	sl, r4
 8006b5e:	eb19 0905 	adds.w	r9, r9, r5
 8006b62:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b66:	f04f 0100 	mov.w	r1, #0
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b7a:	4689      	mov	r9, r1
 8006b7c:	4692      	mov	sl, r2
 8006b7e:	eb19 0005 	adds.w	r0, r9, r5
 8006b82:	eb4a 0106 	adc.w	r1, sl, r6
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	f04f 0600 	mov.w	r6, #0
 8006b90:	196b      	adds	r3, r5, r5
 8006b92:	eb46 0406 	adc.w	r4, r6, r6
 8006b96:	461a      	mov	r2, r3
 8006b98:	4623      	mov	r3, r4
 8006b9a:	f7f9 fbc1 	bl	8000320 <__aeabi_uldivmod>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4b6a      	ldr	r3, [pc, #424]	; (8006d50 <UART_SetConfig+0x384>)
 8006ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	2164      	movs	r1, #100	; 0x64
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	3332      	adds	r3, #50	; 0x32
 8006bb8:	4a65      	ldr	r2, [pc, #404]	; (8006d50 <UART_SetConfig+0x384>)
 8006bba:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	f003 0207 	and.w	r2, r3, #7
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4442      	add	r2, r8
 8006bca:	609a      	str	r2, [r3, #8]
 8006bcc:	e26f      	b.n	80070ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bce:	f7ff fe87 	bl	80068e0 <HAL_RCC_GetPCLK1Freq>
 8006bd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	461d      	mov	r5, r3
 8006bd8:	f04f 0600 	mov.w	r6, #0
 8006bdc:	46a8      	mov	r8, r5
 8006bde:	46b1      	mov	r9, r6
 8006be0:	eb18 0308 	adds.w	r3, r8, r8
 8006be4:	eb49 0409 	adc.w	r4, r9, r9
 8006be8:	4698      	mov	r8, r3
 8006bea:	46a1      	mov	r9, r4
 8006bec:	eb18 0805 	adds.w	r8, r8, r5
 8006bf0:	eb49 0906 	adc.w	r9, r9, r6
 8006bf4:	f04f 0100 	mov.w	r1, #0
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c08:	4688      	mov	r8, r1
 8006c0a:	4691      	mov	r9, r2
 8006c0c:	eb18 0005 	adds.w	r0, r8, r5
 8006c10:	eb49 0106 	adc.w	r1, r9, r6
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	461d      	mov	r5, r3
 8006c1a:	f04f 0600 	mov.w	r6, #0
 8006c1e:	196b      	adds	r3, r5, r5
 8006c20:	eb46 0406 	adc.w	r4, r6, r6
 8006c24:	461a      	mov	r2, r3
 8006c26:	4623      	mov	r3, r4
 8006c28:	f7f9 fb7a 	bl	8000320 <__aeabi_uldivmod>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	461a      	mov	r2, r3
 8006c32:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <UART_SetConfig+0x384>)
 8006c34:	fba3 2302 	umull	r2, r3, r3, r2
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	461d      	mov	r5, r3
 8006c42:	f04f 0600 	mov.w	r6, #0
 8006c46:	46a9      	mov	r9, r5
 8006c48:	46b2      	mov	sl, r6
 8006c4a:	eb19 0309 	adds.w	r3, r9, r9
 8006c4e:	eb4a 040a 	adc.w	r4, sl, sl
 8006c52:	4699      	mov	r9, r3
 8006c54:	46a2      	mov	sl, r4
 8006c56:	eb19 0905 	adds.w	r9, r9, r5
 8006c5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c5e:	f04f 0100 	mov.w	r1, #0
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c72:	4689      	mov	r9, r1
 8006c74:	4692      	mov	sl, r2
 8006c76:	eb19 0005 	adds.w	r0, r9, r5
 8006c7a:	eb4a 0106 	adc.w	r1, sl, r6
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	461d      	mov	r5, r3
 8006c84:	f04f 0600 	mov.w	r6, #0
 8006c88:	196b      	adds	r3, r5, r5
 8006c8a:	eb46 0406 	adc.w	r4, r6, r6
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4623      	mov	r3, r4
 8006c92:	f7f9 fb45 	bl	8000320 <__aeabi_uldivmod>
 8006c96:	4603      	mov	r3, r0
 8006c98:	460c      	mov	r4, r1
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4b2c      	ldr	r3, [pc, #176]	; (8006d50 <UART_SetConfig+0x384>)
 8006c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	2164      	movs	r1, #100	; 0x64
 8006ca6:	fb01 f303 	mul.w	r3, r1, r3
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	3332      	adds	r3, #50	; 0x32
 8006cb0:	4a27      	ldr	r2, [pc, #156]	; (8006d50 <UART_SetConfig+0x384>)
 8006cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cbe:	4498      	add	r8, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	461d      	mov	r5, r3
 8006cc4:	f04f 0600 	mov.w	r6, #0
 8006cc8:	46a9      	mov	r9, r5
 8006cca:	46b2      	mov	sl, r6
 8006ccc:	eb19 0309 	adds.w	r3, r9, r9
 8006cd0:	eb4a 040a 	adc.w	r4, sl, sl
 8006cd4:	4699      	mov	r9, r3
 8006cd6:	46a2      	mov	sl, r4
 8006cd8:	eb19 0905 	adds.w	r9, r9, r5
 8006cdc:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ce0:	f04f 0100 	mov.w	r1, #0
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cf4:	4689      	mov	r9, r1
 8006cf6:	4692      	mov	sl, r2
 8006cf8:	eb19 0005 	adds.w	r0, r9, r5
 8006cfc:	eb4a 0106 	adc.w	r1, sl, r6
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	461d      	mov	r5, r3
 8006d06:	f04f 0600 	mov.w	r6, #0
 8006d0a:	196b      	adds	r3, r5, r5
 8006d0c:	eb46 0406 	adc.w	r4, r6, r6
 8006d10:	461a      	mov	r2, r3
 8006d12:	4623      	mov	r3, r4
 8006d14:	f7f9 fb04 	bl	8000320 <__aeabi_uldivmod>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <UART_SetConfig+0x384>)
 8006d20:	fba3 1302 	umull	r1, r3, r3, r2
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	2164      	movs	r1, #100	; 0x64
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	3332      	adds	r3, #50	; 0x32
 8006d32:	4a07      	ldr	r2, [pc, #28]	; (8006d50 <UART_SetConfig+0x384>)
 8006d34:	fba2 2303 	umull	r2, r3, r2, r3
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	f003 0207 	and.w	r2, r3, #7
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4442      	add	r2, r8
 8006d44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006d46:	e1b2      	b.n	80070ae <UART_SetConfig+0x6e2>
 8006d48:	40011000 	.word	0x40011000
 8006d4c:	40011400 	.word	0x40011400
 8006d50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4ad7      	ldr	r2, [pc, #860]	; (80070b8 <UART_SetConfig+0x6ec>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d005      	beq.n	8006d6a <UART_SetConfig+0x39e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4ad6      	ldr	r2, [pc, #856]	; (80070bc <UART_SetConfig+0x6f0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	f040 80d1 	bne.w	8006f0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d6a:	f7ff fdcd 	bl	8006908 <HAL_RCC_GetPCLK2Freq>
 8006d6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	469a      	mov	sl, r3
 8006d74:	f04f 0b00 	mov.w	fp, #0
 8006d78:	46d0      	mov	r8, sl
 8006d7a:	46d9      	mov	r9, fp
 8006d7c:	eb18 0308 	adds.w	r3, r8, r8
 8006d80:	eb49 0409 	adc.w	r4, r9, r9
 8006d84:	4698      	mov	r8, r3
 8006d86:	46a1      	mov	r9, r4
 8006d88:	eb18 080a 	adds.w	r8, r8, sl
 8006d8c:	eb49 090b 	adc.w	r9, r9, fp
 8006d90:	f04f 0100 	mov.w	r1, #0
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006da0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006da4:	4688      	mov	r8, r1
 8006da6:	4691      	mov	r9, r2
 8006da8:	eb1a 0508 	adds.w	r5, sl, r8
 8006dac:	eb4b 0609 	adc.w	r6, fp, r9
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	4619      	mov	r1, r3
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	f04f 0300 	mov.w	r3, #0
 8006dbe:	f04f 0400 	mov.w	r4, #0
 8006dc2:	0094      	lsls	r4, r2, #2
 8006dc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006dc8:	008b      	lsls	r3, r1, #2
 8006dca:	461a      	mov	r2, r3
 8006dcc:	4623      	mov	r3, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	f7f9 faa5 	bl	8000320 <__aeabi_uldivmod>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	460c      	mov	r4, r1
 8006dda:	461a      	mov	r2, r3
 8006ddc:	4bb8      	ldr	r3, [pc, #736]	; (80070c0 <UART_SetConfig+0x6f4>)
 8006dde:	fba3 2302 	umull	r2, r3, r3, r2
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	469b      	mov	fp, r3
 8006dec:	f04f 0c00 	mov.w	ip, #0
 8006df0:	46d9      	mov	r9, fp
 8006df2:	46e2      	mov	sl, ip
 8006df4:	eb19 0309 	adds.w	r3, r9, r9
 8006df8:	eb4a 040a 	adc.w	r4, sl, sl
 8006dfc:	4699      	mov	r9, r3
 8006dfe:	46a2      	mov	sl, r4
 8006e00:	eb19 090b 	adds.w	r9, r9, fp
 8006e04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e08:	f04f 0100 	mov.w	r1, #0
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e1c:	4689      	mov	r9, r1
 8006e1e:	4692      	mov	sl, r2
 8006e20:	eb1b 0509 	adds.w	r5, fp, r9
 8006e24:	eb4c 060a 	adc.w	r6, ip, sl
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	f04f 0400 	mov.w	r4, #0
 8006e3a:	0094      	lsls	r4, r2, #2
 8006e3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e40:	008b      	lsls	r3, r1, #2
 8006e42:	461a      	mov	r2, r3
 8006e44:	4623      	mov	r3, r4
 8006e46:	4628      	mov	r0, r5
 8006e48:	4631      	mov	r1, r6
 8006e4a:	f7f9 fa69 	bl	8000320 <__aeabi_uldivmod>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	461a      	mov	r2, r3
 8006e54:	4b9a      	ldr	r3, [pc, #616]	; (80070c0 <UART_SetConfig+0x6f4>)
 8006e56:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	2164      	movs	r1, #100	; 0x64
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	3332      	adds	r3, #50	; 0x32
 8006e68:	4a95      	ldr	r2, [pc, #596]	; (80070c0 <UART_SetConfig+0x6f4>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e74:	4498      	add	r8, r3
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	469b      	mov	fp, r3
 8006e7a:	f04f 0c00 	mov.w	ip, #0
 8006e7e:	46d9      	mov	r9, fp
 8006e80:	46e2      	mov	sl, ip
 8006e82:	eb19 0309 	adds.w	r3, r9, r9
 8006e86:	eb4a 040a 	adc.w	r4, sl, sl
 8006e8a:	4699      	mov	r9, r3
 8006e8c:	46a2      	mov	sl, r4
 8006e8e:	eb19 090b 	adds.w	r9, r9, fp
 8006e92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e96:	f04f 0100 	mov.w	r1, #0
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ea2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ea6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006eaa:	4689      	mov	r9, r1
 8006eac:	4692      	mov	sl, r2
 8006eae:	eb1b 0509 	adds.w	r5, fp, r9
 8006eb2:	eb4c 060a 	adc.w	r6, ip, sl
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	f04f 0400 	mov.w	r4, #0
 8006ec8:	0094      	lsls	r4, r2, #2
 8006eca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ece:	008b      	lsls	r3, r1, #2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	f7f9 fa22 	bl	8000320 <__aeabi_uldivmod>
 8006edc:	4603      	mov	r3, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4b77      	ldr	r3, [pc, #476]	; (80070c0 <UART_SetConfig+0x6f4>)
 8006ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	2164      	movs	r1, #100	; 0x64
 8006eec:	fb01 f303 	mul.w	r3, r1, r3
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	3332      	adds	r3, #50	; 0x32
 8006ef6:	4a72      	ldr	r2, [pc, #456]	; (80070c0 <UART_SetConfig+0x6f4>)
 8006ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	f003 020f 	and.w	r2, r3, #15
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4442      	add	r2, r8
 8006f08:	609a      	str	r2, [r3, #8]
 8006f0a:	e0d0      	b.n	80070ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f0c:	f7ff fce8 	bl	80068e0 <HAL_RCC_GetPCLK1Freq>
 8006f10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	469a      	mov	sl, r3
 8006f16:	f04f 0b00 	mov.w	fp, #0
 8006f1a:	46d0      	mov	r8, sl
 8006f1c:	46d9      	mov	r9, fp
 8006f1e:	eb18 0308 	adds.w	r3, r8, r8
 8006f22:	eb49 0409 	adc.w	r4, r9, r9
 8006f26:	4698      	mov	r8, r3
 8006f28:	46a1      	mov	r9, r4
 8006f2a:	eb18 080a 	adds.w	r8, r8, sl
 8006f2e:	eb49 090b 	adc.w	r9, r9, fp
 8006f32:	f04f 0100 	mov.w	r1, #0
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f46:	4688      	mov	r8, r1
 8006f48:	4691      	mov	r9, r2
 8006f4a:	eb1a 0508 	adds.w	r5, sl, r8
 8006f4e:	eb4b 0609 	adc.w	r6, fp, r9
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	4619      	mov	r1, r3
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	f04f 0400 	mov.w	r4, #0
 8006f64:	0094      	lsls	r4, r2, #2
 8006f66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f6a:	008b      	lsls	r3, r1, #2
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4623      	mov	r3, r4
 8006f70:	4628      	mov	r0, r5
 8006f72:	4631      	mov	r1, r6
 8006f74:	f7f9 f9d4 	bl	8000320 <__aeabi_uldivmod>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4b50      	ldr	r3, [pc, #320]	; (80070c0 <UART_SetConfig+0x6f4>)
 8006f80:	fba3 2302 	umull	r2, r3, r3, r2
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	469b      	mov	fp, r3
 8006f8e:	f04f 0c00 	mov.w	ip, #0
 8006f92:	46d9      	mov	r9, fp
 8006f94:	46e2      	mov	sl, ip
 8006f96:	eb19 0309 	adds.w	r3, r9, r9
 8006f9a:	eb4a 040a 	adc.w	r4, sl, sl
 8006f9e:	4699      	mov	r9, r3
 8006fa0:	46a2      	mov	sl, r4
 8006fa2:	eb19 090b 	adds.w	r9, r9, fp
 8006fa6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006faa:	f04f 0100 	mov.w	r1, #0
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fbe:	4689      	mov	r9, r1
 8006fc0:	4692      	mov	sl, r2
 8006fc2:	eb1b 0509 	adds.w	r5, fp, r9
 8006fc6:	eb4c 060a 	adc.w	r6, ip, sl
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	f04f 0400 	mov.w	r4, #0
 8006fdc:	0094      	lsls	r4, r2, #2
 8006fde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fe2:	008b      	lsls	r3, r1, #2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	4631      	mov	r1, r6
 8006fec:	f7f9 f998 	bl	8000320 <__aeabi_uldivmod>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4b32      	ldr	r3, [pc, #200]	; (80070c0 <UART_SetConfig+0x6f4>)
 8006ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	2164      	movs	r1, #100	; 0x64
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	3332      	adds	r3, #50	; 0x32
 800700a:	4a2d      	ldr	r2, [pc, #180]	; (80070c0 <UART_SetConfig+0x6f4>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007016:	4498      	add	r8, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	469b      	mov	fp, r3
 800701c:	f04f 0c00 	mov.w	ip, #0
 8007020:	46d9      	mov	r9, fp
 8007022:	46e2      	mov	sl, ip
 8007024:	eb19 0309 	adds.w	r3, r9, r9
 8007028:	eb4a 040a 	adc.w	r4, sl, sl
 800702c:	4699      	mov	r9, r3
 800702e:	46a2      	mov	sl, r4
 8007030:	eb19 090b 	adds.w	r9, r9, fp
 8007034:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007038:	f04f 0100 	mov.w	r1, #0
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007044:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007048:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800704c:	4689      	mov	r9, r1
 800704e:	4692      	mov	sl, r2
 8007050:	eb1b 0509 	adds.w	r5, fp, r9
 8007054:	eb4c 060a 	adc.w	r6, ip, sl
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4619      	mov	r1, r3
 800705e:	f04f 0200 	mov.w	r2, #0
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	f04f 0400 	mov.w	r4, #0
 800706a:	0094      	lsls	r4, r2, #2
 800706c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007070:	008b      	lsls	r3, r1, #2
 8007072:	461a      	mov	r2, r3
 8007074:	4623      	mov	r3, r4
 8007076:	4628      	mov	r0, r5
 8007078:	4631      	mov	r1, r6
 800707a:	f7f9 f951 	bl	8000320 <__aeabi_uldivmod>
 800707e:	4603      	mov	r3, r0
 8007080:	460c      	mov	r4, r1
 8007082:	461a      	mov	r2, r3
 8007084:	4b0e      	ldr	r3, [pc, #56]	; (80070c0 <UART_SetConfig+0x6f4>)
 8007086:	fba3 1302 	umull	r1, r3, r3, r2
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	2164      	movs	r1, #100	; 0x64
 800708e:	fb01 f303 	mul.w	r3, r1, r3
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	011b      	lsls	r3, r3, #4
 8007096:	3332      	adds	r3, #50	; 0x32
 8007098:	4a09      	ldr	r2, [pc, #36]	; (80070c0 <UART_SetConfig+0x6f4>)
 800709a:	fba2 2303 	umull	r2, r3, r2, r3
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	f003 020f 	and.w	r2, r3, #15
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4442      	add	r2, r8
 80070aa:	609a      	str	r2, [r3, #8]
}
 80070ac:	e7ff      	b.n	80070ae <UART_SetConfig+0x6e2>
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b8:	40011000 	.word	0x40011000
 80070bc:	40011400 	.word	0x40011400
 80070c0:	51eb851f 	.word	0x51eb851f

080070c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070d6:	2b84      	cmp	r3, #132	; 0x84
 80070d8:	d005      	beq.n	80070e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	3303      	adds	r3, #3
 80070e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070e6:	68fb      	ldr	r3, [r7, #12]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070fa:	f3ef 8305 	mrs	r3, IPSR
 80070fe:	607b      	str	r3, [r7, #4]
  return(result);
 8007100:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007102:	2b00      	cmp	r3, #0
 8007104:	bf14      	ite	ne
 8007106:	2301      	movne	r3, #1
 8007108:	2300      	moveq	r3, #0
 800710a:	b2db      	uxtb	r3, r3
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800711c:	f000 fd12 	bl	8007b44 <vTaskStartScheduler>
  
  return osOK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	bd80      	pop	{r7, pc}

08007126 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007128:	b089      	sub	sp, #36	; 0x24
 800712a:	af04      	add	r7, sp, #16
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d020      	beq.n	800717a <osThreadCreate+0x54>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01c      	beq.n	800717a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685c      	ldr	r4, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681d      	ldr	r5, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691e      	ldr	r6, [r3, #16]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff ffb6 	bl	80070c4 <makeFreeRtosPriority>
 8007158:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007162:	9202      	str	r2, [sp, #8]
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	9100      	str	r1, [sp, #0]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	4632      	mov	r2, r6
 800716c:	4629      	mov	r1, r5
 800716e:	4620      	mov	r0, r4
 8007170:	f000 f91c 	bl	80073ac <xTaskCreateStatic>
 8007174:	4603      	mov	r3, r0
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e01c      	b.n	80071b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685c      	ldr	r4, [r3, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007186:	b29e      	uxth	r6, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff ff98 	bl	80070c4 <makeFreeRtosPriority>
 8007194:	4602      	mov	r2, r0
 8007196:	f107 030c 	add.w	r3, r7, #12
 800719a:	9301      	str	r3, [sp, #4]
 800719c:	9200      	str	r2, [sp, #0]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	4632      	mov	r2, r6
 80071a2:	4629      	mov	r1, r5
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 f95a 	bl	800745e <xTaskCreate>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d001      	beq.n	80071b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	e000      	b.n	80071b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80071b4:	68fb      	ldr	r3, [r7, #12]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <osDelay+0x16>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	e000      	b.n	80071d6 <osDelay+0x18>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fae8 	bl	80077ac <vTaskDelay>
  
  return osOK;
 80071dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fb10 	bl	8007814 <vTaskSuspend>
  
  return osOK;
 80071f4:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8007208:	f7ff ff74 	bl	80070f4 <inHandlerMode>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00e      	beq.n	8007230 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fc26 	bl	8007a64 <xTaskResumeFromISR>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d10b      	bne.n	8007236 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800721e:	4b08      	ldr	r3, [pc, #32]	; (8007240 <osThreadResume+0x40>)
 8007220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	e002      	b.n	8007236 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fbbb 	bl	80079ac <vTaskResume>
  }
  return osOK;
 8007236:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	e000ed04 	.word	0xe000ed04

08007244 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f103 0208 	add.w	r2, r3, #8
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f04f 32ff 	mov.w	r2, #4294967295
 800725c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f103 0208 	add.w	r2, r3, #8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f103 0208 	add.w	r2, r3, #8
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800729e:	b480      	push	{r7}
 80072a0:	b085      	sub	sp, #20
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fc:	d103      	bne.n	8007306 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e00c      	b.n	8007320 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3308      	adds	r3, #8
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e002      	b.n	8007314 <vListInsert+0x2e>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	429a      	cmp	r2, r3
 800731e:	d2f6      	bcs.n	800730e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6892      	ldr	r2, [r2, #8]
 800736e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6852      	ldr	r2, [r2, #4]
 8007378:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d103      	bne.n	800738c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	1e5a      	subs	r2, r3, #1
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08e      	sub	sp, #56	; 0x38
 80073b0:	af04      	add	r7, sp, #16
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d109      	bne.n	80073d4 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	623b      	str	r3, [r7, #32]
 80073d2:	e7fe      	b.n	80073d2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <xTaskCreateStatic+0x42>
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	e7fe      	b.n	80073ec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073ee:	2354      	movs	r3, #84	; 0x54
 80073f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b54      	cmp	r3, #84	; 0x54
 80073f6:	d009      	beq.n	800740c <xTaskCreateStatic+0x60>
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	e7fe      	b.n	800740a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	2b00      	cmp	r3, #0
 8007410:	d01e      	beq.n	8007450 <xTaskCreateStatic+0xa4>
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01b      	beq.n	8007450 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007420:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	2202      	movs	r2, #2
 8007426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800742a:	2300      	movs	r3, #0
 800742c:	9303      	str	r3, [sp, #12]
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	9302      	str	r3, [sp, #8]
 8007432:	f107 0314 	add.w	r3, r7, #20
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 f850 	bl	80074e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800744a:	f000 f8cb 	bl	80075e4 <prvAddNewTaskToReadyList>
 800744e:	e001      	b.n	8007454 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007450:	2300      	movs	r3, #0
 8007452:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007454:	697b      	ldr	r3, [r7, #20]
	}
 8007456:	4618      	mov	r0, r3
 8007458:	3728      	adds	r7, #40	; 0x28
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800745e:	b580      	push	{r7, lr}
 8007460:	b08c      	sub	sp, #48	; 0x30
 8007462:	af04      	add	r7, sp, #16
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	603b      	str	r3, [r7, #0]
 800746a:	4613      	mov	r3, r2
 800746c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4618      	mov	r0, r3
 8007474:	f001 f934 	bl	80086e0 <pvPortMalloc>
 8007478:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00e      	beq.n	800749e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007480:	2054      	movs	r0, #84	; 0x54
 8007482:	f001 f92d 	bl	80086e0 <pvPortMalloc>
 8007486:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	631a      	str	r2, [r3, #48]	; 0x30
 8007494:	e005      	b.n	80074a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007496:	6978      	ldr	r0, [r7, #20]
 8007498:	f001 f9e4 	bl	8008864 <vPortFree>
 800749c:	e001      	b.n	80074a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d017      	beq.n	80074d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074b0:	88fa      	ldrh	r2, [r7, #6]
 80074b2:	2300      	movs	r3, #0
 80074b4:	9303      	str	r3, [sp, #12]
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	9302      	str	r3, [sp, #8]
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 f80e 	bl	80074e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074cc:	69f8      	ldr	r0, [r7, #28]
 80074ce:	f000 f889 	bl	80075e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074d2:	2301      	movs	r3, #1
 80074d4:	61bb      	str	r3, [r7, #24]
 80074d6:	e002      	b.n	80074de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295
 80074dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074de:	69bb      	ldr	r3, [r7, #24]
	}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3720      	adds	r7, #32
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007500:	3b01      	subs	r3, #1
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f023 0307 	bic.w	r3, r3, #7
 800750e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	2b00      	cmp	r3, #0
 8007518:	d009      	beq.n	800752e <prvInitialiseNewTask+0x46>
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	e7fe      	b.n	800752c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	e012      	b.n	800755a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	4413      	add	r3, r2
 800753a:	7819      	ldrb	r1, [r3, #0]
 800753c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	3334      	adds	r3, #52	; 0x34
 8007544:	460a      	mov	r2, r1
 8007546:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d006      	beq.n	8007562 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	3301      	adds	r3, #1
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	2b0f      	cmp	r3, #15
 800755e:	d9e9      	bls.n	8007534 <prvInitialiseNewTask+0x4c>
 8007560:	e000      	b.n	8007564 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007562:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	2b06      	cmp	r3, #6
 8007570:	d901      	bls.n	8007576 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007572:	2306      	movs	r3, #6
 8007574:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800757a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007580:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	2200      	movs	r2, #0
 8007586:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	3304      	adds	r3, #4
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fe79 	bl	8007284 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	3318      	adds	r3, #24
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff fe74 	bl	8007284 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	f1c3 0207 	rsb	r2, r3, #7
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	2200      	movs	r2, #0
 80075b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	69b8      	ldr	r0, [r7, #24]
 80075c6:	f000 fe47 	bl	8008258 <pxPortInitialiseStack>
 80075ca:	4602      	mov	r2, r0
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075dc:	bf00      	nop
 80075de:	3720      	adds	r7, #32
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075ec:	f000 ff5e 	bl	80084ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075f0:	4b2a      	ldr	r3, [pc, #168]	; (800769c <prvAddNewTaskToReadyList+0xb8>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	4a29      	ldr	r2, [pc, #164]	; (800769c <prvAddNewTaskToReadyList+0xb8>)
 80075f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075fa:	4b29      	ldr	r3, [pc, #164]	; (80076a0 <prvAddNewTaskToReadyList+0xbc>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007602:	4a27      	ldr	r2, [pc, #156]	; (80076a0 <prvAddNewTaskToReadyList+0xbc>)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007608:	4b24      	ldr	r3, [pc, #144]	; (800769c <prvAddNewTaskToReadyList+0xb8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d110      	bne.n	8007632 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007610:	f000 fcde 	bl	8007fd0 <prvInitialiseTaskLists>
 8007614:	e00d      	b.n	8007632 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007616:	4b23      	ldr	r3, [pc, #140]	; (80076a4 <prvAddNewTaskToReadyList+0xc0>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d109      	bne.n	8007632 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800761e:	4b20      	ldr	r3, [pc, #128]	; (80076a0 <prvAddNewTaskToReadyList+0xbc>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	429a      	cmp	r2, r3
 800762a:	d802      	bhi.n	8007632 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800762c:	4a1c      	ldr	r2, [pc, #112]	; (80076a0 <prvAddNewTaskToReadyList+0xbc>)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007632:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <prvAddNewTaskToReadyList+0xc4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3301      	adds	r3, #1
 8007638:	4a1b      	ldr	r2, [pc, #108]	; (80076a8 <prvAddNewTaskToReadyList+0xc4>)
 800763a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	2201      	movs	r2, #1
 8007642:	409a      	lsls	r2, r3
 8007644:	4b19      	ldr	r3, [pc, #100]	; (80076ac <prvAddNewTaskToReadyList+0xc8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4313      	orrs	r3, r2
 800764a:	4a18      	ldr	r2, [pc, #96]	; (80076ac <prvAddNewTaskToReadyList+0xc8>)
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <prvAddNewTaskToReadyList+0xcc>)
 800765c:	441a      	add	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3304      	adds	r3, #4
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f7ff fe1a 	bl	800729e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800766a:	f000 ff4d 	bl	8008508 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800766e:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <prvAddNewTaskToReadyList+0xc0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00e      	beq.n	8007694 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007676:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <prvAddNewTaskToReadyList+0xbc>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	429a      	cmp	r2, r3
 8007682:	d207      	bcs.n	8007694 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007684:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <prvAddNewTaskToReadyList+0xd0>)
 8007686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000420 	.word	0x20000420
 80076a0:	20000320 	.word	0x20000320
 80076a4:	2000042c 	.word	0x2000042c
 80076a8:	2000043c 	.word	0x2000043c
 80076ac:	20000428 	.word	0x20000428
 80076b0:	20000324 	.word	0x20000324
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	; 0x28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80076c2:	2300      	movs	r3, #0
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d109      	bne.n	80076e0 <vTaskDelayUntil+0x28>
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e7fe      	b.n	80076de <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <vTaskDelayUntil+0x42>
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	e7fe      	b.n	80076f8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80076fa:	4b29      	ldr	r3, [pc, #164]	; (80077a0 <vTaskDelayUntil+0xe8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d009      	beq.n	8007716 <vTaskDelayUntil+0x5e>
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e7fe      	b.n	8007714 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8007716:	f000 fa73 	bl	8007c00 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800771a:	4b22      	ldr	r3, [pc, #136]	; (80077a4 <vTaskDelayUntil+0xec>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	4413      	add	r3, r2
 8007728:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6a3a      	ldr	r2, [r7, #32]
 8007730:	429a      	cmp	r2, r3
 8007732:	d20b      	bcs.n	800774c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69fa      	ldr	r2, [r7, #28]
 800773a:	429a      	cmp	r2, r3
 800773c:	d211      	bcs.n	8007762 <vTaskDelayUntil+0xaa>
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	429a      	cmp	r2, r3
 8007744:	d90d      	bls.n	8007762 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8007746:	2301      	movs	r3, #1
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
 800774a:	e00a      	b.n	8007762 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	429a      	cmp	r2, r3
 8007754:	d303      	bcc.n	800775e <vTaskDelayUntil+0xa6>
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	429a      	cmp	r2, r3
 800775c:	d901      	bls.n	8007762 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800775e:	2301      	movs	r3, #1
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	2b00      	cmp	r3, #0
 800776c:	d006      	beq.n	800777c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fd08 	bl	800818c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800777c:	f000 fa4e 	bl	8007c1c <xTaskResumeAll>
 8007780:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8007788:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <vTaskDelayUntil+0xf0>)
 800778a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007798:	bf00      	nop
 800779a:	3728      	adds	r7, #40	; 0x28
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20000448 	.word	0x20000448
 80077a4:	20000424 	.word	0x20000424
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d016      	beq.n	80077ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <vTaskDelay+0x60>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <vTaskDelay+0x2e>
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	60bb      	str	r3, [r7, #8]
 80077d8:	e7fe      	b.n	80077d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80077da:	f000 fa11 	bl	8007c00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077de:	2100      	movs	r1, #0
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fcd3 	bl	800818c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077e6:	f000 fa19 	bl	8007c1c <xTaskResumeAll>
 80077ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d107      	bne.n	8007802 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80077f2:	4b07      	ldr	r3, [pc, #28]	; (8007810 <vTaskDelay+0x64>)
 80077f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000448 	.word	0x20000448
 8007810:	e000ed04 	.word	0xe000ed04

08007814 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800781c:	f000 fe46 	bl	80084ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d102      	bne.n	800782c <vTaskSuspend+0x18>
 8007826:	4b3c      	ldr	r3, [pc, #240]	; (8007918 <vTaskSuspend+0x104>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	e000      	b.n	800782e <vTaskSuspend+0x1a>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3304      	adds	r3, #4
 8007834:	4618      	mov	r0, r3
 8007836:	f7ff fd8f 	bl	8007358 <uxListRemove>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d115      	bne.n	800786c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007844:	4935      	ldr	r1, [pc, #212]	; (800791c <vTaskSuspend+0x108>)
 8007846:	4613      	mov	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	440b      	add	r3, r1
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <vTaskSuspend+0x58>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	2201      	movs	r2, #1
 800785c:	fa02 f303 	lsl.w	r3, r2, r3
 8007860:	43da      	mvns	r2, r3
 8007862:	4b2f      	ldr	r3, [pc, #188]	; (8007920 <vTaskSuspend+0x10c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4013      	ands	r3, r2
 8007868:	4a2d      	ldr	r2, [pc, #180]	; (8007920 <vTaskSuspend+0x10c>)
 800786a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3318      	adds	r3, #24
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fd6d 	bl	8007358 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3304      	adds	r3, #4
 8007882:	4619      	mov	r1, r3
 8007884:	4827      	ldr	r0, [pc, #156]	; (8007924 <vTaskSuspend+0x110>)
 8007886:	f7ff fd0a 	bl	800729e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b01      	cmp	r3, #1
 8007894:	d103      	bne.n	800789e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800789e:	f000 fe33 	bl	8008508 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80078a2:	4b21      	ldr	r3, [pc, #132]	; (8007928 <vTaskSuspend+0x114>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80078aa:	f000 fdff 	bl	80084ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80078ae:	f000 fc29 	bl	8008104 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80078b2:	f000 fe29 	bl	8008508 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80078b6:	4b18      	ldr	r3, [pc, #96]	; (8007918 <vTaskSuspend+0x104>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d126      	bne.n	800790e <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80078c0:	4b19      	ldr	r3, [pc, #100]	; (8007928 <vTaskSuspend+0x114>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d016      	beq.n	80078f6 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80078c8:	4b18      	ldr	r3, [pc, #96]	; (800792c <vTaskSuspend+0x118>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d009      	beq.n	80078e4 <vTaskSuspend+0xd0>
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	60bb      	str	r3, [r7, #8]
 80078e2:	e7fe      	b.n	80078e2 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80078e4:	4b12      	ldr	r3, [pc, #72]	; (8007930 <vTaskSuspend+0x11c>)
 80078e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078f4:	e00b      	b.n	800790e <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80078f6:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <vTaskSuspend+0x110>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <vTaskSuspend+0x120>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d103      	bne.n	800790a <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8007902:	4b05      	ldr	r3, [pc, #20]	; (8007918 <vTaskSuspend+0x104>)
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
	}
 8007908:	e001      	b.n	800790e <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800790a:	f000 faef 	bl	8007eec <vTaskSwitchContext>
	}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000320 	.word	0x20000320
 800791c:	20000324 	.word	0x20000324
 8007920:	20000428 	.word	0x20000428
 8007924:	2000040c 	.word	0x2000040c
 8007928:	2000042c 	.word	0x2000042c
 800792c:	20000448 	.word	0x20000448
 8007930:	e000ed04 	.word	0xe000ed04
 8007934:	20000420 	.word	0x20000420

08007938 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007940:	2300      	movs	r3, #0
 8007942:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <prvTaskIsTaskSuspended+0x2a>
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	e7fe      	b.n	8007960 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	4a0f      	ldr	r2, [pc, #60]	; (80079a4 <prvTaskIsTaskSuspended+0x6c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d101      	bne.n	8007970 <prvTaskIsTaskSuspended+0x38>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <prvTaskIsTaskSuspended+0x3a>
 8007970:	2300      	movs	r3, #0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00f      	beq.n	8007996 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	4a0b      	ldr	r2, [pc, #44]	; (80079a8 <prvTaskIsTaskSuspended+0x70>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00a      	beq.n	8007996 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <prvTaskIsTaskSuspended+0x54>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <prvTaskIsTaskSuspended+0x56>
 800798c:	2300      	movs	r3, #0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8007992:	2301      	movs	r3, #1
 8007994:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007996:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007998:	4618      	mov	r0, r3
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	2000040c 	.word	0x2000040c
 80079a8:	200003e0 	.word	0x200003e0

080079ac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d109      	bne.n	80079d2 <vTaskResume+0x26>
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	60bb      	str	r3, [r7, #8]
 80079d0:	e7fe      	b.n	80079d0 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d039      	beq.n	8007a4c <vTaskResume+0xa0>
 80079d8:	4b1e      	ldr	r3, [pc, #120]	; (8007a54 <vTaskResume+0xa8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d034      	beq.n	8007a4c <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 80079e2:	f000 fd63 	bl	80084ac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff ffa6 	bl	8007938 <prvTaskIsTaskSuspended>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d02a      	beq.n	8007a48 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3304      	adds	r3, #4
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff fcae 	bl	8007358 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	2201      	movs	r2, #1
 8007a02:	409a      	lsls	r2, r3
 8007a04:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <vTaskResume+0xac>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	4a13      	ldr	r2, [pc, #76]	; (8007a58 <vTaskResume+0xac>)
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4a10      	ldr	r2, [pc, #64]	; (8007a5c <vTaskResume+0xb0>)
 8007a1c:	441a      	add	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7ff fc3a 	bl	800729e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2e:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <vTaskResume+0xa8>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d307      	bcc.n	8007a48 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007a38:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <vTaskResume+0xb4>)
 8007a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007a48:	f000 fd5e 	bl	8008508 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a4c:	bf00      	nop
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20000320 	.word	0x20000320
 8007a58:	20000428 	.word	0x20000428
 8007a5c:	20000324 	.word	0x20000324
 8007a60:	e000ed04 	.word	0xe000ed04

08007a64 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d109      	bne.n	8007a8e <xTaskResumeFromISR+0x2a>
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	61bb      	str	r3, [r7, #24]
 8007a8c:	e7fe      	b.n	8007a8c <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a8e:	f000 fde9 	bl	8008664 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a92:	f3ef 8211 	mrs	r2, BASEPRI
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	617a      	str	r2, [r7, #20]
 8007aa8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007aaa:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007aac:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007aae:	6a38      	ldr	r0, [r7, #32]
 8007ab0:	f7ff ff42 	bl	8007938 <prvTaskIsTaskSuspended>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d02f      	beq.n	8007b1a <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aba:	4b1d      	ldr	r3, [pc, #116]	; (8007b30 <xTaskResumeFromISR+0xcc>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d125      	bne.n	8007b0e <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac6:	4b1b      	ldr	r3, [pc, #108]	; (8007b34 <xTaskResumeFromISR+0xd0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d301      	bcc.n	8007ad4 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff fc3d 	bl	8007358 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	409a      	lsls	r2, r3
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <xTaskResumeFromISR+0xd4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	4a12      	ldr	r2, [pc, #72]	; (8007b38 <xTaskResumeFromISR+0xd4>)
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4a0f      	ldr	r2, [pc, #60]	; (8007b3c <xTaskResumeFromISR+0xd8>)
 8007afe:	441a      	add	r2, r3
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7ff fbc9 	bl	800729e <vListInsertEnd>
 8007b0c:	e005      	b.n	8007b1a <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	3318      	adds	r3, #24
 8007b12:	4619      	mov	r1, r3
 8007b14:	480a      	ldr	r0, [pc, #40]	; (8007b40 <xTaskResumeFromISR+0xdc>)
 8007b16:	f7ff fbc2 	bl	800729e <vListInsertEnd>
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3728      	adds	r7, #40	; 0x28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000448 	.word	0x20000448
 8007b34:	20000320 	.word	0x20000320
 8007b38:	20000428 	.word	0x20000428
 8007b3c:	20000324 	.word	0x20000324
 8007b40:	200003e0 	.word	0x200003e0

08007b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b52:	463a      	mov	r2, r7
 8007b54:	1d39      	adds	r1, r7, #4
 8007b56:	f107 0308 	add.w	r3, r7, #8
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f9 fae4 	bl	8001128 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	9202      	str	r2, [sp, #8]
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	460a      	mov	r2, r1
 8007b72:	491d      	ldr	r1, [pc, #116]	; (8007be8 <vTaskStartScheduler+0xa4>)
 8007b74:	481d      	ldr	r0, [pc, #116]	; (8007bec <vTaskStartScheduler+0xa8>)
 8007b76:	f7ff fc19 	bl	80073ac <xTaskCreateStatic>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	4b1c      	ldr	r3, [pc, #112]	; (8007bf0 <vTaskStartScheduler+0xac>)
 8007b7e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b80:	4b1b      	ldr	r3, [pc, #108]	; (8007bf0 <vTaskStartScheduler+0xac>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e001      	b.n	8007b92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d115      	bne.n	8007bc4 <vTaskStartScheduler+0x80>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <vTaskStartScheduler+0xb0>)
 8007bac:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007bb2:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <vTaskStartScheduler+0xb4>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007bb8:	4b10      	ldr	r3, [pc, #64]	; (8007bfc <vTaskStartScheduler+0xb8>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bbe:	f000 fbd7 	bl	8008370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bc2:	e00d      	b.n	8007be0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bca:	d109      	bne.n	8007be0 <vTaskStartScheduler+0x9c>
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e7fe      	b.n	8007bde <vTaskStartScheduler+0x9a>
}
 8007be0:	bf00      	nop
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	080095b0 	.word	0x080095b0
 8007bec:	08007fa1 	.word	0x08007fa1
 8007bf0:	20000444 	.word	0x20000444
 8007bf4:	20000440 	.word	0x20000440
 8007bf8:	2000042c 	.word	0x2000042c
 8007bfc:	20000424 	.word	0x20000424

08007c00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c00:	b480      	push	{r7}
 8007c02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c04:	4b04      	ldr	r3, [pc, #16]	; (8007c18 <vTaskSuspendAll+0x18>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	4a03      	ldr	r2, [pc, #12]	; (8007c18 <vTaskSuspendAll+0x18>)
 8007c0c:	6013      	str	r3, [r2, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	20000448 	.word	0x20000448

08007c1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c2a:	4b41      	ldr	r3, [pc, #260]	; (8007d30 <xTaskResumeAll+0x114>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <xTaskResumeAll+0x2a>
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	e7fe      	b.n	8007c44 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c46:	f000 fc31 	bl	80084ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c4a:	4b39      	ldr	r3, [pc, #228]	; (8007d30 <xTaskResumeAll+0x114>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	4a37      	ldr	r2, [pc, #220]	; (8007d30 <xTaskResumeAll+0x114>)
 8007c52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c54:	4b36      	ldr	r3, [pc, #216]	; (8007d30 <xTaskResumeAll+0x114>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d161      	bne.n	8007d20 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c5c:	4b35      	ldr	r3, [pc, #212]	; (8007d34 <xTaskResumeAll+0x118>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d05d      	beq.n	8007d20 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c64:	e02e      	b.n	8007cc4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007c66:	4b34      	ldr	r3, [pc, #208]	; (8007d38 <xTaskResumeAll+0x11c>)
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3318      	adds	r3, #24
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff fb70 	bl	8007358 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff fb6b 	bl	8007358 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	2201      	movs	r2, #1
 8007c88:	409a      	lsls	r2, r3
 8007c8a:	4b2c      	ldr	r3, [pc, #176]	; (8007d3c <xTaskResumeAll+0x120>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	4a2a      	ldr	r2, [pc, #168]	; (8007d3c <xTaskResumeAll+0x120>)
 8007c92:	6013      	str	r3, [r2, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4a27      	ldr	r2, [pc, #156]	; (8007d40 <xTaskResumeAll+0x124>)
 8007ca2:	441a      	add	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f7ff faf7 	bl	800729e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb4:	4b23      	ldr	r3, [pc, #140]	; (8007d44 <xTaskResumeAll+0x128>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d302      	bcc.n	8007cc4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007cbe:	4b22      	ldr	r3, [pc, #136]	; (8007d48 <xTaskResumeAll+0x12c>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cc4:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <xTaskResumeAll+0x11c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1cc      	bne.n	8007c66 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cd2:	f000 fa17 	bl	8008104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <xTaskResumeAll+0x130>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d010      	beq.n	8007d04 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ce2:	f000 f847 	bl	8007d74 <xTaskIncrementTick>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007cec:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <xTaskResumeAll+0x12c>)
 8007cee:	2201      	movs	r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1f1      	bne.n	8007ce2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <xTaskResumeAll+0x130>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d04:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <xTaskResumeAll+0x12c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d009      	beq.n	8007d20 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d10:	4b0f      	ldr	r3, [pc, #60]	; (8007d50 <xTaskResumeAll+0x134>)
 8007d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d20:	f000 fbf2 	bl	8008508 <vPortExitCritical>

	return xAlreadyYielded;
 8007d24:	68bb      	ldr	r3, [r7, #8]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000448 	.word	0x20000448
 8007d34:	20000420 	.word	0x20000420
 8007d38:	200003e0 	.word	0x200003e0
 8007d3c:	20000428 	.word	0x20000428
 8007d40:	20000324 	.word	0x20000324
 8007d44:	20000320 	.word	0x20000320
 8007d48:	20000434 	.word	0x20000434
 8007d4c:	20000430 	.word	0x20000430
 8007d50:	e000ed04 	.word	0xe000ed04

08007d54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d5a:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <xTaskGetTickCount+0x1c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d60:	687b      	ldr	r3, [r7, #4]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20000424 	.word	0x20000424

08007d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7e:	4b50      	ldr	r3, [pc, #320]	; (8007ec0 <xTaskIncrementTick+0x14c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f040 808c 	bne.w	8007ea0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d88:	4b4e      	ldr	r3, [pc, #312]	; (8007ec4 <xTaskIncrementTick+0x150>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d90:	4a4c      	ldr	r2, [pc, #304]	; (8007ec4 <xTaskIncrementTick+0x150>)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d11f      	bne.n	8007ddc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d9c:	4b4a      	ldr	r3, [pc, #296]	; (8007ec8 <xTaskIncrementTick+0x154>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d009      	beq.n	8007dba <xTaskIncrementTick+0x46>
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	e7fe      	b.n	8007db8 <xTaskIncrementTick+0x44>
 8007dba:	4b43      	ldr	r3, [pc, #268]	; (8007ec8 <xTaskIncrementTick+0x154>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	4b42      	ldr	r3, [pc, #264]	; (8007ecc <xTaskIncrementTick+0x158>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a40      	ldr	r2, [pc, #256]	; (8007ec8 <xTaskIncrementTick+0x154>)
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	4a40      	ldr	r2, [pc, #256]	; (8007ecc <xTaskIncrementTick+0x158>)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	4b40      	ldr	r3, [pc, #256]	; (8007ed0 <xTaskIncrementTick+0x15c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	4a3e      	ldr	r2, [pc, #248]	; (8007ed0 <xTaskIncrementTick+0x15c>)
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	f000 f994 	bl	8008104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ddc:	4b3d      	ldr	r3, [pc, #244]	; (8007ed4 <xTaskIncrementTick+0x160>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d34d      	bcc.n	8007e82 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007de6:	4b38      	ldr	r3, [pc, #224]	; (8007ec8 <xTaskIncrementTick+0x154>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <xTaskIncrementTick+0x80>
 8007df0:	2301      	movs	r3, #1
 8007df2:	e000      	b.n	8007df6 <xTaskIncrementTick+0x82>
 8007df4:	2300      	movs	r3, #0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dfa:	4b36      	ldr	r3, [pc, #216]	; (8007ed4 <xTaskIncrementTick+0x160>)
 8007dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007e00:	601a      	str	r2, [r3, #0]
					break;
 8007e02:	e03e      	b.n	8007e82 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e04:	4b30      	ldr	r3, [pc, #192]	; (8007ec8 <xTaskIncrementTick+0x154>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d203      	bcs.n	8007e24 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e1c:	4a2d      	ldr	r2, [pc, #180]	; (8007ed4 <xTaskIncrementTick+0x160>)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6013      	str	r3, [r2, #0]
						break;
 8007e22:	e02e      	b.n	8007e82 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff fa95 	bl	8007358 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d004      	beq.n	8007e40 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	3318      	adds	r3, #24
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7ff fa8c 	bl	8007358 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	2201      	movs	r2, #1
 8007e46:	409a      	lsls	r2, r3
 8007e48:	4b23      	ldr	r3, [pc, #140]	; (8007ed8 <xTaskIncrementTick+0x164>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	4a22      	ldr	r2, [pc, #136]	; (8007ed8 <xTaskIncrementTick+0x164>)
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4a1f      	ldr	r2, [pc, #124]	; (8007edc <xTaskIncrementTick+0x168>)
 8007e60:	441a      	add	r2, r3
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f7ff fa18 	bl	800729e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e72:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <xTaskIncrementTick+0x16c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d3b4      	bcc.n	8007de6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e80:	e7b1      	b.n	8007de6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e82:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <xTaskIncrementTick+0x16c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e88:	4914      	ldr	r1, [pc, #80]	; (8007edc <xTaskIncrementTick+0x168>)
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	440b      	add	r3, r1
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d907      	bls.n	8007eaa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	e004      	b.n	8007eaa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ea0:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <xTaskIncrementTick+0x170>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	4a0f      	ldr	r2, [pc, #60]	; (8007ee4 <xTaskIncrementTick+0x170>)
 8007ea8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <xTaskIncrementTick+0x174>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007eb6:	697b      	ldr	r3, [r7, #20]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20000448 	.word	0x20000448
 8007ec4:	20000424 	.word	0x20000424
 8007ec8:	200003d8 	.word	0x200003d8
 8007ecc:	200003dc 	.word	0x200003dc
 8007ed0:	20000438 	.word	0x20000438
 8007ed4:	20000440 	.word	0x20000440
 8007ed8:	20000428 	.word	0x20000428
 8007edc:	20000324 	.word	0x20000324
 8007ee0:	20000320 	.word	0x20000320
 8007ee4:	20000430 	.word	0x20000430
 8007ee8:	20000434 	.word	0x20000434

08007eec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ef2:	4b26      	ldr	r3, [pc, #152]	; (8007f8c <vTaskSwitchContext+0xa0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007efa:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <vTaskSwitchContext+0xa4>)
 8007efc:	2201      	movs	r2, #1
 8007efe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f00:	e03e      	b.n	8007f80 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007f02:	4b23      	ldr	r3, [pc, #140]	; (8007f90 <vTaskSwitchContext+0xa4>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007f08:	4b22      	ldr	r3, [pc, #136]	; (8007f94 <vTaskSwitchContext+0xa8>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	fab3 f383 	clz	r3, r3
 8007f14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f16:	7afb      	ldrb	r3, [r7, #11]
 8007f18:	f1c3 031f 	rsb	r3, r3, #31
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	491e      	ldr	r1, [pc, #120]	; (8007f98 <vTaskSwitchContext+0xac>)
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	607b      	str	r3, [r7, #4]
 8007f44:	e7fe      	b.n	8007f44 <vTaskSwitchContext+0x58>
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4a11      	ldr	r2, [pc, #68]	; (8007f98 <vTaskSwitchContext+0xac>)
 8007f52:	4413      	add	r3, r2
 8007f54:	613b      	str	r3, [r7, #16]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	605a      	str	r2, [r3, #4]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	3308      	adds	r3, #8
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d104      	bne.n	8007f76 <vTaskSwitchContext+0x8a>
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	605a      	str	r2, [r3, #4]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	4a07      	ldr	r2, [pc, #28]	; (8007f9c <vTaskSwitchContext+0xb0>)
 8007f7e:	6013      	str	r3, [r2, #0]
}
 8007f80:	bf00      	nop
 8007f82:	371c      	adds	r7, #28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	20000448 	.word	0x20000448
 8007f90:	20000434 	.word	0x20000434
 8007f94:	20000428 	.word	0x20000428
 8007f98:	20000324 	.word	0x20000324
 8007f9c:	20000320 	.word	0x20000320

08007fa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fa8:	f000 f852 	bl	8008050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fac:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <prvIdleTask+0x28>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d9f9      	bls.n	8007fa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fb4:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <prvIdleTask+0x2c>)
 8007fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fc4:	e7f0      	b.n	8007fa8 <prvIdleTask+0x8>
 8007fc6:	bf00      	nop
 8007fc8:	20000324 	.word	0x20000324
 8007fcc:	e000ed04 	.word	0xe000ed04

08007fd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	607b      	str	r3, [r7, #4]
 8007fda:	e00c      	b.n	8007ff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4a12      	ldr	r2, [pc, #72]	; (8008030 <prvInitialiseTaskLists+0x60>)
 8007fe8:	4413      	add	r3, r2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff f92a 	bl	8007244 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	607b      	str	r3, [r7, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b06      	cmp	r3, #6
 8007ffa:	d9ef      	bls.n	8007fdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ffc:	480d      	ldr	r0, [pc, #52]	; (8008034 <prvInitialiseTaskLists+0x64>)
 8007ffe:	f7ff f921 	bl	8007244 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008002:	480d      	ldr	r0, [pc, #52]	; (8008038 <prvInitialiseTaskLists+0x68>)
 8008004:	f7ff f91e 	bl	8007244 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008008:	480c      	ldr	r0, [pc, #48]	; (800803c <prvInitialiseTaskLists+0x6c>)
 800800a:	f7ff f91b 	bl	8007244 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800800e:	480c      	ldr	r0, [pc, #48]	; (8008040 <prvInitialiseTaskLists+0x70>)
 8008010:	f7ff f918 	bl	8007244 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008014:	480b      	ldr	r0, [pc, #44]	; (8008044 <prvInitialiseTaskLists+0x74>)
 8008016:	f7ff f915 	bl	8007244 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800801a:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <prvInitialiseTaskLists+0x78>)
 800801c:	4a05      	ldr	r2, [pc, #20]	; (8008034 <prvInitialiseTaskLists+0x64>)
 800801e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008020:	4b0a      	ldr	r3, [pc, #40]	; (800804c <prvInitialiseTaskLists+0x7c>)
 8008022:	4a05      	ldr	r2, [pc, #20]	; (8008038 <prvInitialiseTaskLists+0x68>)
 8008024:	601a      	str	r2, [r3, #0]
}
 8008026:	bf00      	nop
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20000324 	.word	0x20000324
 8008034:	200003b0 	.word	0x200003b0
 8008038:	200003c4 	.word	0x200003c4
 800803c:	200003e0 	.word	0x200003e0
 8008040:	200003f4 	.word	0x200003f4
 8008044:	2000040c 	.word	0x2000040c
 8008048:	200003d8 	.word	0x200003d8
 800804c:	200003dc 	.word	0x200003dc

08008050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008056:	e019      	b.n	800808c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008058:	f000 fa28 	bl	80084ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800805c:	4b0f      	ldr	r3, [pc, #60]	; (800809c <prvCheckTasksWaitingTermination+0x4c>)
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3304      	adds	r3, #4
 8008068:	4618      	mov	r0, r3
 800806a:	f7ff f975 	bl	8007358 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <prvCheckTasksWaitingTermination+0x50>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3b01      	subs	r3, #1
 8008074:	4a0a      	ldr	r2, [pc, #40]	; (80080a0 <prvCheckTasksWaitingTermination+0x50>)
 8008076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008078:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <prvCheckTasksWaitingTermination+0x54>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3b01      	subs	r3, #1
 800807e:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <prvCheckTasksWaitingTermination+0x54>)
 8008080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008082:	f000 fa41 	bl	8008508 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f80e 	bl	80080a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <prvCheckTasksWaitingTermination+0x54>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e1      	bne.n	8008058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	200003f4 	.word	0x200003f4
 80080a0:	20000420 	.word	0x20000420
 80080a4:	20000408 	.word	0x20000408

080080a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d108      	bne.n	80080cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fbd0 	bl	8008864 <vPortFree>
				vPortFree( pxTCB );
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fbcd 	bl	8008864 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080ca:	e017      	b.n	80080fc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d103      	bne.n	80080de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fbc4 	bl	8008864 <vPortFree>
	}
 80080dc:	e00e      	b.n	80080fc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d009      	beq.n	80080fc <prvDeleteTCB+0x54>
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	e7fe      	b.n	80080fa <prvDeleteTCB+0x52>
	}
 80080fc:	bf00      	nop
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800810a:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <prvResetNextTaskUnblockTime+0x44>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <prvResetNextTaskUnblockTime+0x14>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <prvResetNextTaskUnblockTime+0x16>
 8008118:	2300      	movs	r3, #0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800811e:	4b0b      	ldr	r3, [pc, #44]	; (800814c <prvResetNextTaskUnblockTime+0x48>)
 8008120:	f04f 32ff 	mov.w	r2, #4294967295
 8008124:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008126:	e008      	b.n	800813a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008128:	4b07      	ldr	r3, [pc, #28]	; (8008148 <prvResetNextTaskUnblockTime+0x44>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	4a05      	ldr	r2, [pc, #20]	; (800814c <prvResetNextTaskUnblockTime+0x48>)
 8008138:	6013      	str	r3, [r2, #0]
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	200003d8 	.word	0x200003d8
 800814c:	20000440 	.word	0x20000440

08008150 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <xTaskGetSchedulerState+0x34>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d102      	bne.n	8008164 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800815e:	2301      	movs	r3, #1
 8008160:	607b      	str	r3, [r7, #4]
 8008162:	e008      	b.n	8008176 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008164:	4b08      	ldr	r3, [pc, #32]	; (8008188 <xTaskGetSchedulerState+0x38>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800816c:	2302      	movs	r3, #2
 800816e:	607b      	str	r3, [r7, #4]
 8008170:	e001      	b.n	8008176 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008176:	687b      	ldr	r3, [r7, #4]
	}
 8008178:	4618      	mov	r0, r3
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	2000042c 	.word	0x2000042c
 8008188:	20000448 	.word	0x20000448

0800818c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008196:	4b29      	ldr	r3, [pc, #164]	; (800823c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800819c:	4b28      	ldr	r3, [pc, #160]	; (8008240 <prvAddCurrentTaskToDelayedList+0xb4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3304      	adds	r3, #4
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff f8d8 	bl	8007358 <uxListRemove>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10b      	bne.n	80081c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80081ae:	4b24      	ldr	r3, [pc, #144]	; (8008240 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	2201      	movs	r2, #1
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	43da      	mvns	r2, r3
 80081bc:	4b21      	ldr	r3, [pc, #132]	; (8008244 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4013      	ands	r3, r2
 80081c2:	4a20      	ldr	r2, [pc, #128]	; (8008244 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081cc:	d10a      	bne.n	80081e4 <prvAddCurrentTaskToDelayedList+0x58>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d007      	beq.n	80081e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081d4:	4b1a      	ldr	r3, [pc, #104]	; (8008240 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3304      	adds	r3, #4
 80081da:	4619      	mov	r1, r3
 80081dc:	481a      	ldr	r0, [pc, #104]	; (8008248 <prvAddCurrentTaskToDelayedList+0xbc>)
 80081de:	f7ff f85e 	bl	800729e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081e2:	e026      	b.n	8008232 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4413      	add	r3, r2
 80081ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081ec:	4b14      	ldr	r3, [pc, #80]	; (8008240 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d209      	bcs.n	8008210 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081fc:	4b13      	ldr	r3, [pc, #76]	; (800824c <prvAddCurrentTaskToDelayedList+0xc0>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3304      	adds	r3, #4
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7ff f86c 	bl	80072e6 <vListInsert>
}
 800820e:	e010      	b.n	8008232 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008210:	4b0f      	ldr	r3, [pc, #60]	; (8008250 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3304      	adds	r3, #4
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f7ff f862 	bl	80072e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008222:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	429a      	cmp	r2, r3
 800822a:	d202      	bcs.n	8008232 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800822c:	4a09      	ldr	r2, [pc, #36]	; (8008254 <prvAddCurrentTaskToDelayedList+0xc8>)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	6013      	str	r3, [r2, #0]
}
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000424 	.word	0x20000424
 8008240:	20000320 	.word	0x20000320
 8008244:	20000428 	.word	0x20000428
 8008248:	2000040c 	.word	0x2000040c
 800824c:	200003dc 	.word	0x200003dc
 8008250:	200003d8 	.word	0x200003d8
 8008254:	20000440 	.word	0x20000440

08008258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3b04      	subs	r3, #4
 8008268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3b04      	subs	r3, #4
 8008276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f023 0201 	bic.w	r2, r3, #1
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3b04      	subs	r3, #4
 8008286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008288:	4a0c      	ldr	r2, [pc, #48]	; (80082bc <pxPortInitialiseStack+0x64>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3b14      	subs	r3, #20
 8008292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3b04      	subs	r3, #4
 800829e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f06f 0202 	mvn.w	r2, #2
 80082a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3b20      	subs	r3, #32
 80082ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082ae:	68fb      	ldr	r3, [r7, #12]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	080082c1 	.word	0x080082c1

080082c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082ca:	4b11      	ldr	r3, [pc, #68]	; (8008310 <prvTaskExitError+0x50>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d2:	d009      	beq.n	80082e8 <prvTaskExitError+0x28>
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	e7fe      	b.n	80082e6 <prvTaskExitError+0x26>
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082fa:	bf00      	nop
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0fc      	beq.n	80082fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008302:	bf00      	nop
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	20000020 	.word	0x20000020
	...

08008320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <pxCurrentTCBConst2>)
 8008322:	6819      	ldr	r1, [r3, #0]
 8008324:	6808      	ldr	r0, [r1, #0]
 8008326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832a:	f380 8809 	msr	PSP, r0
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f04f 0000 	mov.w	r0, #0
 8008336:	f380 8811 	msr	BASEPRI, r0
 800833a:	4770      	bx	lr
 800833c:	f3af 8000 	nop.w

08008340 <pxCurrentTCBConst2>:
 8008340:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop

08008348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008348:	4808      	ldr	r0, [pc, #32]	; (800836c <prvPortStartFirstTask+0x24>)
 800834a:	6800      	ldr	r0, [r0, #0]
 800834c:	6800      	ldr	r0, [r0, #0]
 800834e:	f380 8808 	msr	MSP, r0
 8008352:	f04f 0000 	mov.w	r0, #0
 8008356:	f380 8814 	msr	CONTROL, r0
 800835a:	b662      	cpsie	i
 800835c:	b661      	cpsie	f
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	df00      	svc	0
 8008368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800836a:	bf00      	nop
 800836c:	e000ed08 	.word	0xe000ed08

08008370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008376:	4b44      	ldr	r3, [pc, #272]	; (8008488 <xPortStartScheduler+0x118>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a44      	ldr	r2, [pc, #272]	; (800848c <xPortStartScheduler+0x11c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d109      	bne.n	8008394 <xPortStartScheduler+0x24>
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	e7fe      	b.n	8008392 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008394:	4b3c      	ldr	r3, [pc, #240]	; (8008488 <xPortStartScheduler+0x118>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a3d      	ldr	r2, [pc, #244]	; (8008490 <xPortStartScheduler+0x120>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d109      	bne.n	80083b2 <xPortStartScheduler+0x42>
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	e7fe      	b.n	80083b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083b2:	4b38      	ldr	r3, [pc, #224]	; (8008494 <xPortStartScheduler+0x124>)
 80083b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	22ff      	movs	r2, #255	; 0xff
 80083c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	4b30      	ldr	r3, [pc, #192]	; (8008498 <xPortStartScheduler+0x128>)
 80083d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083da:	4b30      	ldr	r3, [pc, #192]	; (800849c <xPortStartScheduler+0x12c>)
 80083dc:	2207      	movs	r2, #7
 80083de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083e0:	e009      	b.n	80083f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80083e2:	4b2e      	ldr	r3, [pc, #184]	; (800849c <xPortStartScheduler+0x12c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	4a2c      	ldr	r2, [pc, #176]	; (800849c <xPortStartScheduler+0x12c>)
 80083ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fe:	2b80      	cmp	r3, #128	; 0x80
 8008400:	d0ef      	beq.n	80083e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008402:	4b26      	ldr	r3, [pc, #152]	; (800849c <xPortStartScheduler+0x12c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f1c3 0307 	rsb	r3, r3, #7
 800840a:	2b04      	cmp	r3, #4
 800840c:	d009      	beq.n	8008422 <xPortStartScheduler+0xb2>
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	60bb      	str	r3, [r7, #8]
 8008420:	e7fe      	b.n	8008420 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008422:	4b1e      	ldr	r3, [pc, #120]	; (800849c <xPortStartScheduler+0x12c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	021b      	lsls	r3, r3, #8
 8008428:	4a1c      	ldr	r2, [pc, #112]	; (800849c <xPortStartScheduler+0x12c>)
 800842a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800842c:	4b1b      	ldr	r3, [pc, #108]	; (800849c <xPortStartScheduler+0x12c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008434:	4a19      	ldr	r2, [pc, #100]	; (800849c <xPortStartScheduler+0x12c>)
 8008436:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	b2da      	uxtb	r2, r3
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008440:	4b17      	ldr	r3, [pc, #92]	; (80084a0 <xPortStartScheduler+0x130>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a16      	ldr	r2, [pc, #88]	; (80084a0 <xPortStartScheduler+0x130>)
 8008446:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800844a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800844c:	4b14      	ldr	r3, [pc, #80]	; (80084a0 <xPortStartScheduler+0x130>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <xPortStartScheduler+0x130>)
 8008452:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008456:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008458:	f000 f8d6 	bl	8008608 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800845c:	4b11      	ldr	r3, [pc, #68]	; (80084a4 <xPortStartScheduler+0x134>)
 800845e:	2200      	movs	r2, #0
 8008460:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008462:	f000 f8f5 	bl	8008650 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008466:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <xPortStartScheduler+0x138>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a0f      	ldr	r2, [pc, #60]	; (80084a8 <xPortStartScheduler+0x138>)
 800846c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008470:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008472:	f7ff ff69 	bl	8008348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008476:	f7ff fd39 	bl	8007eec <vTaskSwitchContext>
	prvTaskExitError();
 800847a:	f7ff ff21 	bl	80082c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	e000ed00 	.word	0xe000ed00
 800848c:	410fc271 	.word	0x410fc271
 8008490:	410fc270 	.word	0x410fc270
 8008494:	e000e400 	.word	0xe000e400
 8008498:	2000044c 	.word	0x2000044c
 800849c:	20000450 	.word	0x20000450
 80084a0:	e000ed20 	.word	0xe000ed20
 80084a4:	20000020 	.word	0x20000020
 80084a8:	e000ef34 	.word	0xe000ef34

080084ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084c4:	4b0e      	ldr	r3, [pc, #56]	; (8008500 <vPortEnterCritical+0x54>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	4a0d      	ldr	r2, [pc, #52]	; (8008500 <vPortEnterCritical+0x54>)
 80084cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084ce:	4b0c      	ldr	r3, [pc, #48]	; (8008500 <vPortEnterCritical+0x54>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d10e      	bne.n	80084f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084d6:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <vPortEnterCritical+0x58>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d009      	beq.n	80084f4 <vPortEnterCritical+0x48>
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	603b      	str	r3, [r7, #0]
 80084f2:	e7fe      	b.n	80084f2 <vPortEnterCritical+0x46>
	}
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	20000020 	.word	0x20000020
 8008504:	e000ed04 	.word	0xe000ed04

08008508 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800850e:	4b11      	ldr	r3, [pc, #68]	; (8008554 <vPortExitCritical+0x4c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d109      	bne.n	800852a <vPortExitCritical+0x22>
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	607b      	str	r3, [r7, #4]
 8008528:	e7fe      	b.n	8008528 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800852a:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <vPortExitCritical+0x4c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3b01      	subs	r3, #1
 8008530:	4a08      	ldr	r2, [pc, #32]	; (8008554 <vPortExitCritical+0x4c>)
 8008532:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008534:	4b07      	ldr	r3, [pc, #28]	; (8008554 <vPortExitCritical+0x4c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d104      	bne.n	8008546 <vPortExitCritical+0x3e>
 800853c:	2300      	movs	r3, #0
 800853e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	20000020 	.word	0x20000020
	...

08008560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008560:	f3ef 8009 	mrs	r0, PSP
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <pxCurrentTCBConst>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	f01e 0f10 	tst.w	lr, #16
 8008570:	bf08      	it	eq
 8008572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	6010      	str	r0, [r2, #0]
 800857c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008584:	f380 8811 	msr	BASEPRI, r0
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f7ff fcac 	bl	8007eec <vTaskSwitchContext>
 8008594:	f04f 0000 	mov.w	r0, #0
 8008598:	f380 8811 	msr	BASEPRI, r0
 800859c:	bc09      	pop	{r0, r3}
 800859e:	6819      	ldr	r1, [r3, #0]
 80085a0:	6808      	ldr	r0, [r1, #0]
 80085a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a6:	f01e 0f10 	tst.w	lr, #16
 80085aa:	bf08      	it	eq
 80085ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085b0:	f380 8809 	msr	PSP, r0
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	f3af 8000 	nop.w

080085c0 <pxCurrentTCBConst>:
 80085c0:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop

080085c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085e0:	f7ff fbc8 	bl	8007d74 <xTaskIncrementTick>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085ea:	4b06      	ldr	r3, [pc, #24]	; (8008604 <xPortSysTickHandler+0x3c>)
 80085ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	2300      	movs	r3, #0
 80085f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	e000ed04 	.word	0xe000ed04

08008608 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008608:	b480      	push	{r7}
 800860a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800860c:	4b0b      	ldr	r3, [pc, #44]	; (800863c <vPortSetupTimerInterrupt+0x34>)
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008612:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <vPortSetupTimerInterrupt+0x38>)
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <vPortSetupTimerInterrupt+0x3c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a0a      	ldr	r2, [pc, #40]	; (8008648 <vPortSetupTimerInterrupt+0x40>)
 800861e:	fba2 2303 	umull	r2, r3, r2, r3
 8008622:	099b      	lsrs	r3, r3, #6
 8008624:	4a09      	ldr	r2, [pc, #36]	; (800864c <vPortSetupTimerInterrupt+0x44>)
 8008626:	3b01      	subs	r3, #1
 8008628:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800862a:	4b04      	ldr	r3, [pc, #16]	; (800863c <vPortSetupTimerInterrupt+0x34>)
 800862c:	2207      	movs	r2, #7
 800862e:	601a      	str	r2, [r3, #0]
}
 8008630:	bf00      	nop
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	e000e010 	.word	0xe000e010
 8008640:	e000e018 	.word	0xe000e018
 8008644:	20000014 	.word	0x20000014
 8008648:	10624dd3 	.word	0x10624dd3
 800864c:	e000e014 	.word	0xe000e014

08008650 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008650:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008660 <vPortEnableVFP+0x10>
 8008654:	6801      	ldr	r1, [r0, #0]
 8008656:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800865a:	6001      	str	r1, [r0, #0]
 800865c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800865e:	bf00      	nop
 8008660:	e000ed88 	.word	0xe000ed88

08008664 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800866a:	f3ef 8305 	mrs	r3, IPSR
 800866e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b0f      	cmp	r3, #15
 8008674:	d913      	bls.n	800869e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008676:	4a16      	ldr	r2, [pc, #88]	; (80086d0 <vPortValidateInterruptPriority+0x6c>)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4413      	add	r3, r2
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008680:	4b14      	ldr	r3, [pc, #80]	; (80086d4 <vPortValidateInterruptPriority+0x70>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	7afa      	ldrb	r2, [r7, #11]
 8008686:	429a      	cmp	r2, r3
 8008688:	d209      	bcs.n	800869e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	607b      	str	r3, [r7, #4]
 800869c:	e7fe      	b.n	800869c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800869e:	4b0e      	ldr	r3, [pc, #56]	; (80086d8 <vPortValidateInterruptPriority+0x74>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086a6:	4b0d      	ldr	r3, [pc, #52]	; (80086dc <vPortValidateInterruptPriority+0x78>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d909      	bls.n	80086c2 <vPortValidateInterruptPriority+0x5e>
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	e7fe      	b.n	80086c0 <vPortValidateInterruptPriority+0x5c>
	}
 80086c2:	bf00      	nop
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	e000e3f0 	.word	0xe000e3f0
 80086d4:	2000044c 	.word	0x2000044c
 80086d8:	e000ed0c 	.word	0xe000ed0c
 80086dc:	20000450 	.word	0x20000450

080086e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08a      	sub	sp, #40	; 0x28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086ec:	f7ff fa88 	bl	8007c00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086f0:	4b57      	ldr	r3, [pc, #348]	; (8008850 <pvPortMalloc+0x170>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086f8:	f000 f90c 	bl	8008914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086fc:	4b55      	ldr	r3, [pc, #340]	; (8008854 <pvPortMalloc+0x174>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4013      	ands	r3, r2
 8008704:	2b00      	cmp	r3, #0
 8008706:	f040 808c 	bne.w	8008822 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d01c      	beq.n	800874a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008710:	2208      	movs	r2, #8
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	2b00      	cmp	r3, #0
 8008720:	d013      	beq.n	800874a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f023 0307 	bic.w	r3, r3, #7
 8008728:	3308      	adds	r3, #8
 800872a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	2b00      	cmp	r3, #0
 8008734:	d009      	beq.n	800874a <pvPortMalloc+0x6a>
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	e7fe      	b.n	8008748 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d068      	beq.n	8008822 <pvPortMalloc+0x142>
 8008750:	4b41      	ldr	r3, [pc, #260]	; (8008858 <pvPortMalloc+0x178>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	429a      	cmp	r2, r3
 8008758:	d863      	bhi.n	8008822 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800875a:	4b40      	ldr	r3, [pc, #256]	; (800885c <pvPortMalloc+0x17c>)
 800875c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800875e:	4b3f      	ldr	r3, [pc, #252]	; (800885c <pvPortMalloc+0x17c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008764:	e004      	b.n	8008770 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	429a      	cmp	r2, r3
 8008778:	d903      	bls.n	8008782 <pvPortMalloc+0xa2>
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f1      	bne.n	8008766 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008782:	4b33      	ldr	r3, [pc, #204]	; (8008850 <pvPortMalloc+0x170>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008788:	429a      	cmp	r2, r3
 800878a:	d04a      	beq.n	8008822 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2208      	movs	r2, #8
 8008792:	4413      	add	r3, r2
 8008794:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	1ad2      	subs	r2, r2, r3
 80087a6:	2308      	movs	r3, #8
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d91e      	bls.n	80087ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4413      	add	r3, r2
 80087b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	f003 0307 	and.w	r3, r3, #7
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d009      	beq.n	80087d4 <pvPortMalloc+0xf4>
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	613b      	str	r3, [r7, #16]
 80087d2:	e7fe      	b.n	80087d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	1ad2      	subs	r2, r2, r3
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087e6:	69b8      	ldr	r0, [r7, #24]
 80087e8:	f000 f8f6 	bl	80089d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087ec:	4b1a      	ldr	r3, [pc, #104]	; (8008858 <pvPortMalloc+0x178>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	4a18      	ldr	r2, [pc, #96]	; (8008858 <pvPortMalloc+0x178>)
 80087f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087fa:	4b17      	ldr	r3, [pc, #92]	; (8008858 <pvPortMalloc+0x178>)
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	4b18      	ldr	r3, [pc, #96]	; (8008860 <pvPortMalloc+0x180>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d203      	bcs.n	800880e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <pvPortMalloc+0x178>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a15      	ldr	r2, [pc, #84]	; (8008860 <pvPortMalloc+0x180>)
 800880c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	4b10      	ldr	r3, [pc, #64]	; (8008854 <pvPortMalloc+0x174>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	431a      	orrs	r2, r3
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008822:	f7ff f9fb 	bl	8007c1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	2b00      	cmp	r3, #0
 800882e:	d009      	beq.n	8008844 <pvPortMalloc+0x164>
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	60fb      	str	r3, [r7, #12]
 8008842:	e7fe      	b.n	8008842 <pvPortMalloc+0x162>
	return pvReturn;
 8008844:	69fb      	ldr	r3, [r7, #28]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3728      	adds	r7, #40	; 0x28
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	2000405c 	.word	0x2000405c
 8008854:	20004068 	.word	0x20004068
 8008858:	20004060 	.word	0x20004060
 800885c:	20004054 	.word	0x20004054
 8008860:	20004064 	.word	0x20004064

08008864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d046      	beq.n	8008904 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008876:	2308      	movs	r3, #8
 8008878:	425b      	negs	r3, r3
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4413      	add	r3, r2
 800887e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	4b20      	ldr	r3, [pc, #128]	; (800890c <vPortFree+0xa8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4013      	ands	r3, r2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d109      	bne.n	80088a6 <vPortFree+0x42>
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e7fe      	b.n	80088a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <vPortFree+0x5e>
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	60bb      	str	r3, [r7, #8]
 80088c0:	e7fe      	b.n	80088c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	4b11      	ldr	r3, [pc, #68]	; (800890c <vPortFree+0xa8>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d019      	beq.n	8008904 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d115      	bne.n	8008904 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	4b0b      	ldr	r3, [pc, #44]	; (800890c <vPortFree+0xa8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	43db      	mvns	r3, r3
 80088e2:	401a      	ands	r2, r3
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088e8:	f7ff f98a 	bl	8007c00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <vPortFree+0xac>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4413      	add	r3, r2
 80088f6:	4a06      	ldr	r2, [pc, #24]	; (8008910 <vPortFree+0xac>)
 80088f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088fa:	6938      	ldr	r0, [r7, #16]
 80088fc:	f000 f86c 	bl	80089d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008900:	f7ff f98c 	bl	8007c1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008904:	bf00      	nop
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20004068 	.word	0x20004068
 8008910:	20004060 	.word	0x20004060

08008914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800891a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800891e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008920:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <prvHeapInit+0xac>)
 8008922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3307      	adds	r3, #7
 8008932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0307 	bic.w	r3, r3, #7
 800893a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	4a1f      	ldr	r2, [pc, #124]	; (80089c0 <prvHeapInit+0xac>)
 8008944:	4413      	add	r3, r2
 8008946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800894c:	4a1d      	ldr	r2, [pc, #116]	; (80089c4 <prvHeapInit+0xb0>)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008952:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <prvHeapInit+0xb0>)
 8008954:	2200      	movs	r2, #0
 8008956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	4413      	add	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008960:	2208      	movs	r2, #8
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1a9b      	subs	r3, r3, r2
 8008966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <prvHeapInit+0xb4>)
 8008974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008976:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <prvHeapInit+0xb4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2200      	movs	r2, #0
 800897c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800897e:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <prvHeapInit+0xb4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008994:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <prvHeapInit+0xb4>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	4a0a      	ldr	r2, [pc, #40]	; (80089cc <prvHeapInit+0xb8>)
 80089a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <prvHeapInit+0xbc>)
 80089aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089ac:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <prvHeapInit+0xc0>)
 80089ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089b2:	601a      	str	r2, [r3, #0]
}
 80089b4:	bf00      	nop
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	20000454 	.word	0x20000454
 80089c4:	20004054 	.word	0x20004054
 80089c8:	2000405c 	.word	0x2000405c
 80089cc:	20004064 	.word	0x20004064
 80089d0:	20004060 	.word	0x20004060
 80089d4:	20004068 	.word	0x20004068

080089d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089e0:	4b28      	ldr	r3, [pc, #160]	; (8008a84 <prvInsertBlockIntoFreeList+0xac>)
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	e002      	b.n	80089ec <prvInsertBlockIntoFreeList+0x14>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d8f7      	bhi.n	80089e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	4413      	add	r3, r2
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d108      	bne.n	8008a1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	441a      	add	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	441a      	add	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d118      	bne.n	8008a60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <prvInsertBlockIntoFreeList+0xb0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d00d      	beq.n	8008a56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	441a      	add	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	e008      	b.n	8008a68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a56:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <prvInsertBlockIntoFreeList+0xb0>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e003      	b.n	8008a68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d002      	beq.n	8008a76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a76:	bf00      	nop
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20004054 	.word	0x20004054
 8008a88:	2000405c 	.word	0x2000405c

08008a8c <__errno>:
 8008a8c:	4b01      	ldr	r3, [pc, #4]	; (8008a94 <__errno+0x8>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000024 	.word	0x20000024

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4e0d      	ldr	r6, [pc, #52]	; (8008ad0 <__libc_init_array+0x38>)
 8008a9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ad4 <__libc_init_array+0x3c>)
 8008a9e:	1ba4      	subs	r4, r4, r6
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	42a5      	cmp	r5, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	4e0b      	ldr	r6, [pc, #44]	; (8008ad8 <__libc_init_array+0x40>)
 8008aaa:	4c0c      	ldr	r4, [pc, #48]	; (8008adc <__libc_init_array+0x44>)
 8008aac:	f000 fc80 	bl	80093b0 <_init>
 8008ab0:	1ba4      	subs	r4, r4, r6
 8008ab2:	10a4      	asrs	r4, r4, #2
 8008ab4:	2500      	movs	r5, #0
 8008ab6:	42a5      	cmp	r5, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ac0:	4798      	blx	r3
 8008ac2:	3501      	adds	r5, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aca:	4798      	blx	r3
 8008acc:	3501      	adds	r5, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	0800963c 	.word	0x0800963c
 8008ad4:	0800963c 	.word	0x0800963c
 8008ad8:	0800963c 	.word	0x0800963c
 8008adc:	08009640 	.word	0x08009640

08008ae0 <__itoa>:
 8008ae0:	1e93      	subs	r3, r2, #2
 8008ae2:	2b22      	cmp	r3, #34	; 0x22
 8008ae4:	b510      	push	{r4, lr}
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	d904      	bls.n	8008af4 <__itoa+0x14>
 8008aea:	2300      	movs	r3, #0
 8008aec:	700b      	strb	r3, [r1, #0]
 8008aee:	461c      	mov	r4, r3
 8008af0:	4620      	mov	r0, r4
 8008af2:	bd10      	pop	{r4, pc}
 8008af4:	2a0a      	cmp	r2, #10
 8008af6:	d109      	bne.n	8008b0c <__itoa+0x2c>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	da07      	bge.n	8008b0c <__itoa+0x2c>
 8008afc:	232d      	movs	r3, #45	; 0x2d
 8008afe:	700b      	strb	r3, [r1, #0]
 8008b00:	4240      	negs	r0, r0
 8008b02:	2101      	movs	r1, #1
 8008b04:	4421      	add	r1, r4
 8008b06:	f000 f839 	bl	8008b7c <__utoa>
 8008b0a:	e7f1      	b.n	8008af0 <__itoa+0x10>
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	e7f9      	b.n	8008b04 <__itoa+0x24>

08008b10 <itoa>:
 8008b10:	f7ff bfe6 	b.w	8008ae0 <__itoa>

08008b14 <memcpy>:
 8008b14:	b510      	push	{r4, lr}
 8008b16:	1e43      	subs	r3, r0, #1
 8008b18:	440a      	add	r2, r1
 8008b1a:	4291      	cmp	r1, r2
 8008b1c:	d100      	bne.n	8008b20 <memcpy+0xc>
 8008b1e:	bd10      	pop	{r4, pc}
 8008b20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b28:	e7f7      	b.n	8008b1a <memcpy+0x6>

08008b2a <memset>:
 8008b2a:	4402      	add	r2, r0
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d100      	bne.n	8008b34 <memset+0xa>
 8008b32:	4770      	bx	lr
 8008b34:	f803 1b01 	strb.w	r1, [r3], #1
 8008b38:	e7f9      	b.n	8008b2e <memset+0x4>
	...

08008b3c <siprintf>:
 8008b3c:	b40e      	push	{r1, r2, r3}
 8008b3e:	b500      	push	{lr}
 8008b40:	b09c      	sub	sp, #112	; 0x70
 8008b42:	ab1d      	add	r3, sp, #116	; 0x74
 8008b44:	9002      	str	r0, [sp, #8]
 8008b46:	9006      	str	r0, [sp, #24]
 8008b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b4c:	4809      	ldr	r0, [pc, #36]	; (8008b74 <siprintf+0x38>)
 8008b4e:	9107      	str	r1, [sp, #28]
 8008b50:	9104      	str	r1, [sp, #16]
 8008b52:	4909      	ldr	r1, [pc, #36]	; (8008b78 <siprintf+0x3c>)
 8008b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b58:	9105      	str	r1, [sp, #20]
 8008b5a:	6800      	ldr	r0, [r0, #0]
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	a902      	add	r1, sp, #8
 8008b60:	f000 f8a4 	bl	8008cac <_svfiprintf_r>
 8008b64:	9b02      	ldr	r3, [sp, #8]
 8008b66:	2200      	movs	r2, #0
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	b01c      	add	sp, #112	; 0x70
 8008b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b70:	b003      	add	sp, #12
 8008b72:	4770      	bx	lr
 8008b74:	20000024 	.word	0x20000024
 8008b78:	ffff0208 	.word	0xffff0208

08008b7c <__utoa>:
 8008b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	; (8008bf4 <__utoa+0x78>)
 8008b80:	b08b      	sub	sp, #44	; 0x2c
 8008b82:	4605      	mov	r5, r0
 8008b84:	460c      	mov	r4, r1
 8008b86:	466e      	mov	r6, sp
 8008b88:	f103 0c20 	add.w	ip, r3, #32
 8008b8c:	6818      	ldr	r0, [r3, #0]
 8008b8e:	6859      	ldr	r1, [r3, #4]
 8008b90:	4637      	mov	r7, r6
 8008b92:	c703      	stmia	r7!, {r0, r1}
 8008b94:	3308      	adds	r3, #8
 8008b96:	4563      	cmp	r3, ip
 8008b98:	463e      	mov	r6, r7
 8008b9a:	d1f7      	bne.n	8008b8c <__utoa+0x10>
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	791b      	ldrb	r3, [r3, #4]
 8008ba0:	713b      	strb	r3, [r7, #4]
 8008ba2:	1e93      	subs	r3, r2, #2
 8008ba4:	2b22      	cmp	r3, #34	; 0x22
 8008ba6:	6038      	str	r0, [r7, #0]
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	d904      	bls.n	8008bb8 <__utoa+0x3c>
 8008bae:	7023      	strb	r3, [r4, #0]
 8008bb0:	461c      	mov	r4, r3
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	b00b      	add	sp, #44	; 0x2c
 8008bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb8:	1e66      	subs	r6, r4, #1
 8008bba:	fbb5 f0f2 	udiv	r0, r5, r2
 8008bbe:	af0a      	add	r7, sp, #40	; 0x28
 8008bc0:	fb02 5510 	mls	r5, r2, r0, r5
 8008bc4:	443d      	add	r5, r7
 8008bc6:	1c59      	adds	r1, r3, #1
 8008bc8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8008bcc:	f806 5f01 	strb.w	r5, [r6, #1]!
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	b968      	cbnz	r0, 8008bf0 <__utoa+0x74>
 8008bd4:	5460      	strb	r0, [r4, r1]
 8008bd6:	4423      	add	r3, r4
 8008bd8:	4622      	mov	r2, r4
 8008bda:	1b19      	subs	r1, r3, r4
 8008bdc:	1b10      	subs	r0, r2, r4
 8008bde:	4281      	cmp	r1, r0
 8008be0:	dde7      	ble.n	8008bb2 <__utoa+0x36>
 8008be2:	7811      	ldrb	r1, [r2, #0]
 8008be4:	7818      	ldrb	r0, [r3, #0]
 8008be6:	f802 0b01 	strb.w	r0, [r2], #1
 8008bea:	f803 1901 	strb.w	r1, [r3], #-1
 8008bee:	e7f4      	b.n	8008bda <__utoa+0x5e>
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	e7e2      	b.n	8008bba <__utoa+0x3e>
 8008bf4:	080095dc 	.word	0x080095dc

08008bf8 <__ssputs_r>:
 8008bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	688e      	ldr	r6, [r1, #8]
 8008bfe:	429e      	cmp	r6, r3
 8008c00:	4682      	mov	sl, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	4690      	mov	r8, r2
 8008c06:	4699      	mov	r9, r3
 8008c08:	d837      	bhi.n	8008c7a <__ssputs_r+0x82>
 8008c0a:	898a      	ldrh	r2, [r1, #12]
 8008c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c10:	d031      	beq.n	8008c76 <__ssputs_r+0x7e>
 8008c12:	6825      	ldr	r5, [r4, #0]
 8008c14:	6909      	ldr	r1, [r1, #16]
 8008c16:	1a6f      	subs	r7, r5, r1
 8008c18:	6965      	ldr	r5, [r4, #20]
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c20:	fb95 f5f3 	sdiv	r5, r5, r3
 8008c24:	f109 0301 	add.w	r3, r9, #1
 8008c28:	443b      	add	r3, r7
 8008c2a:	429d      	cmp	r5, r3
 8008c2c:	bf38      	it	cc
 8008c2e:	461d      	movcc	r5, r3
 8008c30:	0553      	lsls	r3, r2, #21
 8008c32:	d530      	bpl.n	8008c96 <__ssputs_r+0x9e>
 8008c34:	4629      	mov	r1, r5
 8008c36:	f000 fb21 	bl	800927c <_malloc_r>
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	b950      	cbnz	r0, 8008c54 <__ssputs_r+0x5c>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	f8ca 3000 	str.w	r3, [sl]
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c54:	463a      	mov	r2, r7
 8008c56:	6921      	ldr	r1, [r4, #16]
 8008c58:	f7ff ff5c 	bl	8008b14 <memcpy>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c66:	81a3      	strh	r3, [r4, #12]
 8008c68:	6126      	str	r6, [r4, #16]
 8008c6a:	6165      	str	r5, [r4, #20]
 8008c6c:	443e      	add	r6, r7
 8008c6e:	1bed      	subs	r5, r5, r7
 8008c70:	6026      	str	r6, [r4, #0]
 8008c72:	60a5      	str	r5, [r4, #8]
 8008c74:	464e      	mov	r6, r9
 8008c76:	454e      	cmp	r6, r9
 8008c78:	d900      	bls.n	8008c7c <__ssputs_r+0x84>
 8008c7a:	464e      	mov	r6, r9
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	4641      	mov	r1, r8
 8008c80:	6820      	ldr	r0, [r4, #0]
 8008c82:	f000 fa93 	bl	80091ac <memmove>
 8008c86:	68a3      	ldr	r3, [r4, #8]
 8008c88:	1b9b      	subs	r3, r3, r6
 8008c8a:	60a3      	str	r3, [r4, #8]
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	441e      	add	r6, r3
 8008c90:	6026      	str	r6, [r4, #0]
 8008c92:	2000      	movs	r0, #0
 8008c94:	e7dc      	b.n	8008c50 <__ssputs_r+0x58>
 8008c96:	462a      	mov	r2, r5
 8008c98:	f000 fb4a 	bl	8009330 <_realloc_r>
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d1e2      	bne.n	8008c68 <__ssputs_r+0x70>
 8008ca2:	6921      	ldr	r1, [r4, #16]
 8008ca4:	4650      	mov	r0, sl
 8008ca6:	f000 fa9b 	bl	80091e0 <_free_r>
 8008caa:	e7c8      	b.n	8008c3e <__ssputs_r+0x46>

08008cac <_svfiprintf_r>:
 8008cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb0:	461d      	mov	r5, r3
 8008cb2:	898b      	ldrh	r3, [r1, #12]
 8008cb4:	061f      	lsls	r7, r3, #24
 8008cb6:	b09d      	sub	sp, #116	; 0x74
 8008cb8:	4680      	mov	r8, r0
 8008cba:	460c      	mov	r4, r1
 8008cbc:	4616      	mov	r6, r2
 8008cbe:	d50f      	bpl.n	8008ce0 <_svfiprintf_r+0x34>
 8008cc0:	690b      	ldr	r3, [r1, #16]
 8008cc2:	b96b      	cbnz	r3, 8008ce0 <_svfiprintf_r+0x34>
 8008cc4:	2140      	movs	r1, #64	; 0x40
 8008cc6:	f000 fad9 	bl	800927c <_malloc_r>
 8008cca:	6020      	str	r0, [r4, #0]
 8008ccc:	6120      	str	r0, [r4, #16]
 8008cce:	b928      	cbnz	r0, 8008cdc <_svfiprintf_r+0x30>
 8008cd0:	230c      	movs	r3, #12
 8008cd2:	f8c8 3000 	str.w	r3, [r8]
 8008cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cda:	e0c8      	b.n	8008e6e <_svfiprintf_r+0x1c2>
 8008cdc:	2340      	movs	r3, #64	; 0x40
 8008cde:	6163      	str	r3, [r4, #20]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cea:	2330      	movs	r3, #48	; 0x30
 8008cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cf0:	9503      	str	r5, [sp, #12]
 8008cf2:	f04f 0b01 	mov.w	fp, #1
 8008cf6:	4637      	mov	r7, r6
 8008cf8:	463d      	mov	r5, r7
 8008cfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008cfe:	b10b      	cbz	r3, 8008d04 <_svfiprintf_r+0x58>
 8008d00:	2b25      	cmp	r3, #37	; 0x25
 8008d02:	d13e      	bne.n	8008d82 <_svfiprintf_r+0xd6>
 8008d04:	ebb7 0a06 	subs.w	sl, r7, r6
 8008d08:	d00b      	beq.n	8008d22 <_svfiprintf_r+0x76>
 8008d0a:	4653      	mov	r3, sl
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4640      	mov	r0, r8
 8008d12:	f7ff ff71 	bl	8008bf8 <__ssputs_r>
 8008d16:	3001      	adds	r0, #1
 8008d18:	f000 80a4 	beq.w	8008e64 <_svfiprintf_r+0x1b8>
 8008d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1e:	4453      	add	r3, sl
 8008d20:	9309      	str	r3, [sp, #36]	; 0x24
 8008d22:	783b      	ldrb	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 809d 	beq.w	8008e64 <_svfiprintf_r+0x1b8>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d34:	9304      	str	r3, [sp, #16]
 8008d36:	9307      	str	r3, [sp, #28]
 8008d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d3e:	462f      	mov	r7, r5
 8008d40:	2205      	movs	r2, #5
 8008d42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008d46:	4850      	ldr	r0, [pc, #320]	; (8008e88 <_svfiprintf_r+0x1dc>)
 8008d48:	f7f7 fa4a 	bl	80001e0 <memchr>
 8008d4c:	9b04      	ldr	r3, [sp, #16]
 8008d4e:	b9d0      	cbnz	r0, 8008d86 <_svfiprintf_r+0xda>
 8008d50:	06d9      	lsls	r1, r3, #27
 8008d52:	bf44      	itt	mi
 8008d54:	2220      	movmi	r2, #32
 8008d56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d5a:	071a      	lsls	r2, r3, #28
 8008d5c:	bf44      	itt	mi
 8008d5e:	222b      	movmi	r2, #43	; 0x2b
 8008d60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d64:	782a      	ldrb	r2, [r5, #0]
 8008d66:	2a2a      	cmp	r2, #42	; 0x2a
 8008d68:	d015      	beq.n	8008d96 <_svfiprintf_r+0xea>
 8008d6a:	9a07      	ldr	r2, [sp, #28]
 8008d6c:	462f      	mov	r7, r5
 8008d6e:	2000      	movs	r0, #0
 8008d70:	250a      	movs	r5, #10
 8008d72:	4639      	mov	r1, r7
 8008d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d78:	3b30      	subs	r3, #48	; 0x30
 8008d7a:	2b09      	cmp	r3, #9
 8008d7c:	d94d      	bls.n	8008e1a <_svfiprintf_r+0x16e>
 8008d7e:	b1b8      	cbz	r0, 8008db0 <_svfiprintf_r+0x104>
 8008d80:	e00f      	b.n	8008da2 <_svfiprintf_r+0xf6>
 8008d82:	462f      	mov	r7, r5
 8008d84:	e7b8      	b.n	8008cf8 <_svfiprintf_r+0x4c>
 8008d86:	4a40      	ldr	r2, [pc, #256]	; (8008e88 <_svfiprintf_r+0x1dc>)
 8008d88:	1a80      	subs	r0, r0, r2
 8008d8a:	fa0b f000 	lsl.w	r0, fp, r0
 8008d8e:	4318      	orrs	r0, r3
 8008d90:	9004      	str	r0, [sp, #16]
 8008d92:	463d      	mov	r5, r7
 8008d94:	e7d3      	b.n	8008d3e <_svfiprintf_r+0x92>
 8008d96:	9a03      	ldr	r2, [sp, #12]
 8008d98:	1d11      	adds	r1, r2, #4
 8008d9a:	6812      	ldr	r2, [r2, #0]
 8008d9c:	9103      	str	r1, [sp, #12]
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	db01      	blt.n	8008da6 <_svfiprintf_r+0xfa>
 8008da2:	9207      	str	r2, [sp, #28]
 8008da4:	e004      	b.n	8008db0 <_svfiprintf_r+0x104>
 8008da6:	4252      	negs	r2, r2
 8008da8:	f043 0302 	orr.w	r3, r3, #2
 8008dac:	9207      	str	r2, [sp, #28]
 8008dae:	9304      	str	r3, [sp, #16]
 8008db0:	783b      	ldrb	r3, [r7, #0]
 8008db2:	2b2e      	cmp	r3, #46	; 0x2e
 8008db4:	d10c      	bne.n	8008dd0 <_svfiprintf_r+0x124>
 8008db6:	787b      	ldrb	r3, [r7, #1]
 8008db8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dba:	d133      	bne.n	8008e24 <_svfiprintf_r+0x178>
 8008dbc:	9b03      	ldr	r3, [sp, #12]
 8008dbe:	1d1a      	adds	r2, r3, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	9203      	str	r2, [sp, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	bfb8      	it	lt
 8008dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dcc:	3702      	adds	r7, #2
 8008dce:	9305      	str	r3, [sp, #20]
 8008dd0:	4d2e      	ldr	r5, [pc, #184]	; (8008e8c <_svfiprintf_r+0x1e0>)
 8008dd2:	7839      	ldrb	r1, [r7, #0]
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 fa02 	bl	80001e0 <memchr>
 8008ddc:	b138      	cbz	r0, 8008dee <_svfiprintf_r+0x142>
 8008dde:	2340      	movs	r3, #64	; 0x40
 8008de0:	1b40      	subs	r0, r0, r5
 8008de2:	fa03 f000 	lsl.w	r0, r3, r0
 8008de6:	9b04      	ldr	r3, [sp, #16]
 8008de8:	4303      	orrs	r3, r0
 8008dea:	3701      	adds	r7, #1
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	7839      	ldrb	r1, [r7, #0]
 8008df0:	4827      	ldr	r0, [pc, #156]	; (8008e90 <_svfiprintf_r+0x1e4>)
 8008df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008df6:	2206      	movs	r2, #6
 8008df8:	1c7e      	adds	r6, r7, #1
 8008dfa:	f7f7 f9f1 	bl	80001e0 <memchr>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d038      	beq.n	8008e74 <_svfiprintf_r+0x1c8>
 8008e02:	4b24      	ldr	r3, [pc, #144]	; (8008e94 <_svfiprintf_r+0x1e8>)
 8008e04:	bb13      	cbnz	r3, 8008e4c <_svfiprintf_r+0x1a0>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	3307      	adds	r3, #7
 8008e0a:	f023 0307 	bic.w	r3, r3, #7
 8008e0e:	3308      	adds	r3, #8
 8008e10:	9303      	str	r3, [sp, #12]
 8008e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e14:	444b      	add	r3, r9
 8008e16:	9309      	str	r3, [sp, #36]	; 0x24
 8008e18:	e76d      	b.n	8008cf6 <_svfiprintf_r+0x4a>
 8008e1a:	fb05 3202 	mla	r2, r5, r2, r3
 8008e1e:	2001      	movs	r0, #1
 8008e20:	460f      	mov	r7, r1
 8008e22:	e7a6      	b.n	8008d72 <_svfiprintf_r+0xc6>
 8008e24:	2300      	movs	r3, #0
 8008e26:	3701      	adds	r7, #1
 8008e28:	9305      	str	r3, [sp, #20]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	250a      	movs	r5, #10
 8008e2e:	4638      	mov	r0, r7
 8008e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e34:	3a30      	subs	r2, #48	; 0x30
 8008e36:	2a09      	cmp	r2, #9
 8008e38:	d903      	bls.n	8008e42 <_svfiprintf_r+0x196>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0c8      	beq.n	8008dd0 <_svfiprintf_r+0x124>
 8008e3e:	9105      	str	r1, [sp, #20]
 8008e40:	e7c6      	b.n	8008dd0 <_svfiprintf_r+0x124>
 8008e42:	fb05 2101 	mla	r1, r5, r1, r2
 8008e46:	2301      	movs	r3, #1
 8008e48:	4607      	mov	r7, r0
 8008e4a:	e7f0      	b.n	8008e2e <_svfiprintf_r+0x182>
 8008e4c:	ab03      	add	r3, sp, #12
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	4622      	mov	r2, r4
 8008e52:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <_svfiprintf_r+0x1ec>)
 8008e54:	a904      	add	r1, sp, #16
 8008e56:	4640      	mov	r0, r8
 8008e58:	f3af 8000 	nop.w
 8008e5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e60:	4681      	mov	r9, r0
 8008e62:	d1d6      	bne.n	8008e12 <_svfiprintf_r+0x166>
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	065b      	lsls	r3, r3, #25
 8008e68:	f53f af35 	bmi.w	8008cd6 <_svfiprintf_r+0x2a>
 8008e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e6e:	b01d      	add	sp, #116	; 0x74
 8008e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e74:	ab03      	add	r3, sp, #12
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	4622      	mov	r2, r4
 8008e7a:	4b07      	ldr	r3, [pc, #28]	; (8008e98 <_svfiprintf_r+0x1ec>)
 8008e7c:	a904      	add	r1, sp, #16
 8008e7e:	4640      	mov	r0, r8
 8008e80:	f000 f882 	bl	8008f88 <_printf_i>
 8008e84:	e7ea      	b.n	8008e5c <_svfiprintf_r+0x1b0>
 8008e86:	bf00      	nop
 8008e88:	08009601 	.word	0x08009601
 8008e8c:	08009607 	.word	0x08009607
 8008e90:	0800960b 	.word	0x0800960b
 8008e94:	00000000 	.word	0x00000000
 8008e98:	08008bf9 	.word	0x08008bf9

08008e9c <_printf_common>:
 8008e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea0:	4691      	mov	r9, r2
 8008ea2:	461f      	mov	r7, r3
 8008ea4:	688a      	ldr	r2, [r1, #8]
 8008ea6:	690b      	ldr	r3, [r1, #16]
 8008ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008eac:	4293      	cmp	r3, r2
 8008eae:	bfb8      	it	lt
 8008eb0:	4613      	movlt	r3, r2
 8008eb2:	f8c9 3000 	str.w	r3, [r9]
 8008eb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008eba:	4606      	mov	r6, r0
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	b112      	cbz	r2, 8008ec6 <_printf_common+0x2a>
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	f8c9 3000 	str.w	r3, [r9]
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	0699      	lsls	r1, r3, #26
 8008eca:	bf42      	ittt	mi
 8008ecc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ed0:	3302      	addmi	r3, #2
 8008ed2:	f8c9 3000 	strmi.w	r3, [r9]
 8008ed6:	6825      	ldr	r5, [r4, #0]
 8008ed8:	f015 0506 	ands.w	r5, r5, #6
 8008edc:	d107      	bne.n	8008eee <_printf_common+0x52>
 8008ede:	f104 0a19 	add.w	sl, r4, #25
 8008ee2:	68e3      	ldr	r3, [r4, #12]
 8008ee4:	f8d9 2000 	ldr.w	r2, [r9]
 8008ee8:	1a9b      	subs	r3, r3, r2
 8008eea:	42ab      	cmp	r3, r5
 8008eec:	dc28      	bgt.n	8008f40 <_printf_common+0xa4>
 8008eee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	3300      	adds	r3, #0
 8008ef6:	bf18      	it	ne
 8008ef8:	2301      	movne	r3, #1
 8008efa:	0692      	lsls	r2, r2, #26
 8008efc:	d42d      	bmi.n	8008f5a <_printf_common+0xbe>
 8008efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f02:	4639      	mov	r1, r7
 8008f04:	4630      	mov	r0, r6
 8008f06:	47c0      	blx	r8
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d020      	beq.n	8008f4e <_printf_common+0xb2>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	68e5      	ldr	r5, [r4, #12]
 8008f10:	f8d9 2000 	ldr.w	r2, [r9]
 8008f14:	f003 0306 	and.w	r3, r3, #6
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	bf08      	it	eq
 8008f1c:	1aad      	subeq	r5, r5, r2
 8008f1e:	68a3      	ldr	r3, [r4, #8]
 8008f20:	6922      	ldr	r2, [r4, #16]
 8008f22:	bf0c      	ite	eq
 8008f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f28:	2500      	movne	r5, #0
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	bfc4      	itt	gt
 8008f2e:	1a9b      	subgt	r3, r3, r2
 8008f30:	18ed      	addgt	r5, r5, r3
 8008f32:	f04f 0900 	mov.w	r9, #0
 8008f36:	341a      	adds	r4, #26
 8008f38:	454d      	cmp	r5, r9
 8008f3a:	d11a      	bne.n	8008f72 <_printf_common+0xd6>
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	e008      	b.n	8008f52 <_printf_common+0xb6>
 8008f40:	2301      	movs	r3, #1
 8008f42:	4652      	mov	r2, sl
 8008f44:	4639      	mov	r1, r7
 8008f46:	4630      	mov	r0, r6
 8008f48:	47c0      	blx	r8
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d103      	bne.n	8008f56 <_printf_common+0xba>
 8008f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f56:	3501      	adds	r5, #1
 8008f58:	e7c3      	b.n	8008ee2 <_printf_common+0x46>
 8008f5a:	18e1      	adds	r1, r4, r3
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	2030      	movs	r0, #48	; 0x30
 8008f60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f64:	4422      	add	r2, r4
 8008f66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f6e:	3302      	adds	r3, #2
 8008f70:	e7c5      	b.n	8008efe <_printf_common+0x62>
 8008f72:	2301      	movs	r3, #1
 8008f74:	4622      	mov	r2, r4
 8008f76:	4639      	mov	r1, r7
 8008f78:	4630      	mov	r0, r6
 8008f7a:	47c0      	blx	r8
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d0e6      	beq.n	8008f4e <_printf_common+0xb2>
 8008f80:	f109 0901 	add.w	r9, r9, #1
 8008f84:	e7d8      	b.n	8008f38 <_printf_common+0x9c>
	...

08008f88 <_printf_i>:
 8008f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f90:	460c      	mov	r4, r1
 8008f92:	7e09      	ldrb	r1, [r1, #24]
 8008f94:	b085      	sub	sp, #20
 8008f96:	296e      	cmp	r1, #110	; 0x6e
 8008f98:	4617      	mov	r7, r2
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	4698      	mov	r8, r3
 8008f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fa0:	f000 80b3 	beq.w	800910a <_printf_i+0x182>
 8008fa4:	d822      	bhi.n	8008fec <_printf_i+0x64>
 8008fa6:	2963      	cmp	r1, #99	; 0x63
 8008fa8:	d036      	beq.n	8009018 <_printf_i+0x90>
 8008faa:	d80a      	bhi.n	8008fc2 <_printf_i+0x3a>
 8008fac:	2900      	cmp	r1, #0
 8008fae:	f000 80b9 	beq.w	8009124 <_printf_i+0x19c>
 8008fb2:	2958      	cmp	r1, #88	; 0x58
 8008fb4:	f000 8083 	beq.w	80090be <_printf_i+0x136>
 8008fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008fc0:	e032      	b.n	8009028 <_printf_i+0xa0>
 8008fc2:	2964      	cmp	r1, #100	; 0x64
 8008fc4:	d001      	beq.n	8008fca <_printf_i+0x42>
 8008fc6:	2969      	cmp	r1, #105	; 0x69
 8008fc8:	d1f6      	bne.n	8008fb8 <_printf_i+0x30>
 8008fca:	6820      	ldr	r0, [r4, #0]
 8008fcc:	6813      	ldr	r3, [r2, #0]
 8008fce:	0605      	lsls	r5, r0, #24
 8008fd0:	f103 0104 	add.w	r1, r3, #4
 8008fd4:	d52a      	bpl.n	800902c <_printf_i+0xa4>
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6011      	str	r1, [r2, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	da03      	bge.n	8008fe6 <_printf_i+0x5e>
 8008fde:	222d      	movs	r2, #45	; 0x2d
 8008fe0:	425b      	negs	r3, r3
 8008fe2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008fe6:	486f      	ldr	r0, [pc, #444]	; (80091a4 <_printf_i+0x21c>)
 8008fe8:	220a      	movs	r2, #10
 8008fea:	e039      	b.n	8009060 <_printf_i+0xd8>
 8008fec:	2973      	cmp	r1, #115	; 0x73
 8008fee:	f000 809d 	beq.w	800912c <_printf_i+0x1a4>
 8008ff2:	d808      	bhi.n	8009006 <_printf_i+0x7e>
 8008ff4:	296f      	cmp	r1, #111	; 0x6f
 8008ff6:	d020      	beq.n	800903a <_printf_i+0xb2>
 8008ff8:	2970      	cmp	r1, #112	; 0x70
 8008ffa:	d1dd      	bne.n	8008fb8 <_printf_i+0x30>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	f043 0320 	orr.w	r3, r3, #32
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	e003      	b.n	800900e <_printf_i+0x86>
 8009006:	2975      	cmp	r1, #117	; 0x75
 8009008:	d017      	beq.n	800903a <_printf_i+0xb2>
 800900a:	2978      	cmp	r1, #120	; 0x78
 800900c:	d1d4      	bne.n	8008fb8 <_printf_i+0x30>
 800900e:	2378      	movs	r3, #120	; 0x78
 8009010:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009014:	4864      	ldr	r0, [pc, #400]	; (80091a8 <_printf_i+0x220>)
 8009016:	e055      	b.n	80090c4 <_printf_i+0x13c>
 8009018:	6813      	ldr	r3, [r2, #0]
 800901a:	1d19      	adds	r1, r3, #4
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6011      	str	r1, [r2, #0]
 8009020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009028:	2301      	movs	r3, #1
 800902a:	e08c      	b.n	8009146 <_printf_i+0x1be>
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6011      	str	r1, [r2, #0]
 8009030:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009034:	bf18      	it	ne
 8009036:	b21b      	sxthne	r3, r3
 8009038:	e7cf      	b.n	8008fda <_printf_i+0x52>
 800903a:	6813      	ldr	r3, [r2, #0]
 800903c:	6825      	ldr	r5, [r4, #0]
 800903e:	1d18      	adds	r0, r3, #4
 8009040:	6010      	str	r0, [r2, #0]
 8009042:	0628      	lsls	r0, r5, #24
 8009044:	d501      	bpl.n	800904a <_printf_i+0xc2>
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	e002      	b.n	8009050 <_printf_i+0xc8>
 800904a:	0668      	lsls	r0, r5, #25
 800904c:	d5fb      	bpl.n	8009046 <_printf_i+0xbe>
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	4854      	ldr	r0, [pc, #336]	; (80091a4 <_printf_i+0x21c>)
 8009052:	296f      	cmp	r1, #111	; 0x6f
 8009054:	bf14      	ite	ne
 8009056:	220a      	movne	r2, #10
 8009058:	2208      	moveq	r2, #8
 800905a:	2100      	movs	r1, #0
 800905c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009060:	6865      	ldr	r5, [r4, #4]
 8009062:	60a5      	str	r5, [r4, #8]
 8009064:	2d00      	cmp	r5, #0
 8009066:	f2c0 8095 	blt.w	8009194 <_printf_i+0x20c>
 800906a:	6821      	ldr	r1, [r4, #0]
 800906c:	f021 0104 	bic.w	r1, r1, #4
 8009070:	6021      	str	r1, [r4, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d13d      	bne.n	80090f2 <_printf_i+0x16a>
 8009076:	2d00      	cmp	r5, #0
 8009078:	f040 808e 	bne.w	8009198 <_printf_i+0x210>
 800907c:	4665      	mov	r5, ip
 800907e:	2a08      	cmp	r2, #8
 8009080:	d10b      	bne.n	800909a <_printf_i+0x112>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	07db      	lsls	r3, r3, #31
 8009086:	d508      	bpl.n	800909a <_printf_i+0x112>
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	6862      	ldr	r2, [r4, #4]
 800908c:	429a      	cmp	r2, r3
 800908e:	bfde      	ittt	le
 8009090:	2330      	movle	r3, #48	; 0x30
 8009092:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009096:	f105 35ff 	addle.w	r5, r5, #4294967295
 800909a:	ebac 0305 	sub.w	r3, ip, r5
 800909e:	6123      	str	r3, [r4, #16]
 80090a0:	f8cd 8000 	str.w	r8, [sp]
 80090a4:	463b      	mov	r3, r7
 80090a6:	aa03      	add	r2, sp, #12
 80090a8:	4621      	mov	r1, r4
 80090aa:	4630      	mov	r0, r6
 80090ac:	f7ff fef6 	bl	8008e9c <_printf_common>
 80090b0:	3001      	adds	r0, #1
 80090b2:	d14d      	bne.n	8009150 <_printf_i+0x1c8>
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295
 80090b8:	b005      	add	sp, #20
 80090ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090be:	4839      	ldr	r0, [pc, #228]	; (80091a4 <_printf_i+0x21c>)
 80090c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80090c4:	6813      	ldr	r3, [r2, #0]
 80090c6:	6821      	ldr	r1, [r4, #0]
 80090c8:	1d1d      	adds	r5, r3, #4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6015      	str	r5, [r2, #0]
 80090ce:	060a      	lsls	r2, r1, #24
 80090d0:	d50b      	bpl.n	80090ea <_printf_i+0x162>
 80090d2:	07ca      	lsls	r2, r1, #31
 80090d4:	bf44      	itt	mi
 80090d6:	f041 0120 	orrmi.w	r1, r1, #32
 80090da:	6021      	strmi	r1, [r4, #0]
 80090dc:	b91b      	cbnz	r3, 80090e6 <_printf_i+0x15e>
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	f022 0220 	bic.w	r2, r2, #32
 80090e4:	6022      	str	r2, [r4, #0]
 80090e6:	2210      	movs	r2, #16
 80090e8:	e7b7      	b.n	800905a <_printf_i+0xd2>
 80090ea:	064d      	lsls	r5, r1, #25
 80090ec:	bf48      	it	mi
 80090ee:	b29b      	uxthmi	r3, r3
 80090f0:	e7ef      	b.n	80090d2 <_printf_i+0x14a>
 80090f2:	4665      	mov	r5, ip
 80090f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80090f8:	fb02 3311 	mls	r3, r2, r1, r3
 80090fc:	5cc3      	ldrb	r3, [r0, r3]
 80090fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009102:	460b      	mov	r3, r1
 8009104:	2900      	cmp	r1, #0
 8009106:	d1f5      	bne.n	80090f4 <_printf_i+0x16c>
 8009108:	e7b9      	b.n	800907e <_printf_i+0xf6>
 800910a:	6813      	ldr	r3, [r2, #0]
 800910c:	6825      	ldr	r5, [r4, #0]
 800910e:	6961      	ldr	r1, [r4, #20]
 8009110:	1d18      	adds	r0, r3, #4
 8009112:	6010      	str	r0, [r2, #0]
 8009114:	0628      	lsls	r0, r5, #24
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	d501      	bpl.n	800911e <_printf_i+0x196>
 800911a:	6019      	str	r1, [r3, #0]
 800911c:	e002      	b.n	8009124 <_printf_i+0x19c>
 800911e:	066a      	lsls	r2, r5, #25
 8009120:	d5fb      	bpl.n	800911a <_printf_i+0x192>
 8009122:	8019      	strh	r1, [r3, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	6123      	str	r3, [r4, #16]
 8009128:	4665      	mov	r5, ip
 800912a:	e7b9      	b.n	80090a0 <_printf_i+0x118>
 800912c:	6813      	ldr	r3, [r2, #0]
 800912e:	1d19      	adds	r1, r3, #4
 8009130:	6011      	str	r1, [r2, #0]
 8009132:	681d      	ldr	r5, [r3, #0]
 8009134:	6862      	ldr	r2, [r4, #4]
 8009136:	2100      	movs	r1, #0
 8009138:	4628      	mov	r0, r5
 800913a:	f7f7 f851 	bl	80001e0 <memchr>
 800913e:	b108      	cbz	r0, 8009144 <_printf_i+0x1bc>
 8009140:	1b40      	subs	r0, r0, r5
 8009142:	6060      	str	r0, [r4, #4]
 8009144:	6863      	ldr	r3, [r4, #4]
 8009146:	6123      	str	r3, [r4, #16]
 8009148:	2300      	movs	r3, #0
 800914a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800914e:	e7a7      	b.n	80090a0 <_printf_i+0x118>
 8009150:	6923      	ldr	r3, [r4, #16]
 8009152:	462a      	mov	r2, r5
 8009154:	4639      	mov	r1, r7
 8009156:	4630      	mov	r0, r6
 8009158:	47c0      	blx	r8
 800915a:	3001      	adds	r0, #1
 800915c:	d0aa      	beq.n	80090b4 <_printf_i+0x12c>
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	079b      	lsls	r3, r3, #30
 8009162:	d413      	bmi.n	800918c <_printf_i+0x204>
 8009164:	68e0      	ldr	r0, [r4, #12]
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	4298      	cmp	r0, r3
 800916a:	bfb8      	it	lt
 800916c:	4618      	movlt	r0, r3
 800916e:	e7a3      	b.n	80090b8 <_printf_i+0x130>
 8009170:	2301      	movs	r3, #1
 8009172:	464a      	mov	r2, r9
 8009174:	4639      	mov	r1, r7
 8009176:	4630      	mov	r0, r6
 8009178:	47c0      	blx	r8
 800917a:	3001      	adds	r0, #1
 800917c:	d09a      	beq.n	80090b4 <_printf_i+0x12c>
 800917e:	3501      	adds	r5, #1
 8009180:	68e3      	ldr	r3, [r4, #12]
 8009182:	9a03      	ldr	r2, [sp, #12]
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	42ab      	cmp	r3, r5
 8009188:	dcf2      	bgt.n	8009170 <_printf_i+0x1e8>
 800918a:	e7eb      	b.n	8009164 <_printf_i+0x1dc>
 800918c:	2500      	movs	r5, #0
 800918e:	f104 0919 	add.w	r9, r4, #25
 8009192:	e7f5      	b.n	8009180 <_printf_i+0x1f8>
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1ac      	bne.n	80090f2 <_printf_i+0x16a>
 8009198:	7803      	ldrb	r3, [r0, #0]
 800919a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800919e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091a2:	e76c      	b.n	800907e <_printf_i+0xf6>
 80091a4:	08009612 	.word	0x08009612
 80091a8:	08009623 	.word	0x08009623

080091ac <memmove>:
 80091ac:	4288      	cmp	r0, r1
 80091ae:	b510      	push	{r4, lr}
 80091b0:	eb01 0302 	add.w	r3, r1, r2
 80091b4:	d807      	bhi.n	80091c6 <memmove+0x1a>
 80091b6:	1e42      	subs	r2, r0, #1
 80091b8:	4299      	cmp	r1, r3
 80091ba:	d00a      	beq.n	80091d2 <memmove+0x26>
 80091bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80091c4:	e7f8      	b.n	80091b8 <memmove+0xc>
 80091c6:	4283      	cmp	r3, r0
 80091c8:	d9f5      	bls.n	80091b6 <memmove+0xa>
 80091ca:	1881      	adds	r1, r0, r2
 80091cc:	1ad2      	subs	r2, r2, r3
 80091ce:	42d3      	cmn	r3, r2
 80091d0:	d100      	bne.n	80091d4 <memmove+0x28>
 80091d2:	bd10      	pop	{r4, pc}
 80091d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80091dc:	e7f7      	b.n	80091ce <memmove+0x22>
	...

080091e0 <_free_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4605      	mov	r5, r0
 80091e4:	2900      	cmp	r1, #0
 80091e6:	d045      	beq.n	8009274 <_free_r+0x94>
 80091e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ec:	1f0c      	subs	r4, r1, #4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bfb8      	it	lt
 80091f2:	18e4      	addlt	r4, r4, r3
 80091f4:	f000 f8d2 	bl	800939c <__malloc_lock>
 80091f8:	4a1f      	ldr	r2, [pc, #124]	; (8009278 <_free_r+0x98>)
 80091fa:	6813      	ldr	r3, [r2, #0]
 80091fc:	4610      	mov	r0, r2
 80091fe:	b933      	cbnz	r3, 800920e <_free_r+0x2e>
 8009200:	6063      	str	r3, [r4, #4]
 8009202:	6014      	str	r4, [r2, #0]
 8009204:	4628      	mov	r0, r5
 8009206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800920a:	f000 b8c8 	b.w	800939e <__malloc_unlock>
 800920e:	42a3      	cmp	r3, r4
 8009210:	d90c      	bls.n	800922c <_free_r+0x4c>
 8009212:	6821      	ldr	r1, [r4, #0]
 8009214:	1862      	adds	r2, r4, r1
 8009216:	4293      	cmp	r3, r2
 8009218:	bf04      	itt	eq
 800921a:	681a      	ldreq	r2, [r3, #0]
 800921c:	685b      	ldreq	r3, [r3, #4]
 800921e:	6063      	str	r3, [r4, #4]
 8009220:	bf04      	itt	eq
 8009222:	1852      	addeq	r2, r2, r1
 8009224:	6022      	streq	r2, [r4, #0]
 8009226:	6004      	str	r4, [r0, #0]
 8009228:	e7ec      	b.n	8009204 <_free_r+0x24>
 800922a:	4613      	mov	r3, r2
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	b10a      	cbz	r2, 8009234 <_free_r+0x54>
 8009230:	42a2      	cmp	r2, r4
 8009232:	d9fa      	bls.n	800922a <_free_r+0x4a>
 8009234:	6819      	ldr	r1, [r3, #0]
 8009236:	1858      	adds	r0, r3, r1
 8009238:	42a0      	cmp	r0, r4
 800923a:	d10b      	bne.n	8009254 <_free_r+0x74>
 800923c:	6820      	ldr	r0, [r4, #0]
 800923e:	4401      	add	r1, r0
 8009240:	1858      	adds	r0, r3, r1
 8009242:	4282      	cmp	r2, r0
 8009244:	6019      	str	r1, [r3, #0]
 8009246:	d1dd      	bne.n	8009204 <_free_r+0x24>
 8009248:	6810      	ldr	r0, [r2, #0]
 800924a:	6852      	ldr	r2, [r2, #4]
 800924c:	605a      	str	r2, [r3, #4]
 800924e:	4401      	add	r1, r0
 8009250:	6019      	str	r1, [r3, #0]
 8009252:	e7d7      	b.n	8009204 <_free_r+0x24>
 8009254:	d902      	bls.n	800925c <_free_r+0x7c>
 8009256:	230c      	movs	r3, #12
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	e7d3      	b.n	8009204 <_free_r+0x24>
 800925c:	6820      	ldr	r0, [r4, #0]
 800925e:	1821      	adds	r1, r4, r0
 8009260:	428a      	cmp	r2, r1
 8009262:	bf04      	itt	eq
 8009264:	6811      	ldreq	r1, [r2, #0]
 8009266:	6852      	ldreq	r2, [r2, #4]
 8009268:	6062      	str	r2, [r4, #4]
 800926a:	bf04      	itt	eq
 800926c:	1809      	addeq	r1, r1, r0
 800926e:	6021      	streq	r1, [r4, #0]
 8009270:	605c      	str	r4, [r3, #4]
 8009272:	e7c7      	b.n	8009204 <_free_r+0x24>
 8009274:	bd38      	pop	{r3, r4, r5, pc}
 8009276:	bf00      	nop
 8009278:	2000406c 	.word	0x2000406c

0800927c <_malloc_r>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	1ccd      	adds	r5, r1, #3
 8009280:	f025 0503 	bic.w	r5, r5, #3
 8009284:	3508      	adds	r5, #8
 8009286:	2d0c      	cmp	r5, #12
 8009288:	bf38      	it	cc
 800928a:	250c      	movcc	r5, #12
 800928c:	2d00      	cmp	r5, #0
 800928e:	4606      	mov	r6, r0
 8009290:	db01      	blt.n	8009296 <_malloc_r+0x1a>
 8009292:	42a9      	cmp	r1, r5
 8009294:	d903      	bls.n	800929e <_malloc_r+0x22>
 8009296:	230c      	movs	r3, #12
 8009298:	6033      	str	r3, [r6, #0]
 800929a:	2000      	movs	r0, #0
 800929c:	bd70      	pop	{r4, r5, r6, pc}
 800929e:	f000 f87d 	bl	800939c <__malloc_lock>
 80092a2:	4a21      	ldr	r2, [pc, #132]	; (8009328 <_malloc_r+0xac>)
 80092a4:	6814      	ldr	r4, [r2, #0]
 80092a6:	4621      	mov	r1, r4
 80092a8:	b991      	cbnz	r1, 80092d0 <_malloc_r+0x54>
 80092aa:	4c20      	ldr	r4, [pc, #128]	; (800932c <_malloc_r+0xb0>)
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	b91b      	cbnz	r3, 80092b8 <_malloc_r+0x3c>
 80092b0:	4630      	mov	r0, r6
 80092b2:	f000 f863 	bl	800937c <_sbrk_r>
 80092b6:	6020      	str	r0, [r4, #0]
 80092b8:	4629      	mov	r1, r5
 80092ba:	4630      	mov	r0, r6
 80092bc:	f000 f85e 	bl	800937c <_sbrk_r>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d124      	bne.n	800930e <_malloc_r+0x92>
 80092c4:	230c      	movs	r3, #12
 80092c6:	6033      	str	r3, [r6, #0]
 80092c8:	4630      	mov	r0, r6
 80092ca:	f000 f868 	bl	800939e <__malloc_unlock>
 80092ce:	e7e4      	b.n	800929a <_malloc_r+0x1e>
 80092d0:	680b      	ldr	r3, [r1, #0]
 80092d2:	1b5b      	subs	r3, r3, r5
 80092d4:	d418      	bmi.n	8009308 <_malloc_r+0x8c>
 80092d6:	2b0b      	cmp	r3, #11
 80092d8:	d90f      	bls.n	80092fa <_malloc_r+0x7e>
 80092da:	600b      	str	r3, [r1, #0]
 80092dc:	50cd      	str	r5, [r1, r3]
 80092de:	18cc      	adds	r4, r1, r3
 80092e0:	4630      	mov	r0, r6
 80092e2:	f000 f85c 	bl	800939e <__malloc_unlock>
 80092e6:	f104 000b 	add.w	r0, r4, #11
 80092ea:	1d23      	adds	r3, r4, #4
 80092ec:	f020 0007 	bic.w	r0, r0, #7
 80092f0:	1ac3      	subs	r3, r0, r3
 80092f2:	d0d3      	beq.n	800929c <_malloc_r+0x20>
 80092f4:	425a      	negs	r2, r3
 80092f6:	50e2      	str	r2, [r4, r3]
 80092f8:	e7d0      	b.n	800929c <_malloc_r+0x20>
 80092fa:	428c      	cmp	r4, r1
 80092fc:	684b      	ldr	r3, [r1, #4]
 80092fe:	bf16      	itet	ne
 8009300:	6063      	strne	r3, [r4, #4]
 8009302:	6013      	streq	r3, [r2, #0]
 8009304:	460c      	movne	r4, r1
 8009306:	e7eb      	b.n	80092e0 <_malloc_r+0x64>
 8009308:	460c      	mov	r4, r1
 800930a:	6849      	ldr	r1, [r1, #4]
 800930c:	e7cc      	b.n	80092a8 <_malloc_r+0x2c>
 800930e:	1cc4      	adds	r4, r0, #3
 8009310:	f024 0403 	bic.w	r4, r4, #3
 8009314:	42a0      	cmp	r0, r4
 8009316:	d005      	beq.n	8009324 <_malloc_r+0xa8>
 8009318:	1a21      	subs	r1, r4, r0
 800931a:	4630      	mov	r0, r6
 800931c:	f000 f82e 	bl	800937c <_sbrk_r>
 8009320:	3001      	adds	r0, #1
 8009322:	d0cf      	beq.n	80092c4 <_malloc_r+0x48>
 8009324:	6025      	str	r5, [r4, #0]
 8009326:	e7db      	b.n	80092e0 <_malloc_r+0x64>
 8009328:	2000406c 	.word	0x2000406c
 800932c:	20004070 	.word	0x20004070

08009330 <_realloc_r>:
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009332:	4607      	mov	r7, r0
 8009334:	4614      	mov	r4, r2
 8009336:	460e      	mov	r6, r1
 8009338:	b921      	cbnz	r1, 8009344 <_realloc_r+0x14>
 800933a:	4611      	mov	r1, r2
 800933c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009340:	f7ff bf9c 	b.w	800927c <_malloc_r>
 8009344:	b922      	cbnz	r2, 8009350 <_realloc_r+0x20>
 8009346:	f7ff ff4b 	bl	80091e0 <_free_r>
 800934a:	4625      	mov	r5, r4
 800934c:	4628      	mov	r0, r5
 800934e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009350:	f000 f826 	bl	80093a0 <_malloc_usable_size_r>
 8009354:	42a0      	cmp	r0, r4
 8009356:	d20f      	bcs.n	8009378 <_realloc_r+0x48>
 8009358:	4621      	mov	r1, r4
 800935a:	4638      	mov	r0, r7
 800935c:	f7ff ff8e 	bl	800927c <_malloc_r>
 8009360:	4605      	mov	r5, r0
 8009362:	2800      	cmp	r0, #0
 8009364:	d0f2      	beq.n	800934c <_realloc_r+0x1c>
 8009366:	4631      	mov	r1, r6
 8009368:	4622      	mov	r2, r4
 800936a:	f7ff fbd3 	bl	8008b14 <memcpy>
 800936e:	4631      	mov	r1, r6
 8009370:	4638      	mov	r0, r7
 8009372:	f7ff ff35 	bl	80091e0 <_free_r>
 8009376:	e7e9      	b.n	800934c <_realloc_r+0x1c>
 8009378:	4635      	mov	r5, r6
 800937a:	e7e7      	b.n	800934c <_realloc_r+0x1c>

0800937c <_sbrk_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4c06      	ldr	r4, [pc, #24]	; (8009398 <_sbrk_r+0x1c>)
 8009380:	2300      	movs	r3, #0
 8009382:	4605      	mov	r5, r0
 8009384:	4608      	mov	r0, r1
 8009386:	6023      	str	r3, [r4, #0]
 8009388:	f7f9 f90a 	bl	80025a0 <_sbrk>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d102      	bne.n	8009396 <_sbrk_r+0x1a>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	b103      	cbz	r3, 8009396 <_sbrk_r+0x1a>
 8009394:	602b      	str	r3, [r5, #0]
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	200043fc 	.word	0x200043fc

0800939c <__malloc_lock>:
 800939c:	4770      	bx	lr

0800939e <__malloc_unlock>:
 800939e:	4770      	bx	lr

080093a0 <_malloc_usable_size_r>:
 80093a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093a4:	1f18      	subs	r0, r3, #4
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bfbc      	itt	lt
 80093aa:	580b      	ldrlt	r3, [r1, r0]
 80093ac:	18c0      	addlt	r0, r0, r3
 80093ae:	4770      	bx	lr

080093b0 <_init>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	bf00      	nop
 80093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b6:	bc08      	pop	{r3}
 80093b8:	469e      	mov	lr, r3
 80093ba:	4770      	bx	lr

080093bc <_fini>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	bf00      	nop
 80093c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c2:	bc08      	pop	{r3}
 80093c4:	469e      	mov	lr, r3
 80093c6:	4770      	bx	lr
