
CourseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08007edc  08007edc  00017edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008094  08008094  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800809c  0800809c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080080a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004210  20000074  08008118  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004284  08008118  00024284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011eee  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002942  00000000  00000000  00031f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  000348d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00035790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001845b  00000000  00000000  00036530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c74f  00000000  00000000  0004e98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000908d1  00000000  00000000  0005b0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb9ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  000eba28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ec4 	.word	0x08007ec4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007ec4 	.word	0x08007ec4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	4608      	mov	r0, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4603      	mov	r3, r0
 80005c4:	70fb      	strb	r3, [r7, #3]
 80005c6:	460b      	mov	r3, r1
 80005c8:	70bb      	strb	r3, [r7, #2]
 80005ca:	4613      	mov	r3, r2
 80005cc:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 80005ce:	2300      	movs	r3, #0
 80005d0:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 80005d2:	4a4f      	ldr	r2, [pc, #316]	; (8000710 <lcdInit+0x15c>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b4c      	ldr	r3, [pc, #304]	; (8000710 <lcdInit+0x15c>)
 80005e0:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 80005e2:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <lcdInit+0x15c>)
 80005e4:	78bb      	ldrb	r3, [r7, #2]
 80005e6:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 80005e8:	4a49      	ldr	r2, [pc, #292]	; (8000710 <lcdInit+0x15c>)
 80005ea:	787b      	ldrb	r3, [r7, #1]
 80005ec:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 80005ee:	4b48      	ldr	r3, [pc, #288]	; (8000710 <lcdInit+0x15c>)
 80005f0:	2208      	movs	r2, #8
 80005f2:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 80005f4:	4b47      	ldr	r3, [pc, #284]	; (8000714 <lcdInit+0x160>)
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80005fa:	4b46      	ldr	r3, [pc, #280]	; (8000714 <lcdInit+0x160>)
 80005fc:	781a      	ldrb	r2, [r3, #0]
 80005fe:	4b45      	ldr	r3, [pc, #276]	; (8000714 <lcdInit+0x160>)
 8000600:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8000602:	4b44      	ldr	r3, [pc, #272]	; (8000714 <lcdInit+0x160>)
 8000604:	2230      	movs	r2, #48	; 0x30
 8000606:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8000608:	2300      	movs	r3, #0
 800060a:	75fb      	strb	r3, [r7, #23]
 800060c:	e030      	b.n	8000670 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 800060e:	4b40      	ldr	r3, [pc, #256]	; (8000710 <lcdInit+0x15c>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <lcdInit+0x15c>)
 8000614:	799b      	ldrb	r3, [r3, #6]
 8000616:	b299      	uxth	r1, r3
 8000618:	2303      	movs	r3, #3
 800061a:	4a3e      	ldr	r2, [pc, #248]	; (8000714 <lcdInit+0x160>)
 800061c:	f002 f91e 	bl	800285c <HAL_I2C_Master_Transmit_DMA>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <lcdInit+0x76>
            return false;
 8000626:	2300      	movs	r3, #0
 8000628:	e06d      	b.n	8000706 <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 800062a:	f006 f9b5 	bl	8006998 <xTaskGetTickCount>
 800062e:	4603      	mov	r3, r0
 8000630:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000632:	e002      	b.n	800063a <lcdInit+0x86>
            vTaskDelay(1);
 8000634:	2001      	movs	r0, #1
 8000636:	f005 ff4b 	bl	80064d0 <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800063a:	4b35      	ldr	r3, [pc, #212]	; (8000710 <lcdInit+0x15c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f002 febd 	bl	80033be <HAL_I2C_GetState>
 8000644:	4603      	mov	r3, r0
 8000646:	2b20      	cmp	r3, #32
 8000648:	d1f4      	bne.n	8000634 <lcdInit+0x80>
        }

        if (i == 2) {
 800064a:	7dfb      	ldrb	r3, [r7, #23]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d106      	bne.n	800065e <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	2101      	movs	r1, #1
 8000656:	4618      	mov	r0, r3
 8000658:	f005 fec0 	bl	80063dc <vTaskDelayUntil>
 800065c:	e005      	b.n	800066a <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f005 feb9 	bl	80063dc <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	3301      	adds	r3, #1
 800066e:	75fb      	strb	r3, [r7, #23]
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	2b02      	cmp	r3, #2
 8000674:	d9cb      	bls.n	800060e <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <lcdInit+0x160>)
 8000678:	222c      	movs	r2, #44	; 0x2c
 800067a:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <lcdInit+0x160>)
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <lcdInit+0x160>)
 8000682:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <lcdInit+0x160>)
 8000686:	2228      	movs	r2, #40	; 0x28
 8000688:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <lcdInit+0x15c>)
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <lcdInit+0x15c>)
 8000690:	799b      	ldrb	r3, [r3, #6]
 8000692:	b299      	uxth	r1, r3
 8000694:	2303      	movs	r3, #3
 8000696:	4a1f      	ldr	r2, [pc, #124]	; (8000714 <lcdInit+0x160>)
 8000698:	f002 f8e0 	bl	800285c <HAL_I2C_Master_Transmit_DMA>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d004      	beq.n	80006ac <lcdInit+0xf8>
        return false;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e02f      	b.n	8000706 <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f005 ff12 	bl	80064d0 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <lcdInit+0x15c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fe84 	bl	80033be <HAL_I2C_GetState>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b20      	cmp	r3, #32
 80006ba:	d1f4      	bne.n	80006a6 <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <lcdInit+0x15c>)
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d904      	bls.n	80006d8 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 80006d8:	f107 030f 	add.w	r3, r7, #15
 80006dc:	4619      	mov	r1, r3
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f962 	bl	80009a8 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 80006e4:	2101      	movs	r1, #1
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 f816 	bl	8000718 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 80006ec:	2101      	movs	r1, #1
 80006ee:	2007      	movs	r0, #7
 80006f0:	f000 f812 	bl	8000718 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 80006f4:	2101      	movs	r1, #1
 80006f6:	2002      	movs	r0, #2
 80006f8:	f000 f80e 	bl	8000718 <lcdCommand>
    lcdCursorHome();
 80006fc:	2101      	movs	r1, #1
 80006fe:	2005      	movs	r0, #5
 8000700:	f000 f80a 	bl	8000718 <lcdCommand>

    return true;
 8000704:	2301      	movs	r3, #1
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200002ec 	.word	0x200002ec
 8000714:	200002e4 	.word	0x200002e4

08000718 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d06e      	beq.n	8000810 <lcdCommand+0xf8>
 8000732:	2b01      	cmp	r3, #1
 8000734:	f040 80b4 	bne.w	80008a0 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	3b01      	subs	r3, #1
 800073c:	2b07      	cmp	r3, #7
 800073e:	d864      	bhi.n	800080a <lcdCommand+0xf2>
 8000740:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <lcdCommand+0x30>)
 8000742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000746:	bf00      	nop
 8000748:	08000769 	.word	0x08000769
 800074c:	08000799 	.word	0x08000799
 8000750:	08000779 	.word	0x08000779
 8000754:	08000789 	.word	0x08000789
 8000758:	080007bd 	.word	0x080007bd
 800075c:	080007f1 	.word	0x080007f1
 8000760:	080007e1 	.word	0x080007e1
 8000764:	080007fb 	.word	0x080007fb
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8000768:	4b67      	ldr	r3, [pc, #412]	; (8000908 <lcdCommand+0x1f0>)
 800076a:	7a1b      	ldrb	r3, [r3, #8]
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b65      	ldr	r3, [pc, #404]	; (8000908 <lcdCommand+0x1f0>)
 8000774:	721a      	strb	r2, [r3, #8]
                    break;
 8000776:	e04a      	b.n	800080e <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8000778:	4b63      	ldr	r3, [pc, #396]	; (8000908 <lcdCommand+0x1f0>)
 800077a:	7a1b      	ldrb	r3, [r3, #8]
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b61      	ldr	r3, [pc, #388]	; (8000908 <lcdCommand+0x1f0>)
 8000784:	721a      	strb	r2, [r3, #8]
                    break;
 8000786:	e042      	b.n	800080e <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8000788:	4b5f      	ldr	r3, [pc, #380]	; (8000908 <lcdCommand+0x1f0>)
 800078a:	7a1b      	ldrb	r3, [r3, #8]
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b5d      	ldr	r3, [pc, #372]	; (8000908 <lcdCommand+0x1f0>)
 8000794:	721a      	strb	r2, [r3, #8]
                    break;
 8000796:	e03a      	b.n	800080e <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8000798:	2301      	movs	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 800079c:	f107 030f 	add.w	r3, r7, #15
 80007a0:	4619      	mov	r1, r3
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 f900 	bl	80009a8 <lcdWriteByte>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <lcdCommand+0x9a>
                        return false;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e0a6      	b.n	8000900 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 80007b2:	2002      	movs	r0, #2
 80007b4:	f005 fe8c 	bl	80064d0 <vTaskDelay>
                        return true;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e0a1      	b.n	8000900 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 80007bc:	2302      	movs	r3, #2
 80007be:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 80007c0:	f107 030f 	add.w	r3, r7, #15
 80007c4:	4619      	mov	r1, r3
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 f8ee 	bl	80009a8 <lcdWriteByte>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d101      	bne.n	80007d6 <lcdCommand+0xbe>
                        return false;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e094      	b.n	8000900 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 80007d6:	2002      	movs	r0, #2
 80007d8:	f005 fe7a 	bl	80064d0 <vTaskDelay>
                        return true;
 80007dc:	2301      	movs	r3, #1
 80007de:	e08f      	b.n	8000900 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 80007e0:	4b49      	ldr	r3, [pc, #292]	; (8000908 <lcdCommand+0x1f0>)
 80007e2:	7a5b      	ldrb	r3, [r3, #9]
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b47      	ldr	r3, [pc, #284]	; (8000908 <lcdCommand+0x1f0>)
 80007ec:	725a      	strb	r2, [r3, #9]
                    break;
 80007ee:	e00e      	b.n	800080e <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 80007f0:	4b45      	ldr	r3, [pc, #276]	; (8000908 <lcdCommand+0x1f0>)
 80007f2:	7a5a      	ldrb	r2, [r3, #9]
 80007f4:	4b44      	ldr	r3, [pc, #272]	; (8000908 <lcdCommand+0x1f0>)
 80007f6:	725a      	strb	r2, [r3, #9]
                    break;
 80007f8:	e009      	b.n	800080e <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 80007fa:	4b43      	ldr	r3, [pc, #268]	; (8000908 <lcdCommand+0x1f0>)
 80007fc:	7a5b      	ldrb	r3, [r3, #9]
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b40      	ldr	r3, [pc, #256]	; (8000908 <lcdCommand+0x1f0>)
 8000806:	725a      	strb	r2, [r3, #9]
                    break;
 8000808:	e001      	b.n	800080e <lcdCommand+0xf6>

                default:
                    return false;
 800080a:	2300      	movs	r3, #0
 800080c:	e078      	b.n	8000900 <lcdCommand+0x1e8>
            }

            break;
 800080e:	e049      	b.n	80008a4 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	3b01      	subs	r3, #1
 8000814:	2b07      	cmp	r3, #7
 8000816:	d840      	bhi.n	800089a <lcdCommand+0x182>
 8000818:	a201      	add	r2, pc, #4	; (adr r2, 8000820 <lcdCommand+0x108>)
 800081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081e:	bf00      	nop
 8000820:	08000841 	.word	0x08000841
 8000824:	0800089b 	.word	0x0800089b
 8000828:	08000851 	.word	0x08000851
 800082c:	08000861 	.word	0x08000861
 8000830:	0800089b 	.word	0x0800089b
 8000834:	08000881 	.word	0x08000881
 8000838:	08000871 	.word	0x08000871
 800083c:	0800088b 	.word	0x0800088b
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <lcdCommand+0x1f0>)
 8000842:	7a1b      	ldrb	r3, [r3, #8]
 8000844:	f023 0304 	bic.w	r3, r3, #4
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <lcdCommand+0x1f0>)
 800084c:	721a      	strb	r2, [r3, #8]
                    break;
 800084e:	e026      	b.n	800089e <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <lcdCommand+0x1f0>)
 8000852:	7a1b      	ldrb	r3, [r3, #8]
 8000854:	f023 0302 	bic.w	r3, r3, #2
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <lcdCommand+0x1f0>)
 800085c:	721a      	strb	r2, [r3, #8]
                    break;
 800085e:	e01e      	b.n	800089e <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <lcdCommand+0x1f0>)
 8000862:	7a1b      	ldrb	r3, [r3, #8]
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <lcdCommand+0x1f0>)
 800086c:	721a      	strb	r2, [r3, #8]
                    break;
 800086e:	e016      	b.n	800089e <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <lcdCommand+0x1f0>)
 8000872:	7a5b      	ldrb	r3, [r3, #9]
 8000874:	f023 0302 	bic.w	r3, r3, #2
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <lcdCommand+0x1f0>)
 800087c:	725a      	strb	r2, [r3, #9]
                    break;
 800087e:	e00e      	b.n	800089e <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <lcdCommand+0x1f0>)
 8000882:	7a5a      	ldrb	r2, [r3, #9]
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <lcdCommand+0x1f0>)
 8000886:	725a      	strb	r2, [r3, #9]
                    break;
 8000888:	e009      	b.n	800089e <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <lcdCommand+0x1f0>)
 800088c:	7a5b      	ldrb	r3, [r3, #9]
 800088e:	f023 0301 	bic.w	r3, r3, #1
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <lcdCommand+0x1f0>)
 8000896:	725a      	strb	r2, [r3, #9]
                    break;
 8000898:	e001      	b.n	800089e <lcdCommand+0x186>

                default:
                    return false;
 800089a:	2300      	movs	r3, #0
 800089c:	e030      	b.n	8000900 <lcdCommand+0x1e8>
            }

            break;
 800089e:	e001      	b.n	80008a4 <lcdCommand+0x18c>

        default:
            return false;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e02d      	b.n	8000900 <lcdCommand+0x1e8>
    }

    /* Now lets send the command */
    switch (command) {
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	2b07      	cmp	r3, #7
 80008aa:	d821      	bhi.n	80008f0 <lcdCommand+0x1d8>
 80008ac:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <lcdCommand+0x19c>)
 80008ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b2:	bf00      	nop
 80008b4:	080008d5 	.word	0x080008d5
 80008b8:	080008f1 	.word	0x080008f1
 80008bc:	080008d5 	.word	0x080008d5
 80008c0:	080008d5 	.word	0x080008d5
 80008c4:	080008f1 	.word	0x080008f1
 80008c8:	080008e3 	.word	0x080008e3
 80008cc:	080008e3 	.word	0x080008e3
 80008d0:	080008e3 	.word	0x080008e3
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <lcdCommand+0x1f0>)
 80008d6:	7a1b      	ldrb	r3, [r3, #8]
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	73fb      	strb	r3, [r7, #15]
            break;
 80008e0:	e007      	b.n	80008f2 <lcdCommand+0x1da>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <lcdCommand+0x1f0>)
 80008e4:	7a5b      	ldrb	r3, [r3, #9]
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	73fb      	strb	r3, [r7, #15]
            break;
 80008ee:	e000      	b.n	80008f2 <lcdCommand+0x1da>

        default:
            break;
 80008f0:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 80008f2:	f107 030f 	add.w	r3, r7, #15
 80008f6:	4619      	mov	r1, r3
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 f855 	bl	80009a8 <lcdWriteByte>
 80008fe:	4603      	mov	r3, r0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200002ec 	.word	0x200002ec

0800090c <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	460a      	mov	r2, r1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <lcdSetCursorPosition+0x50>)
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	79ba      	ldrb	r2, [r7, #6]
 8000922:	429a      	cmp	r2, r3
 8000924:	d303      	bcc.n	800092e <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <lcdSetCursorPosition+0x50>)
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 800092e:	79bb      	ldrb	r3, [r7, #6]
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <lcdSetCursorPosition+0x54>)
 8000932:	5cd2      	ldrb	r2, [r2, r3]
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	4413      	add	r3, r2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	b25b      	sxtb	r3, r3
 800093c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000940:	b25b      	sxtb	r3, r3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8000946:	f107 030f 	add.w	r3, r7, #15
 800094a:	4619      	mov	r1, r3
 800094c:	2000      	movs	r0, #0
 800094e:	f000 f82b 	bl	80009a8 <lcdWriteByte>
 8000952:	4603      	mov	r3, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200002ec 	.word	0x200002ec
 8000960:	0800803c 	.word	0x0800803c

08000964 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8000970:	2300      	movs	r3, #0
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	e00e      	b.n	8000994 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	4619      	mov	r1, r3
 800097e:	2001      	movs	r0, #1
 8000980:	f000 f812 	bl	80009a8 <lcdWriteByte>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <lcdPrintStr+0x2a>
            return false;
 800098a:	2300      	movs	r3, #0
 800098c:	e007      	b.n	800099e <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	3301      	adds	r3, #1
 8000992:	73fb      	strb	r3, [r7, #15]
 8000994:	7bfa      	ldrb	r2, [r7, #15]
 8000996:	78fb      	ldrb	r3, [r7, #3]
 8000998:	429a      	cmp	r2, r3
 800099a:	d3ec      	bcc.n	8000976 <lcdPrintStr+0x12>
        }
    }

    return true;
 800099c:	2301      	movs	r3, #1
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 80009b4:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <lcdWriteByte+0xdc>)
 80009b6:	79da      	ldrb	r2, [r3, #7]
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	f023 030f 	bic.w	r3, r3, #15
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <lcdWriteByte+0xe0>)
 80009d4:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80009d6:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <lcdWriteByte+0xe0>)
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <lcdWriteByte+0xe0>)
 80009dc:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 80009de:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <lcdWriteByte+0xdc>)
 80009e0:	79da      	ldrb	r2, [r3, #7]
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	b25a      	sxtb	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	f023 030f 	bic.w	r3, r3, #15
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <lcdWriteByte+0xe0>)
 80009fe:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <lcdWriteByte+0xdc>)
 8000a02:	79da      	ldrb	r2, [r3, #7]
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <lcdWriteByte+0xe0>)
 8000a1e:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <lcdWriteByte+0xe0>)
 8000a22:	78da      	ldrb	r2, [r3, #3]
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <lcdWriteByte+0xe0>)
 8000a26:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <lcdWriteByte+0xdc>)
 8000a2a:	79da      	ldrb	r2, [r3, #7]
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	b25a      	sxtb	r2, r3
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <lcdWriteByte+0xe0>)
 8000a44:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <lcdWriteByte+0xdc>)
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <lcdWriteByte+0xdc>)
 8000a4c:	799b      	ldrb	r3, [r3, #6]
 8000a4e:	b299      	uxth	r1, r3
 8000a50:	2306      	movs	r3, #6
 8000a52:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <lcdWriteByte+0xe0>)
 8000a54:	f001 ff02 	bl	800285c <HAL_I2C_Master_Transmit_DMA>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <lcdWriteByte+0xc0>
        return false;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e00b      	b.n	8000a7a <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f005 fd34 	bl	80064d0 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <lcdWriteByte+0xdc>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fca6 	bl	80033be <HAL_I2C_GetState>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b20      	cmp	r3, #32
 8000a76:	d1f4      	bne.n	8000a62 <lcdWriteByte+0xba>
    }

    return true;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200002ec 	.word	0x200002ec
 8000a88:	200002e4 	.word	0x200002e4

08000a8c <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}

int bcdToDec(uint8_t val)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	091b      	lsrs	r3, r3, #4
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	4413      	add	r3, r2
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <Get_Time>:

	HAL_I2C_Mem_Write(&hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time (void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	2307      	movs	r3, #7
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	463b      	mov	r3, r7
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	21d0      	movs	r1, #208	; 0xd0
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <Get_Time+0x98>)
 8000ad8:	f001 ffd6 	bl	8002a88 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000adc:	783b      	ldrb	r3, [r7, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ffd4 	bl	8000a8c <bcdToDec>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <Get_Time+0x9c>)
 8000aea:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000aec:	787b      	ldrb	r3, [r7, #1]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ffcc 	bl	8000a8c <bcdToDec>
 8000af4:	4603      	mov	r3, r0
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <Get_Time+0x9c>)
 8000afa:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000afc:	78bb      	ldrb	r3, [r7, #2]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ffc4 	bl	8000a8c <bcdToDec>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <Get_Time+0x9c>)
 8000b0a:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffbc 	bl	8000a8c <bcdToDec>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <Get_Time+0x9c>)
 8000b1a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000b1c:	793b      	ldrb	r3, [r7, #4]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ffb4 	bl	8000a8c <bcdToDec>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <Get_Time+0x9c>)
 8000b2a:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000b2c:	797b      	ldrb	r3, [r7, #5]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ffac 	bl	8000a8c <bcdToDec>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <Get_Time+0x9c>)
 8000b3a:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ffa4 	bl	8000a8c <bcdToDec>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <Get_Time+0x9c>)
 8000b4a:	719a      	strb	r2, [r3, #6]
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20004058 	.word	0x20004058
 8000b58:	200041cc 	.word	0x200041cc

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b0a4      	sub	sp, #144	; 0x90
 8000b60:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b62:	f000 fe25 	bl	80017b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b66:	f000 f88b 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f000 f9cf 	bl	8000f0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6e:	f000 f9a5 	bl	8000ebc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b72:	f000 f979 	bl	8000e68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b76:	f000 f8ed 	bl	8000d54 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b7a:	f000 f919 	bl	8000db0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000b7e:	f000 f945 	bl	8000e0c <MX_I2C3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b82:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <main+0xfc>)
 8000b84:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b88:	461d      	mov	r5, r3
 8000b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 f996 	bl	8005ece <osThreadCreate>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <main+0x100>)
 8000ba6:	601a      	str	r2, [r3, #0]

  /* definition and creation of printLcdTask */
  osThreadDef(printLcdTask, StartLcdTask, osPriorityNormal, 0, 128);
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <main+0x104>)
 8000baa:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  printLcdTaskHandle = osThreadCreate(osThread(printLcdTask), NULL);
 8000bbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 f983 	bl	8005ece <osThreadCreate>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <main+0x108>)
 8000bcc:	601a      	str	r2, [r3, #0]

  /* definition and creation of checkDataSensor */
  osThreadDef(checkDataSensor, StartDataSensor, osPriorityNormal, 0, 128);
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <main+0x10c>)
 8000bd0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkDataSensorHandle = osThreadCreate(osThread(checkDataSensor), NULL);
 8000be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f005 f970 	bl	8005ece <osThreadCreate>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <main+0x110>)
 8000bf2:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBtnTask */
  osThreadDef(myBtnTask, StartBtnTask, osPriorityNormal, 0, 128);
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <main+0x114>)
 8000bf6:	f107 0420 	add.w	r4, r7, #32
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myBtnTaskHandle = osThreadCreate(osThread(myBtnTask), NULL);
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 f95d 	bl	8005ece <osThreadCreate>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <main+0x118>)
 8000c18:	601a      	str	r2, [r3, #0]

  /* definition and creation of myPrintTime */
  osThreadDef(myPrintTime, StartTimeTask, osPriorityNormal, 0, 128);
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <main+0x11c>)
 8000c1c:	1d3c      	adds	r4, r7, #4
 8000c1e:	461d      	mov	r5, r3
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPrintTimeHandle = osThreadCreate(osThread(myPrintTime), NULL);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 f94c 	bl	8005ece <osThreadCreate>
 8000c36:	4602      	mov	r2, r0
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <main+0x120>)
 8000c3a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  vTaskSuspend(printLcdTaskHandle);
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <main+0x108>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f005 fc79 	bl	8006538 <vTaskSuspend>
  vTaskSuspend(myPrintTimeHandle);
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <main+0x120>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f005 fc74 	bl	8006538 <vTaskSuspend>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c50:	f005 f936 	bl	8005ec0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <main+0xf8>
 8000c56:	bf00      	nop
 8000c58:	08007ee8 	.word	0x08007ee8
 8000c5c:	20004054 	.word	0x20004054
 8000c60:	08007f14 	.word	0x08007f14
 8000c64:	200041b4 	.word	0x200041b4
 8000c68:	08007f40 	.word	0x08007f40
 8000c6c:	200041c8 	.word	0x200041c8
 8000c70:	08007f68 	.word	0x08007f68
 8000c74:	20004234 	.word	0x20004234
 8000c78:	08007f90 	.word	0x08007f90
 8000c7c:	20004278 	.word	0x20004278

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	; 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	2230      	movs	r2, #48	; 0x30
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f006 fd13 	bl	80076ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <SystemClock_Config+0xcc>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <SystemClock_Config+0xcc>)
 8000cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <SystemClock_Config+0xcc>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <SystemClock_Config+0xd0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <SystemClock_Config+0xd0>)
 8000cca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <SystemClock_Config+0xd0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	4618      	mov	r0, r3
 8000d08:	f004 f896 	bl	8004e38 <HAL_RCC_OscConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d12:	f000 fabb 	bl	800128c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d16:	230f      	movs	r3, #15
 8000d18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2102      	movs	r1, #2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f004 faf0 	bl	8005318 <HAL_RCC_ClockConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d3e:	f000 faa5 	bl	800128c <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3750      	adds	r7, #80	; 0x50
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <MX_I2C1_Init+0x54>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_I2C1_Init+0x58>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d92:	f001 fc2b 	bl	80025ec <HAL_I2C_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d9c:	f000 fa76 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2000410c 	.word	0x2000410c
 8000da8:	40005400 	.word	0x40005400
 8000dac:	000186a0 	.word	0x000186a0

08000db0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000db6:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <MX_I2C2_Init+0x54>)
 8000db8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dbc:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <MX_I2C2_Init+0x58>)
 8000dbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dee:	f001 fbfd 	bl	80025ec <HAL_I2C_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000df8:	f000 fa48 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20004160 	.word	0x20004160
 8000e04:	40005800 	.word	0x40005800
 8000e08:	000186a0 	.word	0x000186a0

08000e0c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_I2C3_Init+0x50>)
 8000e12:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <MX_I2C3_Init+0x54>)
 8000e14:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_I2C3_Init+0x50>)
 8000e18:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <MX_I2C3_Init+0x58>)
 8000e1a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_I2C3_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_I2C3_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_I2C3_Init+0x50>)
 8000e2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e2e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <MX_I2C3_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_I2C3_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <MX_I2C3_Init+0x50>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_I2C3_Init+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_I2C3_Init+0x50>)
 8000e4a:	f001 fbcf 	bl	80025ec <HAL_I2C_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e54:	f000 fa1a 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20004058 	.word	0x20004058
 8000e60:	40005c00 	.word	0x40005c00
 8000e64:	000186a0 	.word	0x000186a0

08000e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <MX_USART2_UART_Init+0x50>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	f004 fc2c 	bl	80056fc <HAL_UART_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f9ef 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20004238 	.word	0x20004238
 8000eb8:	40004400 	.word	0x40004400

08000ebc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <MX_DMA_Init+0x4c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <MX_DMA_Init+0x4c>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MX_DMA_Init+0x4c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2105      	movs	r1, #5
 8000ee2:	200b      	movs	r0, #11
 8000ee4:	f000 fdd3 	bl	8001a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ee8:	200b      	movs	r0, #11
 8000eea:	f000 fdec 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	200c      	movs	r0, #12
 8000ef4:	f000 fdcb 	bl	8001a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ef8:	200c      	movs	r0, #12
 8000efa:	f000 fde4 	bl	8001ac6 <HAL_NVIC_EnableIRQ>

}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2120      	movs	r1, #32
 8000f96:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f98:	f001 faf4 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <MX_GPIO_Init+0xd8>)
 8000fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_GPIO_Init+0xdc>)
 8000fb2:	f001 f94d 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000fce:	f001 f93f 	bl	8002250 <HAL_GPIO_Init>

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	10210000 	.word	0x10210000
 8000fe8:	40020800 	.word	0x40020800

08000fec <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <StartDefaultTask+0x1c>)
 8000ff8:	f001 fadd 	bl	80025b6 <HAL_GPIO_TogglePin>
    vTaskDelay(1000);
 8000ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001000:	f005 fa66 	bl	80064d0 <vTaskDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001004:	e7f6      	b.n	8000ff4 <StartDefaultTask+0x8>
 8001006:	bf00      	nop
 8001008:	40020000 	.word	0x40020000

0800100c <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void const * argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8001014:	2314      	movs	r3, #20
 8001016:	2204      	movs	r2, #4
 8001018:	2127      	movs	r1, #39	; 0x27
 800101a:	4815      	ldr	r0, [pc, #84]	; (8001070 <StartLcdTask+0x64>)
 800101c:	f7ff faca 	bl	80005b4 <lcdInit>
  lcdDisplayClear();
 8001020:	2101      	movs	r1, #1
 8001022:	2002      	movs	r0, #2
 8001024:	f7ff fb78 	bl	8000718 <lcdCommand>

  for(;;)
  {
	lcdSetCursorPosition(0, 0);
 8001028:	2100      	movs	r1, #0
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fc6e 	bl	800090c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Our sensor data:", 16);
 8001030:	2110      	movs	r1, #16
 8001032:	4810      	ldr	r0, [pc, #64]	; (8001074 <StartLcdTask+0x68>)
 8001034:	f7ff fc96 	bl	8000964 <lcdPrintStr>

	lcdSetCursorPosition(0, 1);
 8001038:	2101      	movs	r1, #1
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc66 	bl	800090c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) "Humidity = ", 11);
 8001040:	210b      	movs	r1, #11
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <StartLcdTask+0x6c>)
 8001044:	f7ff fc8e 	bl	8000964 <lcdPrintStr>

	lcdSetCursorPosition(0, 2);
 8001048:	2102      	movs	r1, #2
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff fc5e 	bl	800090c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) "Pressure = ", 11);
 8001050:	210b      	movs	r1, #11
 8001052:	480a      	ldr	r0, [pc, #40]	; (800107c <StartLcdTask+0x70>)
 8001054:	f7ff fc86 	bl	8000964 <lcdPrintStr>

	HAL_Delay(1000);
 8001058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800105c:	f000 fc1a 	bl	8001894 <HAL_Delay>
	lcdDisplayClear();
 8001060:	2101      	movs	r1, #1
 8001062:	2002      	movs	r0, #2
 8001064:	f7ff fb58 	bl	8000718 <lcdCommand>

    vTaskDelay(100);
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f005 fa31 	bl	80064d0 <vTaskDelay>
	lcdSetCursorPosition(0, 0);
 800106e:	e7db      	b.n	8001028 <StartLcdTask+0x1c>
 8001070:	2000410c 	.word	0x2000410c
 8001074:	08007fac 	.word	0x08007fac
 8001078:	08007fc0 	.word	0x08007fc0
 800107c:	08007fcc 	.word	0x08007fcc

08001080 <StartDataSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDataSensor */
void StartDataSensor(void const * argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDataSensor */

  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8001088:	2314      	movs	r3, #20
 800108a:	2204      	movs	r2, #4
 800108c:	2127      	movs	r1, #39	; 0x27
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <StartDataSensor+0x54>)
 8001090:	f7ff fa90 	bl	80005b4 <lcdInit>
  lcdDisplayClear();
 8001094:	2101      	movs	r1, #1
 8001096:	2002      	movs	r0, #2
 8001098:	f7ff fb3e 	bl	8000718 <lcdCommand>

  for(;;)
  {
	lcdSetCursorPosition(0, 0);
 800109c:	2100      	movs	r1, #0
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fc34 	bl	800090c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Have a nice day!", 16);
 80010a4:	2110      	movs	r1, #16
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <StartDataSensor+0x58>)
 80010a8:	f7ff fc5c 	bl	8000964 <lcdPrintStr>

	lcdSetCursorPosition(0, 1);
 80010ac:	2101      	movs	r1, #1
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff fc2c 	bl	800090c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Just a line...", 14);
 80010b4:	210e      	movs	r1, #14
 80010b6:	4809      	ldr	r0, [pc, #36]	; (80010dc <StartDataSensor+0x5c>)
 80010b8:	f7ff fc54 	bl	8000964 <lcdPrintStr>

	HAL_Delay(1000);
 80010bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c0:	f000 fbe8 	bl	8001894 <HAL_Delay>
	lcdDisplayClear();
 80010c4:	2101      	movs	r1, #1
 80010c6:	2002      	movs	r0, #2
 80010c8:	f7ff fb26 	bl	8000718 <lcdCommand>

    vTaskDelay(100);
 80010cc:	2064      	movs	r0, #100	; 0x64
 80010ce:	f005 f9ff 	bl	80064d0 <vTaskDelay>
	lcdSetCursorPosition(0, 0);
 80010d2:	e7e3      	b.n	800109c <StartDataSensor+0x1c>
 80010d4:	2000410c 	.word	0x2000410c
 80010d8:	08007fd8 	.word	0x08007fd8
 80010dc:	08007fec 	.word	0x08007fec

080010e0 <StartBtnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBtnTask */
void StartBtnTask(void const * argument)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBtnTask */
  /* Infinite loop */
  for(;;)
  {
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 80010e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ec:	4830      	ldr	r0, [pc, #192]	; (80011b0 <StartBtnTask+0xd0>)
 80010ee:	f001 fa31 	bl	8002554 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d156      	bne.n	80011a6 <StartBtnTask+0xc6>
    	vTaskDelay(30);
 80010f8:	201e      	movs	r0, #30
 80010fa:	f005 f9e9 	bl	80064d0 <vTaskDelay>

    	if(numTask == 3) {
 80010fe:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <StartBtnTask+0xd4>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d102      	bne.n	800110c <StartBtnTask+0x2c>
    		numTask = 0;
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <StartBtnTask+0xd4>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
    	}

    	if(numTask == 0) {
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <StartBtnTask+0xd4>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d115      	bne.n	8001140 <StartBtnTask+0x60>
    		vTaskSuspend(printLcdTaskHandle);
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <StartBtnTask+0xd8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f005 fa0d 	bl	8006538 <vTaskSuspend>
    		vTaskSuspend(myPrintTimeHandle);
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <StartBtnTask+0xdc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f005 fa08 	bl	8006538 <vTaskSuspend>
   		    vTaskResume(checkDataSensorHandle);
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <StartBtnTask+0xe0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f005 facf 	bl	80066d0 <vTaskResume>
   	    	numTask++;
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <StartBtnTask+0xd4>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <StartBtnTask+0xd4>)
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e032      	b.n	80011a6 <StartBtnTask+0xc6>
    	}
    	else if(numTask == 1) {
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <StartBtnTask+0xd4>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d115      	bne.n	8001174 <StartBtnTask+0x94>
    		vTaskSuspend(checkDataSensorHandle);
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <StartBtnTask+0xe0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f005 f9f3 	bl	8006538 <vTaskSuspend>
    		vTaskSuspend(myPrintTimeHandle);
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <StartBtnTask+0xdc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f005 f9ee 	bl	8006538 <vTaskSuspend>
    		vTaskResume(printLcdTaskHandle);
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <StartBtnTask+0xd8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f005 fab5 	bl	80066d0 <vTaskResume>
        	numTask++;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <StartBtnTask+0xd4>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <StartBtnTask+0xd4>)
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e018      	b.n	80011a6 <StartBtnTask+0xc6>
    	}
    	else if(numTask == 2) {
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <StartBtnTask+0xd4>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d114      	bne.n	80011a6 <StartBtnTask+0xc6>
    		vTaskSuspend(checkDataSensorHandle);
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <StartBtnTask+0xe0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f005 f9d9 	bl	8006538 <vTaskSuspend>
    		vTaskSuspend(printLcdTaskHandle);
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <StartBtnTask+0xd8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f005 f9d4 	bl	8006538 <vTaskSuspend>
    		vTaskResume(myPrintTimeHandle);
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <StartBtnTask+0xdc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f005 fa9b 	bl	80066d0 <vTaskResume>
        	numTask++;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <StartBtnTask+0xd4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <StartBtnTask+0xd4>)
 80011a4:	701a      	strb	r2, [r3, #0]
    	}
    }
    vTaskDelay(100);
 80011a6:	2064      	movs	r0, #100	; 0x64
 80011a8:	f005 f992 	bl	80064d0 <vTaskDelay>
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 80011ac:	e79c      	b.n	80010e8 <StartBtnTask+0x8>
 80011ae:	bf00      	nop
 80011b0:	40020800 	.word	0x40020800
 80011b4:	200002f8 	.word	0x200002f8
 80011b8:	200041b4 	.word	0x200041b4
 80011bc:	20004278 	.word	0x20004278
 80011c0:	200041c8 	.word	0x200041c8

080011c4 <StartTimeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimeTask */
void StartTimeTask(void const * argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeTask */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 80011cc:	2314      	movs	r3, #20
 80011ce:	2204      	movs	r2, #4
 80011d0:	2127      	movs	r1, #39	; 0x27
 80011d2:	4827      	ldr	r0, [pc, #156]	; (8001270 <StartTimeTask+0xac>)
 80011d4:	f7ff f9ee 	bl	80005b4 <lcdInit>
  lcdDisplayClear();
 80011d8:	2101      	movs	r1, #1
 80011da:	2002      	movs	r0, #2
 80011dc:	f7ff fa9c 	bl	8000718 <lcdCommand>

  for(;;)
  {
	Get_Time();
 80011e0:	f7ff fc6c 	bl	8000abc <Get_Time>

	lcdSetCursorPosition(0, 0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fb90 	bl	800090c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Your time: ", 11);
 80011ec:	210b      	movs	r1, #11
 80011ee:	4821      	ldr	r0, [pc, #132]	; (8001274 <StartTimeTask+0xb0>)
 80011f0:	f7ff fbb8 	bl	8000964 <lcdPrintStr>

	sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <StartTimeTask+0xb4>)
 80011f6:	789b      	ldrb	r3, [r3, #2]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <StartTimeTask+0xb4>)
 80011fc:	785b      	ldrb	r3, [r3, #1]
 80011fe:	4619      	mov	r1, r3
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <StartTimeTask+0xb4>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	460b      	mov	r3, r1
 8001208:	491c      	ldr	r1, [pc, #112]	; (800127c <StartTimeTask+0xb8>)
 800120a:	481d      	ldr	r0, [pc, #116]	; (8001280 <StartTimeTask+0xbc>)
 800120c:	f006 fa5e 	bl	80076cc <siprintf>
	lcdSetCursorPosition(11, 0);
 8001210:	2100      	movs	r1, #0
 8001212:	200b      	movs	r0, #11
 8001214:	f7ff fb7a 	bl	800090c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)buffer,8);
 8001218:	2108      	movs	r1, #8
 800121a:	4819      	ldr	r0, [pc, #100]	; (8001280 <StartTimeTask+0xbc>)
 800121c:	f7ff fba2 	bl	8000964 <lcdPrintStr>

	lcdSetCursorPosition(0, 2);
 8001220:	2102      	movs	r1, #2
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fb72 	bl	800090c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Date: ", 6);
 8001228:	2106      	movs	r1, #6
 800122a:	4816      	ldr	r0, [pc, #88]	; (8001284 <StartTimeTask+0xc0>)
 800122c:	f7ff fb9a 	bl	8000964 <lcdPrintStr>

	sprintf(buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <StartTimeTask+0xb4>)
 8001232:	791b      	ldrb	r3, [r3, #4]
 8001234:	461a      	mov	r2, r3
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <StartTimeTask+0xb4>)
 8001238:	795b      	ldrb	r3, [r3, #5]
 800123a:	4619      	mov	r1, r3
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <StartTimeTask+0xb4>)
 800123e:	799b      	ldrb	r3, [r3, #6]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	460b      	mov	r3, r1
 8001244:	4910      	ldr	r1, [pc, #64]	; (8001288 <StartTimeTask+0xc4>)
 8001246:	480e      	ldr	r0, [pc, #56]	; (8001280 <StartTimeTask+0xbc>)
 8001248:	f006 fa40 	bl	80076cc <siprintf>
	lcdSetCursorPosition(6, 2);
 800124c:	2102      	movs	r1, #2
 800124e:	2006      	movs	r0, #6
 8001250:	f7ff fb5c 	bl	800090c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)buffer, 10);
 8001254:	210a      	movs	r1, #10
 8001256:	480a      	ldr	r0, [pc, #40]	; (8001280 <StartTimeTask+0xbc>)
 8001258:	f7ff fb84 	bl	8000964 <lcdPrintStr>

	HAL_Delay(1000);
 800125c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001260:	f000 fb18 	bl	8001894 <HAL_Delay>
	lcdDisplayClear();
 8001264:	2101      	movs	r1, #1
 8001266:	2002      	movs	r0, #2
 8001268:	f7ff fa56 	bl	8000718 <lcdCommand>
	Get_Time();
 800126c:	e7b8      	b.n	80011e0 <StartTimeTask+0x1c>
 800126e:	bf00      	nop
 8001270:	2000410c 	.word	0x2000410c
 8001274:	08007ffc 	.word	0x08007ffc
 8001278:	200041cc 	.word	0x200041cc
 800127c:	08008008 	.word	0x08008008
 8001280:	200041b8 	.word	0x200041b8
 8001284:	08008018 	.word	0x08008018
 8001288:	08008020 	.word	0x08008020

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_MspInit+0x54>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_MspInit+0x54>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x54>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_MspInit+0x54>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_MspInit+0x54>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_MspInit+0x54>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	210f      	movs	r1, #15
 80012de:	f06f 0001 	mvn.w	r0, #1
 80012e2:	f000 fbd4 	bl	8001a8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a9a      	ldr	r2, [pc, #616]	; (800157c <HAL_I2C_MspInit+0x288>)
 8001312:	4293      	cmp	r3, r2
 8001314:	f040 8098 	bne.w	8001448 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
 800131c:	4b98      	ldr	r3, [pc, #608]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	4a97      	ldr	r2, [pc, #604]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	6313      	str	r3, [r2, #48]	; 0x30
 8001328:	4b95      	ldr	r3, [pc, #596]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	623b      	str	r3, [r7, #32]
 8001332:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001334:	23c0      	movs	r3, #192	; 0xc0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001338:	2312      	movs	r3, #18
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001344:	2304      	movs	r3, #4
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	488d      	ldr	r0, [pc, #564]	; (8001584 <HAL_I2C_MspInit+0x290>)
 8001350:	f000 ff7e 	bl	8002250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	4b89      	ldr	r3, [pc, #548]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a88      	ldr	r2, [pc, #544]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 800135e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b86      	ldr	r3, [pc, #536]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	69fb      	ldr	r3, [r7, #28]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001370:	4b85      	ldr	r3, [pc, #532]	; (8001588 <HAL_I2C_MspInit+0x294>)
 8001372:	4a86      	ldr	r2, [pc, #536]	; (800158c <HAL_I2C_MspInit+0x298>)
 8001374:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001376:	4b84      	ldr	r3, [pc, #528]	; (8001588 <HAL_I2C_MspInit+0x294>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137c:	4b82      	ldr	r3, [pc, #520]	; (8001588 <HAL_I2C_MspInit+0x294>)
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001382:	4b81      	ldr	r3, [pc, #516]	; (8001588 <HAL_I2C_MspInit+0x294>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001388:	4b7f      	ldr	r3, [pc, #508]	; (8001588 <HAL_I2C_MspInit+0x294>)
 800138a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001390:	4b7d      	ldr	r3, [pc, #500]	; (8001588 <HAL_I2C_MspInit+0x294>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001396:	4b7c      	ldr	r3, [pc, #496]	; (8001588 <HAL_I2C_MspInit+0x294>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800139c:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <HAL_I2C_MspInit+0x294>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013a2:	4b79      	ldr	r3, [pc, #484]	; (8001588 <HAL_I2C_MspInit+0x294>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a8:	4b77      	ldr	r3, [pc, #476]	; (8001588 <HAL_I2C_MspInit+0x294>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80013ae:	4876      	ldr	r0, [pc, #472]	; (8001588 <HAL_I2C_MspInit+0x294>)
 80013b0:	f000 fba4 	bl	8001afc <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80013ba:	f7ff ff67 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a71      	ldr	r2, [pc, #452]	; (8001588 <HAL_I2C_MspInit+0x294>)
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34
 80013c4:	4a70      	ldr	r2, [pc, #448]	; (8001588 <HAL_I2C_MspInit+0x294>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80013ca:	4b71      	ldr	r3, [pc, #452]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 80013cc:	4a71      	ldr	r2, [pc, #452]	; (8001594 <HAL_I2C_MspInit+0x2a0>)
 80013ce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80013d0:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 80013d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d8:	4b6d      	ldr	r3, [pc, #436]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013de:	4b6c      	ldr	r3, [pc, #432]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 80013e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ec:	4b68      	ldr	r3, [pc, #416]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80013f8:	4b65      	ldr	r3, [pc, #404]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013fe:	4b64      	ldr	r3, [pc, #400]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001404:	4b62      	ldr	r3, [pc, #392]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800140a:	4861      	ldr	r0, [pc, #388]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 800140c:	f000 fb76 	bl	8001afc <HAL_DMA_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001416:	f7ff ff39 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a5c      	ldr	r2, [pc, #368]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
 8001420:	4a5b      	ldr	r2, [pc, #364]	; (8001590 <HAL_I2C_MspInit+0x29c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2105      	movs	r1, #5
 800142a:	201f      	movs	r0, #31
 800142c:	f000 fb2f 	bl	8001a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001430:	201f      	movs	r0, #31
 8001432:	f000 fb48 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2105      	movs	r1, #5
 800143a:	2020      	movs	r0, #32
 800143c:	f000 fb27 	bl	8001a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001440:	2020      	movs	r0, #32
 8001442:	f000 fb40 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001446:	e094      	b.n	8001572 <HAL_I2C_MspInit+0x27e>
  else if(hi2c->Instance==I2C2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a52      	ldr	r2, [pc, #328]	; (8001598 <HAL_I2C_MspInit+0x2a4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d13e      	bne.n	80014d0 <HAL_I2C_MspInit+0x1dc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a49      	ldr	r2, [pc, #292]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800146e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001478:	2301      	movs	r3, #1
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001480:	2304      	movs	r3, #4
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	483e      	ldr	r0, [pc, #248]	; (8001584 <HAL_I2C_MspInit+0x290>)
 800148c:	f000 fee0 	bl	8002250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001496:	2312      	movs	r3, #18
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149a:	2301      	movs	r3, #1
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014a2:	2309      	movs	r3, #9
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	4835      	ldr	r0, [pc, #212]	; (8001584 <HAL_I2C_MspInit+0x290>)
 80014ae:	f000 fecf 	bl	8002250 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a31      	ldr	r2, [pc, #196]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 80014bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
}
 80014ce:	e050      	b.n	8001572 <HAL_I2C_MspInit+0x27e>
  else if(hi2c->Instance==I2C3)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a31      	ldr	r2, [pc, #196]	; (800159c <HAL_I2C_MspInit+0x2a8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d14b      	bne.n	8001572 <HAL_I2C_MspInit+0x27e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a20      	ldr	r2, [pc, #128]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001512:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001518:	2312      	movs	r3, #18
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001524:	2304      	movs	r3, #4
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	481c      	ldr	r0, [pc, #112]	; (80015a0 <HAL_I2C_MspInit+0x2ac>)
 8001530:	f000 fe8e 	bl	8002250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153a:	2312      	movs	r3, #18
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	2301      	movs	r3, #1
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001546:	2304      	movs	r3, #4
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4814      	ldr	r0, [pc, #80]	; (80015a4 <HAL_I2C_MspInit+0x2b0>)
 8001552:	f000 fe7d 	bl	8002250 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 8001560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_I2C_MspInit+0x28c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
}
 8001572:	bf00      	nop
 8001574:	3738      	adds	r7, #56	; 0x38
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005400 	.word	0x40005400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020400 	.word	0x40020400
 8001588:	200040ac 	.word	0x200040ac
 800158c:	40026028 	.word	0x40026028
 8001590:	200041d4 	.word	0x200041d4
 8001594:	40026010 	.word	0x40026010
 8001598:	40005800 	.word	0x40005800
 800159c:	40005c00 	.word	0x40005c00
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020000 	.word	0x40020000

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_UART_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12b      	bne.n	8001622 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_UART_MspInit+0x88>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_UART_MspInit+0x88>)
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_UART_MspInit+0x88>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_UART_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <HAL_UART_MspInit+0x88>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_UART_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001602:	230c      	movs	r3, #12
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001612:	2307      	movs	r3, #7
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <HAL_UART_MspInit+0x8c>)
 800161e:	f000 fe17 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40004400 	.word	0x40004400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001670:	f000 f8f0 	bl	8001854 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001674:	f005 fb8e 	bl	8006d94 <xTaskGetSchedulerState>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d001      	beq.n	8001682 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800167e:	f005 fdc3 	bl	8007208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <DMA1_Stream0_IRQHandler+0x10>)
 800168e:	f000 fb5d 	bl	8001d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200041d4 	.word	0x200041d4

0800169c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <DMA1_Stream1_IRQHandler+0x10>)
 80016a2:	f000 fb53 	bl	8001d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200040ac 	.word	0x200040ac

080016b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <I2C1_EV_IRQHandler+0x10>)
 80016b6:	f001 fc0d 	bl	8002ed4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000410c 	.word	0x2000410c

080016c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <I2C1_ER_IRQHandler+0x10>)
 80016ca:	f001 fd69 	bl	80031a0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000410c 	.word	0x2000410c

080016d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x50>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x16>
		heap_end = &end;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <_sbrk+0x50>)
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <_sbrk+0x54>)
 80016ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <_sbrk+0x50>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <_sbrk+0x50>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	466a      	mov	r2, sp
 80016fe:	4293      	cmp	r3, r2
 8001700:	d907      	bls.n	8001712 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001702:	f005 ffa5 	bl	8007650 <__errno>
 8001706:	4602      	mov	r2, r0
 8001708:	230c      	movs	r3, #12
 800170a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	e006      	b.n	8001720 <_sbrk+0x48>
	}

	heap_end += incr;
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <_sbrk+0x50>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a03      	ldr	r2, [pc, #12]	; (8001728 <_sbrk+0x50>)
 800171c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200002fc 	.word	0x200002fc
 800172c:	20004288 	.word	0x20004288

08001730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <SystemInit+0x28>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <SystemInit+0x28>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SystemInit+0x28>)
 8001746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174a:	609a      	str	r2, [r3, #8]
#endif
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001794 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001760:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001762:	e003      	b.n	800176c <LoopCopyDataInit>

08001764 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001766:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001768:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800176a:	3104      	adds	r1, #4

0800176c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800176c:	480b      	ldr	r0, [pc, #44]	; (800179c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001770:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001772:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001774:	d3f6      	bcc.n	8001764 <CopyDataInit>
  ldr  r2, =_sbss
 8001776:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001778:	e002      	b.n	8001780 <LoopFillZerobss>

0800177a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800177a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800177c:	f842 3b04 	str.w	r3, [r2], #4

08001780 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001782:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001784:	d3f9      	bcc.n	800177a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001786:	f7ff ffd3 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f005 ff67 	bl	800765c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178e:	f7ff f9e5 	bl	8000b5c <main>
  bx  lr    
 8001792:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001794:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001798:	080080a4 	.word	0x080080a4
  ldr  r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017a0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80017a4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80017a8:	20004284 	.word	0x20004284

080017ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC_IRQHandler>
	...

080017b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <HAL_Init+0x40>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_Init+0x40>)
 80017c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_Init+0x40>)
 80017d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 f94d 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017de:	200f      	movs	r0, #15
 80017e0:	f000 f808 	bl	80017f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e4:	f7ff fd5a 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_InitTick+0x54>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x58>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	fbb3 f3f1 	udiv	r3, r3, r1
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f965 	bl	8001ae2 <HAL_SYSTICK_Config>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e00e      	b.n	8001840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d80a      	bhi.n	800183e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001828:	2200      	movs	r2, #0
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f000 f92d 	bl	8001a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <HAL_InitTick+0x5c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e000      	b.n	8001840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000000 	.word	0x20000000
 800184c:	20000008 	.word	0x20000008
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_IncTick+0x20>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x24>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_IncTick+0x24>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008
 8001878:	2000427c 	.word	0x2000427c

0800187c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <HAL_GetTick+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	2000427c 	.word	0x2000427c

08001894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff ffee 	bl	800187c <HAL_GetTick>
 80018a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d005      	beq.n	80018ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_Delay+0x40>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ba:	bf00      	nop
 80018bc:	f7ff ffde 	bl	800187c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d8f7      	bhi.n	80018bc <HAL_Delay+0x28>
  {
  }
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000008 	.word	0x20000008

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d301      	bcc.n	8001a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00f      	b.n	8001a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <SysTick_Config+0x40>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a52:	210f      	movs	r1, #15
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f7ff ff8e 	bl	8001978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x40>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff29 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa0:	f7ff ff3e 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff ff8e 	bl	80019cc <NVIC_EncodePriority>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff5d 	bl	8001978 <__NVIC_SetPriority>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff31 	bl	800193c <__NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffa2 	bl	8001a34 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff feb8 	bl	800187c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e099      	b.n	8001c4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b38:	e00f      	b.n	8001b5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b3a:	f7ff fe9f 	bl	800187c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d908      	bls.n	8001b5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2203      	movs	r2, #3
 8001b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e078      	b.n	8001c4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1e8      	bne.n	8001b3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_DMA_Init+0x158>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d107      	bne.n	8001bc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f023 0307 	bic.w	r3, r3, #7
 8001bda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d117      	bne.n	8001c1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00e      	beq.n	8001c1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 faab 	bl	800215c <DMA_CheckFifoParam>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2240      	movs	r2, #64	; 0x40
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e016      	b.n	8001c4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fa62 	bl	80020f0 <DMA_CalcBaseAndBitshift>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	223f      	movs	r2, #63	; 0x3f
 8001c36:	409a      	lsls	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	f010803f 	.word	0xf010803f

08001c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_DMA_Start_IT+0x26>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e040      	b.n	8001d00 <HAL_DMA_Start_IT+0xa8>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d12f      	bne.n	8001cf2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2202      	movs	r2, #2
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f9f4 	bl	8002094 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	223f      	movs	r2, #63	; 0x3f
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0216 	orr.w	r2, r2, #22
 8001cc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0208 	orr.w	r2, r2, #8
 8001cde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e005      	b.n	8001cfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d004      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00c      	b.n	8001d40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2205      	movs	r2, #5
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d58:	4b92      	ldr	r3, [pc, #584]	; (8001fa4 <HAL_DMA_IRQHandler+0x258>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a92      	ldr	r2, [pc, #584]	; (8001fa8 <HAL_DMA_IRQHandler+0x25c>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0a9b      	lsrs	r3, r3, #10
 8001d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d76:	2208      	movs	r2, #8
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01a      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0204 	bic.w	r2, r2, #4
 8001d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2208      	movs	r2, #8
 8001da6:	409a      	lsls	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d012      	beq.n	8001dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	2201      	movs	r2, #1
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	f043 0202 	orr.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2204      	movs	r2, #4
 8001df4:	409a      	lsls	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d012      	beq.n	8001e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2204      	movs	r2, #4
 8001e12:	409a      	lsls	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f043 0204 	orr.w	r2, r3, #4
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	2210      	movs	r2, #16
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d043      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d03c      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e46:	2210      	movs	r2, #16
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d018      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d108      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d024      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
 8001e7a:	e01f      	b.n	8001ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01b      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
 8001e8c:	e016      	b.n	8001ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0208 	bic.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 808e 	beq.w	8001fea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 8086 	beq.w	8001fea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d136      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0216 	bic.w	r2, r2, #22
 8001f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <HAL_DMA_IRQHandler+0x1da>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0208 	bic.w	r2, r2, #8
 8001f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	223f      	movs	r2, #63	; 0x3f
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d07d      	beq.n	8002056 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	4798      	blx	r3
        }
        return;
 8001f62:	e078      	b.n	8002056 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01c      	beq.n	8001fac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d108      	bne.n	8001f92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d030      	beq.n	8001fea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
 8001f90:	e02b      	b.n	8001fea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d027      	beq.n	8001fea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
 8001fa2:	e022      	b.n	8001fea <HAL_DMA_IRQHandler+0x29e>
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0210 	bic.w	r2, r2, #16
 8001fc8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d032      	beq.n	8002058 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d022      	beq.n	8002044 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2205      	movs	r2, #5
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	3301      	adds	r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	429a      	cmp	r2, r3
 8002020:	d307      	bcc.n	8002032 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f2      	bne.n	8002016 <HAL_DMA_IRQHandler+0x2ca>
 8002030:	e000      	b.n	8002034 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002032:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e000      	b.n	8002058 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002056:	bf00      	nop
    }
  }
}
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop

08002060 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206e:	b2db      	uxtb	r3, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b40      	cmp	r3, #64	; 0x40
 80020c0:	d108      	bne.n	80020d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020d2:	e007      	b.n	80020e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	60da      	str	r2, [r3, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3b10      	subs	r3, #16
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <DMA_CalcBaseAndBitshift+0x64>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800210a:	4a13      	ldr	r2, [pc, #76]	; (8002158 <DMA_CalcBaseAndBitshift+0x68>)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d909      	bls.n	8002132 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	1d1a      	adds	r2, r3, #4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	659a      	str	r2, [r3, #88]	; 0x58
 8002130:	e007      	b.n	8002142 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	aaaaaaab 	.word	0xaaaaaaab
 8002158:	08008058 	.word	0x08008058

0800215c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d11f      	bne.n	80021b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d855      	bhi.n	8002228 <DMA_CheckFifoParam+0xcc>
 800217c:	a201      	add	r2, pc, #4	; (adr r2, 8002184 <DMA_CheckFifoParam+0x28>)
 800217e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002182:	bf00      	nop
 8002184:	08002195 	.word	0x08002195
 8002188:	080021a7 	.word	0x080021a7
 800218c:	08002195 	.word	0x08002195
 8002190:	08002229 	.word	0x08002229
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d045      	beq.n	800222c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a4:	e042      	b.n	800222c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ae:	d13f      	bne.n	8002230 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b4:	e03c      	b.n	8002230 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021be:	d121      	bne.n	8002204 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d836      	bhi.n	8002234 <DMA_CheckFifoParam+0xd8>
 80021c6:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <DMA_CheckFifoParam+0x70>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021e3 	.word	0x080021e3
 80021d4:	080021dd 	.word	0x080021dd
 80021d8:	080021f5 	.word	0x080021f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      break;
 80021e0:	e02f      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d024      	beq.n	8002238 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f2:	e021      	b.n	8002238 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021fc:	d11e      	bne.n	800223c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002202:	e01b      	b.n	800223c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d902      	bls.n	8002210 <DMA_CheckFifoParam+0xb4>
 800220a:	2b03      	cmp	r3, #3
 800220c:	d003      	beq.n	8002216 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800220e:	e018      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      break;
 8002214:	e015      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00e      	beq.n	8002240 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
      break;
 8002226:	e00b      	b.n	8002240 <DMA_CheckFifoParam+0xe4>
      break;
 8002228:	bf00      	nop
 800222a:	e00a      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      break;
 800222c:	bf00      	nop
 800222e:	e008      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      break;
 8002230:	bf00      	nop
 8002232:	e006      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      break;
 8002234:	bf00      	nop
 8002236:	e004      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      break;
 8002238:	bf00      	nop
 800223a:	e002      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      break;   
 800223c:	bf00      	nop
 800223e:	e000      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      break;
 8002240:	bf00      	nop
    }
  } 
  
  return status; 
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	e159      	b.n	8002520 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800226c:	2201      	movs	r2, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	429a      	cmp	r2, r3
 8002286:	f040 8148 	bne.w	800251a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d00b      	beq.n	80022aa <HAL_GPIO_Init+0x5a>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800229e:	2b11      	cmp	r3, #17
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b12      	cmp	r3, #18
 80022a8:	d130      	bne.n	800230c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 0201 	and.w	r2, r3, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0xfc>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b12      	cmp	r3, #18
 800234a:	d123      	bne.n	8002394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	08da      	lsrs	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3208      	adds	r2, #8
 8002354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	220f      	movs	r2, #15
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3208      	adds	r2, #8
 800238e:	69b9      	ldr	r1, [r7, #24]
 8002390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	2203      	movs	r2, #3
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0203 	and.w	r2, r3, #3
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a2 	beq.w	800251a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b56      	ldr	r3, [pc, #344]	; (8002534 <HAL_GPIO_Init+0x2e4>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	4a55      	ldr	r2, [pc, #340]	; (8002534 <HAL_GPIO_Init+0x2e4>)
 80023e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e4:	6453      	str	r3, [r2, #68]	; 0x44
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_GPIO_Init+0x2e4>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f2:	4a51      	ldr	r2, [pc, #324]	; (8002538 <HAL_GPIO_Init+0x2e8>)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3302      	adds	r3, #2
 80023fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a48      	ldr	r2, [pc, #288]	; (800253c <HAL_GPIO_Init+0x2ec>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d019      	beq.n	8002452 <HAL_GPIO_Init+0x202>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a47      	ldr	r2, [pc, #284]	; (8002540 <HAL_GPIO_Init+0x2f0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0x1fe>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a46      	ldr	r2, [pc, #280]	; (8002544 <HAL_GPIO_Init+0x2f4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00d      	beq.n	800244a <HAL_GPIO_Init+0x1fa>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_GPIO_Init+0x2f8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x1f6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a44      	ldr	r2, [pc, #272]	; (800254c <HAL_GPIO_Init+0x2fc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_GPIO_Init+0x1f2>
 800243e:	2304      	movs	r3, #4
 8002440:	e008      	b.n	8002454 <HAL_GPIO_Init+0x204>
 8002442:	2307      	movs	r3, #7
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x204>
 8002446:	2303      	movs	r3, #3
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x204>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x204>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x204>
 8002452:	2300      	movs	r3, #0
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f002 0203 	and.w	r2, r2, #3
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	4093      	lsls	r3, r2
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002464:	4934      	ldr	r1, [pc, #208]	; (8002538 <HAL_GPIO_Init+0x2e8>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002472:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_GPIO_Init+0x300>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002496:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <HAL_GPIO_Init+0x300>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800249c:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <HAL_GPIO_Init+0x300>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c0:	4a23      	ldr	r2, [pc, #140]	; (8002550 <HAL_GPIO_Init+0x300>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_GPIO_Init+0x300>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ea:	4a19      	ldr	r2, [pc, #100]	; (8002550 <HAL_GPIO_Init+0x300>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_GPIO_Init+0x300>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002514:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <HAL_GPIO_Init+0x300>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	f67f aea2 	bls.w	800226c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002528:	bf00      	nop
 800252a:	3724      	adds	r7, #36	; 0x24
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a0:	e003      	b.n	80025aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	041a      	lsls	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	619a      	str	r2, [r3, #24]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	401a      	ands	r2, r3
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d104      	bne.n	80025da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	041a      	lsls	r2, r3, #16
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e11f      	b.n	800283e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe fe6e 	bl	80012f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800263e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800264e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002650:	f003 f82c 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8002654:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a7b      	ldr	r2, [pc, #492]	; (8002848 <HAL_I2C_Init+0x25c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d807      	bhi.n	8002670 <HAL_I2C_Init+0x84>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a7a      	ldr	r2, [pc, #488]	; (800284c <HAL_I2C_Init+0x260>)
 8002664:	4293      	cmp	r3, r2
 8002666:	bf94      	ite	ls
 8002668:	2301      	movls	r3, #1
 800266a:	2300      	movhi	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e006      	b.n	800267e <HAL_I2C_Init+0x92>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a77      	ldr	r2, [pc, #476]	; (8002850 <HAL_I2C_Init+0x264>)
 8002674:	4293      	cmp	r3, r2
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0db      	b.n	800283e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4a72      	ldr	r2, [pc, #456]	; (8002854 <HAL_I2C_Init+0x268>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9b      	lsrs	r3, r3, #18
 8002690:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a64      	ldr	r2, [pc, #400]	; (8002848 <HAL_I2C_Init+0x25c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d802      	bhi.n	80026c0 <HAL_I2C_Init+0xd4>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3301      	adds	r3, #1
 80026be:	e009      	b.n	80026d4 <HAL_I2C_Init+0xe8>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	4a63      	ldr	r2, [pc, #396]	; (8002858 <HAL_I2C_Init+0x26c>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	3301      	adds	r3, #1
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	430b      	orrs	r3, r1
 80026da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4956      	ldr	r1, [pc, #344]	; (8002848 <HAL_I2C_Init+0x25c>)
 80026f0:	428b      	cmp	r3, r1
 80026f2:	d80d      	bhi.n	8002710 <HAL_I2C_Init+0x124>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e59      	subs	r1, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	bf38      	it	cc
 800270c:	2304      	movcc	r3, #4
 800270e:	e04f      	b.n	80027b0 <HAL_I2C_Init+0x1c4>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d111      	bne.n	800273c <HAL_I2C_Init+0x150>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e58      	subs	r0, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	440b      	add	r3, r1
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e012      	b.n	8002762 <HAL_I2C_Init+0x176>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e58      	subs	r0, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	0099      	lsls	r1, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Init+0x17e>
 8002766:	2301      	movs	r3, #1
 8002768:	e022      	b.n	80027b0 <HAL_I2C_Init+0x1c4>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10e      	bne.n	8002790 <HAL_I2C_Init+0x1a4>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1e58      	subs	r0, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	440b      	add	r3, r1
 8002780:	fbb0 f3f3 	udiv	r3, r0, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278e:	e00f      	b.n	80027b0 <HAL_I2C_Init+0x1c4>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1e58      	subs	r0, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	0099      	lsls	r1, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	6809      	ldr	r1, [r1, #0]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6911      	ldr	r1, [r2, #16]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68d2      	ldr	r2, [r2, #12]
 80027ea:	4311      	orrs	r1, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	000186a0 	.word	0x000186a0
 800284c:	001e847f 	.word	0x001e847f
 8002850:	003d08ff 	.word	0x003d08ff
 8002854:	431bde83 	.word	0x431bde83
 8002858:	10624dd3 	.word	0x10624dd3

0800285c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	460b      	mov	r3, r1
 800286a:	817b      	strh	r3, [r7, #10]
 800286c:	4613      	mov	r3, r2
 800286e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	f040 80f4 	bne.w	8002a6a <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002882:	4b7c      	ldr	r3, [pc, #496]	; (8002a74 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	4a7b      	ldr	r2, [pc, #492]	; (8002a78 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0a1a      	lsrs	r2, r3, #8
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009a      	lsls	r2, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	3b01      	subs	r3, #1
 80028a0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d116      	bne.n	80028d6 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0ca      	b.n	8002a6c <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d0db      	beq.n	800289c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_I2C_Master_Transmit_DMA+0x96>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e0bc      	b.n	8002a6c <HAL_I2C_Master_Transmit_DMA+0x210>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d007      	beq.n	8002918 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2221      	movs	r2, #33	; 0x21
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2210      	movs	r2, #16
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	893a      	ldrh	r2, [r7, #8]
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a49      	ldr	r2, [pc, #292]	; (8002a7c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8002958:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800295a:	897a      	ldrh	r2, [r7, #10]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d062      	beq.n	8002a2e <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296c:	4a44      	ldr	r2, [pc, #272]	; (8002a80 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002974:	4a43      	ldr	r2, [pc, #268]	; (8002a84 <HAL_I2C_Master_Transmit_DMA+0x228>)
 8002976:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	2200      	movs	r2, #0
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	2200      	movs	r2, #0
 8002986:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	2200      	movs	r2, #0
 800298e:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002994:	2200      	movs	r2, #0
 8002996:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	4619      	mov	r1, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3310      	adds	r3, #16
 80029a8:	461a      	mov	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	f7ff f953 	bl	8001c58 <HAL_DMA_Start_IT>
 80029b2:	4603      	mov	r3, r0
 80029b4:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d124      	bne.n	8002a06 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ca:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029da:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80029f2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	e02f      	b.n	8002a66 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e01e      	b.n	8002a6c <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002a64:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000000 	.word	0x20000000
 8002a78:	14f8b589 	.word	0x14f8b589
 8002a7c:	ffff0000 	.word	0xffff0000
 8002a80:	080047a9 	.word	0x080047a9
 8002a84:	08004953 	.word	0x08004953

08002a88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	4608      	mov	r0, r1
 8002a92:	4611      	mov	r1, r2
 8002a94:	461a      	mov	r2, r3
 8002a96:	4603      	mov	r3, r0
 8002a98:	817b      	strh	r3, [r7, #10]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	813b      	strh	r3, [r7, #8]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aa2:	f7fe feeb 	bl	800187c <HAL_GetTick>
 8002aa6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	f040 8208 	bne.w	8002ec6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	2319      	movs	r3, #25
 8002abc:	2201      	movs	r2, #1
 8002abe:	497b      	ldr	r1, [pc, #492]	; (8002cac <HAL_I2C_Mem_Read+0x224>)
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f002 f802 	bl	8004aca <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	e1fb      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_Mem_Read+0x56>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e1f4      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x440>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d007      	beq.n	8002b04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2222      	movs	r2, #34	; 0x22
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2240      	movs	r2, #64	; 0x40
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a5b      	ldr	r2, [pc, #364]	; (8002cb0 <HAL_I2C_Mem_Read+0x228>)
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b46:	88f8      	ldrh	r0, [r7, #6]
 8002b48:	893a      	ldrh	r2, [r7, #8]
 8002b4a:	8979      	ldrh	r1, [r7, #10]
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	4603      	mov	r3, r0
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f001 fd40 	bl	80045dc <I2C_RequestMemoryRead>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e1b0      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d113      	bne.n	8002b96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e184      	b.n	8002ea0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d11b      	bne.n	8002bd6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e164      	b.n	8002ea0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d11b      	bne.n	8002c16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	e144      	b.n	8002ea0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c2c:	e138      	b.n	8002ea0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	f200 80f1 	bhi.w	8002e1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d123      	bne.n	8002c88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f002 f857 	bl	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e139      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c86:	e10b      	b.n	8002ea0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d14e      	bne.n	8002d2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	2200      	movs	r2, #0
 8002c98:	4906      	ldr	r1, [pc, #24]	; (8002cb4 <HAL_I2C_Mem_Read+0x22c>)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f001 ff15 	bl	8004aca <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e10e      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x440>
 8002caa:	bf00      	nop
 8002cac:	00100002 	.word	0x00100002
 8002cb0:	ffff0000 	.word	0xffff0000
 8002cb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d2c:	e0b8      	b.n	8002ea0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	2200      	movs	r2, #0
 8002d36:	4966      	ldr	r1, [pc, #408]	; (8002ed0 <HAL_I2C_Mem_Read+0x448>)
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f001 fec6 	bl	8004aca <I2C_WaitOnFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0bf      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d90:	2200      	movs	r2, #0
 8002d92:	494f      	ldr	r1, [pc, #316]	; (8002ed0 <HAL_I2C_Mem_Read+0x448>)
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f001 fe98 	bl	8004aca <I2C_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e091      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e18:	e042      	b.n	8002ea0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f001 ff6a 	bl	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e04c      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d118      	bne.n	8002ea0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f aec2 	bne.w	8002c2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e000      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ec6:	2302      	movs	r3, #2
  }
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3728      	adds	r7, #40	; 0x28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	00010004 	.word	0x00010004

08002ed4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d003      	beq.n	8002f0c <HAL_I2C_EV_IRQHandler+0x38>
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b40      	cmp	r3, #64	; 0x40
 8002f08:	f040 80b6 	bne.w	8003078 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_I2C_EV_IRQHandler+0x6e>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f2c:	d003      	beq.n	8002f36 <HAL_I2C_EV_IRQHandler+0x62>
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f34:	d101      	bne.n	8002f3a <HAL_I2C_EV_IRQHandler+0x66>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_I2C_EV_IRQHandler+0x68>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	f000 8127 	beq.w	8003190 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00c      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x92>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	0a5b      	lsrs	r3, r3, #9
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f001 ff52 	bl	8004e02 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fd2a 	bl	80039b8 <I2C_Master_SB>
 8002f64:	e087      	b.n	8003076 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	08db      	lsrs	r3, r3, #3
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_I2C_EV_IRQHandler+0xb2>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	0a5b      	lsrs	r3, r3, #9
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fda0 	bl	8003ac4 <I2C_Master_ADD10>
 8002f84:	e077      	b.n	8003076 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_I2C_EV_IRQHandler+0xd2>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	0a5b      	lsrs	r3, r3, #9
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fdba 	bl	8003b18 <I2C_Master_ADDR>
 8002fa4:	e067      	b.n	8003076 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d030      	beq.n	8003014 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc0:	f000 80e8 	beq.w	8003194 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	09db      	lsrs	r3, r3, #7
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00f      	beq.n	8002ff0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	0a9b      	lsrs	r3, r3, #10
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d009      	beq.n	8002ff0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f9f6 	bl	80033da <I2C_MasterTransmit_TXE>
 8002fee:	e042      	b.n	8003076 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	089b      	lsrs	r3, r3, #2
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80cb 	beq.w	8003194 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	0a5b      	lsrs	r3, r3, #9
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80c4 	beq.w	8003194 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fa80 	bl	8003512 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003012:	e0bf      	b.n	8003194 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003022:	f000 80b7 	beq.w	8003194 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00f      	beq.n	8003052 <HAL_I2C_EV_IRQHandler+0x17e>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	0a9b      	lsrs	r3, r3, #10
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_I2C_EV_IRQHandler+0x17e>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fb48 	bl	80036e0 <I2C_MasterReceive_RXNE>
 8003050:	e011      	b.n	8003076 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 809a 	beq.w	8003194 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	0a5b      	lsrs	r3, r3, #9
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8093 	beq.w	8003194 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fbb8 	bl	80037e4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003074:	e08e      	b.n	8003194 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003076:	e08d      	b.n	8003194 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	e007      	b.n	800309a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d012      	beq.n	80030cc <HAL_I2C_EV_IRQHandler+0x1f8>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	0a5b      	lsrs	r3, r3, #9
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80030c2:	69b9      	ldr	r1, [r7, #24]
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 ff76 	bl	8003fb6 <I2C_Slave_ADDR>
 80030ca:	e066      	b.n	800319a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <HAL_I2C_EV_IRQHandler+0x218>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	0a5b      	lsrs	r3, r3, #9
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 ffab 	bl	8004040 <I2C_Slave_STOPF>
 80030ea:	e056      	b.n	800319a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030ec:	7bbb      	ldrb	r3, [r7, #14]
 80030ee:	2b21      	cmp	r3, #33	; 0x21
 80030f0:	d002      	beq.n	80030f8 <HAL_I2C_EV_IRQHandler+0x224>
 80030f2:	7bbb      	ldrb	r3, [r7, #14]
 80030f4:	2b29      	cmp	r3, #41	; 0x29
 80030f6:	d125      	bne.n	8003144 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	09db      	lsrs	r3, r3, #7
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00f      	beq.n	8003124 <HAL_I2C_EV_IRQHandler+0x250>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	0a9b      	lsrs	r3, r3, #10
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d009      	beq.n	8003124 <HAL_I2C_EV_IRQHandler+0x250>
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d103      	bne.n	8003124 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fe8c 	bl	8003e3a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003122:	e039      	b.n	8003198 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d033      	beq.n	8003198 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	0a5b      	lsrs	r3, r3, #9
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02d      	beq.n	8003198 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 feb9 	bl	8003eb4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003142:	e029      	b.n	8003198 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	099b      	lsrs	r3, r3, #6
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00f      	beq.n	8003170 <HAL_I2C_EV_IRQHandler+0x29c>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	0a9b      	lsrs	r3, r3, #10
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <HAL_I2C_EV_IRQHandler+0x29c>
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fec4 	bl	8003ef6 <I2C_SlaveReceive_RXNE>
 800316e:	e014      	b.n	800319a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00e      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x2c6>
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	0a5b      	lsrs	r3, r3, #9
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fef2 	bl	8003f72 <I2C_SlaveReceive_BTF>
 800318e:	e004      	b.n	800319a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003190:	bf00      	nop
 8003192:	e002      	b.n	800319a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003194:	bf00      	nop
 8003196:	e000      	b.n	800319a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003198:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <HAL_I2C_ER_IRQHandler+0x4e>
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	0a5b      	lsrs	r3, r3, #9
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00e      	beq.n	8003218 <HAL_I2C_ER_IRQHandler+0x78>
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003216:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	0a9b      	lsrs	r3, r3, #10
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d03f      	beq.n	80032a4 <HAL_I2C_ER_IRQHandler+0x104>
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d039      	beq.n	80032a4 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003230:	7efb      	ldrb	r3, [r7, #27]
 8003232:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003242:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800324a:	7ebb      	ldrb	r3, [r7, #26]
 800324c:	2b20      	cmp	r3, #32
 800324e:	d112      	bne.n	8003276 <HAL_I2C_ER_IRQHandler+0xd6>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10f      	bne.n	8003276 <HAL_I2C_ER_IRQHandler+0xd6>
 8003256:	7cfb      	ldrb	r3, [r7, #19]
 8003258:	2b21      	cmp	r3, #33	; 0x21
 800325a:	d008      	beq.n	800326e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	2b29      	cmp	r3, #41	; 0x29
 8003260:	d005      	beq.n	800326e <HAL_I2C_ER_IRQHandler+0xce>
 8003262:	7cfb      	ldrb	r3, [r7, #19]
 8003264:	2b28      	cmp	r3, #40	; 0x28
 8003266:	d106      	bne.n	8003276 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b21      	cmp	r3, #33	; 0x21
 800326c:	d103      	bne.n	8003276 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f001 f816 	bl	80042a0 <I2C_Slave_AF>
 8003274:	e016      	b.n	80032a4 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f043 0304 	orr.w	r3, r3, #4
 8003286:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003288:	7efb      	ldrb	r3, [r7, #27]
 800328a:	2b10      	cmp	r3, #16
 800328c:	d002      	beq.n	8003294 <HAL_I2C_ER_IRQHandler+0xf4>
 800328e:	7efb      	ldrb	r3, [r7, #27]
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d107      	bne.n	80032a4 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	0adb      	lsrs	r3, r3, #11
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <HAL_I2C_ER_IRQHandler+0x12e>
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f043 0308 	orr.w	r3, r3, #8
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80032cc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f001 f84d 	bl	8004380 <I2C_ITError>
  }
}
 80032e6:	bf00      	nop
 80032e8:	3728      	adds	r7, #40	; 0x28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	70fb      	strb	r3, [r7, #3]
 800334a:	4613      	mov	r3, r2
 800334c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d150      	bne.n	80034a2 <I2C_MasterTransmit_TXE+0xc8>
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b21      	cmp	r3, #33	; 0x21
 8003404:	d14d      	bne.n	80034a2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d01d      	beq.n	8003448 <I2C_MasterTransmit_TXE+0x6e>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b20      	cmp	r3, #32
 8003410:	d01a      	beq.n	8003448 <I2C_MasterTransmit_TXE+0x6e>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003418:	d016      	beq.n	8003448 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003428:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2211      	movs	r2, #17
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff54 	bl	80032ee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003446:	e060      	b.n	800350a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003456:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003466:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d107      	bne.n	8003492 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ff6f 	bl	800336e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003490:	e03b      	b.n	800350a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ff27 	bl	80032ee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034a0:	e033      	b.n	800350a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b21      	cmp	r3, #33	; 0x21
 80034a6:	d005      	beq.n	80034b4 <I2C_MasterTransmit_TXE+0xda>
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d12d      	bne.n	800350a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	2b22      	cmp	r3, #34	; 0x22
 80034b2:	d12a      	bne.n	800350a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d108      	bne.n	80034d0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80034ce:	e01c      	b.n	800350a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d103      	bne.n	80034e4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f898 	bl	8003612 <I2C_MemoryTransmit_TXE_BTF>
}
 80034e2:	e012      	b.n	800350a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003508:	e7ff      	b.n	800350a <I2C_MasterTransmit_TXE+0x130>
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b21      	cmp	r3, #33	; 0x21
 800352a:	d165      	bne.n	80035f8 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d012      	beq.n	800355c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800355a:	e056      	b.n	800360a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b08      	cmp	r3, #8
 8003560:	d01d      	beq.n	800359e <I2C_MasterTransmit_BTF+0x8c>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b20      	cmp	r3, #32
 8003566:	d01a      	beq.n	800359e <I2C_MasterTransmit_BTF+0x8c>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800356e:	d016      	beq.n	800359e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800357e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2211      	movs	r2, #17
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fea9 	bl	80032ee <HAL_I2C_MasterTxCpltCallback>
}
 800359c:	e035      	b.n	800360a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035ac:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035bc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d107      	bne.n	80035e8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff fec4 	bl	800336e <HAL_I2C_MemTxCpltCallback>
}
 80035e6:	e010      	b.n	800360a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fe7c 	bl	80032ee <HAL_I2C_MasterTxCpltCallback>
}
 80035f6:	e008      	b.n	800360a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d102      	bne.n	800360a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f804 	bl	8003612 <I2C_MemoryTransmit_TXE_BTF>
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11d      	bne.n	800365e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d10b      	bne.n	8003642 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362e:	b2da      	uxtb	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363a:	1c9a      	adds	r2, r3, #2
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003640:	e048      	b.n	80036d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003646:	b29b      	uxth	r3, r3
 8003648:	121b      	asrs	r3, r3, #8
 800364a:	b2da      	uxtb	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800365c:	e03a      	b.n	80036d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003662:	2b01      	cmp	r3, #1
 8003664:	d10b      	bne.n	800367e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366a:	b2da      	uxtb	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800367c:	e02a      	b.n	80036d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003682:	2b02      	cmp	r3, #2
 8003684:	d126      	bne.n	80036d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b22      	cmp	r3, #34	; 0x22
 8003690:	d108      	bne.n	80036a4 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036a0:	601a      	str	r2, [r3, #0]
}
 80036a2:	e017      	b.n	80036d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b21      	cmp	r3, #33	; 0x21
 80036ae:	d111      	bne.n	80036d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b22      	cmp	r3, #34	; 0x22
 80036f2:	d173      	bne.n	80037dc <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d920      	bls.n	8003744 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b03      	cmp	r3, #3
 8003730:	d154      	bne.n	80037dc <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003740:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003742:	e04b      	b.n	80037dc <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	2b02      	cmp	r3, #2
 800374a:	d047      	beq.n	80037dc <I2C_MasterReceive_RXNE+0xfc>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d002      	beq.n	8003758 <I2C_MasterReceive_RXNE+0x78>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d141      	bne.n	80037dc <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003766:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003776:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b40      	cmp	r3, #64	; 0x40
 80037b0:	d10a      	bne.n	80037c8 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fdde 	bl	8003382 <HAL_I2C_MemRxCpltCallback>
}
 80037c6:	e009      	b.n	80037dc <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2212      	movs	r2, #18
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fd93 	bl	8003302 <HAL_I2C_MasterRxCpltCallback>
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d11b      	bne.n	8003834 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003832:	e0bd      	b.n	80039b0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b03      	cmp	r3, #3
 800383c:	d129      	bne.n	8003892 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d00a      	beq.n	800386a <I2C_MasterReceive_BTF+0x86>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d007      	beq.n	800386a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003868:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003890:	e08e      	b.n	80039b0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d176      	bne.n	800398a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d002      	beq.n	80038a8 <I2C_MasterReceive_BTF+0xc4>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d108      	bne.n	80038ba <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e019      	b.n	80038ee <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d002      	beq.n	80038c6 <I2C_MasterReceive_BTF+0xe2>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d108      	bne.n	80038d8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e00a      	b.n	80038ee <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d007      	beq.n	80038ee <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003948:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d10a      	bne.n	8003974 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff fd08 	bl	8003382 <HAL_I2C_MemRxCpltCallback>
}
 8003972:	e01d      	b.n	80039b0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2212      	movs	r2, #18
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fcbd 	bl	8003302 <HAL_I2C_MasterRxCpltCallback>
}
 8003988:	e012      	b.n	80039b0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d117      	bne.n	80039fc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039e4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039e6:	e067      	b.n	8003ab8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]
}
 80039fa:	e05d      	b.n	8003ab8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a04:	d133      	bne.n	8003a6e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b21      	cmp	r3, #33	; 0x21
 8003a10:	d109      	bne.n	8003a26 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a22:	611a      	str	r2, [r3, #16]
 8003a24:	e008      	b.n	8003a38 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <I2C_Master_SB+0x92>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d108      	bne.n	8003a5c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d032      	beq.n	8003ab8 <I2C_Master_SB+0x100>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02d      	beq.n	8003ab8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a6a:	605a      	str	r2, [r3, #4]
}
 8003a6c:	e024      	b.n	8003ab8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10e      	bne.n	8003a94 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	11db      	asrs	r3, r3, #7
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f003 0306 	and.w	r3, r3, #6
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f063 030f 	orn	r3, r3, #15
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]
}
 8003a92:	e011      	b.n	8003ab8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10d      	bne.n	8003ab8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	11db      	asrs	r3, r3, #7
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 0306 	and.w	r3, r3, #6
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f063 030e 	orn	r3, r3, #14
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	611a      	str	r2, [r3, #16]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <I2C_Master_ADD10+0x24>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d011      	beq.n	8003b0c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d104      	bne.n	8003afc <I2C_Master_ADD10+0x38>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b091      	sub	sp, #68	; 0x44
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b22      	cmp	r3, #34	; 0x22
 8003b40:	f040 8169 	bne.w	8003e16 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10f      	bne.n	8003b6c <I2C_Master_ADDR+0x54>
 8003b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b50:	2b40      	cmp	r3, #64	; 0x40
 8003b52:	d10b      	bne.n	8003b6c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b54:	2300      	movs	r3, #0
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	633b      	str	r3, [r7, #48]	; 0x30
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	e160      	b.n	8003e2e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d11d      	bne.n	8003bb0 <I2C_Master_ADDR+0x98>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b7c:	d118      	bne.n	8003bb0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	651a      	str	r2, [r3, #80]	; 0x50
 8003bae:	e13e      	b.n	8003e2e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d113      	bne.n	8003be2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e115      	b.n	8003e0e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	f040 808a 	bne.w	8003d02 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bf4:	d137      	bne.n	8003c66 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c04:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c14:	d113      	bne.n	8003c3e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	e0e7      	b.n	8003e0e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e0d3      	b.n	8003e0e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d02e      	beq.n	8003cca <I2C_Master_ADDR+0x1b2>
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d02b      	beq.n	8003cca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c74:	2b12      	cmp	r3, #18
 8003c76:	d102      	bne.n	8003c7e <I2C_Master_ADDR+0x166>
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d125      	bne.n	8003cca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d00e      	beq.n	8003ca2 <I2C_Master_ADDR+0x18a>
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d00b      	beq.n	8003ca2 <I2C_Master_ADDR+0x18a>
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d008      	beq.n	8003ca2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e007      	b.n	8003cb2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	e0a1      	b.n	8003e0e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e085      	b.n	8003e0e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d14d      	bne.n	8003da8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d016      	beq.n	8003d40 <I2C_Master_ADDR+0x228>
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d013      	beq.n	8003d40 <I2C_Master_ADDR+0x228>
 8003d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d010      	beq.n	8003d40 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e007      	b.n	8003d50 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d4e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5e:	d117      	bne.n	8003d90 <I2C_Master_ADDR+0x278>
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d66:	d00b      	beq.n	8003d80 <I2C_Master_ADDR+0x268>
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d008      	beq.n	8003d80 <I2C_Master_ADDR+0x268>
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d005      	beq.n	8003d80 <I2C_Master_ADDR+0x268>
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d002      	beq.n	8003d80 <I2C_Master_ADDR+0x268>
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d107      	bne.n	8003d90 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d8e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	e032      	b.n	8003e0e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003db6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc6:	d117      	bne.n	8003df8 <I2C_Master_ADDR+0x2e0>
 8003dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dce:	d00b      	beq.n	8003de8 <I2C_Master_ADDR+0x2d0>
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d008      	beq.n	8003de8 <I2C_Master_ADDR+0x2d0>
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d005      	beq.n	8003de8 <I2C_Master_ADDR+0x2d0>
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d002      	beq.n	8003de8 <I2C_Master_ADDR+0x2d0>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d107      	bne.n	8003df8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003df6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e14:	e00b      	b.n	8003e2e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
}
 8003e2c:	e7ff      	b.n	8003e2e <I2C_Master_ADDR+0x316>
 8003e2e:	bf00      	nop
 8003e30:	3744      	adds	r7, #68	; 0x44
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d02b      	beq.n	8003eac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d114      	bne.n	8003eac <I2C_SlaveTransmit_TXE+0x72>
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b29      	cmp	r3, #41	; 0x29
 8003e86:	d111      	bne.n	8003eac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2221      	movs	r2, #33	; 0x21
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2228      	movs	r2, #40	; 0x28
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fa35 	bl	8003316 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d011      	beq.n	8003eea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	781a      	ldrb	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d02c      	beq.n	8003f6a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d114      	bne.n	8003f6a <I2C_SlaveReceive_RXNE+0x74>
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b2a      	cmp	r3, #42	; 0x2a
 8003f44:	d111      	bne.n	8003f6a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2222      	movs	r2, #34	; 0x22
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2228      	movs	r2, #40	; 0x28
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff f9e0 	bl	800332a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d012      	beq.n	8003faa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fd0:	2b28      	cmp	r3, #40	; 0x28
 8003fd2:	d127      	bne.n	8004024 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	09db      	lsrs	r3, r3, #7
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	81bb      	strh	r3, [r7, #12]
 8004006:	e002      	b.n	800400e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004016:	89ba      	ldrh	r2, [r7, #12]
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff f98e 	bl	800333e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004022:	e008      	b.n	8004036 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0202 	mvn.w	r2, #2
 800402c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800405e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409c:	d172      	bne.n	8004184 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2b22      	cmp	r3, #34	; 0x22
 80040a2:	d002      	beq.n	80040aa <I2C_Slave_STOPF+0x6a>
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b2a      	cmp	r3, #42	; 0x2a
 80040a8:	d135      	bne.n	8004116 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd ffbc 	bl	8002060 <HAL_DMA_GetState>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d049      	beq.n	8004182 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	4a69      	ldr	r2, [pc, #420]	; (8004298 <I2C_Slave_STOPF+0x258>)
 80040f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fd fe04 	bl	8001d08 <HAL_DMA_Abort_IT>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d03d      	beq.n	8004182 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004110:	4610      	mov	r0, r2
 8004112:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004114:	e035      	b.n	8004182 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	b29a      	uxth	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f043 0204 	orr.w	r2, r3, #4
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004148:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd ff86 	bl	8002060 <HAL_DMA_GetState>
 8004154:	4603      	mov	r3, r0
 8004156:	2b01      	cmp	r3, #1
 8004158:	d014      	beq.n	8004184 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415e:	4a4e      	ldr	r2, [pc, #312]	; (8004298 <I2C_Slave_STOPF+0x258>)
 8004160:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	4618      	mov	r0, r3
 8004168:	f7fd fdce 	bl	8001d08 <HAL_DMA_Abort_IT>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800417c:	4610      	mov	r0, r2
 800417e:	4798      	blx	r3
 8004180:	e000      	b.n	8004184 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004182:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d03e      	beq.n	800420c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b04      	cmp	r3, #4
 800419a:	d112      	bne.n	80041c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d112      	bne.n	80041f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f043 0204 	orr.w	r2, r3, #4
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8b3 	bl	8004380 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800421a:	e039      	b.n	8004290 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b2a      	cmp	r3, #42	; 0x2a
 8004220:	d109      	bne.n	8004236 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2228      	movs	r2, #40	; 0x28
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff f87a 	bl	800332a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b28      	cmp	r3, #40	; 0x28
 8004240:	d111      	bne.n	8004266 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a15      	ldr	r2, [pc, #84]	; (800429c <I2C_Slave_STOPF+0x25c>)
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff f87b 	bl	800335a <HAL_I2C_ListenCpltCallback>
}
 8004264:	e014      	b.n	8004290 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	2b22      	cmp	r3, #34	; 0x22
 800426c:	d002      	beq.n	8004274 <I2C_Slave_STOPF+0x234>
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b22      	cmp	r3, #34	; 0x22
 8004272:	d10d      	bne.n	8004290 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff f84d 	bl	800332a <HAL_I2C_SlaveRxCpltCallback>
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	080049cd 	.word	0x080049cd
 800429c:	ffff0000 	.word	0xffff0000

080042a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d002      	beq.n	80042c2 <I2C_Slave_AF+0x22>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d129      	bne.n	8004316 <I2C_Slave_AF+0x76>
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b28      	cmp	r3, #40	; 0x28
 80042c6:	d126      	bne.n	8004316 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a2c      	ldr	r2, [pc, #176]	; (800437c <I2C_Slave_AF+0xdc>)
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff f823 	bl	800335a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004314:	e02e      	b.n	8004374 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b21      	cmp	r3, #33	; 0x21
 800431a:	d126      	bne.n	800436a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a17      	ldr	r2, [pc, #92]	; (800437c <I2C_Slave_AF+0xdc>)
 8004320:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2221      	movs	r2, #33	; 0x21
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004346:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004350:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004360:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe ffd7 	bl	8003316 <HAL_I2C_SlaveTxCpltCallback>
}
 8004368:	e004      	b.n	8004374 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004372:	615a      	str	r2, [r3, #20]
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	ffff0000 	.word	0xffff0000

08004380 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b10      	cmp	r3, #16
 800439a:	d10a      	bne.n	80043b2 <I2C_ITError+0x32>
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b22      	cmp	r3, #34	; 0x22
 80043a0:	d107      	bne.n	80043b2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043b8:	2b28      	cmp	r3, #40	; 0x28
 80043ba:	d107      	bne.n	80043cc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2228      	movs	r2, #40	; 0x28
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043ca:	e015      	b.n	80043f8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043da:	d006      	beq.n	80043ea <I2C_ITError+0x6a>
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b60      	cmp	r3, #96	; 0x60
 80043e0:	d003      	beq.n	80043ea <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004406:	d162      	bne.n	80044ce <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004416:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d020      	beq.n	8004468 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	4a6a      	ldr	r2, [pc, #424]	; (80045d4 <I2C_ITError+0x254>)
 800442c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004432:	4618      	mov	r0, r3
 8004434:	f7fd fc68 	bl	8001d08 <HAL_DMA_Abort_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8089 	beq.w	8004552 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004462:	4610      	mov	r0, r2
 8004464:	4798      	blx	r3
 8004466:	e074      	b.n	8004552 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	4a59      	ldr	r2, [pc, #356]	; (80045d4 <I2C_ITError+0x254>)
 800446e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	4618      	mov	r0, r3
 8004476:	f7fd fc47 	bl	8001d08 <HAL_DMA_Abort_IT>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d068      	beq.n	8004552 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d10b      	bne.n	80044a6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044c8:	4610      	mov	r0, r2
 80044ca:	4798      	blx	r3
 80044cc:	e041      	b.n	8004552 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b60      	cmp	r3, #96	; 0x60
 80044d8:	d125      	bne.n	8004526 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d10b      	bne.n	800450e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fe ff43 	bl	80033aa <HAL_I2C_AbortCpltCallback>
 8004524:	e015      	b.n	8004552 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d10b      	bne.n	800454c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fe ff22 	bl	8003396 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800458e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004596:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d113      	bne.n	80045cc <I2C_ITError+0x24c>
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b28      	cmp	r3, #40	; 0x28
 80045a8:	d110      	bne.n	80045cc <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <I2C_ITError+0x258>)
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fe fec7 	bl	800335a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	080049cd 	.word	0x080049cd
 80045d8:	ffff0000 	.word	0xffff0000

080045dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	4608      	mov	r0, r1
 80045e6:	4611      	mov	r1, r2
 80045e8:	461a      	mov	r2, r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	817b      	strh	r3, [r7, #10]
 80045ee:	460b      	mov	r3, r1
 80045f0:	813b      	strh	r3, [r7, #8]
 80045f2:	4613      	mov	r3, r2
 80045f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004604:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004614:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	2200      	movs	r2, #0
 800461e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa51 	bl	8004aca <I2C_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0a9      	b.n	800479c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004648:	897b      	ldrh	r3, [r7, #10]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004656:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	6a3a      	ldr	r2, [r7, #32]
 800465c:	4951      	ldr	r1, [pc, #324]	; (80047a4 <I2C_RequestMemoryRead+0x1c8>)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fa8a 	bl	8004b78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e096      	b.n	800479c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004686:	6a39      	ldr	r1, [r7, #32]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 faf4 	bl	8004c76 <I2C_WaitOnTXEFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	2b04      	cmp	r3, #4
 800469a:	d107      	bne.n	80046ac <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e075      	b.n	800479c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046b0:	88fb      	ldrh	r3, [r7, #6]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d105      	bne.n	80046c2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b6:	893b      	ldrh	r3, [r7, #8]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	611a      	str	r2, [r3, #16]
 80046c0:	e021      	b.n	8004706 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046c2:	893b      	ldrh	r3, [r7, #8]
 80046c4:	0a1b      	lsrs	r3, r3, #8
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	6a39      	ldr	r1, [r7, #32]
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 face 	bl	8004c76 <I2C_WaitOnTXEFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d107      	bne.n	80046f8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e04f      	b.n	800479c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046fc:	893b      	ldrh	r3, [r7, #8]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	6a39      	ldr	r1, [r7, #32]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fab3 	bl	8004c76 <I2C_WaitOnTXEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b04      	cmp	r3, #4
 800471c:	d107      	bne.n	800472e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e034      	b.n	800479c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004740:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	2200      	movs	r2, #0
 800474a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f9bb 	bl	8004aca <I2C_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800476e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e013      	b.n	800479c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004774:	897b      	ldrh	r3, [r7, #10]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	6a3a      	ldr	r2, [r7, #32]
 8004788:	4906      	ldr	r1, [pc, #24]	; (80047a4 <I2C_RequestMemoryRead+0x1c8>)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f9f4 	bl	8004b78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	00010002 	.word	0x00010002

080047a8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047bc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047da:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e8:	2200      	movs	r2, #0
 80047ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	2200      	movs	r2, #0
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004802:	2b21      	cmp	r3, #33	; 0x21
 8004804:	d007      	beq.n	8004816 <I2C_DMAXferCplt+0x6e>
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800480c:	2b22      	cmp	r3, #34	; 0x22
 800480e:	d131      	bne.n	8004874 <I2C_DMAXferCplt+0xcc>
 8004810:	7cbb      	ldrb	r3, [r7, #18]
 8004812:	2b20      	cmp	r3, #32
 8004814:	d12e      	bne.n	8004874 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004824:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2200      	movs	r2, #0
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800482c:	7cfb      	ldrb	r3, [r7, #19]
 800482e:	2b29      	cmp	r3, #41	; 0x29
 8004830:	d10a      	bne.n	8004848 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2221      	movs	r2, #33	; 0x21
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2228      	movs	r2, #40	; 0x28
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004840:	6978      	ldr	r0, [r7, #20]
 8004842:	f7fe fd68 	bl	8003316 <HAL_I2C_SlaveTxCpltCallback>
 8004846:	e00c      	b.n	8004862 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004848:	7cfb      	ldrb	r3, [r7, #19]
 800484a:	2b2a      	cmp	r3, #42	; 0x2a
 800484c:	d109      	bne.n	8004862 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2222      	movs	r2, #34	; 0x22
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2228      	movs	r2, #40	; 0x28
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800485c:	6978      	ldr	r0, [r7, #20]
 800485e:	f7fe fd64 	bl	800332a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004870:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004872:	e06a      	b.n	800494a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d064      	beq.n	800494a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d107      	bne.n	800489a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004898:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048a8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b0:	d009      	beq.n	80048c6 <I2C_DMAXferCplt+0x11e>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d006      	beq.n	80048c6 <I2C_DMAXferCplt+0x11e>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80048be:	d002      	beq.n	80048c6 <I2C_DMAXferCplt+0x11e>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d107      	bne.n	80048d6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048e4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2200      	movs	r2, #0
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004904:	6978      	ldr	r0, [r7, #20]
 8004906:	f7fe fd46 	bl	8003396 <HAL_I2C_ErrorCallback>
}
 800490a:	e01e      	b.n	800494a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d10a      	bne.n	8004936 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800492e:	6978      	ldr	r0, [r7, #20]
 8004930:	f7fe fd27 	bl	8003382 <HAL_I2C_MemRxCpltCallback>
}
 8004934:	e009      	b.n	800494a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2212      	movs	r2, #18
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004944:	6978      	ldr	r0, [r7, #20]
 8004946:	f7fe fcdc 	bl	8003302 <HAL_I2C_MasterRxCpltCallback>
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	2200      	movs	r2, #0
 800496e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	2200      	movs	r2, #0
 800497e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fd fb7b 	bl	800207c <HAL_DMA_GetError>
 8004986:	4603      	mov	r3, r0
 8004988:	2b02      	cmp	r3, #2
 800498a:	d01b      	beq.n	80049c4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f043 0210 	orr.w	r2, r3, #16
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7fe fce9 	bl	8003396 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	2200      	movs	r2, #0
 80049f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	2200      	movs	r2, #0
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a24:	2200      	movs	r2, #0
 8004a26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	2200      	movs	r2, #0
 8004a36:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b60      	cmp	r3, #96	; 0x60
 8004a52:	d10e      	bne.n	8004a72 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7fe fc9d 	bl	80033aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a70:	e027      	b.n	8004ac2 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a72:	7afb      	ldrb	r3, [r7, #11]
 8004a74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a78:	2b28      	cmp	r3, #40	; 0x28
 8004a7a:	d117      	bne.n	8004aac <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2228      	movs	r2, #40	; 0x28
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004aaa:	e007      	b.n	8004abc <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f7fe fc6a 	bl	8003396 <HAL_I2C_ErrorCallback>
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ada:	e025      	b.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d021      	beq.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae4:	f7fc feca 	bl	800187c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d302      	bcc.n	8004afa <I2C_WaitOnFlagUntilTimeout+0x30>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d116      	bne.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	f043 0220 	orr.w	r2, r3, #32
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e023      	b.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d10d      	bne.n	8004b4e <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	43da      	mvns	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	e00c      	b.n	8004b68 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	43da      	mvns	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d0b6      	beq.n	8004adc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b86:	e051      	b.n	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d123      	bne.n	8004be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f043 0204 	orr.w	r2, r3, #4
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e046      	b.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d021      	beq.n	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fc fe48 	bl	800187c <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e020      	b.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	0c1b      	lsrs	r3, r3, #16
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d10c      	bne.n	8004c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	43da      	mvns	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e00b      	b.n	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	43da      	mvns	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d18d      	bne.n	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c82:	e02d      	b.n	8004ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f88d 	bl	8004da4 <I2C_IsAcknowledgeFailed>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e02d      	b.n	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9a:	d021      	beq.n	8004ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9c:	f7fc fdee 	bl	800187c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d302      	bcc.n	8004cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d116      	bne.n	8004ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e007      	b.n	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d1ca      	bne.n	8004c84 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d04:	e042      	b.n	8004d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d119      	bne.n	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0210 	mvn.w	r2, #16
 8004d1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e029      	b.n	8004d9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d48:	f7fc fd98 	bl	800187c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d302      	bcc.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d116      	bne.n	8004d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e007      	b.n	8004d9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d1b5      	bne.n	8004d06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dba:	d11b      	bne.n	8004df4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	f043 0204 	orr.w	r2, r3, #4
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e12:	d103      	bne.n	8004e1c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e1a:	e007      	b.n	8004e2c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e24:	d102      	bne.n	8004e2c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e25b      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d075      	beq.n	8004f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e56:	4ba3      	ldr	r3, [pc, #652]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d00c      	beq.n	8004e7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e62:	4ba0      	ldr	r3, [pc, #640]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d112      	bne.n	8004e94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e6e:	4b9d      	ldr	r3, [pc, #628]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7a:	d10b      	bne.n	8004e94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7c:	4b99      	ldr	r3, [pc, #612]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d05b      	beq.n	8004f40 <HAL_RCC_OscConfig+0x108>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d157      	bne.n	8004f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e236      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9c:	d106      	bne.n	8004eac <HAL_RCC_OscConfig+0x74>
 8004e9e:	4b91      	ldr	r3, [pc, #580]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a90      	ldr	r2, [pc, #576]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e01d      	b.n	8004ee8 <HAL_RCC_OscConfig+0xb0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x98>
 8004eb6:	4b8b      	ldr	r3, [pc, #556]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a8a      	ldr	r2, [pc, #552]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	4b88      	ldr	r3, [pc, #544]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a87      	ldr	r2, [pc, #540]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCC_OscConfig+0xb0>
 8004ed0:	4b84      	ldr	r3, [pc, #528]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a83      	ldr	r2, [pc, #524]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	4b81      	ldr	r3, [pc, #516]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a80      	ldr	r2, [pc, #512]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d013      	beq.n	8004f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fc fcc4 	bl	800187c <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fc fcc0 	bl	800187c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	; 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e1fb      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0a:	4b76      	ldr	r3, [pc, #472]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0xc0>
 8004f16:	e014      	b.n	8004f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fc fcb0 	bl	800187c <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fc fcac 	bl	800187c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	; 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e1e7      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f32:	4b6c      	ldr	r3, [pc, #432]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0xe8>
 8004f3e:	e000      	b.n	8004f42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d063      	beq.n	8005016 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f4e:	4b65      	ldr	r3, [pc, #404]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5a:	4b62      	ldr	r3, [pc, #392]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d11c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f66:	4b5f      	ldr	r3, [pc, #380]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d116      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f72:	4b5c      	ldr	r3, [pc, #368]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_RCC_OscConfig+0x152>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d001      	beq.n	8004f8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e1bb      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8a:	4b56      	ldr	r3, [pc, #344]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4952      	ldr	r1, [pc, #328]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9e:	e03a      	b.n	8005016 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d020      	beq.n	8004fea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa8:	4b4f      	ldr	r3, [pc, #316]	; (80050e8 <HAL_RCC_OscConfig+0x2b0>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7fc fc65 	bl	800187c <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb6:	f7fc fc61 	bl	800187c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e19c      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc8:	4b46      	ldr	r3, [pc, #280]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd4:	4b43      	ldr	r3, [pc, #268]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4940      	ldr	r1, [pc, #256]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	600b      	str	r3, [r1, #0]
 8004fe8:	e015      	b.n	8005016 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fea:	4b3f      	ldr	r3, [pc, #252]	; (80050e8 <HAL_RCC_OscConfig+0x2b0>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff0:	f7fc fc44 	bl	800187c <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff8:	f7fc fc40 	bl	800187c <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e17b      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500a:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d030      	beq.n	8005084 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800502a:	4b30      	ldr	r3, [pc, #192]	; (80050ec <HAL_RCC_OscConfig+0x2b4>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005030:	f7fc fc24 	bl	800187c <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005038:	f7fc fc20 	bl	800187c <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e15b      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504a:	4b26      	ldr	r3, [pc, #152]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0x200>
 8005056:	e015      	b.n	8005084 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005058:	4b24      	ldr	r3, [pc, #144]	; (80050ec <HAL_RCC_OscConfig+0x2b4>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505e:	f7fc fc0d 	bl	800187c <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005066:	f7fc fc09 	bl	800187c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e144      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005078:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 800507a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f0      	bne.n	8005066 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80a0 	beq.w	80051d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005096:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6413      	str	r3, [r2, #64]	; 0x40
 80050b2:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCC_OscConfig+0x2b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d121      	bne.n	8005112 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <HAL_RCC_OscConfig+0x2b8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a07      	ldr	r2, [pc, #28]	; (80050f0 <HAL_RCC_OscConfig+0x2b8>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050da:	f7fc fbcf 	bl	800187c <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e0:	e011      	b.n	8005106 <HAL_RCC_OscConfig+0x2ce>
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800
 80050e8:	42470000 	.word	0x42470000
 80050ec:	42470e80 	.word	0x42470e80
 80050f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7fc fbc2 	bl	800187c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e0fd      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b81      	ldr	r3, [pc, #516]	; (800530c <HAL_RCC_OscConfig+0x4d4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d106      	bne.n	8005128 <HAL_RCC_OscConfig+0x2f0>
 800511a:	4b7d      	ldr	r3, [pc, #500]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	4a7c      	ldr	r2, [pc, #496]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	6713      	str	r3, [r2, #112]	; 0x70
 8005126:	e01c      	b.n	8005162 <HAL_RCC_OscConfig+0x32a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b05      	cmp	r3, #5
 800512e:	d10c      	bne.n	800514a <HAL_RCC_OscConfig+0x312>
 8005130:	4b77      	ldr	r3, [pc, #476]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	4a76      	ldr	r2, [pc, #472]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005136:	f043 0304 	orr.w	r3, r3, #4
 800513a:	6713      	str	r3, [r2, #112]	; 0x70
 800513c:	4b74      	ldr	r3, [pc, #464]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	4a73      	ldr	r2, [pc, #460]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	; 0x70
 8005148:	e00b      	b.n	8005162 <HAL_RCC_OscConfig+0x32a>
 800514a:	4b71      	ldr	r3, [pc, #452]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	4a70      	ldr	r2, [pc, #448]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	6713      	str	r3, [r2, #112]	; 0x70
 8005156:	4b6e      	ldr	r3, [pc, #440]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	4a6d      	ldr	r2, [pc, #436]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d015      	beq.n	8005196 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516a:	f7fc fb87 	bl	800187c <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005170:	e00a      	b.n	8005188 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005172:	f7fc fb83 	bl	800187c <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005180:	4293      	cmp	r3, r2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e0bc      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005188:	4b61      	ldr	r3, [pc, #388]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ee      	beq.n	8005172 <HAL_RCC_OscConfig+0x33a>
 8005194:	e014      	b.n	80051c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005196:	f7fc fb71 	bl	800187c <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fc fb6d 	bl	800187c <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e0a6      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b4:	4b56      	ldr	r3, [pc, #344]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ee      	bne.n	800519e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d105      	bne.n	80051d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c6:	4b52      	ldr	r3, [pc, #328]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	4a51      	ldr	r2, [pc, #324]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 80051cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8092 	beq.w	8005300 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051dc:	4b4c      	ldr	r3, [pc, #304]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 030c 	and.w	r3, r3, #12
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d05c      	beq.n	80052a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d141      	bne.n	8005274 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f0:	4b48      	ldr	r3, [pc, #288]	; (8005314 <HAL_RCC_OscConfig+0x4dc>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f6:	f7fc fb41 	bl	800187c <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fe:	f7fc fb3d 	bl	800187c <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e078      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005210:	4b3f      	ldr	r3, [pc, #252]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f0      	bne.n	80051fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	019b      	lsls	r3, r3, #6
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	3b01      	subs	r3, #1
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	061b      	lsls	r3, r3, #24
 8005240:	4933      	ldr	r1, [pc, #204]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005242:	4313      	orrs	r3, r2
 8005244:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005246:	4b33      	ldr	r3, [pc, #204]	; (8005314 <HAL_RCC_OscConfig+0x4dc>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fc fb16 	bl	800187c <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005254:	f7fc fb12 	bl	800187c <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e04d      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005266:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x41c>
 8005272:	e045      	b.n	8005300 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <HAL_RCC_OscConfig+0x4dc>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fc faff 	bl	800187c <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005282:	f7fc fafb 	bl	800187c <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e036      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005294:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x44a>
 80052a0:	e02e      	b.n	8005300 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e029      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052ae:	4b18      	ldr	r3, [pc, #96]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d11c      	bne.n	80052fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d115      	bne.n	80052fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052d6:	4013      	ands	r3, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10d      	bne.n	80052fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d106      	bne.n	80052fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40007000 	.word	0x40007000
 8005310:	40023800 	.word	0x40023800
 8005314:	42470060 	.word	0x42470060

08005318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0cc      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800532c:	4b68      	ldr	r3, [pc, #416]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d90c      	bls.n	8005354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b65      	ldr	r3, [pc, #404]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b63      	ldr	r3, [pc, #396]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d001      	beq.n	8005354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0b8      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d020      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800536c:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a58      	ldr	r2, [pc, #352]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005384:	4b53      	ldr	r3, [pc, #332]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4a52      	ldr	r2, [pc, #328]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800538e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005390:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	494d      	ldr	r1, [pc, #308]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d044      	beq.n	8005438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b6:	4b47      	ldr	r3, [pc, #284]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d119      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e07f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d003      	beq.n	80053d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d6:	4b3f      	ldr	r3, [pc, #252]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e06f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e6:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e067      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053f6:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f023 0203 	bic.w	r2, r3, #3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4934      	ldr	r1, [pc, #208]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	4313      	orrs	r3, r2
 8005406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005408:	f7fc fa38 	bl	800187c <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540e:	e00a      	b.n	8005426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005410:	f7fc fa34 	bl	800187c <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e04f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 020c 	and.w	r2, r3, #12
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	429a      	cmp	r2, r3
 8005436:	d1eb      	bne.n	8005410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d20c      	bcs.n	8005460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e032      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800546c:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4916      	ldr	r1, [pc, #88]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	490e      	ldr	r1, [pc, #56]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800549e:	f000 f821 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 80054a2:	4601      	mov	r1, r0
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	5cd3      	ldrb	r3, [r2, r3]
 80054b2:	fa21 f303 	lsr.w	r3, r1, r3
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80054b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCC_ClockConfig+0x1c8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fc f998 	bl	80017f4 <HAL_InitTick>

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023c00 	.word	0x40023c00
 80054d4:	40023800 	.word	0x40023800
 80054d8:	08008040 	.word	0x08008040
 80054dc:	20000000 	.word	0x20000000
 80054e0:	20000004 	.word	0x20000004

080054e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	2300      	movs	r3, #0
 80054f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054fa:	4b63      	ldr	r3, [pc, #396]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b04      	cmp	r3, #4
 8005504:	d007      	beq.n	8005516 <HAL_RCC_GetSysClockFreq+0x32>
 8005506:	2b08      	cmp	r3, #8
 8005508:	d008      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x38>
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 80b4 	bne.w	8005678 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4b5e      	ldr	r3, [pc, #376]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005512:	60bb      	str	r3, [r7, #8]
       break;
 8005514:	e0b3      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005516:	4b5e      	ldr	r3, [pc, #376]	; (8005690 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005518:	60bb      	str	r3, [r7, #8]
      break;
 800551a:	e0b0      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800551c:	4b5a      	ldr	r3, [pc, #360]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005524:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005526:	4b58      	ldr	r3, [pc, #352]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d04a      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005532:	4b55      	ldr	r3, [pc, #340]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	ea03 0501 	and.w	r5, r3, r1
 8005548:	ea04 0602 	and.w	r6, r4, r2
 800554c:	4629      	mov	r1, r5
 800554e:	4632      	mov	r2, r6
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	f04f 0400 	mov.w	r4, #0
 8005558:	0154      	lsls	r4, r2, #5
 800555a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800555e:	014b      	lsls	r3, r1, #5
 8005560:	4619      	mov	r1, r3
 8005562:	4622      	mov	r2, r4
 8005564:	1b49      	subs	r1, r1, r5
 8005566:	eb62 0206 	sbc.w	r2, r2, r6
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	f04f 0400 	mov.w	r4, #0
 8005572:	0194      	lsls	r4, r2, #6
 8005574:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005578:	018b      	lsls	r3, r1, #6
 800557a:	1a5b      	subs	r3, r3, r1
 800557c:	eb64 0402 	sbc.w	r4, r4, r2
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	00e2      	lsls	r2, r4, #3
 800558a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800558e:	00d9      	lsls	r1, r3, #3
 8005590:	460b      	mov	r3, r1
 8005592:	4614      	mov	r4, r2
 8005594:	195b      	adds	r3, r3, r5
 8005596:	eb44 0406 	adc.w	r4, r4, r6
 800559a:	f04f 0100 	mov.w	r1, #0
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	0262      	lsls	r2, r4, #9
 80055a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80055a8:	0259      	lsls	r1, r3, #9
 80055aa:	460b      	mov	r3, r1
 80055ac:	4614      	mov	r4, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	4621      	mov	r1, r4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f04f 0400 	mov.w	r4, #0
 80055b8:	461a      	mov	r2, r3
 80055ba:	4623      	mov	r3, r4
 80055bc:	f7fa fe60 	bl	8000280 <__aeabi_uldivmod>
 80055c0:	4603      	mov	r3, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	e049      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c8:	4b2f      	ldr	r3, [pc, #188]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	099b      	lsrs	r3, r3, #6
 80055ce:	f04f 0400 	mov.w	r4, #0
 80055d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	ea03 0501 	and.w	r5, r3, r1
 80055de:	ea04 0602 	and.w	r6, r4, r2
 80055e2:	4629      	mov	r1, r5
 80055e4:	4632      	mov	r2, r6
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	f04f 0400 	mov.w	r4, #0
 80055ee:	0154      	lsls	r4, r2, #5
 80055f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055f4:	014b      	lsls	r3, r1, #5
 80055f6:	4619      	mov	r1, r3
 80055f8:	4622      	mov	r2, r4
 80055fa:	1b49      	subs	r1, r1, r5
 80055fc:	eb62 0206 	sbc.w	r2, r2, r6
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	0194      	lsls	r4, r2, #6
 800560a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800560e:	018b      	lsls	r3, r1, #6
 8005610:	1a5b      	subs	r3, r3, r1
 8005612:	eb64 0402 	sbc.w	r4, r4, r2
 8005616:	f04f 0100 	mov.w	r1, #0
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	00e2      	lsls	r2, r4, #3
 8005620:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005624:	00d9      	lsls	r1, r3, #3
 8005626:	460b      	mov	r3, r1
 8005628:	4614      	mov	r4, r2
 800562a:	195b      	adds	r3, r3, r5
 800562c:	eb44 0406 	adc.w	r4, r4, r6
 8005630:	f04f 0100 	mov.w	r1, #0
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	02a2      	lsls	r2, r4, #10
 800563a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800563e:	0299      	lsls	r1, r3, #10
 8005640:	460b      	mov	r3, r1
 8005642:	4614      	mov	r4, r2
 8005644:	4618      	mov	r0, r3
 8005646:	4621      	mov	r1, r4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f04f 0400 	mov.w	r4, #0
 800564e:	461a      	mov	r2, r3
 8005650:	4623      	mov	r3, r4
 8005652:	f7fa fe15 	bl	8000280 <__aeabi_uldivmod>
 8005656:	4603      	mov	r3, r0
 8005658:	460c      	mov	r4, r1
 800565a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	0c1b      	lsrs	r3, r3, #16
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	3301      	adds	r3, #1
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	60bb      	str	r3, [r7, #8]
      break;
 8005676:	e002      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005678:	4b04      	ldr	r3, [pc, #16]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800567a:	60bb      	str	r3, [r7, #8]
      break;
 800567c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800567e:	68bb      	ldr	r3, [r7, #8]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005688:	40023800 	.word	0x40023800
 800568c:	00f42400 	.word	0x00f42400
 8005690:	007a1200 	.word	0x007a1200

08005694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000

080056ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056b0:	f7ff fff0 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056b4:	4601      	mov	r1, r0
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0a9b      	lsrs	r3, r3, #10
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4a03      	ldr	r2, [pc, #12]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056c2:	5cd3      	ldrb	r3, [r2, r3]
 80056c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40023800 	.word	0x40023800
 80056d0:	08008050 	.word	0x08008050

080056d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056d8:	f7ff ffdc 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056dc:	4601      	mov	r1, r0
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	0b5b      	lsrs	r3, r3, #13
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	4a03      	ldr	r2, [pc, #12]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ea:	5cd3      	ldrb	r3, [r2, r3]
 80056ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40023800 	.word	0x40023800
 80056f8:	08008050 	.word	0x08008050

080056fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e03f      	b.n	800578e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fb ff40 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f829 	bl	8005798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80057da:	f023 030c 	bic.w	r3, r3, #12
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	430b      	orrs	r3, r1
 80057e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005806:	f040 818b 	bne.w	8005b20 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4ac1      	ldr	r2, [pc, #772]	; (8005b14 <UART_SetConfig+0x37c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d005      	beq.n	8005820 <UART_SetConfig+0x88>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4abf      	ldr	r2, [pc, #764]	; (8005b18 <UART_SetConfig+0x380>)
 800581a:	4293      	cmp	r3, r2
 800581c:	f040 80bd 	bne.w	800599a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7ff ff58 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 8005824:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	461d      	mov	r5, r3
 800582a:	f04f 0600 	mov.w	r6, #0
 800582e:	46a8      	mov	r8, r5
 8005830:	46b1      	mov	r9, r6
 8005832:	eb18 0308 	adds.w	r3, r8, r8
 8005836:	eb49 0409 	adc.w	r4, r9, r9
 800583a:	4698      	mov	r8, r3
 800583c:	46a1      	mov	r9, r4
 800583e:	eb18 0805 	adds.w	r8, r8, r5
 8005842:	eb49 0906 	adc.w	r9, r9, r6
 8005846:	f04f 0100 	mov.w	r1, #0
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005852:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005856:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800585a:	4688      	mov	r8, r1
 800585c:	4691      	mov	r9, r2
 800585e:	eb18 0005 	adds.w	r0, r8, r5
 8005862:	eb49 0106 	adc.w	r1, r9, r6
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	461d      	mov	r5, r3
 800586c:	f04f 0600 	mov.w	r6, #0
 8005870:	196b      	adds	r3, r5, r5
 8005872:	eb46 0406 	adc.w	r4, r6, r6
 8005876:	461a      	mov	r2, r3
 8005878:	4623      	mov	r3, r4
 800587a:	f7fa fd01 	bl	8000280 <__aeabi_uldivmod>
 800587e:	4603      	mov	r3, r0
 8005880:	460c      	mov	r4, r1
 8005882:	461a      	mov	r2, r3
 8005884:	4ba5      	ldr	r3, [pc, #660]	; (8005b1c <UART_SetConfig+0x384>)
 8005886:	fba3 2302 	umull	r2, r3, r3, r2
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	461d      	mov	r5, r3
 8005894:	f04f 0600 	mov.w	r6, #0
 8005898:	46a9      	mov	r9, r5
 800589a:	46b2      	mov	sl, r6
 800589c:	eb19 0309 	adds.w	r3, r9, r9
 80058a0:	eb4a 040a 	adc.w	r4, sl, sl
 80058a4:	4699      	mov	r9, r3
 80058a6:	46a2      	mov	sl, r4
 80058a8:	eb19 0905 	adds.w	r9, r9, r5
 80058ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80058b0:	f04f 0100 	mov.w	r1, #0
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058c4:	4689      	mov	r9, r1
 80058c6:	4692      	mov	sl, r2
 80058c8:	eb19 0005 	adds.w	r0, r9, r5
 80058cc:	eb4a 0106 	adc.w	r1, sl, r6
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	461d      	mov	r5, r3
 80058d6:	f04f 0600 	mov.w	r6, #0
 80058da:	196b      	adds	r3, r5, r5
 80058dc:	eb46 0406 	adc.w	r4, r6, r6
 80058e0:	461a      	mov	r2, r3
 80058e2:	4623      	mov	r3, r4
 80058e4:	f7fa fccc 	bl	8000280 <__aeabi_uldivmod>
 80058e8:	4603      	mov	r3, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b8b      	ldr	r3, [pc, #556]	; (8005b1c <UART_SetConfig+0x384>)
 80058f0:	fba3 1302 	umull	r1, r3, r3, r2
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	2164      	movs	r1, #100	; 0x64
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	3332      	adds	r3, #50	; 0x32
 8005902:	4a86      	ldr	r2, [pc, #536]	; (8005b1c <UART_SetConfig+0x384>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005910:	4498      	add	r8, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	461d      	mov	r5, r3
 8005916:	f04f 0600 	mov.w	r6, #0
 800591a:	46a9      	mov	r9, r5
 800591c:	46b2      	mov	sl, r6
 800591e:	eb19 0309 	adds.w	r3, r9, r9
 8005922:	eb4a 040a 	adc.w	r4, sl, sl
 8005926:	4699      	mov	r9, r3
 8005928:	46a2      	mov	sl, r4
 800592a:	eb19 0905 	adds.w	r9, r9, r5
 800592e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005932:	f04f 0100 	mov.w	r1, #0
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800593e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005942:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005946:	4689      	mov	r9, r1
 8005948:	4692      	mov	sl, r2
 800594a:	eb19 0005 	adds.w	r0, r9, r5
 800594e:	eb4a 0106 	adc.w	r1, sl, r6
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	461d      	mov	r5, r3
 8005958:	f04f 0600 	mov.w	r6, #0
 800595c:	196b      	adds	r3, r5, r5
 800595e:	eb46 0406 	adc.w	r4, r6, r6
 8005962:	461a      	mov	r2, r3
 8005964:	4623      	mov	r3, r4
 8005966:	f7fa fc8b 	bl	8000280 <__aeabi_uldivmod>
 800596a:	4603      	mov	r3, r0
 800596c:	460c      	mov	r4, r1
 800596e:	461a      	mov	r2, r3
 8005970:	4b6a      	ldr	r3, [pc, #424]	; (8005b1c <UART_SetConfig+0x384>)
 8005972:	fba3 1302 	umull	r1, r3, r3, r2
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2164      	movs	r1, #100	; 0x64
 800597a:	fb01 f303 	mul.w	r3, r1, r3
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	3332      	adds	r3, #50	; 0x32
 8005984:	4a65      	ldr	r2, [pc, #404]	; (8005b1c <UART_SetConfig+0x384>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	f003 0207 	and.w	r2, r3, #7
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4442      	add	r2, r8
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	e26f      	b.n	8005e7a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800599a:	f7ff fe87 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 800599e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	461d      	mov	r5, r3
 80059a4:	f04f 0600 	mov.w	r6, #0
 80059a8:	46a8      	mov	r8, r5
 80059aa:	46b1      	mov	r9, r6
 80059ac:	eb18 0308 	adds.w	r3, r8, r8
 80059b0:	eb49 0409 	adc.w	r4, r9, r9
 80059b4:	4698      	mov	r8, r3
 80059b6:	46a1      	mov	r9, r4
 80059b8:	eb18 0805 	adds.w	r8, r8, r5
 80059bc:	eb49 0906 	adc.w	r9, r9, r6
 80059c0:	f04f 0100 	mov.w	r1, #0
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059d4:	4688      	mov	r8, r1
 80059d6:	4691      	mov	r9, r2
 80059d8:	eb18 0005 	adds.w	r0, r8, r5
 80059dc:	eb49 0106 	adc.w	r1, r9, r6
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	461d      	mov	r5, r3
 80059e6:	f04f 0600 	mov.w	r6, #0
 80059ea:	196b      	adds	r3, r5, r5
 80059ec:	eb46 0406 	adc.w	r4, r6, r6
 80059f0:	461a      	mov	r2, r3
 80059f2:	4623      	mov	r3, r4
 80059f4:	f7fa fc44 	bl	8000280 <__aeabi_uldivmod>
 80059f8:	4603      	mov	r3, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b47      	ldr	r3, [pc, #284]	; (8005b1c <UART_SetConfig+0x384>)
 8005a00:	fba3 2302 	umull	r2, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	461d      	mov	r5, r3
 8005a0e:	f04f 0600 	mov.w	r6, #0
 8005a12:	46a9      	mov	r9, r5
 8005a14:	46b2      	mov	sl, r6
 8005a16:	eb19 0309 	adds.w	r3, r9, r9
 8005a1a:	eb4a 040a 	adc.w	r4, sl, sl
 8005a1e:	4699      	mov	r9, r3
 8005a20:	46a2      	mov	sl, r4
 8005a22:	eb19 0905 	adds.w	r9, r9, r5
 8005a26:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a2a:	f04f 0100 	mov.w	r1, #0
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a3e:	4689      	mov	r9, r1
 8005a40:	4692      	mov	sl, r2
 8005a42:	eb19 0005 	adds.w	r0, r9, r5
 8005a46:	eb4a 0106 	adc.w	r1, sl, r6
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	461d      	mov	r5, r3
 8005a50:	f04f 0600 	mov.w	r6, #0
 8005a54:	196b      	adds	r3, r5, r5
 8005a56:	eb46 0406 	adc.w	r4, r6, r6
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4623      	mov	r3, r4
 8005a5e:	f7fa fc0f 	bl	8000280 <__aeabi_uldivmod>
 8005a62:	4603      	mov	r3, r0
 8005a64:	460c      	mov	r4, r1
 8005a66:	461a      	mov	r2, r3
 8005a68:	4b2c      	ldr	r3, [pc, #176]	; (8005b1c <UART_SetConfig+0x384>)
 8005a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2164      	movs	r1, #100	; 0x64
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	3332      	adds	r3, #50	; 0x32
 8005a7c:	4a27      	ldr	r2, [pc, #156]	; (8005b1c <UART_SetConfig+0x384>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a8a:	4498      	add	r8, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	461d      	mov	r5, r3
 8005a90:	f04f 0600 	mov.w	r6, #0
 8005a94:	46a9      	mov	r9, r5
 8005a96:	46b2      	mov	sl, r6
 8005a98:	eb19 0309 	adds.w	r3, r9, r9
 8005a9c:	eb4a 040a 	adc.w	r4, sl, sl
 8005aa0:	4699      	mov	r9, r3
 8005aa2:	46a2      	mov	sl, r4
 8005aa4:	eb19 0905 	adds.w	r9, r9, r5
 8005aa8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005aac:	f04f 0100 	mov.w	r1, #0
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ab8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005abc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ac0:	4689      	mov	r9, r1
 8005ac2:	4692      	mov	sl, r2
 8005ac4:	eb19 0005 	adds.w	r0, r9, r5
 8005ac8:	eb4a 0106 	adc.w	r1, sl, r6
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	461d      	mov	r5, r3
 8005ad2:	f04f 0600 	mov.w	r6, #0
 8005ad6:	196b      	adds	r3, r5, r5
 8005ad8:	eb46 0406 	adc.w	r4, r6, r6
 8005adc:	461a      	mov	r2, r3
 8005ade:	4623      	mov	r3, r4
 8005ae0:	f7fa fbce 	bl	8000280 <__aeabi_uldivmod>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <UART_SetConfig+0x384>)
 8005aec:	fba3 1302 	umull	r1, r3, r3, r2
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	2164      	movs	r1, #100	; 0x64
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	3332      	adds	r3, #50	; 0x32
 8005afe:	4a07      	ldr	r2, [pc, #28]	; (8005b1c <UART_SetConfig+0x384>)
 8005b00:	fba2 2303 	umull	r2, r3, r2, r3
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	f003 0207 	and.w	r2, r3, #7
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4442      	add	r2, r8
 8005b10:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005b12:	e1b2      	b.n	8005e7a <UART_SetConfig+0x6e2>
 8005b14:	40011000 	.word	0x40011000
 8005b18:	40011400 	.word	0x40011400
 8005b1c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4ad7      	ldr	r2, [pc, #860]	; (8005e84 <UART_SetConfig+0x6ec>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d005      	beq.n	8005b36 <UART_SetConfig+0x39e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4ad6      	ldr	r2, [pc, #856]	; (8005e88 <UART_SetConfig+0x6f0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	f040 80d1 	bne.w	8005cd8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b36:	f7ff fdcd 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 8005b3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	469a      	mov	sl, r3
 8005b40:	f04f 0b00 	mov.w	fp, #0
 8005b44:	46d0      	mov	r8, sl
 8005b46:	46d9      	mov	r9, fp
 8005b48:	eb18 0308 	adds.w	r3, r8, r8
 8005b4c:	eb49 0409 	adc.w	r4, r9, r9
 8005b50:	4698      	mov	r8, r3
 8005b52:	46a1      	mov	r9, r4
 8005b54:	eb18 080a 	adds.w	r8, r8, sl
 8005b58:	eb49 090b 	adc.w	r9, r9, fp
 8005b5c:	f04f 0100 	mov.w	r1, #0
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b70:	4688      	mov	r8, r1
 8005b72:	4691      	mov	r9, r2
 8005b74:	eb1a 0508 	adds.w	r5, sl, r8
 8005b78:	eb4b 0609 	adc.w	r6, fp, r9
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4619      	mov	r1, r3
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	0094      	lsls	r4, r2, #2
 8005b90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b94:	008b      	lsls	r3, r1, #2
 8005b96:	461a      	mov	r2, r3
 8005b98:	4623      	mov	r3, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	f7fa fb6f 	bl	8000280 <__aeabi_uldivmod>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4bb8      	ldr	r3, [pc, #736]	; (8005e8c <UART_SetConfig+0x6f4>)
 8005baa:	fba3 2302 	umull	r2, r3, r3, r2
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	469b      	mov	fp, r3
 8005bb8:	f04f 0c00 	mov.w	ip, #0
 8005bbc:	46d9      	mov	r9, fp
 8005bbe:	46e2      	mov	sl, ip
 8005bc0:	eb19 0309 	adds.w	r3, r9, r9
 8005bc4:	eb4a 040a 	adc.w	r4, sl, sl
 8005bc8:	4699      	mov	r9, r3
 8005bca:	46a2      	mov	sl, r4
 8005bcc:	eb19 090b 	adds.w	r9, r9, fp
 8005bd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bd4:	f04f 0100 	mov.w	r1, #0
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005be0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005be4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005be8:	4689      	mov	r9, r1
 8005bea:	4692      	mov	sl, r2
 8005bec:	eb1b 0509 	adds.w	r5, fp, r9
 8005bf0:	eb4c 060a 	adc.w	r6, ip, sl
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	f04f 0400 	mov.w	r4, #0
 8005c06:	0094      	lsls	r4, r2, #2
 8005c08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c0c:	008b      	lsls	r3, r1, #2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4623      	mov	r3, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	4631      	mov	r1, r6
 8005c16:	f7fa fb33 	bl	8000280 <__aeabi_uldivmod>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4b9a      	ldr	r3, [pc, #616]	; (8005e8c <UART_SetConfig+0x6f4>)
 8005c22:	fba3 1302 	umull	r1, r3, r3, r2
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	2164      	movs	r1, #100	; 0x64
 8005c2a:	fb01 f303 	mul.w	r3, r1, r3
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	3332      	adds	r3, #50	; 0x32
 8005c34:	4a95      	ldr	r2, [pc, #596]	; (8005e8c <UART_SetConfig+0x6f4>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c40:	4498      	add	r8, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	469b      	mov	fp, r3
 8005c46:	f04f 0c00 	mov.w	ip, #0
 8005c4a:	46d9      	mov	r9, fp
 8005c4c:	46e2      	mov	sl, ip
 8005c4e:	eb19 0309 	adds.w	r3, r9, r9
 8005c52:	eb4a 040a 	adc.w	r4, sl, sl
 8005c56:	4699      	mov	r9, r3
 8005c58:	46a2      	mov	sl, r4
 8005c5a:	eb19 090b 	adds.w	r9, r9, fp
 8005c5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c62:	f04f 0100 	mov.w	r1, #0
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c76:	4689      	mov	r9, r1
 8005c78:	4692      	mov	sl, r2
 8005c7a:	eb1b 0509 	adds.w	r5, fp, r9
 8005c7e:	eb4c 060a 	adc.w	r6, ip, sl
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	4619      	mov	r1, r3
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	f04f 0400 	mov.w	r4, #0
 8005c94:	0094      	lsls	r4, r2, #2
 8005c96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c9a:	008b      	lsls	r3, r1, #2
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4623      	mov	r3, r4
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	f7fa faec 	bl	8000280 <__aeabi_uldivmod>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	461a      	mov	r2, r3
 8005cae:	4b77      	ldr	r3, [pc, #476]	; (8005e8c <UART_SetConfig+0x6f4>)
 8005cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	2164      	movs	r1, #100	; 0x64
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	3332      	adds	r3, #50	; 0x32
 8005cc2:	4a72      	ldr	r2, [pc, #456]	; (8005e8c <UART_SetConfig+0x6f4>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	f003 020f 	and.w	r2, r3, #15
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4442      	add	r2, r8
 8005cd4:	609a      	str	r2, [r3, #8]
 8005cd6:	e0d0      	b.n	8005e7a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cd8:	f7ff fce8 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8005cdc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	469a      	mov	sl, r3
 8005ce2:	f04f 0b00 	mov.w	fp, #0
 8005ce6:	46d0      	mov	r8, sl
 8005ce8:	46d9      	mov	r9, fp
 8005cea:	eb18 0308 	adds.w	r3, r8, r8
 8005cee:	eb49 0409 	adc.w	r4, r9, r9
 8005cf2:	4698      	mov	r8, r3
 8005cf4:	46a1      	mov	r9, r4
 8005cf6:	eb18 080a 	adds.w	r8, r8, sl
 8005cfa:	eb49 090b 	adc.w	r9, r9, fp
 8005cfe:	f04f 0100 	mov.w	r1, #0
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d12:	4688      	mov	r8, r1
 8005d14:	4691      	mov	r9, r2
 8005d16:	eb1a 0508 	adds.w	r5, sl, r8
 8005d1a:	eb4b 0609 	adc.w	r6, fp, r9
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	4619      	mov	r1, r3
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	f04f 0400 	mov.w	r4, #0
 8005d30:	0094      	lsls	r4, r2, #2
 8005d32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d36:	008b      	lsls	r3, r1, #2
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4623      	mov	r3, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	4631      	mov	r1, r6
 8005d40:	f7fa fa9e 	bl	8000280 <__aeabi_uldivmod>
 8005d44:	4603      	mov	r3, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4b50      	ldr	r3, [pc, #320]	; (8005e8c <UART_SetConfig+0x6f4>)
 8005d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	469b      	mov	fp, r3
 8005d5a:	f04f 0c00 	mov.w	ip, #0
 8005d5e:	46d9      	mov	r9, fp
 8005d60:	46e2      	mov	sl, ip
 8005d62:	eb19 0309 	adds.w	r3, r9, r9
 8005d66:	eb4a 040a 	adc.w	r4, sl, sl
 8005d6a:	4699      	mov	r9, r3
 8005d6c:	46a2      	mov	sl, r4
 8005d6e:	eb19 090b 	adds.w	r9, r9, fp
 8005d72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d76:	f04f 0100 	mov.w	r1, #0
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d8a:	4689      	mov	r9, r1
 8005d8c:	4692      	mov	sl, r2
 8005d8e:	eb1b 0509 	adds.w	r5, fp, r9
 8005d92:	eb4c 060a 	adc.w	r6, ip, sl
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	f04f 0400 	mov.w	r4, #0
 8005da8:	0094      	lsls	r4, r2, #2
 8005daa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dae:	008b      	lsls	r3, r1, #2
 8005db0:	461a      	mov	r2, r3
 8005db2:	4623      	mov	r3, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	4631      	mov	r1, r6
 8005db8:	f7fa fa62 	bl	8000280 <__aeabi_uldivmod>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4b32      	ldr	r3, [pc, #200]	; (8005e8c <UART_SetConfig+0x6f4>)
 8005dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	2164      	movs	r1, #100	; 0x64
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	3332      	adds	r3, #50	; 0x32
 8005dd6:	4a2d      	ldr	r2, [pc, #180]	; (8005e8c <UART_SetConfig+0x6f4>)
 8005dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de2:	4498      	add	r8, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	469b      	mov	fp, r3
 8005de8:	f04f 0c00 	mov.w	ip, #0
 8005dec:	46d9      	mov	r9, fp
 8005dee:	46e2      	mov	sl, ip
 8005df0:	eb19 0309 	adds.w	r3, r9, r9
 8005df4:	eb4a 040a 	adc.w	r4, sl, sl
 8005df8:	4699      	mov	r9, r3
 8005dfa:	46a2      	mov	sl, r4
 8005dfc:	eb19 090b 	adds.w	r9, r9, fp
 8005e00:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e04:	f04f 0100 	mov.w	r1, #0
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e18:	4689      	mov	r9, r1
 8005e1a:	4692      	mov	sl, r2
 8005e1c:	eb1b 0509 	adds.w	r5, fp, r9
 8005e20:	eb4c 060a 	adc.w	r6, ip, sl
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	f04f 0400 	mov.w	r4, #0
 8005e36:	0094      	lsls	r4, r2, #2
 8005e38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e3c:	008b      	lsls	r3, r1, #2
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4623      	mov	r3, r4
 8005e42:	4628      	mov	r0, r5
 8005e44:	4631      	mov	r1, r6
 8005e46:	f7fa fa1b 	bl	8000280 <__aeabi_uldivmod>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <UART_SetConfig+0x6f4>)
 8005e52:	fba3 1302 	umull	r1, r3, r3, r2
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	2164      	movs	r1, #100	; 0x64
 8005e5a:	fb01 f303 	mul.w	r3, r1, r3
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	3332      	adds	r3, #50	; 0x32
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <UART_SetConfig+0x6f4>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4442      	add	r2, r8
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	e7ff      	b.n	8005e7a <UART_SetConfig+0x6e2>
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e84:	40011000 	.word	0x40011000
 8005e88:	40011400 	.word	0x40011400
 8005e8c:	51eb851f 	.word	0x51eb851f

08005e90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ea2:	2b84      	cmp	r3, #132	; 0x84
 8005ea4:	d005      	beq.n	8005eb2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ea6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	3303      	adds	r3, #3
 8005eb0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ec4:	f000 fc60 	bl	8006788 <vTaskStartScheduler>
  
  return osOK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed0:	b089      	sub	sp, #36	; 0x24
 8005ed2:	af04      	add	r7, sp, #16
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d020      	beq.n	8005f22 <osThreadCreate+0x54>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01c      	beq.n	8005f22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685c      	ldr	r4, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681d      	ldr	r5, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691e      	ldr	r6, [r3, #16]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff ffc8 	bl	8005e90 <makeFreeRtosPriority>
 8005f00:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f0a:	9202      	str	r2, [sp, #8]
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	9100      	str	r1, [sp, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	4632      	mov	r2, r6
 8005f14:	4629      	mov	r1, r5
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 f8d9 	bl	80060ce <xTaskCreateStatic>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e01c      	b.n	8005f5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685c      	ldr	r4, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f2e:	b29e      	uxth	r6, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff ffaa 	bl	8005e90 <makeFreeRtosPriority>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	f107 030c 	add.w	r3, r7, #12
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	9200      	str	r2, [sp, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	4632      	mov	r2, r6
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 f917 	bl	8006180 <xTaskCreate>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d001      	beq.n	8005f5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e000      	b.n	8005f5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f103 0208 	add.w	r2, r3, #8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f103 0208 	add.w	r2, r3, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f103 0208 	add.w	r2, r3, #8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d103      	bne.n	8006028 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	e00c      	b.n	8006042 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3308      	adds	r3, #8
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	e002      	b.n	8006036 <vListInsert+0x2e>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	429a      	cmp	r2, r3
 8006040:	d2f6      	bcs.n	8006030 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	601a      	str	r2, [r3, #0]
}
 800606e:	bf00      	nop
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6892      	ldr	r2, [r2, #8]
 8006090:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6852      	ldr	r2, [r2, #4]
 800609a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d103      	bne.n	80060ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	1e5a      	subs	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b08e      	sub	sp, #56	; 0x38
 80060d2:	af04      	add	r7, sp, #16
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d109      	bne.n	80060f6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	623b      	str	r3, [r7, #32]
 80060f4:	e7fe      	b.n	80060f4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d109      	bne.n	8006110 <xTaskCreateStatic+0x42>
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	61fb      	str	r3, [r7, #28]
 800610e:	e7fe      	b.n	800610e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006110:	2354      	movs	r3, #84	; 0x54
 8006112:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b54      	cmp	r3, #84	; 0x54
 8006118:	d009      	beq.n	800612e <xTaskCreateStatic+0x60>
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	e7fe      	b.n	800612c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01e      	beq.n	8006172 <xTaskCreateStatic+0xa4>
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01b      	beq.n	8006172 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006142:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	2202      	movs	r2, #2
 8006148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800614c:	2300      	movs	r3, #0
 800614e:	9303      	str	r3, [sp, #12]
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	9302      	str	r3, [sp, #8]
 8006154:	f107 0314 	add.w	r3, r7, #20
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f850 	bl	800620a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800616a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800616c:	f000 f8cc 	bl	8006308 <prvAddNewTaskToReadyList>
 8006170:	e001      	b.n	8006176 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006176:	697b      	ldr	r3, [r7, #20]
	}
 8006178:	4618      	mov	r0, r3
 800617a:	3728      	adds	r7, #40	; 0x28
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	; 0x30
 8006184:	af04      	add	r7, sp, #16
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4618      	mov	r0, r3
 8006196:	f001 f885 	bl	80072a4 <pvPortMalloc>
 800619a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80061a2:	2054      	movs	r0, #84	; 0x54
 80061a4:	f001 f87e 	bl	80072a4 <pvPortMalloc>
 80061a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	631a      	str	r2, [r3, #48]	; 0x30
 80061b6:	e005      	b.n	80061c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061b8:	6978      	ldr	r0, [r7, #20]
 80061ba:	f001 f935 	bl	8007428 <vPortFree>
 80061be:	e001      	b.n	80061c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d017      	beq.n	80061fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061d2:	88fa      	ldrh	r2, [r7, #6]
 80061d4:	2300      	movs	r3, #0
 80061d6:	9303      	str	r3, [sp, #12]
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	9302      	str	r3, [sp, #8]
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f80e 	bl	800620a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ee:	69f8      	ldr	r0, [r7, #28]
 80061f0:	f000 f88a 	bl	8006308 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061f4:	2301      	movs	r3, #1
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	e002      	b.n	8006200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061fa:	f04f 33ff 	mov.w	r3, #4294967295
 80061fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006200:	69bb      	ldr	r3, [r7, #24]
	}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b088      	sub	sp, #32
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006222:	3b01      	subs	r3, #1
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f023 0307 	bic.w	r3, r3, #7
 8006230:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	2b00      	cmp	r3, #0
 800623a:	d009      	beq.n	8006250 <prvInitialiseNewTask+0x46>
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	e7fe      	b.n	800624e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006250:	2300      	movs	r3, #0
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	e012      	b.n	800627c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	7819      	ldrb	r1, [r3, #0]
 800625e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	4413      	add	r3, r2
 8006264:	3334      	adds	r3, #52	; 0x34
 8006266:	460a      	mov	r2, r1
 8006268:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	4413      	add	r3, r2
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d006      	beq.n	8006284 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3301      	adds	r3, #1
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2b0f      	cmp	r3, #15
 8006280:	d9e9      	bls.n	8006256 <prvInitialiseNewTask+0x4c>
 8006282:	e000      	b.n	8006286 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006284:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	2b06      	cmp	r3, #6
 8006292:	d901      	bls.n	8006298 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006294:	2306      	movs	r3, #6
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800629c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	3304      	adds	r3, #4
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff fe79 	bl	8005fa6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	3318      	adds	r3, #24
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fe74 	bl	8005fa6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	f1c3 0207 	rsb	r2, r3, #7
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2200      	movs	r2, #0
 80062d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	68f9      	ldr	r1, [r7, #12]
 80062e6:	69b8      	ldr	r0, [r7, #24]
 80062e8:	f000 fdd8 	bl	8006e9c <pxPortInitialiseStack>
 80062ec:	4602      	mov	r2, r0
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062fe:	bf00      	nop
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006310:	f000 feec 	bl	80070ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006314:	4b2a      	ldr	r3, [pc, #168]	; (80063c0 <prvAddNewTaskToReadyList+0xb8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3301      	adds	r3, #1
 800631a:	4a29      	ldr	r2, [pc, #164]	; (80063c0 <prvAddNewTaskToReadyList+0xb8>)
 800631c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800631e:	4b29      	ldr	r3, [pc, #164]	; (80063c4 <prvAddNewTaskToReadyList+0xbc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006326:	4a27      	ldr	r2, [pc, #156]	; (80063c4 <prvAddNewTaskToReadyList+0xbc>)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800632c:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <prvAddNewTaskToReadyList+0xb8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d110      	bne.n	8006356 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006334:	f000 fc6e 	bl	8006c14 <prvInitialiseTaskLists>
 8006338:	e00d      	b.n	8006356 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800633a:	4b23      	ldr	r3, [pc, #140]	; (80063c8 <prvAddNewTaskToReadyList+0xc0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d109      	bne.n	8006356 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006342:	4b20      	ldr	r3, [pc, #128]	; (80063c4 <prvAddNewTaskToReadyList+0xbc>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	429a      	cmp	r2, r3
 800634e:	d802      	bhi.n	8006356 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006350:	4a1c      	ldr	r2, [pc, #112]	; (80063c4 <prvAddNewTaskToReadyList+0xbc>)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <prvAddNewTaskToReadyList+0xc4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <prvAddNewTaskToReadyList+0xc4>)
 800635e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	2201      	movs	r2, #1
 8006366:	409a      	lsls	r2, r3
 8006368:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <prvAddNewTaskToReadyList+0xc8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4313      	orrs	r3, r2
 800636e:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <prvAddNewTaskToReadyList+0xc8>)
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4a15      	ldr	r2, [pc, #84]	; (80063d4 <prvAddNewTaskToReadyList+0xcc>)
 8006380:	441a      	add	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3304      	adds	r3, #4
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f7ff fe19 	bl	8005fc0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800638e:	f000 fedb 	bl	8007148 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006392:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <prvAddNewTaskToReadyList+0xc0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00e      	beq.n	80063b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800639a:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <prvAddNewTaskToReadyList+0xbc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d207      	bcs.n	80063b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <prvAddNewTaskToReadyList+0xd0>)
 80063aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000400 	.word	0x20000400
 80063c4:	20000300 	.word	0x20000300
 80063c8:	2000040c 	.word	0x2000040c
 80063cc:	2000041c 	.word	0x2000041c
 80063d0:	20000408 	.word	0x20000408
 80063d4:	20000304 	.word	0x20000304
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d109      	bne.n	8006404 <vTaskDelayUntil+0x28>
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e7fe      	b.n	8006402 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <vTaskDelayUntil+0x42>
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	e7fe      	b.n	800641c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800641e:	4b29      	ldr	r3, [pc, #164]	; (80064c4 <vTaskDelayUntil+0xe8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <vTaskDelayUntil+0x5e>
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e7fe      	b.n	8006438 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800643a:	f000 fa03 	bl	8006844 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800643e:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <vTaskDelayUntil+0xec>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	4413      	add	r3, r2
 800644c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	429a      	cmp	r2, r3
 8006456:	d20b      	bcs.n	8006470 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	429a      	cmp	r2, r3
 8006460:	d211      	bcs.n	8006486 <vTaskDelayUntil+0xaa>
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	429a      	cmp	r2, r3
 8006468:	d90d      	bls.n	8006486 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800646a:	2301      	movs	r3, #1
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
 800646e:	e00a      	b.n	8006486 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	429a      	cmp	r2, r3
 8006478:	d303      	bcc.n	8006482 <vTaskDelayUntil+0xa6>
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	429a      	cmp	r2, r3
 8006480:	d901      	bls.n	8006486 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8006482:	2301      	movs	r3, #1
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d006      	beq.n	80064a0 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fc98 	bl	8006dd0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80064a0:	f000 f9de 	bl	8006860 <xTaskResumeAll>
 80064a4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d107      	bne.n	80064bc <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80064ac:	4b07      	ldr	r3, [pc, #28]	; (80064cc <vTaskDelayUntil+0xf0>)
 80064ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064bc:	bf00      	nop
 80064be:	3728      	adds	r7, #40	; 0x28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000428 	.word	0x20000428
 80064c8:	20000404 	.word	0x20000404
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d016      	beq.n	8006510 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064e2:	4b13      	ldr	r3, [pc, #76]	; (8006530 <vTaskDelay+0x60>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d009      	beq.n	80064fe <vTaskDelay+0x2e>
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	60bb      	str	r3, [r7, #8]
 80064fc:	e7fe      	b.n	80064fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80064fe:	f000 f9a1 	bl	8006844 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006502:	2100      	movs	r1, #0
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fc63 	bl	8006dd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800650a:	f000 f9a9 	bl	8006860 <xTaskResumeAll>
 800650e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d107      	bne.n	8006526 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006516:	4b07      	ldr	r3, [pc, #28]	; (8006534 <vTaskDelay+0x64>)
 8006518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000428 	.word	0x20000428
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006540:	f000 fdd4 	bl	80070ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <vTaskSuspend+0x18>
 800654a:	4b3c      	ldr	r3, [pc, #240]	; (800663c <vTaskSuspend+0x104>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	e000      	b.n	8006552 <vTaskSuspend+0x1a>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3304      	adds	r3, #4
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fd8e 	bl	800607a <uxListRemove>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d115      	bne.n	8006590 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	4935      	ldr	r1, [pc, #212]	; (8006640 <vTaskSuspend+0x108>)
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10a      	bne.n	8006590 <vTaskSuspend+0x58>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	2201      	movs	r2, #1
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	43da      	mvns	r2, r3
 8006586:	4b2f      	ldr	r3, [pc, #188]	; (8006644 <vTaskSuspend+0x10c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4013      	ands	r3, r2
 800658c:	4a2d      	ldr	r2, [pc, #180]	; (8006644 <vTaskSuspend+0x10c>)
 800658e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	2b00      	cmp	r3, #0
 8006596:	d004      	beq.n	80065a2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3318      	adds	r3, #24
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff fd6c 	bl	800607a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4619      	mov	r1, r3
 80065a8:	4827      	ldr	r0, [pc, #156]	; (8006648 <vTaskSuspend+0x110>)
 80065aa:	f7ff fd09 	bl	8005fc0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d103      	bne.n	80065c2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80065c2:	f000 fdc1 	bl	8007148 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <vTaskSuspend+0x114>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80065ce:	f000 fd8d 	bl	80070ec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80065d2:	f000 fbb9 	bl	8006d48 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80065d6:	f000 fdb7 	bl	8007148 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80065da:	4b18      	ldr	r3, [pc, #96]	; (800663c <vTaskSuspend+0x104>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d126      	bne.n	8006632 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80065e4:	4b19      	ldr	r3, [pc, #100]	; (800664c <vTaskSuspend+0x114>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d016      	beq.n	800661a <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80065ec:	4b18      	ldr	r3, [pc, #96]	; (8006650 <vTaskSuspend+0x118>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <vTaskSuspend+0xd0>
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	60bb      	str	r3, [r7, #8]
 8006606:	e7fe      	b.n	8006606 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8006608:	4b12      	ldr	r3, [pc, #72]	; (8006654 <vTaskSuspend+0x11c>)
 800660a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006618:	e00b      	b.n	8006632 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <vTaskSuspend+0x110>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <vTaskSuspend+0x120>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d103      	bne.n	800662e <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8006626:	4b05      	ldr	r3, [pc, #20]	; (800663c <vTaskSuspend+0x104>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
	}
 800662c:	e001      	b.n	8006632 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800662e:	f000 fa7f 	bl	8006b30 <vTaskSwitchContext>
	}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000300 	.word	0x20000300
 8006640:	20000304 	.word	0x20000304
 8006644:	20000408 	.word	0x20000408
 8006648:	200003ec 	.word	0x200003ec
 800664c:	2000040c 	.word	0x2000040c
 8006650:	20000428 	.word	0x20000428
 8006654:	e000ed04 	.word	0xe000ed04
 8006658:	20000400 	.word	0x20000400

0800665c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <prvTaskIsTaskSuspended+0x2a>
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	e7fe      	b.n	8006684 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	4a0f      	ldr	r2, [pc, #60]	; (80066c8 <prvTaskIsTaskSuspended+0x6c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d101      	bne.n	8006694 <prvTaskIsTaskSuspended+0x38>
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <prvTaskIsTaskSuspended+0x3a>
 8006694:	2300      	movs	r3, #0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00f      	beq.n	80066ba <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	4a0b      	ldr	r2, [pc, #44]	; (80066cc <prvTaskIsTaskSuspended+0x70>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00a      	beq.n	80066ba <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <prvTaskIsTaskSuspended+0x54>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <prvTaskIsTaskSuspended+0x56>
 80066b0:	2300      	movs	r3, #0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80066b6:	2301      	movs	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066ba:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80066bc:	4618      	mov	r0, r3
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	200003ec 	.word	0x200003ec
 80066cc:	200003c0 	.word	0x200003c0

080066d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <vTaskResume+0x26>
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60bb      	str	r3, [r7, #8]
 80066f4:	e7fe      	b.n	80066f4 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d039      	beq.n	8006770 <vTaskResume+0xa0>
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <vTaskResume+0xa8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	429a      	cmp	r2, r3
 8006704:	d034      	beq.n	8006770 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8006706:	f000 fcf1 	bl	80070ec <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff ffa6 	bl	800665c <prvTaskIsTaskSuspended>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d02a      	beq.n	800676c <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3304      	adds	r3, #4
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fcad 	bl	800607a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	2201      	movs	r2, #1
 8006726:	409a      	lsls	r2, r3
 8006728:	4b14      	ldr	r3, [pc, #80]	; (800677c <vTaskResume+0xac>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4313      	orrs	r3, r2
 800672e:	4a13      	ldr	r2, [pc, #76]	; (800677c <vTaskResume+0xac>)
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4a10      	ldr	r2, [pc, #64]	; (8006780 <vTaskResume+0xb0>)
 8006740:	441a      	add	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3304      	adds	r3, #4
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f7ff fc39 	bl	8005fc0 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006752:	4b09      	ldr	r3, [pc, #36]	; (8006778 <vTaskResume+0xa8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	429a      	cmp	r2, r3
 800675a:	d307      	bcc.n	800676c <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800675c:	4b09      	ldr	r3, [pc, #36]	; (8006784 <vTaskResume+0xb4>)
 800675e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800676c:	f000 fcec 	bl	8007148 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006770:	bf00      	nop
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000300 	.word	0x20000300
 800677c:	20000408 	.word	0x20000408
 8006780:	20000304 	.word	0x20000304
 8006784:	e000ed04 	.word	0xe000ed04

08006788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08a      	sub	sp, #40	; 0x28
 800678c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800678e:	2300      	movs	r3, #0
 8006790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006796:	463a      	mov	r2, r7
 8006798:	1d39      	adds	r1, r7, #4
 800679a:	f107 0308 	add.w	r3, r7, #8
 800679e:	4618      	mov	r0, r3
 80067a0:	f7f9 feee 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	9202      	str	r2, [sp, #8]
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	2300      	movs	r3, #0
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	460a      	mov	r2, r1
 80067b6:	491d      	ldr	r1, [pc, #116]	; (800682c <vTaskStartScheduler+0xa4>)
 80067b8:	481d      	ldr	r0, [pc, #116]	; (8006830 <vTaskStartScheduler+0xa8>)
 80067ba:	f7ff fc88 	bl	80060ce <xTaskCreateStatic>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <vTaskStartScheduler+0xac>)
 80067c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067c4:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <vTaskStartScheduler+0xac>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067cc:	2301      	movs	r3, #1
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	e001      	b.n	80067d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d115      	bne.n	8006808 <vTaskStartScheduler+0x80>
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067ee:	4b12      	ldr	r3, [pc, #72]	; (8006838 <vTaskStartScheduler+0xb0>)
 80067f0:	f04f 32ff 	mov.w	r2, #4294967295
 80067f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067f6:	4b11      	ldr	r3, [pc, #68]	; (800683c <vTaskStartScheduler+0xb4>)
 80067f8:	2201      	movs	r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067fc:	4b10      	ldr	r3, [pc, #64]	; (8006840 <vTaskStartScheduler+0xb8>)
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006802:	f000 fbd5 	bl	8006fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006806:	e00d      	b.n	8006824 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680e:	d109      	bne.n	8006824 <vTaskStartScheduler+0x9c>
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	e7fe      	b.n	8006822 <vTaskStartScheduler+0x9a>
}
 8006824:	bf00      	nop
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	08008034 	.word	0x08008034
 8006830:	08006be5 	.word	0x08006be5
 8006834:	20000424 	.word	0x20000424
 8006838:	20000420 	.word	0x20000420
 800683c:	2000040c 	.word	0x2000040c
 8006840:	20000404 	.word	0x20000404

08006844 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <vTaskSuspendAll+0x18>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3301      	adds	r3, #1
 800684e:	4a03      	ldr	r2, [pc, #12]	; (800685c <vTaskSuspendAll+0x18>)
 8006850:	6013      	str	r3, [r2, #0]
}
 8006852:	bf00      	nop
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	20000428 	.word	0x20000428

08006860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800686e:	4b41      	ldr	r3, [pc, #260]	; (8006974 <xTaskResumeAll+0x114>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <xTaskResumeAll+0x2a>
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	e7fe      	b.n	8006888 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800688a:	f000 fc2f 	bl	80070ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800688e:	4b39      	ldr	r3, [pc, #228]	; (8006974 <xTaskResumeAll+0x114>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3b01      	subs	r3, #1
 8006894:	4a37      	ldr	r2, [pc, #220]	; (8006974 <xTaskResumeAll+0x114>)
 8006896:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006898:	4b36      	ldr	r3, [pc, #216]	; (8006974 <xTaskResumeAll+0x114>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d161      	bne.n	8006964 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068a0:	4b35      	ldr	r3, [pc, #212]	; (8006978 <xTaskResumeAll+0x118>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d05d      	beq.n	8006964 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068a8:	e02e      	b.n	8006908 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80068aa:	4b34      	ldr	r3, [pc, #208]	; (800697c <xTaskResumeAll+0x11c>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3318      	adds	r3, #24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff fbdf 	bl	800607a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3304      	adds	r3, #4
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff fbda 	bl	800607a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	2201      	movs	r2, #1
 80068cc:	409a      	lsls	r2, r3
 80068ce:	4b2c      	ldr	r3, [pc, #176]	; (8006980 <xTaskResumeAll+0x120>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	4a2a      	ldr	r2, [pc, #168]	; (8006980 <xTaskResumeAll+0x120>)
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4a27      	ldr	r2, [pc, #156]	; (8006984 <xTaskResumeAll+0x124>)
 80068e6:	441a      	add	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f7ff fb66 	bl	8005fc0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	4b23      	ldr	r3, [pc, #140]	; (8006988 <xTaskResumeAll+0x128>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	429a      	cmp	r2, r3
 8006900:	d302      	bcc.n	8006908 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006902:	4b22      	ldr	r3, [pc, #136]	; (800698c <xTaskResumeAll+0x12c>)
 8006904:	2201      	movs	r2, #1
 8006906:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006908:	4b1c      	ldr	r3, [pc, #112]	; (800697c <xTaskResumeAll+0x11c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1cc      	bne.n	80068aa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006916:	f000 fa17 	bl	8006d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800691a:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <xTaskResumeAll+0x130>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d010      	beq.n	8006948 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006926:	f000 f847 	bl	80069b8 <xTaskIncrementTick>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006930:	4b16      	ldr	r3, [pc, #88]	; (800698c <xTaskResumeAll+0x12c>)
 8006932:	2201      	movs	r2, #1
 8006934:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3b01      	subs	r3, #1
 800693a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f1      	bne.n	8006926 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006942:	4b13      	ldr	r3, [pc, #76]	; (8006990 <xTaskResumeAll+0x130>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006948:	4b10      	ldr	r3, [pc, #64]	; (800698c <xTaskResumeAll+0x12c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006954:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <xTaskResumeAll+0x134>)
 8006956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006964:	f000 fbf0 	bl	8007148 <vPortExitCritical>

	return xAlreadyYielded;
 8006968:	68bb      	ldr	r3, [r7, #8]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000428 	.word	0x20000428
 8006978:	20000400 	.word	0x20000400
 800697c:	200003c0 	.word	0x200003c0
 8006980:	20000408 	.word	0x20000408
 8006984:	20000304 	.word	0x20000304
 8006988:	20000300 	.word	0x20000300
 800698c:	20000414 	.word	0x20000414
 8006990:	20000410 	.word	0x20000410
 8006994:	e000ed04 	.word	0xe000ed04

08006998 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800699e:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <xTaskGetTickCount+0x1c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069a4:	687b      	ldr	r3, [r7, #4]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000404 	.word	0x20000404

080069b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c2:	4b50      	ldr	r3, [pc, #320]	; (8006b04 <xTaskIncrementTick+0x14c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 808c 	bne.w	8006ae4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069cc:	4b4e      	ldr	r3, [pc, #312]	; (8006b08 <xTaskIncrementTick+0x150>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069d4:	4a4c      	ldr	r2, [pc, #304]	; (8006b08 <xTaskIncrementTick+0x150>)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d11f      	bne.n	8006a20 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80069e0:	4b4a      	ldr	r3, [pc, #296]	; (8006b0c <xTaskIncrementTick+0x154>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <xTaskIncrementTick+0x46>
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	e7fe      	b.n	80069fc <xTaskIncrementTick+0x44>
 80069fe:	4b43      	ldr	r3, [pc, #268]	; (8006b0c <xTaskIncrementTick+0x154>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	4b42      	ldr	r3, [pc, #264]	; (8006b10 <xTaskIncrementTick+0x158>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a40      	ldr	r2, [pc, #256]	; (8006b0c <xTaskIncrementTick+0x154>)
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	4a40      	ldr	r2, [pc, #256]	; (8006b10 <xTaskIncrementTick+0x158>)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	4b40      	ldr	r3, [pc, #256]	; (8006b14 <xTaskIncrementTick+0x15c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3301      	adds	r3, #1
 8006a18:	4a3e      	ldr	r2, [pc, #248]	; (8006b14 <xTaskIncrementTick+0x15c>)
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	f000 f994 	bl	8006d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a20:	4b3d      	ldr	r3, [pc, #244]	; (8006b18 <xTaskIncrementTick+0x160>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d34d      	bcc.n	8006ac6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a2a:	4b38      	ldr	r3, [pc, #224]	; (8006b0c <xTaskIncrementTick+0x154>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <xTaskIncrementTick+0x80>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <xTaskIncrementTick+0x82>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a3e:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <xTaskIncrementTick+0x160>)
 8006a40:	f04f 32ff 	mov.w	r2, #4294967295
 8006a44:	601a      	str	r2, [r3, #0]
					break;
 8006a46:	e03e      	b.n	8006ac6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a48:	4b30      	ldr	r3, [pc, #192]	; (8006b0c <xTaskIncrementTick+0x154>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d203      	bcs.n	8006a68 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a60:	4a2d      	ldr	r2, [pc, #180]	; (8006b18 <xTaskIncrementTick+0x160>)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6013      	str	r3, [r2, #0]
						break;
 8006a66:	e02e      	b.n	8006ac6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fb04 	bl	800607a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d004      	beq.n	8006a84 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	3318      	adds	r3, #24
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fafb 	bl	800607a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	2201      	movs	r2, #1
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	4b23      	ldr	r3, [pc, #140]	; (8006b1c <xTaskIncrementTick+0x164>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	4a22      	ldr	r2, [pc, #136]	; (8006b1c <xTaskIncrementTick+0x164>)
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <xTaskIncrementTick+0x168>)
 8006aa4:	441a      	add	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4610      	mov	r0, r2
 8006aae:	f7ff fa87 	bl	8005fc0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab6:	4b1b      	ldr	r3, [pc, #108]	; (8006b24 <xTaskIncrementTick+0x16c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d3b4      	bcc.n	8006a2a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ac4:	e7b1      	b.n	8006a2a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ac6:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <xTaskIncrementTick+0x16c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	4914      	ldr	r1, [pc, #80]	; (8006b20 <xTaskIncrementTick+0x168>)
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d907      	bls.n	8006aee <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	e004      	b.n	8006aee <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ae4:	4b10      	ldr	r3, [pc, #64]	; (8006b28 <xTaskIncrementTick+0x170>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	4a0f      	ldr	r2, [pc, #60]	; (8006b28 <xTaskIncrementTick+0x170>)
 8006aec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006aee:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <xTaskIncrementTick+0x174>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006af6:	2301      	movs	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006afa:	697b      	ldr	r3, [r7, #20]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20000428 	.word	0x20000428
 8006b08:	20000404 	.word	0x20000404
 8006b0c:	200003b8 	.word	0x200003b8
 8006b10:	200003bc 	.word	0x200003bc
 8006b14:	20000418 	.word	0x20000418
 8006b18:	20000420 	.word	0x20000420
 8006b1c:	20000408 	.word	0x20000408
 8006b20:	20000304 	.word	0x20000304
 8006b24:	20000300 	.word	0x20000300
 8006b28:	20000410 	.word	0x20000410
 8006b2c:	20000414 	.word	0x20000414

08006b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b36:	4b26      	ldr	r3, [pc, #152]	; (8006bd0 <vTaskSwitchContext+0xa0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b3e:	4b25      	ldr	r3, [pc, #148]	; (8006bd4 <vTaskSwitchContext+0xa4>)
 8006b40:	2201      	movs	r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b44:	e03e      	b.n	8006bc4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006b46:	4b23      	ldr	r3, [pc, #140]	; (8006bd4 <vTaskSwitchContext+0xa4>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b4c:	4b22      	ldr	r3, [pc, #136]	; (8006bd8 <vTaskSwitchContext+0xa8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	fab3 f383 	clz	r3, r3
 8006b58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	f1c3 031f 	rsb	r3, r3, #31
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	491e      	ldr	r1, [pc, #120]	; (8006bdc <vTaskSwitchContext+0xac>)
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	440b      	add	r3, r1
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <vTaskSwitchContext+0x5a>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	607b      	str	r3, [r7, #4]
 8006b88:	e7fe      	b.n	8006b88 <vTaskSwitchContext+0x58>
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4a11      	ldr	r2, [pc, #68]	; (8006bdc <vTaskSwitchContext+0xac>)
 8006b96:	4413      	add	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	3308      	adds	r3, #8
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d104      	bne.n	8006bba <vTaskSwitchContext+0x8a>
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	4a07      	ldr	r2, [pc, #28]	; (8006be0 <vTaskSwitchContext+0xb0>)
 8006bc2:	6013      	str	r3, [r2, #0]
}
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	20000428 	.word	0x20000428
 8006bd4:	20000414 	.word	0x20000414
 8006bd8:	20000408 	.word	0x20000408
 8006bdc:	20000304 	.word	0x20000304
 8006be0:	20000300 	.word	0x20000300

08006be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bec:	f000 f852 	bl	8006c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <prvIdleTask+0x28>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d9f9      	bls.n	8006bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <prvIdleTask+0x2c>)
 8006bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c08:	e7f0      	b.n	8006bec <prvIdleTask+0x8>
 8006c0a:	bf00      	nop
 8006c0c:	20000304 	.word	0x20000304
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	607b      	str	r3, [r7, #4]
 8006c1e:	e00c      	b.n	8006c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4a12      	ldr	r2, [pc, #72]	; (8006c74 <prvInitialiseTaskLists+0x60>)
 8006c2c:	4413      	add	r3, r2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff f999 	bl	8005f66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3301      	adds	r3, #1
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b06      	cmp	r3, #6
 8006c3e:	d9ef      	bls.n	8006c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c40:	480d      	ldr	r0, [pc, #52]	; (8006c78 <prvInitialiseTaskLists+0x64>)
 8006c42:	f7ff f990 	bl	8005f66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c46:	480d      	ldr	r0, [pc, #52]	; (8006c7c <prvInitialiseTaskLists+0x68>)
 8006c48:	f7ff f98d 	bl	8005f66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c4c:	480c      	ldr	r0, [pc, #48]	; (8006c80 <prvInitialiseTaskLists+0x6c>)
 8006c4e:	f7ff f98a 	bl	8005f66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c52:	480c      	ldr	r0, [pc, #48]	; (8006c84 <prvInitialiseTaskLists+0x70>)
 8006c54:	f7ff f987 	bl	8005f66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c58:	480b      	ldr	r0, [pc, #44]	; (8006c88 <prvInitialiseTaskLists+0x74>)
 8006c5a:	f7ff f984 	bl	8005f66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <prvInitialiseTaskLists+0x78>)
 8006c60:	4a05      	ldr	r2, [pc, #20]	; (8006c78 <prvInitialiseTaskLists+0x64>)
 8006c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c64:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <prvInitialiseTaskLists+0x7c>)
 8006c66:	4a05      	ldr	r2, [pc, #20]	; (8006c7c <prvInitialiseTaskLists+0x68>)
 8006c68:	601a      	str	r2, [r3, #0]
}
 8006c6a:	bf00      	nop
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000304 	.word	0x20000304
 8006c78:	20000390 	.word	0x20000390
 8006c7c:	200003a4 	.word	0x200003a4
 8006c80:	200003c0 	.word	0x200003c0
 8006c84:	200003d4 	.word	0x200003d4
 8006c88:	200003ec 	.word	0x200003ec
 8006c8c:	200003b8 	.word	0x200003b8
 8006c90:	200003bc 	.word	0x200003bc

08006c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c9a:	e019      	b.n	8006cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c9c:	f000 fa26 	bl	80070ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <prvCheckTasksWaitingTermination+0x4c>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff f9e4 	bl	800607a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <prvCheckTasksWaitingTermination+0x50>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	4a0a      	ldr	r2, [pc, #40]	; (8006ce4 <prvCheckTasksWaitingTermination+0x50>)
 8006cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <prvCheckTasksWaitingTermination+0x54>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	4a09      	ldr	r2, [pc, #36]	; (8006ce8 <prvCheckTasksWaitingTermination+0x54>)
 8006cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cc6:	f000 fa3f 	bl	8007148 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f80e 	bl	8006cec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cd0:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <prvCheckTasksWaitingTermination+0x54>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e1      	bne.n	8006c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	200003d4 	.word	0x200003d4
 8006ce4:	20000400 	.word	0x20000400
 8006ce8:	200003e8 	.word	0x200003e8

08006cec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d108      	bne.n	8006d10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fb90 	bl	8007428 <vPortFree>
				vPortFree( pxTCB );
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fb8d 	bl	8007428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d0e:	e017      	b.n	8006d40 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d103      	bne.n	8006d22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fb84 	bl	8007428 <vPortFree>
	}
 8006d20:	e00e      	b.n	8006d40 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d009      	beq.n	8006d40 <prvDeleteTCB+0x54>
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e7fe      	b.n	8006d3e <prvDeleteTCB+0x52>
	}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d4e:	4b0f      	ldr	r3, [pc, #60]	; (8006d8c <prvResetNextTaskUnblockTime+0x44>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <prvResetNextTaskUnblockTime+0x14>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <prvResetNextTaskUnblockTime+0x16>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d62:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <prvResetNextTaskUnblockTime+0x48>)
 8006d64:	f04f 32ff 	mov.w	r2, #4294967295
 8006d68:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d6a:	e008      	b.n	8006d7e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d6c:	4b07      	ldr	r3, [pc, #28]	; (8006d8c <prvResetNextTaskUnblockTime+0x44>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	4a05      	ldr	r2, [pc, #20]	; (8006d90 <prvResetNextTaskUnblockTime+0x48>)
 8006d7c:	6013      	str	r3, [r2, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	200003b8 	.word	0x200003b8
 8006d90:	20000420 	.word	0x20000420

08006d94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <xTaskGetSchedulerState+0x34>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006da2:	2301      	movs	r3, #1
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	e008      	b.n	8006dba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006da8:	4b08      	ldr	r3, [pc, #32]	; (8006dcc <xTaskGetSchedulerState+0x38>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006db0:	2302      	movs	r3, #2
 8006db2:	607b      	str	r3, [r7, #4]
 8006db4:	e001      	b.n	8006dba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006db6:	2300      	movs	r3, #0
 8006db8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dba:	687b      	ldr	r3, [r7, #4]
	}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	2000040c 	.word	0x2000040c
 8006dcc:	20000428 	.word	0x20000428

08006dd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dda:	4b29      	ldr	r3, [pc, #164]	; (8006e80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006de0:	4b28      	ldr	r3, [pc, #160]	; (8006e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff f947 	bl	800607a <uxListRemove>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10b      	bne.n	8006e0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006df2:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	2201      	movs	r2, #1
 8006dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfe:	43da      	mvns	r2, r3
 8006e00:	4b21      	ldr	r3, [pc, #132]	; (8006e88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4013      	ands	r3, r2
 8006e06:	4a20      	ldr	r2, [pc, #128]	; (8006e88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e10:	d10a      	bne.n	8006e28 <prvAddCurrentTaskToDelayedList+0x58>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d007      	beq.n	8006e28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e18:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	481a      	ldr	r0, [pc, #104]	; (8006e8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e22:	f7ff f8cd 	bl	8005fc0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e26:	e026      	b.n	8006e76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e30:	4b14      	ldr	r3, [pc, #80]	; (8006e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d209      	bcs.n	8006e54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e40:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	4b0f      	ldr	r3, [pc, #60]	; (8006e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f7ff f8db 	bl	8006008 <vListInsert>
}
 8006e52:	e010      	b.n	8006e76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e54:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f7ff f8d1 	bl	8006008 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e66:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d202      	bcs.n	8006e76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e70:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6013      	str	r3, [r2, #0]
}
 8006e76:	bf00      	nop
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000404 	.word	0x20000404
 8006e84:	20000300 	.word	0x20000300
 8006e88:	20000408 	.word	0x20000408
 8006e8c:	200003ec 	.word	0x200003ec
 8006e90:	200003bc 	.word	0x200003bc
 8006e94:	200003b8 	.word	0x200003b8
 8006e98:	20000420 	.word	0x20000420

08006e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3b04      	subs	r3, #4
 8006eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3b04      	subs	r3, #4
 8006eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f023 0201 	bic.w	r2, r3, #1
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3b04      	subs	r3, #4
 8006eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ecc:	4a0c      	ldr	r2, [pc, #48]	; (8006f00 <pxPortInitialiseStack+0x64>)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3b14      	subs	r3, #20
 8006ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3b04      	subs	r3, #4
 8006ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f06f 0202 	mvn.w	r2, #2
 8006eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3b20      	subs	r3, #32
 8006ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	08006f05 	.word	0x08006f05

08006f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f0e:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <prvTaskExitError+0x50>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d009      	beq.n	8006f2c <prvTaskExitError+0x28>
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	e7fe      	b.n	8006f2a <prvTaskExitError+0x26>
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f3e:	bf00      	nop
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0fc      	beq.n	8006f40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	2000000c 	.word	0x2000000c
	...

08006f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <pxCurrentTCBConst2>)
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	f380 8809 	msr	PSP, r0
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8811 	msr	BASEPRI, r0
 8006f7a:	4770      	bx	lr
 8006f7c:	f3af 8000 	nop.w

08006f80 <pxCurrentTCBConst2>:
 8006f80:	20000300 	.word	0x20000300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop

08006f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f88:	4808      	ldr	r0, [pc, #32]	; (8006fac <prvPortStartFirstTask+0x24>)
 8006f8a:	6800      	ldr	r0, [r0, #0]
 8006f8c:	6800      	ldr	r0, [r0, #0]
 8006f8e:	f380 8808 	msr	MSP, r0
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8814 	msr	CONTROL, r0
 8006f9a:	b662      	cpsie	i
 8006f9c:	b661      	cpsie	f
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	df00      	svc	0
 8006fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006faa:	bf00      	nop
 8006fac:	e000ed08 	.word	0xe000ed08

08006fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fb6:	4b44      	ldr	r3, [pc, #272]	; (80070c8 <xPortStartScheduler+0x118>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a44      	ldr	r2, [pc, #272]	; (80070cc <xPortStartScheduler+0x11c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d109      	bne.n	8006fd4 <xPortStartScheduler+0x24>
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	e7fe      	b.n	8006fd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fd4:	4b3c      	ldr	r3, [pc, #240]	; (80070c8 <xPortStartScheduler+0x118>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a3d      	ldr	r2, [pc, #244]	; (80070d0 <xPortStartScheduler+0x120>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d109      	bne.n	8006ff2 <xPortStartScheduler+0x42>
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e7fe      	b.n	8006ff0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ff2:	4b38      	ldr	r3, [pc, #224]	; (80070d4 <xPortStartScheduler+0x124>)
 8006ff4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	22ff      	movs	r2, #255	; 0xff
 8007002:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4b30      	ldr	r3, [pc, #192]	; (80070d8 <xPortStartScheduler+0x128>)
 8007018:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800701a:	4b30      	ldr	r3, [pc, #192]	; (80070dc <xPortStartScheduler+0x12c>)
 800701c:	2207      	movs	r2, #7
 800701e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007020:	e009      	b.n	8007036 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007022:	4b2e      	ldr	r3, [pc, #184]	; (80070dc <xPortStartScheduler+0x12c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3b01      	subs	r3, #1
 8007028:	4a2c      	ldr	r2, [pc, #176]	; (80070dc <xPortStartScheduler+0x12c>)
 800702a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	b2db      	uxtb	r3, r3
 8007034:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b80      	cmp	r3, #128	; 0x80
 8007040:	d0ef      	beq.n	8007022 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007042:	4b26      	ldr	r3, [pc, #152]	; (80070dc <xPortStartScheduler+0x12c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f1c3 0307 	rsb	r3, r3, #7
 800704a:	2b04      	cmp	r3, #4
 800704c:	d009      	beq.n	8007062 <xPortStartScheduler+0xb2>
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	60bb      	str	r3, [r7, #8]
 8007060:	e7fe      	b.n	8007060 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007062:	4b1e      	ldr	r3, [pc, #120]	; (80070dc <xPortStartScheduler+0x12c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	4a1c      	ldr	r2, [pc, #112]	; (80070dc <xPortStartScheduler+0x12c>)
 800706a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800706c:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <xPortStartScheduler+0x12c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007074:	4a19      	ldr	r2, [pc, #100]	; (80070dc <xPortStartScheduler+0x12c>)
 8007076:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007080:	4b17      	ldr	r3, [pc, #92]	; (80070e0 <xPortStartScheduler+0x130>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <xPortStartScheduler+0x130>)
 8007086:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800708a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800708c:	4b14      	ldr	r3, [pc, #80]	; (80070e0 <xPortStartScheduler+0x130>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <xPortStartScheduler+0x130>)
 8007092:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007096:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007098:	f000 f8d6 	bl	8007248 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800709c:	4b11      	ldr	r3, [pc, #68]	; (80070e4 <xPortStartScheduler+0x134>)
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070a2:	f000 f8f5 	bl	8007290 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070a6:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <xPortStartScheduler+0x138>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a0f      	ldr	r2, [pc, #60]	; (80070e8 <xPortStartScheduler+0x138>)
 80070ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070b2:	f7ff ff69 	bl	8006f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070b6:	f7ff fd3b 	bl	8006b30 <vTaskSwitchContext>
	prvTaskExitError();
 80070ba:	f7ff ff23 	bl	8006f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	e000ed00 	.word	0xe000ed00
 80070cc:	410fc271 	.word	0x410fc271
 80070d0:	410fc270 	.word	0x410fc270
 80070d4:	e000e400 	.word	0xe000e400
 80070d8:	2000042c 	.word	0x2000042c
 80070dc:	20000430 	.word	0x20000430
 80070e0:	e000ed20 	.word	0xe000ed20
 80070e4:	2000000c 	.word	0x2000000c
 80070e8:	e000ef34 	.word	0xe000ef34

080070ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <vPortEnterCritical+0x54>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3301      	adds	r3, #1
 800710a:	4a0d      	ldr	r2, [pc, #52]	; (8007140 <vPortEnterCritical+0x54>)
 800710c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800710e:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <vPortEnterCritical+0x54>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10e      	bne.n	8007134 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <vPortEnterCritical+0x58>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <vPortEnterCritical+0x48>
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	e7fe      	b.n	8007132 <vPortEnterCritical+0x46>
	}
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	2000000c 	.word	0x2000000c
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800714e:	4b11      	ldr	r3, [pc, #68]	; (8007194 <vPortExitCritical+0x4c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <vPortExitCritical+0x22>
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	607b      	str	r3, [r7, #4]
 8007168:	e7fe      	b.n	8007168 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800716a:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <vPortExitCritical+0x4c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3b01      	subs	r3, #1
 8007170:	4a08      	ldr	r2, [pc, #32]	; (8007194 <vPortExitCritical+0x4c>)
 8007172:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007174:	4b07      	ldr	r3, [pc, #28]	; (8007194 <vPortExitCritical+0x4c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <vPortExitCritical+0x3e>
 800717c:	2300      	movs	r3, #0
 800717e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	2000000c 	.word	0x2000000c
	...

080071a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071a0:	f3ef 8009 	mrs	r0, PSP
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4b15      	ldr	r3, [pc, #84]	; (8007200 <pxCurrentTCBConst>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f01e 0f10 	tst.w	lr, #16
 80071b0:	bf08      	it	eq
 80071b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071c4:	f380 8811 	msr	BASEPRI, r0
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f7ff fcae 	bl	8006b30 <vTaskSwitchContext>
 80071d4:	f04f 0000 	mov.w	r0, #0
 80071d8:	f380 8811 	msr	BASEPRI, r0
 80071dc:	bc09      	pop	{r0, r3}
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e6:	f01e 0f10 	tst.w	lr, #16
 80071ea:	bf08      	it	eq
 80071ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071f0:	f380 8809 	msr	PSP, r0
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w

08007200 <pxCurrentTCBConst>:
 8007200:	20000300 	.word	0x20000300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop

08007208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007220:	f7ff fbca 	bl	80069b8 <xTaskIncrementTick>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800722a:	4b06      	ldr	r3, [pc, #24]	; (8007244 <xPortSysTickHandler+0x3c>)
 800722c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	2300      	movs	r3, #0
 8007234:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	e000ed04 	.word	0xe000ed04

08007248 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800724c:	4b0b      	ldr	r3, [pc, #44]	; (800727c <vPortSetupTimerInterrupt+0x34>)
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007252:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <vPortSetupTimerInterrupt+0x38>)
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007258:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <vPortSetupTimerInterrupt+0x3c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a0a      	ldr	r2, [pc, #40]	; (8007288 <vPortSetupTimerInterrupt+0x40>)
 800725e:	fba2 2303 	umull	r2, r3, r2, r3
 8007262:	099b      	lsrs	r3, r3, #6
 8007264:	4a09      	ldr	r2, [pc, #36]	; (800728c <vPortSetupTimerInterrupt+0x44>)
 8007266:	3b01      	subs	r3, #1
 8007268:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800726a:	4b04      	ldr	r3, [pc, #16]	; (800727c <vPortSetupTimerInterrupt+0x34>)
 800726c:	2207      	movs	r2, #7
 800726e:	601a      	str	r2, [r3, #0]
}
 8007270:	bf00      	nop
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	e000e010 	.word	0xe000e010
 8007280:	e000e018 	.word	0xe000e018
 8007284:	20000000 	.word	0x20000000
 8007288:	10624dd3 	.word	0x10624dd3
 800728c:	e000e014 	.word	0xe000e014

08007290 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007290:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072a0 <vPortEnableVFP+0x10>
 8007294:	6801      	ldr	r1, [r0, #0]
 8007296:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800729a:	6001      	str	r1, [r0, #0]
 800729c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800729e:	bf00      	nop
 80072a0:	e000ed88 	.word	0xe000ed88

080072a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072b0:	f7ff fac8 	bl	8006844 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072b4:	4b57      	ldr	r3, [pc, #348]	; (8007414 <pvPortMalloc+0x170>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072bc:	f000 f90c 	bl	80074d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072c0:	4b55      	ldr	r3, [pc, #340]	; (8007418 <pvPortMalloc+0x174>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f040 808c 	bne.w	80073e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01c      	beq.n	800730e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80072d4:	2208      	movs	r2, #8
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4413      	add	r3, r2
 80072da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d013      	beq.n	800730e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f023 0307 	bic.w	r3, r3, #7
 80072ec:	3308      	adds	r3, #8
 80072ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <pvPortMalloc+0x6a>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	e7fe      	b.n	800730c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d068      	beq.n	80073e6 <pvPortMalloc+0x142>
 8007314:	4b41      	ldr	r3, [pc, #260]	; (800741c <pvPortMalloc+0x178>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d863      	bhi.n	80073e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800731e:	4b40      	ldr	r3, [pc, #256]	; (8007420 <pvPortMalloc+0x17c>)
 8007320:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007322:	4b3f      	ldr	r3, [pc, #252]	; (8007420 <pvPortMalloc+0x17c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007328:	e004      	b.n	8007334 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	429a      	cmp	r2, r3
 800733c:	d903      	bls.n	8007346 <pvPortMalloc+0xa2>
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f1      	bne.n	800732a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007346:	4b33      	ldr	r3, [pc, #204]	; (8007414 <pvPortMalloc+0x170>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800734c:	429a      	cmp	r2, r3
 800734e:	d04a      	beq.n	80073e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2208      	movs	r2, #8
 8007356:	4413      	add	r3, r2
 8007358:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	1ad2      	subs	r2, r2, r3
 800736a:	2308      	movs	r3, #8
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	429a      	cmp	r2, r3
 8007370:	d91e      	bls.n	80073b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	2b00      	cmp	r3, #0
 8007382:	d009      	beq.n	8007398 <pvPortMalloc+0xf4>
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	613b      	str	r3, [r7, #16]
 8007396:	e7fe      	b.n	8007396 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073aa:	69b8      	ldr	r0, [r7, #24]
 80073ac:	f000 f8f6 	bl	800759c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073b0:	4b1a      	ldr	r3, [pc, #104]	; (800741c <pvPortMalloc+0x178>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	4a18      	ldr	r2, [pc, #96]	; (800741c <pvPortMalloc+0x178>)
 80073bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073be:	4b17      	ldr	r3, [pc, #92]	; (800741c <pvPortMalloc+0x178>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b18      	ldr	r3, [pc, #96]	; (8007424 <pvPortMalloc+0x180>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d203      	bcs.n	80073d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073ca:	4b14      	ldr	r3, [pc, #80]	; (800741c <pvPortMalloc+0x178>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a15      	ldr	r2, [pc, #84]	; (8007424 <pvPortMalloc+0x180>)
 80073d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	4b10      	ldr	r3, [pc, #64]	; (8007418 <pvPortMalloc+0x174>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	431a      	orrs	r2, r3
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073e6:	f7ff fa3b 	bl	8006860 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <pvPortMalloc+0x164>
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	e7fe      	b.n	8007406 <pvPortMalloc+0x162>
	return pvReturn;
 8007408:	69fb      	ldr	r3, [r7, #28]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3728      	adds	r7, #40	; 0x28
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	2000403c 	.word	0x2000403c
 8007418:	20004048 	.word	0x20004048
 800741c:	20004040 	.word	0x20004040
 8007420:	20004034 	.word	0x20004034
 8007424:	20004044 	.word	0x20004044

08007428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d046      	beq.n	80074c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800743a:	2308      	movs	r3, #8
 800743c:	425b      	negs	r3, r3
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4413      	add	r3, r2
 8007442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	4b20      	ldr	r3, [pc, #128]	; (80074d0 <vPortFree+0xa8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <vPortFree+0x42>
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	e7fe      	b.n	8007468 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <vPortFree+0x5e>
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60bb      	str	r3, [r7, #8]
 8007484:	e7fe      	b.n	8007484 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <vPortFree+0xa8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4013      	ands	r3, r2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d019      	beq.n	80074c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d115      	bne.n	80074c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <vPortFree+0xa8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	43db      	mvns	r3, r3
 80074a6:	401a      	ands	r2, r3
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074ac:	f7ff f9ca 	bl	8006844 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	4b07      	ldr	r3, [pc, #28]	; (80074d4 <vPortFree+0xac>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4413      	add	r3, r2
 80074ba:	4a06      	ldr	r2, [pc, #24]	; (80074d4 <vPortFree+0xac>)
 80074bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074be:	6938      	ldr	r0, [r7, #16]
 80074c0:	f000 f86c 	bl	800759c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80074c4:	f7ff f9cc 	bl	8006860 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074c8:	bf00      	nop
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20004048 	.word	0x20004048
 80074d4:	20004040 	.word	0x20004040

080074d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80074e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074e4:	4b27      	ldr	r3, [pc, #156]	; (8007584 <prvHeapInit+0xac>)
 80074e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00c      	beq.n	800750c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3307      	adds	r3, #7
 80074f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0307 	bic.w	r3, r3, #7
 80074fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	4a1f      	ldr	r2, [pc, #124]	; (8007584 <prvHeapInit+0xac>)
 8007508:	4413      	add	r3, r2
 800750a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007510:	4a1d      	ldr	r2, [pc, #116]	; (8007588 <prvHeapInit+0xb0>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007516:	4b1c      	ldr	r3, [pc, #112]	; (8007588 <prvHeapInit+0xb0>)
 8007518:	2200      	movs	r2, #0
 800751a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	4413      	add	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007524:	2208      	movs	r2, #8
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	1a9b      	subs	r3, r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0307 	bic.w	r3, r3, #7
 8007532:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4a15      	ldr	r2, [pc, #84]	; (800758c <prvHeapInit+0xb4>)
 8007538:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800753a:	4b14      	ldr	r3, [pc, #80]	; (800758c <prvHeapInit+0xb4>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <prvHeapInit+0xb4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007558:	4b0c      	ldr	r3, [pc, #48]	; (800758c <prvHeapInit+0xb4>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4a0a      	ldr	r2, [pc, #40]	; (8007590 <prvHeapInit+0xb8>)
 8007566:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	4a09      	ldr	r2, [pc, #36]	; (8007594 <prvHeapInit+0xbc>)
 800756e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007570:	4b09      	ldr	r3, [pc, #36]	; (8007598 <prvHeapInit+0xc0>)
 8007572:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007576:	601a      	str	r2, [r3, #0]
}
 8007578:	bf00      	nop
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	20000434 	.word	0x20000434
 8007588:	20004034 	.word	0x20004034
 800758c:	2000403c 	.word	0x2000403c
 8007590:	20004044 	.word	0x20004044
 8007594:	20004040 	.word	0x20004040
 8007598:	20004048 	.word	0x20004048

0800759c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075a4:	4b28      	ldr	r3, [pc, #160]	; (8007648 <prvInsertBlockIntoFreeList+0xac>)
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	e002      	b.n	80075b0 <prvInsertBlockIntoFreeList+0x14>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d8f7      	bhi.n	80075aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	4413      	add	r3, r2
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d108      	bne.n	80075de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	441a      	add	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	441a      	add	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d118      	bne.n	8007624 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4b15      	ldr	r3, [pc, #84]	; (800764c <prvInsertBlockIntoFreeList+0xb0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d00d      	beq.n	800761a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	441a      	add	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e008      	b.n	800762c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800761a:	4b0c      	ldr	r3, [pc, #48]	; (800764c <prvInsertBlockIntoFreeList+0xb0>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	e003      	b.n	800762c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d002      	beq.n	800763a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20004034 	.word	0x20004034
 800764c:	2000403c 	.word	0x2000403c

08007650 <__errno>:
 8007650:	4b01      	ldr	r3, [pc, #4]	; (8007658 <__errno+0x8>)
 8007652:	6818      	ldr	r0, [r3, #0]
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	20000010 	.word	0x20000010

0800765c <__libc_init_array>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	4e0d      	ldr	r6, [pc, #52]	; (8007694 <__libc_init_array+0x38>)
 8007660:	4c0d      	ldr	r4, [pc, #52]	; (8007698 <__libc_init_array+0x3c>)
 8007662:	1ba4      	subs	r4, r4, r6
 8007664:	10a4      	asrs	r4, r4, #2
 8007666:	2500      	movs	r5, #0
 8007668:	42a5      	cmp	r5, r4
 800766a:	d109      	bne.n	8007680 <__libc_init_array+0x24>
 800766c:	4e0b      	ldr	r6, [pc, #44]	; (800769c <__libc_init_array+0x40>)
 800766e:	4c0c      	ldr	r4, [pc, #48]	; (80076a0 <__libc_init_array+0x44>)
 8007670:	f000 fc28 	bl	8007ec4 <_init>
 8007674:	1ba4      	subs	r4, r4, r6
 8007676:	10a4      	asrs	r4, r4, #2
 8007678:	2500      	movs	r5, #0
 800767a:	42a5      	cmp	r5, r4
 800767c:	d105      	bne.n	800768a <__libc_init_array+0x2e>
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007684:	4798      	blx	r3
 8007686:	3501      	adds	r5, #1
 8007688:	e7ee      	b.n	8007668 <__libc_init_array+0xc>
 800768a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800768e:	4798      	blx	r3
 8007690:	3501      	adds	r5, #1
 8007692:	e7f2      	b.n	800767a <__libc_init_array+0x1e>
 8007694:	0800809c 	.word	0x0800809c
 8007698:	0800809c 	.word	0x0800809c
 800769c:	0800809c 	.word	0x0800809c
 80076a0:	080080a0 	.word	0x080080a0

080076a4 <memcpy>:
 80076a4:	b510      	push	{r4, lr}
 80076a6:	1e43      	subs	r3, r0, #1
 80076a8:	440a      	add	r2, r1
 80076aa:	4291      	cmp	r1, r2
 80076ac:	d100      	bne.n	80076b0 <memcpy+0xc>
 80076ae:	bd10      	pop	{r4, pc}
 80076b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b8:	e7f7      	b.n	80076aa <memcpy+0x6>

080076ba <memset>:
 80076ba:	4402      	add	r2, r0
 80076bc:	4603      	mov	r3, r0
 80076be:	4293      	cmp	r3, r2
 80076c0:	d100      	bne.n	80076c4 <memset+0xa>
 80076c2:	4770      	bx	lr
 80076c4:	f803 1b01 	strb.w	r1, [r3], #1
 80076c8:	e7f9      	b.n	80076be <memset+0x4>
	...

080076cc <siprintf>:
 80076cc:	b40e      	push	{r1, r2, r3}
 80076ce:	b500      	push	{lr}
 80076d0:	b09c      	sub	sp, #112	; 0x70
 80076d2:	ab1d      	add	r3, sp, #116	; 0x74
 80076d4:	9002      	str	r0, [sp, #8]
 80076d6:	9006      	str	r0, [sp, #24]
 80076d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076dc:	4809      	ldr	r0, [pc, #36]	; (8007704 <siprintf+0x38>)
 80076de:	9107      	str	r1, [sp, #28]
 80076e0:	9104      	str	r1, [sp, #16]
 80076e2:	4909      	ldr	r1, [pc, #36]	; (8007708 <siprintf+0x3c>)
 80076e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e8:	9105      	str	r1, [sp, #20]
 80076ea:	6800      	ldr	r0, [r0, #0]
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	a902      	add	r1, sp, #8
 80076f0:	f000 f866 	bl	80077c0 <_svfiprintf_r>
 80076f4:	9b02      	ldr	r3, [sp, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	b01c      	add	sp, #112	; 0x70
 80076fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007700:	b003      	add	sp, #12
 8007702:	4770      	bx	lr
 8007704:	20000010 	.word	0x20000010
 8007708:	ffff0208 	.word	0xffff0208

0800770c <__ssputs_r>:
 800770c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	688e      	ldr	r6, [r1, #8]
 8007712:	429e      	cmp	r6, r3
 8007714:	4682      	mov	sl, r0
 8007716:	460c      	mov	r4, r1
 8007718:	4690      	mov	r8, r2
 800771a:	4699      	mov	r9, r3
 800771c:	d837      	bhi.n	800778e <__ssputs_r+0x82>
 800771e:	898a      	ldrh	r2, [r1, #12]
 8007720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007724:	d031      	beq.n	800778a <__ssputs_r+0x7e>
 8007726:	6825      	ldr	r5, [r4, #0]
 8007728:	6909      	ldr	r1, [r1, #16]
 800772a:	1a6f      	subs	r7, r5, r1
 800772c:	6965      	ldr	r5, [r4, #20]
 800772e:	2302      	movs	r3, #2
 8007730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007734:	fb95 f5f3 	sdiv	r5, r5, r3
 8007738:	f109 0301 	add.w	r3, r9, #1
 800773c:	443b      	add	r3, r7
 800773e:	429d      	cmp	r5, r3
 8007740:	bf38      	it	cc
 8007742:	461d      	movcc	r5, r3
 8007744:	0553      	lsls	r3, r2, #21
 8007746:	d530      	bpl.n	80077aa <__ssputs_r+0x9e>
 8007748:	4629      	mov	r1, r5
 800774a:	f000 fb21 	bl	8007d90 <_malloc_r>
 800774e:	4606      	mov	r6, r0
 8007750:	b950      	cbnz	r0, 8007768 <__ssputs_r+0x5c>
 8007752:	230c      	movs	r3, #12
 8007754:	f8ca 3000 	str.w	r3, [sl]
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800775e:	81a3      	strh	r3, [r4, #12]
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007768:	463a      	mov	r2, r7
 800776a:	6921      	ldr	r1, [r4, #16]
 800776c:	f7ff ff9a 	bl	80076a4 <memcpy>
 8007770:	89a3      	ldrh	r3, [r4, #12]
 8007772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777a:	81a3      	strh	r3, [r4, #12]
 800777c:	6126      	str	r6, [r4, #16]
 800777e:	6165      	str	r5, [r4, #20]
 8007780:	443e      	add	r6, r7
 8007782:	1bed      	subs	r5, r5, r7
 8007784:	6026      	str	r6, [r4, #0]
 8007786:	60a5      	str	r5, [r4, #8]
 8007788:	464e      	mov	r6, r9
 800778a:	454e      	cmp	r6, r9
 800778c:	d900      	bls.n	8007790 <__ssputs_r+0x84>
 800778e:	464e      	mov	r6, r9
 8007790:	4632      	mov	r2, r6
 8007792:	4641      	mov	r1, r8
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	f000 fa93 	bl	8007cc0 <memmove>
 800779a:	68a3      	ldr	r3, [r4, #8]
 800779c:	1b9b      	subs	r3, r3, r6
 800779e:	60a3      	str	r3, [r4, #8]
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	441e      	add	r6, r3
 80077a4:	6026      	str	r6, [r4, #0]
 80077a6:	2000      	movs	r0, #0
 80077a8:	e7dc      	b.n	8007764 <__ssputs_r+0x58>
 80077aa:	462a      	mov	r2, r5
 80077ac:	f000 fb4a 	bl	8007e44 <_realloc_r>
 80077b0:	4606      	mov	r6, r0
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d1e2      	bne.n	800777c <__ssputs_r+0x70>
 80077b6:	6921      	ldr	r1, [r4, #16]
 80077b8:	4650      	mov	r0, sl
 80077ba:	f000 fa9b 	bl	8007cf4 <_free_r>
 80077be:	e7c8      	b.n	8007752 <__ssputs_r+0x46>

080077c0 <_svfiprintf_r>:
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	461d      	mov	r5, r3
 80077c6:	898b      	ldrh	r3, [r1, #12]
 80077c8:	061f      	lsls	r7, r3, #24
 80077ca:	b09d      	sub	sp, #116	; 0x74
 80077cc:	4680      	mov	r8, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	4616      	mov	r6, r2
 80077d2:	d50f      	bpl.n	80077f4 <_svfiprintf_r+0x34>
 80077d4:	690b      	ldr	r3, [r1, #16]
 80077d6:	b96b      	cbnz	r3, 80077f4 <_svfiprintf_r+0x34>
 80077d8:	2140      	movs	r1, #64	; 0x40
 80077da:	f000 fad9 	bl	8007d90 <_malloc_r>
 80077de:	6020      	str	r0, [r4, #0]
 80077e0:	6120      	str	r0, [r4, #16]
 80077e2:	b928      	cbnz	r0, 80077f0 <_svfiprintf_r+0x30>
 80077e4:	230c      	movs	r3, #12
 80077e6:	f8c8 3000 	str.w	r3, [r8]
 80077ea:	f04f 30ff 	mov.w	r0, #4294967295
 80077ee:	e0c8      	b.n	8007982 <_svfiprintf_r+0x1c2>
 80077f0:	2340      	movs	r3, #64	; 0x40
 80077f2:	6163      	str	r3, [r4, #20]
 80077f4:	2300      	movs	r3, #0
 80077f6:	9309      	str	r3, [sp, #36]	; 0x24
 80077f8:	2320      	movs	r3, #32
 80077fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077fe:	2330      	movs	r3, #48	; 0x30
 8007800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007804:	9503      	str	r5, [sp, #12]
 8007806:	f04f 0b01 	mov.w	fp, #1
 800780a:	4637      	mov	r7, r6
 800780c:	463d      	mov	r5, r7
 800780e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007812:	b10b      	cbz	r3, 8007818 <_svfiprintf_r+0x58>
 8007814:	2b25      	cmp	r3, #37	; 0x25
 8007816:	d13e      	bne.n	8007896 <_svfiprintf_r+0xd6>
 8007818:	ebb7 0a06 	subs.w	sl, r7, r6
 800781c:	d00b      	beq.n	8007836 <_svfiprintf_r+0x76>
 800781e:	4653      	mov	r3, sl
 8007820:	4632      	mov	r2, r6
 8007822:	4621      	mov	r1, r4
 8007824:	4640      	mov	r0, r8
 8007826:	f7ff ff71 	bl	800770c <__ssputs_r>
 800782a:	3001      	adds	r0, #1
 800782c:	f000 80a4 	beq.w	8007978 <_svfiprintf_r+0x1b8>
 8007830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007832:	4453      	add	r3, sl
 8007834:	9309      	str	r3, [sp, #36]	; 0x24
 8007836:	783b      	ldrb	r3, [r7, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 809d 	beq.w	8007978 <_svfiprintf_r+0x1b8>
 800783e:	2300      	movs	r3, #0
 8007840:	f04f 32ff 	mov.w	r2, #4294967295
 8007844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007848:	9304      	str	r3, [sp, #16]
 800784a:	9307      	str	r3, [sp, #28]
 800784c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007850:	931a      	str	r3, [sp, #104]	; 0x68
 8007852:	462f      	mov	r7, r5
 8007854:	2205      	movs	r2, #5
 8007856:	f817 1b01 	ldrb.w	r1, [r7], #1
 800785a:	4850      	ldr	r0, [pc, #320]	; (800799c <_svfiprintf_r+0x1dc>)
 800785c:	f7f8 fcc0 	bl	80001e0 <memchr>
 8007860:	9b04      	ldr	r3, [sp, #16]
 8007862:	b9d0      	cbnz	r0, 800789a <_svfiprintf_r+0xda>
 8007864:	06d9      	lsls	r1, r3, #27
 8007866:	bf44      	itt	mi
 8007868:	2220      	movmi	r2, #32
 800786a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800786e:	071a      	lsls	r2, r3, #28
 8007870:	bf44      	itt	mi
 8007872:	222b      	movmi	r2, #43	; 0x2b
 8007874:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007878:	782a      	ldrb	r2, [r5, #0]
 800787a:	2a2a      	cmp	r2, #42	; 0x2a
 800787c:	d015      	beq.n	80078aa <_svfiprintf_r+0xea>
 800787e:	9a07      	ldr	r2, [sp, #28]
 8007880:	462f      	mov	r7, r5
 8007882:	2000      	movs	r0, #0
 8007884:	250a      	movs	r5, #10
 8007886:	4639      	mov	r1, r7
 8007888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800788c:	3b30      	subs	r3, #48	; 0x30
 800788e:	2b09      	cmp	r3, #9
 8007890:	d94d      	bls.n	800792e <_svfiprintf_r+0x16e>
 8007892:	b1b8      	cbz	r0, 80078c4 <_svfiprintf_r+0x104>
 8007894:	e00f      	b.n	80078b6 <_svfiprintf_r+0xf6>
 8007896:	462f      	mov	r7, r5
 8007898:	e7b8      	b.n	800780c <_svfiprintf_r+0x4c>
 800789a:	4a40      	ldr	r2, [pc, #256]	; (800799c <_svfiprintf_r+0x1dc>)
 800789c:	1a80      	subs	r0, r0, r2
 800789e:	fa0b f000 	lsl.w	r0, fp, r0
 80078a2:	4318      	orrs	r0, r3
 80078a4:	9004      	str	r0, [sp, #16]
 80078a6:	463d      	mov	r5, r7
 80078a8:	e7d3      	b.n	8007852 <_svfiprintf_r+0x92>
 80078aa:	9a03      	ldr	r2, [sp, #12]
 80078ac:	1d11      	adds	r1, r2, #4
 80078ae:	6812      	ldr	r2, [r2, #0]
 80078b0:	9103      	str	r1, [sp, #12]
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	db01      	blt.n	80078ba <_svfiprintf_r+0xfa>
 80078b6:	9207      	str	r2, [sp, #28]
 80078b8:	e004      	b.n	80078c4 <_svfiprintf_r+0x104>
 80078ba:	4252      	negs	r2, r2
 80078bc:	f043 0302 	orr.w	r3, r3, #2
 80078c0:	9207      	str	r2, [sp, #28]
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	783b      	ldrb	r3, [r7, #0]
 80078c6:	2b2e      	cmp	r3, #46	; 0x2e
 80078c8:	d10c      	bne.n	80078e4 <_svfiprintf_r+0x124>
 80078ca:	787b      	ldrb	r3, [r7, #1]
 80078cc:	2b2a      	cmp	r3, #42	; 0x2a
 80078ce:	d133      	bne.n	8007938 <_svfiprintf_r+0x178>
 80078d0:	9b03      	ldr	r3, [sp, #12]
 80078d2:	1d1a      	adds	r2, r3, #4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	9203      	str	r2, [sp, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bfb8      	it	lt
 80078dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80078e0:	3702      	adds	r7, #2
 80078e2:	9305      	str	r3, [sp, #20]
 80078e4:	4d2e      	ldr	r5, [pc, #184]	; (80079a0 <_svfiprintf_r+0x1e0>)
 80078e6:	7839      	ldrb	r1, [r7, #0]
 80078e8:	2203      	movs	r2, #3
 80078ea:	4628      	mov	r0, r5
 80078ec:	f7f8 fc78 	bl	80001e0 <memchr>
 80078f0:	b138      	cbz	r0, 8007902 <_svfiprintf_r+0x142>
 80078f2:	2340      	movs	r3, #64	; 0x40
 80078f4:	1b40      	subs	r0, r0, r5
 80078f6:	fa03 f000 	lsl.w	r0, r3, r0
 80078fa:	9b04      	ldr	r3, [sp, #16]
 80078fc:	4303      	orrs	r3, r0
 80078fe:	3701      	adds	r7, #1
 8007900:	9304      	str	r3, [sp, #16]
 8007902:	7839      	ldrb	r1, [r7, #0]
 8007904:	4827      	ldr	r0, [pc, #156]	; (80079a4 <_svfiprintf_r+0x1e4>)
 8007906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800790a:	2206      	movs	r2, #6
 800790c:	1c7e      	adds	r6, r7, #1
 800790e:	f7f8 fc67 	bl	80001e0 <memchr>
 8007912:	2800      	cmp	r0, #0
 8007914:	d038      	beq.n	8007988 <_svfiprintf_r+0x1c8>
 8007916:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <_svfiprintf_r+0x1e8>)
 8007918:	bb13      	cbnz	r3, 8007960 <_svfiprintf_r+0x1a0>
 800791a:	9b03      	ldr	r3, [sp, #12]
 800791c:	3307      	adds	r3, #7
 800791e:	f023 0307 	bic.w	r3, r3, #7
 8007922:	3308      	adds	r3, #8
 8007924:	9303      	str	r3, [sp, #12]
 8007926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007928:	444b      	add	r3, r9
 800792a:	9309      	str	r3, [sp, #36]	; 0x24
 800792c:	e76d      	b.n	800780a <_svfiprintf_r+0x4a>
 800792e:	fb05 3202 	mla	r2, r5, r2, r3
 8007932:	2001      	movs	r0, #1
 8007934:	460f      	mov	r7, r1
 8007936:	e7a6      	b.n	8007886 <_svfiprintf_r+0xc6>
 8007938:	2300      	movs	r3, #0
 800793a:	3701      	adds	r7, #1
 800793c:	9305      	str	r3, [sp, #20]
 800793e:	4619      	mov	r1, r3
 8007940:	250a      	movs	r5, #10
 8007942:	4638      	mov	r0, r7
 8007944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007948:	3a30      	subs	r2, #48	; 0x30
 800794a:	2a09      	cmp	r2, #9
 800794c:	d903      	bls.n	8007956 <_svfiprintf_r+0x196>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0c8      	beq.n	80078e4 <_svfiprintf_r+0x124>
 8007952:	9105      	str	r1, [sp, #20]
 8007954:	e7c6      	b.n	80078e4 <_svfiprintf_r+0x124>
 8007956:	fb05 2101 	mla	r1, r5, r1, r2
 800795a:	2301      	movs	r3, #1
 800795c:	4607      	mov	r7, r0
 800795e:	e7f0      	b.n	8007942 <_svfiprintf_r+0x182>
 8007960:	ab03      	add	r3, sp, #12
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	4622      	mov	r2, r4
 8007966:	4b11      	ldr	r3, [pc, #68]	; (80079ac <_svfiprintf_r+0x1ec>)
 8007968:	a904      	add	r1, sp, #16
 800796a:	4640      	mov	r0, r8
 800796c:	f3af 8000 	nop.w
 8007970:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007974:	4681      	mov	r9, r0
 8007976:	d1d6      	bne.n	8007926 <_svfiprintf_r+0x166>
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	065b      	lsls	r3, r3, #25
 800797c:	f53f af35 	bmi.w	80077ea <_svfiprintf_r+0x2a>
 8007980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007982:	b01d      	add	sp, #116	; 0x74
 8007984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007988:	ab03      	add	r3, sp, #12
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	4622      	mov	r2, r4
 800798e:	4b07      	ldr	r3, [pc, #28]	; (80079ac <_svfiprintf_r+0x1ec>)
 8007990:	a904      	add	r1, sp, #16
 8007992:	4640      	mov	r0, r8
 8007994:	f000 f882 	bl	8007a9c <_printf_i>
 8007998:	e7ea      	b.n	8007970 <_svfiprintf_r+0x1b0>
 800799a:	bf00      	nop
 800799c:	08008060 	.word	0x08008060
 80079a0:	08008066 	.word	0x08008066
 80079a4:	0800806a 	.word	0x0800806a
 80079a8:	00000000 	.word	0x00000000
 80079ac:	0800770d 	.word	0x0800770d

080079b0 <_printf_common>:
 80079b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b4:	4691      	mov	r9, r2
 80079b6:	461f      	mov	r7, r3
 80079b8:	688a      	ldr	r2, [r1, #8]
 80079ba:	690b      	ldr	r3, [r1, #16]
 80079bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	bfb8      	it	lt
 80079c4:	4613      	movlt	r3, r2
 80079c6:	f8c9 3000 	str.w	r3, [r9]
 80079ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ce:	4606      	mov	r6, r0
 80079d0:	460c      	mov	r4, r1
 80079d2:	b112      	cbz	r2, 80079da <_printf_common+0x2a>
 80079d4:	3301      	adds	r3, #1
 80079d6:	f8c9 3000 	str.w	r3, [r9]
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	0699      	lsls	r1, r3, #26
 80079de:	bf42      	ittt	mi
 80079e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80079e4:	3302      	addmi	r3, #2
 80079e6:	f8c9 3000 	strmi.w	r3, [r9]
 80079ea:	6825      	ldr	r5, [r4, #0]
 80079ec:	f015 0506 	ands.w	r5, r5, #6
 80079f0:	d107      	bne.n	8007a02 <_printf_common+0x52>
 80079f2:	f104 0a19 	add.w	sl, r4, #25
 80079f6:	68e3      	ldr	r3, [r4, #12]
 80079f8:	f8d9 2000 	ldr.w	r2, [r9]
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	42ab      	cmp	r3, r5
 8007a00:	dc28      	bgt.n	8007a54 <_printf_common+0xa4>
 8007a02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a06:	6822      	ldr	r2, [r4, #0]
 8007a08:	3300      	adds	r3, #0
 8007a0a:	bf18      	it	ne
 8007a0c:	2301      	movne	r3, #1
 8007a0e:	0692      	lsls	r2, r2, #26
 8007a10:	d42d      	bmi.n	8007a6e <_printf_common+0xbe>
 8007a12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a16:	4639      	mov	r1, r7
 8007a18:	4630      	mov	r0, r6
 8007a1a:	47c0      	blx	r8
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d020      	beq.n	8007a62 <_printf_common+0xb2>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	68e5      	ldr	r5, [r4, #12]
 8007a24:	f8d9 2000 	ldr.w	r2, [r9]
 8007a28:	f003 0306 	and.w	r3, r3, #6
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	bf08      	it	eq
 8007a30:	1aad      	subeq	r5, r5, r2
 8007a32:	68a3      	ldr	r3, [r4, #8]
 8007a34:	6922      	ldr	r2, [r4, #16]
 8007a36:	bf0c      	ite	eq
 8007a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a3c:	2500      	movne	r5, #0
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	bfc4      	itt	gt
 8007a42:	1a9b      	subgt	r3, r3, r2
 8007a44:	18ed      	addgt	r5, r5, r3
 8007a46:	f04f 0900 	mov.w	r9, #0
 8007a4a:	341a      	adds	r4, #26
 8007a4c:	454d      	cmp	r5, r9
 8007a4e:	d11a      	bne.n	8007a86 <_printf_common+0xd6>
 8007a50:	2000      	movs	r0, #0
 8007a52:	e008      	b.n	8007a66 <_printf_common+0xb6>
 8007a54:	2301      	movs	r3, #1
 8007a56:	4652      	mov	r2, sl
 8007a58:	4639      	mov	r1, r7
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	47c0      	blx	r8
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d103      	bne.n	8007a6a <_printf_common+0xba>
 8007a62:	f04f 30ff 	mov.w	r0, #4294967295
 8007a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6a:	3501      	adds	r5, #1
 8007a6c:	e7c3      	b.n	80079f6 <_printf_common+0x46>
 8007a6e:	18e1      	adds	r1, r4, r3
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	2030      	movs	r0, #48	; 0x30
 8007a74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a78:	4422      	add	r2, r4
 8007a7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a82:	3302      	adds	r3, #2
 8007a84:	e7c5      	b.n	8007a12 <_printf_common+0x62>
 8007a86:	2301      	movs	r3, #1
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	47c0      	blx	r8
 8007a90:	3001      	adds	r0, #1
 8007a92:	d0e6      	beq.n	8007a62 <_printf_common+0xb2>
 8007a94:	f109 0901 	add.w	r9, r9, #1
 8007a98:	e7d8      	b.n	8007a4c <_printf_common+0x9c>
	...

08007a9c <_printf_i>:
 8007a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	7e09      	ldrb	r1, [r1, #24]
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	296e      	cmp	r1, #110	; 0x6e
 8007aac:	4617      	mov	r7, r2
 8007aae:	4606      	mov	r6, r0
 8007ab0:	4698      	mov	r8, r3
 8007ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ab4:	f000 80b3 	beq.w	8007c1e <_printf_i+0x182>
 8007ab8:	d822      	bhi.n	8007b00 <_printf_i+0x64>
 8007aba:	2963      	cmp	r1, #99	; 0x63
 8007abc:	d036      	beq.n	8007b2c <_printf_i+0x90>
 8007abe:	d80a      	bhi.n	8007ad6 <_printf_i+0x3a>
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	f000 80b9 	beq.w	8007c38 <_printf_i+0x19c>
 8007ac6:	2958      	cmp	r1, #88	; 0x58
 8007ac8:	f000 8083 	beq.w	8007bd2 <_printf_i+0x136>
 8007acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ad4:	e032      	b.n	8007b3c <_printf_i+0xa0>
 8007ad6:	2964      	cmp	r1, #100	; 0x64
 8007ad8:	d001      	beq.n	8007ade <_printf_i+0x42>
 8007ada:	2969      	cmp	r1, #105	; 0x69
 8007adc:	d1f6      	bne.n	8007acc <_printf_i+0x30>
 8007ade:	6820      	ldr	r0, [r4, #0]
 8007ae0:	6813      	ldr	r3, [r2, #0]
 8007ae2:	0605      	lsls	r5, r0, #24
 8007ae4:	f103 0104 	add.w	r1, r3, #4
 8007ae8:	d52a      	bpl.n	8007b40 <_printf_i+0xa4>
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da03      	bge.n	8007afa <_printf_i+0x5e>
 8007af2:	222d      	movs	r2, #45	; 0x2d
 8007af4:	425b      	negs	r3, r3
 8007af6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007afa:	486f      	ldr	r0, [pc, #444]	; (8007cb8 <_printf_i+0x21c>)
 8007afc:	220a      	movs	r2, #10
 8007afe:	e039      	b.n	8007b74 <_printf_i+0xd8>
 8007b00:	2973      	cmp	r1, #115	; 0x73
 8007b02:	f000 809d 	beq.w	8007c40 <_printf_i+0x1a4>
 8007b06:	d808      	bhi.n	8007b1a <_printf_i+0x7e>
 8007b08:	296f      	cmp	r1, #111	; 0x6f
 8007b0a:	d020      	beq.n	8007b4e <_printf_i+0xb2>
 8007b0c:	2970      	cmp	r1, #112	; 0x70
 8007b0e:	d1dd      	bne.n	8007acc <_printf_i+0x30>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	f043 0320 	orr.w	r3, r3, #32
 8007b16:	6023      	str	r3, [r4, #0]
 8007b18:	e003      	b.n	8007b22 <_printf_i+0x86>
 8007b1a:	2975      	cmp	r1, #117	; 0x75
 8007b1c:	d017      	beq.n	8007b4e <_printf_i+0xb2>
 8007b1e:	2978      	cmp	r1, #120	; 0x78
 8007b20:	d1d4      	bne.n	8007acc <_printf_i+0x30>
 8007b22:	2378      	movs	r3, #120	; 0x78
 8007b24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b28:	4864      	ldr	r0, [pc, #400]	; (8007cbc <_printf_i+0x220>)
 8007b2a:	e055      	b.n	8007bd8 <_printf_i+0x13c>
 8007b2c:	6813      	ldr	r3, [r2, #0]
 8007b2e:	1d19      	adds	r1, r3, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6011      	str	r1, [r2, #0]
 8007b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e08c      	b.n	8007c5a <_printf_i+0x1be>
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6011      	str	r1, [r2, #0]
 8007b44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b48:	bf18      	it	ne
 8007b4a:	b21b      	sxthne	r3, r3
 8007b4c:	e7cf      	b.n	8007aee <_printf_i+0x52>
 8007b4e:	6813      	ldr	r3, [r2, #0]
 8007b50:	6825      	ldr	r5, [r4, #0]
 8007b52:	1d18      	adds	r0, r3, #4
 8007b54:	6010      	str	r0, [r2, #0]
 8007b56:	0628      	lsls	r0, r5, #24
 8007b58:	d501      	bpl.n	8007b5e <_printf_i+0xc2>
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	e002      	b.n	8007b64 <_printf_i+0xc8>
 8007b5e:	0668      	lsls	r0, r5, #25
 8007b60:	d5fb      	bpl.n	8007b5a <_printf_i+0xbe>
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	4854      	ldr	r0, [pc, #336]	; (8007cb8 <_printf_i+0x21c>)
 8007b66:	296f      	cmp	r1, #111	; 0x6f
 8007b68:	bf14      	ite	ne
 8007b6a:	220a      	movne	r2, #10
 8007b6c:	2208      	moveq	r2, #8
 8007b6e:	2100      	movs	r1, #0
 8007b70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b74:	6865      	ldr	r5, [r4, #4]
 8007b76:	60a5      	str	r5, [r4, #8]
 8007b78:	2d00      	cmp	r5, #0
 8007b7a:	f2c0 8095 	blt.w	8007ca8 <_printf_i+0x20c>
 8007b7e:	6821      	ldr	r1, [r4, #0]
 8007b80:	f021 0104 	bic.w	r1, r1, #4
 8007b84:	6021      	str	r1, [r4, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d13d      	bne.n	8007c06 <_printf_i+0x16a>
 8007b8a:	2d00      	cmp	r5, #0
 8007b8c:	f040 808e 	bne.w	8007cac <_printf_i+0x210>
 8007b90:	4665      	mov	r5, ip
 8007b92:	2a08      	cmp	r2, #8
 8007b94:	d10b      	bne.n	8007bae <_printf_i+0x112>
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	07db      	lsls	r3, r3, #31
 8007b9a:	d508      	bpl.n	8007bae <_printf_i+0x112>
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	6862      	ldr	r2, [r4, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	bfde      	ittt	le
 8007ba4:	2330      	movle	r3, #48	; 0x30
 8007ba6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007baa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bae:	ebac 0305 	sub.w	r3, ip, r5
 8007bb2:	6123      	str	r3, [r4, #16]
 8007bb4:	f8cd 8000 	str.w	r8, [sp]
 8007bb8:	463b      	mov	r3, r7
 8007bba:	aa03      	add	r2, sp, #12
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7ff fef6 	bl	80079b0 <_printf_common>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d14d      	bne.n	8007c64 <_printf_i+0x1c8>
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	b005      	add	sp, #20
 8007bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bd2:	4839      	ldr	r0, [pc, #228]	; (8007cb8 <_printf_i+0x21c>)
 8007bd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007bd8:	6813      	ldr	r3, [r2, #0]
 8007bda:	6821      	ldr	r1, [r4, #0]
 8007bdc:	1d1d      	adds	r5, r3, #4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6015      	str	r5, [r2, #0]
 8007be2:	060a      	lsls	r2, r1, #24
 8007be4:	d50b      	bpl.n	8007bfe <_printf_i+0x162>
 8007be6:	07ca      	lsls	r2, r1, #31
 8007be8:	bf44      	itt	mi
 8007bea:	f041 0120 	orrmi.w	r1, r1, #32
 8007bee:	6021      	strmi	r1, [r4, #0]
 8007bf0:	b91b      	cbnz	r3, 8007bfa <_printf_i+0x15e>
 8007bf2:	6822      	ldr	r2, [r4, #0]
 8007bf4:	f022 0220 	bic.w	r2, r2, #32
 8007bf8:	6022      	str	r2, [r4, #0]
 8007bfa:	2210      	movs	r2, #16
 8007bfc:	e7b7      	b.n	8007b6e <_printf_i+0xd2>
 8007bfe:	064d      	lsls	r5, r1, #25
 8007c00:	bf48      	it	mi
 8007c02:	b29b      	uxthmi	r3, r3
 8007c04:	e7ef      	b.n	8007be6 <_printf_i+0x14a>
 8007c06:	4665      	mov	r5, ip
 8007c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c0c:	fb02 3311 	mls	r3, r2, r1, r3
 8007c10:	5cc3      	ldrb	r3, [r0, r3]
 8007c12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c16:	460b      	mov	r3, r1
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	d1f5      	bne.n	8007c08 <_printf_i+0x16c>
 8007c1c:	e7b9      	b.n	8007b92 <_printf_i+0xf6>
 8007c1e:	6813      	ldr	r3, [r2, #0]
 8007c20:	6825      	ldr	r5, [r4, #0]
 8007c22:	6961      	ldr	r1, [r4, #20]
 8007c24:	1d18      	adds	r0, r3, #4
 8007c26:	6010      	str	r0, [r2, #0]
 8007c28:	0628      	lsls	r0, r5, #24
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	d501      	bpl.n	8007c32 <_printf_i+0x196>
 8007c2e:	6019      	str	r1, [r3, #0]
 8007c30:	e002      	b.n	8007c38 <_printf_i+0x19c>
 8007c32:	066a      	lsls	r2, r5, #25
 8007c34:	d5fb      	bpl.n	8007c2e <_printf_i+0x192>
 8007c36:	8019      	strh	r1, [r3, #0]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	6123      	str	r3, [r4, #16]
 8007c3c:	4665      	mov	r5, ip
 8007c3e:	e7b9      	b.n	8007bb4 <_printf_i+0x118>
 8007c40:	6813      	ldr	r3, [r2, #0]
 8007c42:	1d19      	adds	r1, r3, #4
 8007c44:	6011      	str	r1, [r2, #0]
 8007c46:	681d      	ldr	r5, [r3, #0]
 8007c48:	6862      	ldr	r2, [r4, #4]
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f7f8 fac7 	bl	80001e0 <memchr>
 8007c52:	b108      	cbz	r0, 8007c58 <_printf_i+0x1bc>
 8007c54:	1b40      	subs	r0, r0, r5
 8007c56:	6060      	str	r0, [r4, #4]
 8007c58:	6863      	ldr	r3, [r4, #4]
 8007c5a:	6123      	str	r3, [r4, #16]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c62:	e7a7      	b.n	8007bb4 <_printf_i+0x118>
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	462a      	mov	r2, r5
 8007c68:	4639      	mov	r1, r7
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	47c0      	blx	r8
 8007c6e:	3001      	adds	r0, #1
 8007c70:	d0aa      	beq.n	8007bc8 <_printf_i+0x12c>
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	079b      	lsls	r3, r3, #30
 8007c76:	d413      	bmi.n	8007ca0 <_printf_i+0x204>
 8007c78:	68e0      	ldr	r0, [r4, #12]
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	4298      	cmp	r0, r3
 8007c7e:	bfb8      	it	lt
 8007c80:	4618      	movlt	r0, r3
 8007c82:	e7a3      	b.n	8007bcc <_printf_i+0x130>
 8007c84:	2301      	movs	r3, #1
 8007c86:	464a      	mov	r2, r9
 8007c88:	4639      	mov	r1, r7
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	47c0      	blx	r8
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d09a      	beq.n	8007bc8 <_printf_i+0x12c>
 8007c92:	3501      	adds	r5, #1
 8007c94:	68e3      	ldr	r3, [r4, #12]
 8007c96:	9a03      	ldr	r2, [sp, #12]
 8007c98:	1a9b      	subs	r3, r3, r2
 8007c9a:	42ab      	cmp	r3, r5
 8007c9c:	dcf2      	bgt.n	8007c84 <_printf_i+0x1e8>
 8007c9e:	e7eb      	b.n	8007c78 <_printf_i+0x1dc>
 8007ca0:	2500      	movs	r5, #0
 8007ca2:	f104 0919 	add.w	r9, r4, #25
 8007ca6:	e7f5      	b.n	8007c94 <_printf_i+0x1f8>
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1ac      	bne.n	8007c06 <_printf_i+0x16a>
 8007cac:	7803      	ldrb	r3, [r0, #0]
 8007cae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cb6:	e76c      	b.n	8007b92 <_printf_i+0xf6>
 8007cb8:	08008071 	.word	0x08008071
 8007cbc:	08008082 	.word	0x08008082

08007cc0 <memmove>:
 8007cc0:	4288      	cmp	r0, r1
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	eb01 0302 	add.w	r3, r1, r2
 8007cc8:	d807      	bhi.n	8007cda <memmove+0x1a>
 8007cca:	1e42      	subs	r2, r0, #1
 8007ccc:	4299      	cmp	r1, r3
 8007cce:	d00a      	beq.n	8007ce6 <memmove+0x26>
 8007cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007cd8:	e7f8      	b.n	8007ccc <memmove+0xc>
 8007cda:	4283      	cmp	r3, r0
 8007cdc:	d9f5      	bls.n	8007cca <memmove+0xa>
 8007cde:	1881      	adds	r1, r0, r2
 8007ce0:	1ad2      	subs	r2, r2, r3
 8007ce2:	42d3      	cmn	r3, r2
 8007ce4:	d100      	bne.n	8007ce8 <memmove+0x28>
 8007ce6:	bd10      	pop	{r4, pc}
 8007ce8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007cf0:	e7f7      	b.n	8007ce2 <memmove+0x22>
	...

08007cf4 <_free_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	2900      	cmp	r1, #0
 8007cfa:	d045      	beq.n	8007d88 <_free_r+0x94>
 8007cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d00:	1f0c      	subs	r4, r1, #4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bfb8      	it	lt
 8007d06:	18e4      	addlt	r4, r4, r3
 8007d08:	f000 f8d2 	bl	8007eb0 <__malloc_lock>
 8007d0c:	4a1f      	ldr	r2, [pc, #124]	; (8007d8c <_free_r+0x98>)
 8007d0e:	6813      	ldr	r3, [r2, #0]
 8007d10:	4610      	mov	r0, r2
 8007d12:	b933      	cbnz	r3, 8007d22 <_free_r+0x2e>
 8007d14:	6063      	str	r3, [r4, #4]
 8007d16:	6014      	str	r4, [r2, #0]
 8007d18:	4628      	mov	r0, r5
 8007d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d1e:	f000 b8c8 	b.w	8007eb2 <__malloc_unlock>
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	d90c      	bls.n	8007d40 <_free_r+0x4c>
 8007d26:	6821      	ldr	r1, [r4, #0]
 8007d28:	1862      	adds	r2, r4, r1
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	bf04      	itt	eq
 8007d2e:	681a      	ldreq	r2, [r3, #0]
 8007d30:	685b      	ldreq	r3, [r3, #4]
 8007d32:	6063      	str	r3, [r4, #4]
 8007d34:	bf04      	itt	eq
 8007d36:	1852      	addeq	r2, r2, r1
 8007d38:	6022      	streq	r2, [r4, #0]
 8007d3a:	6004      	str	r4, [r0, #0]
 8007d3c:	e7ec      	b.n	8007d18 <_free_r+0x24>
 8007d3e:	4613      	mov	r3, r2
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	b10a      	cbz	r2, 8007d48 <_free_r+0x54>
 8007d44:	42a2      	cmp	r2, r4
 8007d46:	d9fa      	bls.n	8007d3e <_free_r+0x4a>
 8007d48:	6819      	ldr	r1, [r3, #0]
 8007d4a:	1858      	adds	r0, r3, r1
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d10b      	bne.n	8007d68 <_free_r+0x74>
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	4401      	add	r1, r0
 8007d54:	1858      	adds	r0, r3, r1
 8007d56:	4282      	cmp	r2, r0
 8007d58:	6019      	str	r1, [r3, #0]
 8007d5a:	d1dd      	bne.n	8007d18 <_free_r+0x24>
 8007d5c:	6810      	ldr	r0, [r2, #0]
 8007d5e:	6852      	ldr	r2, [r2, #4]
 8007d60:	605a      	str	r2, [r3, #4]
 8007d62:	4401      	add	r1, r0
 8007d64:	6019      	str	r1, [r3, #0]
 8007d66:	e7d7      	b.n	8007d18 <_free_r+0x24>
 8007d68:	d902      	bls.n	8007d70 <_free_r+0x7c>
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	602b      	str	r3, [r5, #0]
 8007d6e:	e7d3      	b.n	8007d18 <_free_r+0x24>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	1821      	adds	r1, r4, r0
 8007d74:	428a      	cmp	r2, r1
 8007d76:	bf04      	itt	eq
 8007d78:	6811      	ldreq	r1, [r2, #0]
 8007d7a:	6852      	ldreq	r2, [r2, #4]
 8007d7c:	6062      	str	r2, [r4, #4]
 8007d7e:	bf04      	itt	eq
 8007d80:	1809      	addeq	r1, r1, r0
 8007d82:	6021      	streq	r1, [r4, #0]
 8007d84:	605c      	str	r4, [r3, #4]
 8007d86:	e7c7      	b.n	8007d18 <_free_r+0x24>
 8007d88:	bd38      	pop	{r3, r4, r5, pc}
 8007d8a:	bf00      	nop
 8007d8c:	2000404c 	.word	0x2000404c

08007d90 <_malloc_r>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	1ccd      	adds	r5, r1, #3
 8007d94:	f025 0503 	bic.w	r5, r5, #3
 8007d98:	3508      	adds	r5, #8
 8007d9a:	2d0c      	cmp	r5, #12
 8007d9c:	bf38      	it	cc
 8007d9e:	250c      	movcc	r5, #12
 8007da0:	2d00      	cmp	r5, #0
 8007da2:	4606      	mov	r6, r0
 8007da4:	db01      	blt.n	8007daa <_malloc_r+0x1a>
 8007da6:	42a9      	cmp	r1, r5
 8007da8:	d903      	bls.n	8007db2 <_malloc_r+0x22>
 8007daa:	230c      	movs	r3, #12
 8007dac:	6033      	str	r3, [r6, #0]
 8007dae:	2000      	movs	r0, #0
 8007db0:	bd70      	pop	{r4, r5, r6, pc}
 8007db2:	f000 f87d 	bl	8007eb0 <__malloc_lock>
 8007db6:	4a21      	ldr	r2, [pc, #132]	; (8007e3c <_malloc_r+0xac>)
 8007db8:	6814      	ldr	r4, [r2, #0]
 8007dba:	4621      	mov	r1, r4
 8007dbc:	b991      	cbnz	r1, 8007de4 <_malloc_r+0x54>
 8007dbe:	4c20      	ldr	r4, [pc, #128]	; (8007e40 <_malloc_r+0xb0>)
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	b91b      	cbnz	r3, 8007dcc <_malloc_r+0x3c>
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 f863 	bl	8007e90 <_sbrk_r>
 8007dca:	6020      	str	r0, [r4, #0]
 8007dcc:	4629      	mov	r1, r5
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 f85e 	bl	8007e90 <_sbrk_r>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d124      	bne.n	8007e22 <_malloc_r+0x92>
 8007dd8:	230c      	movs	r3, #12
 8007dda:	6033      	str	r3, [r6, #0]
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 f868 	bl	8007eb2 <__malloc_unlock>
 8007de2:	e7e4      	b.n	8007dae <_malloc_r+0x1e>
 8007de4:	680b      	ldr	r3, [r1, #0]
 8007de6:	1b5b      	subs	r3, r3, r5
 8007de8:	d418      	bmi.n	8007e1c <_malloc_r+0x8c>
 8007dea:	2b0b      	cmp	r3, #11
 8007dec:	d90f      	bls.n	8007e0e <_malloc_r+0x7e>
 8007dee:	600b      	str	r3, [r1, #0]
 8007df0:	50cd      	str	r5, [r1, r3]
 8007df2:	18cc      	adds	r4, r1, r3
 8007df4:	4630      	mov	r0, r6
 8007df6:	f000 f85c 	bl	8007eb2 <__malloc_unlock>
 8007dfa:	f104 000b 	add.w	r0, r4, #11
 8007dfe:	1d23      	adds	r3, r4, #4
 8007e00:	f020 0007 	bic.w	r0, r0, #7
 8007e04:	1ac3      	subs	r3, r0, r3
 8007e06:	d0d3      	beq.n	8007db0 <_malloc_r+0x20>
 8007e08:	425a      	negs	r2, r3
 8007e0a:	50e2      	str	r2, [r4, r3]
 8007e0c:	e7d0      	b.n	8007db0 <_malloc_r+0x20>
 8007e0e:	428c      	cmp	r4, r1
 8007e10:	684b      	ldr	r3, [r1, #4]
 8007e12:	bf16      	itet	ne
 8007e14:	6063      	strne	r3, [r4, #4]
 8007e16:	6013      	streq	r3, [r2, #0]
 8007e18:	460c      	movne	r4, r1
 8007e1a:	e7eb      	b.n	8007df4 <_malloc_r+0x64>
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	6849      	ldr	r1, [r1, #4]
 8007e20:	e7cc      	b.n	8007dbc <_malloc_r+0x2c>
 8007e22:	1cc4      	adds	r4, r0, #3
 8007e24:	f024 0403 	bic.w	r4, r4, #3
 8007e28:	42a0      	cmp	r0, r4
 8007e2a:	d005      	beq.n	8007e38 <_malloc_r+0xa8>
 8007e2c:	1a21      	subs	r1, r4, r0
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f000 f82e 	bl	8007e90 <_sbrk_r>
 8007e34:	3001      	adds	r0, #1
 8007e36:	d0cf      	beq.n	8007dd8 <_malloc_r+0x48>
 8007e38:	6025      	str	r5, [r4, #0]
 8007e3a:	e7db      	b.n	8007df4 <_malloc_r+0x64>
 8007e3c:	2000404c 	.word	0x2000404c
 8007e40:	20004050 	.word	0x20004050

08007e44 <_realloc_r>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	4607      	mov	r7, r0
 8007e48:	4614      	mov	r4, r2
 8007e4a:	460e      	mov	r6, r1
 8007e4c:	b921      	cbnz	r1, 8007e58 <_realloc_r+0x14>
 8007e4e:	4611      	mov	r1, r2
 8007e50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e54:	f7ff bf9c 	b.w	8007d90 <_malloc_r>
 8007e58:	b922      	cbnz	r2, 8007e64 <_realloc_r+0x20>
 8007e5a:	f7ff ff4b 	bl	8007cf4 <_free_r>
 8007e5e:	4625      	mov	r5, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e64:	f000 f826 	bl	8007eb4 <_malloc_usable_size_r>
 8007e68:	42a0      	cmp	r0, r4
 8007e6a:	d20f      	bcs.n	8007e8c <_realloc_r+0x48>
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4638      	mov	r0, r7
 8007e70:	f7ff ff8e 	bl	8007d90 <_malloc_r>
 8007e74:	4605      	mov	r5, r0
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d0f2      	beq.n	8007e60 <_realloc_r+0x1c>
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	f7ff fc11 	bl	80076a4 <memcpy>
 8007e82:	4631      	mov	r1, r6
 8007e84:	4638      	mov	r0, r7
 8007e86:	f7ff ff35 	bl	8007cf4 <_free_r>
 8007e8a:	e7e9      	b.n	8007e60 <_realloc_r+0x1c>
 8007e8c:	4635      	mov	r5, r6
 8007e8e:	e7e7      	b.n	8007e60 <_realloc_r+0x1c>

08007e90 <_sbrk_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4c06      	ldr	r4, [pc, #24]	; (8007eac <_sbrk_r+0x1c>)
 8007e94:	2300      	movs	r3, #0
 8007e96:	4605      	mov	r5, r0
 8007e98:	4608      	mov	r0, r1
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	f7f9 fc1c 	bl	80016d8 <_sbrk>
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	d102      	bne.n	8007eaa <_sbrk_r+0x1a>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	b103      	cbz	r3, 8007eaa <_sbrk_r+0x1a>
 8007ea8:	602b      	str	r3, [r5, #0]
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	20004280 	.word	0x20004280

08007eb0 <__malloc_lock>:
 8007eb0:	4770      	bx	lr

08007eb2 <__malloc_unlock>:
 8007eb2:	4770      	bx	lr

08007eb4 <_malloc_usable_size_r>:
 8007eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb8:	1f18      	subs	r0, r3, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bfbc      	itt	lt
 8007ebe:	580b      	ldrlt	r3, [r1, r0]
 8007ec0:	18c0      	addlt	r0, r0, r3
 8007ec2:	4770      	bx	lr

08007ec4 <_init>:
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	bf00      	nop
 8007ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eca:	bc08      	pop	{r3}
 8007ecc:	469e      	mov	lr, r3
 8007ece:	4770      	bx	lr

08007ed0 <_fini>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	bf00      	nop
 8007ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed6:	bc08      	pop	{r3}
 8007ed8:	469e      	mov	lr, r3
 8007eda:	4770      	bx	lr
