
CourseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b584  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800b728  0800b728  0001b728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc58  0800bc58  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc58  0800bc58  0001bc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc60  0800bc60  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc60  0800bc60  0001bc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc64  0800bc64  0001bc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bc68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000437c  200001f0  0800be58  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000456c  0800be58  0002456c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013930  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d1f  00000000  00000000  00033b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00036870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  000377e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018b31  00000000  00000000  00038628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d7dc  00000000  00000000  00051159  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000919e5  00000000  00000000  0005e935  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f031a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  000f0398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b70c 	.word	0x0800b70c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b70c 	.word	0x0800b70c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9bd 	b.w	8000f54 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <bcdToDec>:

uint8_t decToBcd(int val) {
  return (uint8_t)( (val/10*16) + (val%10) );
}

int bcdToDec(uint8_t val) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	461a      	mov	r2, r3
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	4413      	add	r3, r2
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <getTime>:
	set_time[5] = decToBcd(month);
	set_time[6] = decToBcd(year);
	HAL_I2C_Mem_Write(hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void getTime (I2C_HandleTypeDef *hi2c3) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	2307      	movs	r3, #7
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	21d0      	movs	r1, #208	; 0xd0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f003 fb2a 	bl	8004600 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000fac:	7a3b      	ldrb	r3, [r7, #8]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffd2 	bl	8000f58 <bcdToDec>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <getTime+0x9c>)
 8000fba:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000fbc:	7a7b      	ldrb	r3, [r7, #9]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ffca 	bl	8000f58 <bcdToDec>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <getTime+0x9c>)
 8000fca:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000fcc:	7abb      	ldrb	r3, [r7, #10]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffc2 	bl	8000f58 <bcdToDec>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <getTime+0x9c>)
 8000fda:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000fdc:	7afb      	ldrb	r3, [r7, #11]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ffba 	bl	8000f58 <bcdToDec>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <getTime+0x9c>)
 8000fea:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000fec:	7b3b      	ldrb	r3, [r7, #12]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffb2 	bl	8000f58 <bcdToDec>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <getTime+0x9c>)
 8000ffa:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000ffc:	7b7b      	ldrb	r3, [r7, #13]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffaa 	bl	8000f58 <bcdToDec>
 8001004:	4603      	mov	r3, r0
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <getTime+0x9c>)
 800100a:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ffa2 	bl	8000f58 <bcdToDec>
 8001014:	4603      	mov	r3, r0
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <getTime+0x9c>)
 800101a:	719a      	strb	r2, [r3, #6]
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200041e0 	.word	0x200041e0

08001028 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2203      	movs	r2, #3
 8001034:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2203      	movs	r2, #3
 8001052:	715a      	strb	r2, [r3, #5]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af04      	add	r7, sp, #16
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	460b      	mov	r3, r1
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	b29a      	uxth	r2, r3
 800107e:	8af9      	ldrh	r1, [r7, #22]
 8001080:	f241 3388 	movw	r3, #5000	; 0x1388
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	2302      	movs	r3, #2
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	f003 fab5 	bl	8004600 <HAL_I2C_Mem_Read>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10b      	bne.n	80010b4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800109c:	7d7b      	ldrb	r3, [r7, #21]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	801a      	strh	r2, [r3, #0]
		return true;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <read_register16+0x56>
	} else
		return false;
 80010b4:	2300      	movs	r3, #0

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80010be:	b590      	push	{r4, r7, lr}
 80010c0:	b08b      	sub	sp, #44	; 0x2c
 80010c2:	af04      	add	r7, sp, #16
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	461a      	mov	r2, r3
 80010ca:	460b      	mov	r3, r1
 80010cc:	72fb      	strb	r3, [r7, #11]
 80010ce:	4613      	mov	r3, r2
 80010d0:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b29c      	uxth	r4, r3
 80010e2:	7abb      	ldrb	r3, [r7, #10]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	8af9      	ldrh	r1, [r7, #22]
 80010e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ec:	9202      	str	r2, [sp, #8]
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	4622      	mov	r2, r4
 80010f8:	f003 fa82 	bl	8004600 <HAL_I2C_Mem_Read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <read_data+0x48>
		return 0;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <read_data+0x4a>
	else
		return 1;
 8001106:	2301      	movs	r3, #1

}
 8001108:	4618      	mov	r0, r3
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}

08001110 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	461a      	mov	r2, r3
 800111c:	2188      	movs	r1, #136	; 0x88
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff9e 	bl	8001060 <read_register16>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d06f      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3302      	adds	r3, #2
 800112e:	461a      	mov	r2, r3
 8001130:	218a      	movs	r1, #138	; 0x8a
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff94 	bl	8001060 <read_register16>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d065      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3304      	adds	r3, #4
 8001142:	461a      	mov	r2, r3
 8001144:	218c      	movs	r1, #140	; 0x8c
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff8a 	bl	8001060 <read_register16>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d05b      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3306      	adds	r3, #6
 8001156:	461a      	mov	r2, r3
 8001158:	218e      	movs	r1, #142	; 0x8e
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff80 	bl	8001060 <read_register16>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d051      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3308      	adds	r3, #8
 800116a:	461a      	mov	r2, r3
 800116c:	2190      	movs	r1, #144	; 0x90
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff76 	bl	8001060 <read_register16>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d047      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	330a      	adds	r3, #10
 800117e:	461a      	mov	r2, r3
 8001180:	2192      	movs	r1, #146	; 0x92
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff6c 	bl	8001060 <read_register16>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d03d      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	330c      	adds	r3, #12
 8001192:	461a      	mov	r2, r3
 8001194:	2194      	movs	r1, #148	; 0x94
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff62 	bl	8001060 <read_register16>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d033      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	330e      	adds	r3, #14
 80011a6:	461a      	mov	r2, r3
 80011a8:	2196      	movs	r1, #150	; 0x96
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff58 	bl	8001060 <read_register16>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d029      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3310      	adds	r3, #16
 80011ba:	461a      	mov	r2, r3
 80011bc:	2198      	movs	r1, #152	; 0x98
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff4e 	bl	8001060 <read_register16>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d01f      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3312      	adds	r3, #18
 80011ce:	461a      	mov	r2, r3
 80011d0:	219a      	movs	r1, #154	; 0x9a
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff44 	bl	8001060 <read_register16>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d015      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3314      	adds	r3, #20
 80011e2:	461a      	mov	r2, r3
 80011e4:	219c      	movs	r1, #156	; 0x9c
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff3a 	bl	8001060 <read_register16>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80011f6:	461a      	mov	r2, r3
 80011f8:	219e      	movs	r1, #158	; 0x9e
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff30 	bl	8001060 <read_register16>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <read_calibration_data+0xfa>

		return true;
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <read_calibration_data+0xfc>
	}

	return false;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f103 0218 	add.w	r2, r3, #24
 8001222:	2301      	movs	r3, #1
 8001224:	21a1      	movs	r1, #161	; 0xa1
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff49 	bl	80010be <read_data>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d14b      	bne.n	80012ca <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	331a      	adds	r3, #26
 8001236:	461a      	mov	r2, r3
 8001238:	21e1      	movs	r1, #225	; 0xe1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff10 	bl	8001060 <read_register16>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d041      	beq.n	80012ca <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f103 021c 	add.w	r2, r3, #28
 800124c:	2301      	movs	r3, #1
 800124e:	21e3      	movs	r1, #227	; 0xe3
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff34 	bl	80010be <read_data>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d136      	bne.n	80012ca <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800125c:	f107 030e 	add.w	r3, r7, #14
 8001260:	461a      	mov	r2, r3
 8001262:	21e4      	movs	r1, #228	; 0xe4
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fefb 	bl	8001060 <read_register16>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02c      	beq.n	80012ca <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	461a      	mov	r2, r3
 8001276:	21e5      	movs	r1, #229	; 0xe5
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fef1 	bl	8001060 <read_register16>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d022      	beq.n	80012ca <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800128a:	2301      	movs	r3, #1
 800128c:	21e7      	movs	r1, #231	; 0xe7
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff15 	bl	80010be <read_data>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d117      	bne.n	80012ca <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	b21b      	sxth	r3, r3
 80012a0:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	121b      	asrs	r3, r3, #8
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	b29b      	uxth	r3, r3
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	841a      	strh	r2, [r3, #32]

		return true;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <read_hum_calibration_data+0xb8>
	}

	return false;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af04      	add	r7, sp, #16
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
 80012e0:	4613      	mov	r3, r2
 80012e2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	89f9      	ldrh	r1, [r7, #14]
 80012f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	1cbb      	adds	r3, r7, #2
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	f003 f881 	bl	800440c <HAL_I2C_Mem_Write>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <write_register8+0x40>
		return false;
 8001310:	2300      	movs	r3, #0
 8001312:	e000      	b.n	8001316 <write_register8+0x42>
	else
		return true;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800132c:	2b76      	cmp	r3, #118	; 0x76
 800132e:	d005      	beq.n	800133c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001334:	2b77      	cmp	r3, #119	; 0x77
 8001336:	d001      	beq.n	800133c <bmp280_init+0x1e>

		return false;
 8001338:	2300      	movs	r3, #0
 800133a:	e099      	b.n	8001470 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001342:	2301      	movs	r3, #1
 8001344:	21d0      	movs	r1, #208	; 0xd0
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff feb9 	bl	80010be <read_data>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <bmp280_init+0x38>
		return false;
 8001352:	2300      	movs	r3, #0
 8001354:	e08c      	b.n	8001470 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800135c:	2b58      	cmp	r3, #88	; 0x58
 800135e:	d006      	beq.n	800136e <bmp280_init+0x50>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001366:	2b60      	cmp	r3, #96	; 0x60
 8001368:	d001      	beq.n	800136e <bmp280_init+0x50>

		return false;
 800136a:	2300      	movs	r3, #0
 800136c:	e080      	b.n	8001470 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800136e:	22b6      	movs	r2, #182	; 0xb6
 8001370:	21e0      	movs	r1, #224	; 0xe0
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffae 	bl	80012d4 <write_register8>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <bmp280_init+0x64>
		return false;
 800137e:	2300      	movs	r3, #0
 8001380:	e076      	b.n	8001470 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	2301      	movs	r3, #1
 8001388:	21f3      	movs	r1, #243	; 0xf3
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fe97 	bl	80010be <read_data>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f5      	bne.n	8001382 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff feb5 	bl	8001110 <read_calibration_data>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d100      	bne.n	80013b4 <bmp280_init+0x96>
 80013b2:	e001      	b.n	80013b8 <bmp280_init+0x9a>
		return false;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e05b      	b.n	8001470 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013be:	2b60      	cmp	r3, #96	; 0x60
 80013c0:	d10a      	bne.n	80013d8 <bmp280_init+0xba>
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff26 	bl	8001214 <read_hum_calibration_data>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <bmp280_init+0xba>
		return false;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e04b      	b.n	8001470 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	795b      	ldrb	r3, [r3, #5]
 80013dc:	015b      	lsls	r3, r3, #5
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	461a      	mov	r2, r3
 80013f2:	21f5      	movs	r1, #245	; 0xf5
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff6d 	bl	80012d4 <write_register8>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <bmp280_init+0xe6>
		return false;
 8001400:	2300      	movs	r3, #0
 8001402:	e035      	b.n	8001470 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d102      	bne.n	8001412 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	78db      	ldrb	r3, [r3, #3]
 8001416:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001418:	b25a      	sxtb	r2, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	789b      	ldrb	r3, [r3, #2]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	b25b      	sxtb	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b25a      	sxtb	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b25b      	sxtb	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001430:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001438:	2b60      	cmp	r3, #96	; 0x60
 800143a:	d10d      	bne.n	8001458 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	791b      	ldrb	r3, [r3, #4]
 8001440:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001442:	7b7b      	ldrb	r3, [r7, #13]
 8001444:	461a      	mov	r2, r3
 8001446:	21f2      	movs	r1, #242	; 0xf2
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff43 	bl	80012d4 <write_register8>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <bmp280_init+0x13a>
			return false;
 8001454:	2300      	movs	r3, #0
 8001456:	e00b      	b.n	8001470 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	461a      	mov	r2, r3
 800145c:	21f4      	movs	r1, #244	; 0xf4
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff38 	bl	80012d4 <write_register8>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <bmp280_init+0x150>
		return false;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <bmp280_init+0x152>
	}

	return true;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	10da      	asrs	r2, r3, #3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001496:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800149a:	12db      	asrs	r3, r3, #11
 800149c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	111b      	asrs	r3, r3, #4
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	8812      	ldrh	r2, [r2, #0]
 80014a6:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	1112      	asrs	r2, r2, #4
 80014ac:	68f9      	ldr	r1, [r7, #12]
 80014ae:	8809      	ldrh	r1, [r1, #0]
 80014b0:	1a52      	subs	r2, r2, r1
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80014be:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80014c2:	139b      	asrs	r3, r3, #14
 80014c4:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	441a      	add	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3380      	adds	r3, #128	; 0x80
 80014dc:	121b      	asrs	r3, r3, #8
}
 80014de:	4618      	mov	r0, r3
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80014ea:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4619      	mov	r1, r3
 80014fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001500:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001504:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001508:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	fb02 f203 	mul.w	r2, r2, r3
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	6a39      	ldr	r1, [r7, #32]
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	441a      	add	r2, r3
 800151e:	6a39      	ldr	r1, [r7, #32]
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	fba1 3403 	umull	r3, r4, r1, r3
 8001526:	4422      	add	r2, r4
 8001528:	4614      	mov	r4, r2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001530:	b211      	sxth	r1, r2
 8001532:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001536:	fb01 f504 	mul.w	r5, r1, r4
 800153a:	fb03 f002 	mul.w	r0, r3, r2
 800153e:	4428      	add	r0, r5
 8001540:	fba3 3401 	umull	r3, r4, r3, r1
 8001544:	1902      	adds	r2, r0, r4
 8001546:	4614      	mov	r4, r2
 8001548:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800154c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001556:	b21b      	sxth	r3, r3
 8001558:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800155c:	6a3a      	ldr	r2, [r7, #32]
 800155e:	fb04 f102 	mul.w	r1, r4, r2
 8001562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001564:	fb03 f202 	mul.w	r2, r3, r2
 8001568:	1888      	adds	r0, r1, r2
 800156a:	6a3a      	ldr	r2, [r7, #32]
 800156c:	fba2 1203 	umull	r1, r2, r2, r3
 8001570:	1883      	adds	r3, r0, r2
 8001572:	461a      	mov	r2, r3
 8001574:	f04f 0500 	mov.w	r5, #0
 8001578:	f04f 0600 	mov.w	r6, #0
 800157c:	0456      	lsls	r6, r2, #17
 800157e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001582:	044d      	lsls	r5, r1, #17
 8001584:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001588:	186b      	adds	r3, r5, r1
 800158a:	eb46 0402 	adc.w	r4, r6, r2
 800158e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001598:	b219      	sxth	r1, r3
 800159a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800159e:	f04f 0500 	mov.w	r5, #0
 80015a2:	f04f 0600 	mov.w	r6, #0
 80015a6:	00ce      	lsls	r6, r1, #3
 80015a8:	2500      	movs	r5, #0
 80015aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80015ae:	186b      	adds	r3, r5, r1
 80015b0:	eb46 0402 	adc.w	r4, r6, r2
 80015b4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	6a3a      	ldr	r2, [r7, #32]
 80015bc:	fb02 f203 	mul.w	r2, r2, r3
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	6a39      	ldr	r1, [r7, #32]
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	441a      	add	r2, r3
 80015ca:	6a39      	ldr	r1, [r7, #32]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	fba1 3403 	umull	r3, r4, r1, r3
 80015d2:	4422      	add	r2, r4
 80015d4:	4614      	mov	r4, r2
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80015dc:	b211      	sxth	r1, r2
 80015de:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80015e2:	fb01 f504 	mul.w	r5, r1, r4
 80015e6:	fb03 f002 	mul.w	r0, r3, r2
 80015ea:	4428      	add	r0, r5
 80015ec:	fba3 3401 	umull	r3, r4, r3, r1
 80015f0:	1902      	adds	r2, r0, r4
 80015f2:	4614      	mov	r4, r2
 80015f4:	f04f 0100 	mov.w	r1, #0
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	0a19      	lsrs	r1, r3, #8
 80015fe:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001602:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800160a:	b21b      	sxth	r3, r3
 800160c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001610:	6a38      	ldr	r0, [r7, #32]
 8001612:	fb04 f500 	mul.w	r5, r4, r0
 8001616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001618:	fb03 f000 	mul.w	r0, r3, r0
 800161c:	4428      	add	r0, r5
 800161e:	6a3d      	ldr	r5, [r7, #32]
 8001620:	fba5 5603 	umull	r5, r6, r5, r3
 8001624:	1983      	adds	r3, r0, r6
 8001626:	461e      	mov	r6, r3
 8001628:	f04f 0b00 	mov.w	fp, #0
 800162c:	f04f 0c00 	mov.w	ip, #0
 8001630:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001634:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001638:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800163c:	eb1b 0301 	adds.w	r3, fp, r1
 8001640:	eb4c 0402 	adc.w	r4, ip, r2
 8001644:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001648:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800164c:	1c19      	adds	r1, r3, #0
 800164e:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	88db      	ldrh	r3, [r3, #6]
 8001656:	b29b      	uxth	r3, r3
 8001658:	f04f 0400 	mov.w	r4, #0
 800165c:	fb03 f502 	mul.w	r5, r3, r2
 8001660:	fb01 f004 	mul.w	r0, r1, r4
 8001664:	4428      	add	r0, r5
 8001666:	fba1 3403 	umull	r3, r4, r1, r3
 800166a:	1902      	adds	r2, r0, r4
 800166c:	4614      	mov	r4, r2
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	1061      	asrs	r1, r4, #1
 8001678:	17e2      	asrs	r2, r4, #31
 800167a:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 800167e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001682:	4323      	orrs	r3, r4
 8001684:	d101      	bne.n	800168a <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001686:	2300      	movs	r3, #0
 8001688:	e0d4      	b.n	8001834 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001690:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001694:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	ea4f 0963 	mov.w	r9, r3, asr #1
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80016a4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80016a8:	4645      	mov	r5, r8
 80016aa:	464e      	mov	r6, r9
 80016ac:	1aed      	subs	r5, r5, r3
 80016ae:	eb66 0604 	sbc.w	r6, r6, r4
 80016b2:	46a8      	mov	r8, r5
 80016b4:	46b1      	mov	r9, r6
 80016b6:	eb18 0308 	adds.w	r3, r8, r8
 80016ba:	eb49 0409 	adc.w	r4, r9, r9
 80016be:	4698      	mov	r8, r3
 80016c0:	46a1      	mov	r9, r4
 80016c2:	eb18 0805 	adds.w	r8, r8, r5
 80016c6:	eb49 0906 	adc.w	r9, r9, r6
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80016d6:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80016da:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80016de:	eb18 0801 	adds.w	r8, r8, r1
 80016e2:	eb49 0902 	adc.w	r9, r9, r2
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80016f2:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80016f6:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80016fa:	4688      	mov	r8, r1
 80016fc:	4691      	mov	r9, r2
 80016fe:	eb18 0805 	adds.w	r8, r8, r5
 8001702:	eb49 0906 	adc.w	r9, r9, r6
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001712:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001716:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800171a:	4688      	mov	r8, r1
 800171c:	4691      	mov	r9, r2
 800171e:	eb18 0005 	adds.w	r0, r8, r5
 8001722:	eb49 0106 	adc.w	r1, r9, r6
 8001726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800172a:	f7ff fa45 	bl	8000bb8 <__aeabi_ldivmod>
 800172e:	4603      	mov	r3, r0
 8001730:	460c      	mov	r4, r1
 8001732:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800173c:	b219      	sxth	r1, r3
 800173e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001742:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	f04f 0400 	mov.w	r4, #0
 800174e:	0b6b      	lsrs	r3, r5, #13
 8001750:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001754:	1374      	asrs	r4, r6, #13
 8001756:	fb03 f502 	mul.w	r5, r3, r2
 800175a:	fb01 f004 	mul.w	r0, r1, r4
 800175e:	4428      	add	r0, r5
 8001760:	fba1 1203 	umull	r1, r2, r1, r3
 8001764:	1883      	adds	r3, r0, r2
 8001766:	461a      	mov	r2, r3
 8001768:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	f04f 0400 	mov.w	r4, #0
 8001774:	0b6b      	lsrs	r3, r5, #13
 8001776:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800177a:	1374      	asrs	r4, r6, #13
 800177c:	fb03 f502 	mul.w	r5, r3, r2
 8001780:	fb01 f004 	mul.w	r0, r1, r4
 8001784:	4428      	add	r0, r5
 8001786:	fba1 1203 	umull	r1, r2, r1, r3
 800178a:	1883      	adds	r3, r0, r2
 800178c:	461a      	mov	r2, r3
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f04f 0400 	mov.w	r4, #0
 8001796:	0e4b      	lsrs	r3, r1, #25
 8001798:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800179c:	1654      	asrs	r4, r2, #25
 800179e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	fb04 f102 	mul.w	r1, r4, r2
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	fb03 f202 	mul.w	r2, r3, r2
 80017ba:	1888      	adds	r0, r1, r2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	fba2 1203 	umull	r1, r2, r2, r3
 80017c2:	1883      	adds	r3, r0, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f04f 0400 	mov.w	r4, #0
 80017ce:	0ccb      	lsrs	r3, r1, #19
 80017d0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80017d4:	14d4      	asrs	r4, r2, #19
 80017d6:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80017da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80017de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017e2:	eb11 0803 	adds.w	r8, r1, r3
 80017e6:	eb42 0904 	adc.w	r9, r2, r4
 80017ea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80017ee:	eb13 0508 	adds.w	r5, r3, r8
 80017f2:	eb44 0609 	adc.w	r6, r4, r9
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	0a29      	lsrs	r1, r5, #8
 8001800:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001804:	1232      	asrs	r2, r6, #8
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800180c:	b21d      	sxth	r5, r3
 800180e:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001812:	f04f 0800 	mov.w	r8, #0
 8001816:	f04f 0900 	mov.w	r9, #0
 800181a:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800181e:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001822:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001826:	eb18 0301 	adds.w	r3, r8, r1
 800182a:	eb49 0402 	adc.w	r4, r9, r2
 800182e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001832:	693b      	ldr	r3, [r7, #16]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3728      	adds	r7, #40	; 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800183e <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800183e:	b480      	push	{r7}
 8001840:	b087      	sub	sp, #28
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001850:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	039a      	lsls	r2, r3, #14
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800185c:	051b      	lsls	r3, r3, #20
 800185e:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001866:	4619      	mov	r1, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fb03 f301 	mul.w	r3, r3, r1
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001874:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800187c:	4611      	mov	r1, r2
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	fb02 f201 	mul.w	r2, r2, r1
 8001884:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001886:	68f9      	ldr	r1, [r7, #12]
 8001888:	7f09      	ldrb	r1, [r1, #28]
 800188a:	4608      	mov	r0, r1
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	fb01 f100 	mul.w	r1, r1, r0
 8001892:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001894:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001898:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800189c:	1292      	asrs	r2, r2, #10
 800189e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80018a8:	fb01 f202 	mul.w	r2, r1, r2
 80018ac:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80018b0:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	13db      	asrs	r3, r3, #15
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	13d2      	asrs	r2, r2, #15
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	7e12      	ldrb	r2, [r2, #24]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80018dc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80018e4:	bfa8      	it	ge
 80018e6:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80018ea:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	131b      	asrs	r3, r3, #12
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001910:	2b60      	cmp	r3, #96	; 0x60
 8001912:	d007      	beq.n	8001924 <bmp280_read_fixed+0x28>
		if (humidity)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001920:	2300      	movs	r3, #0
 8001922:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <bmp280_read_fixed+0x32>
 800192a:	2308      	movs	r3, #8
 800192c:	e000      	b.n	8001930 <bmp280_read_fixed+0x34>
 800192e:	2306      	movs	r3, #6
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f107 0218 	add.w	r2, r7, #24
 800193a:	21f7      	movs	r1, #247	; 0xf7
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7ff fbbe 	bl	80010be <read_data>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <bmp280_read_fixed+0x50>
		return false;
 8001948:	2300      	movs	r3, #0
 800194a:	e038      	b.n	80019be <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800194c:	7e3b      	ldrb	r3, [r7, #24]
 800194e:	031a      	lsls	r2, r3, #12
 8001950:	7e7b      	ldrb	r3, [r7, #25]
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4313      	orrs	r3, r2
 8001956:	7eba      	ldrb	r2, [r7, #26]
 8001958:	0912      	lsrs	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	4313      	orrs	r3, r2
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001960:	7efb      	ldrb	r3, [r7, #27]
 8001962:	031a      	lsls	r2, r3, #12
 8001964:	7f3b      	ldrb	r3, [r7, #28]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4313      	orrs	r3, r2
 800196a:	7f7a      	ldrb	r2, [r7, #29]
 800196c:	0912      	lsrs	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	4313      	orrs	r3, r2
 8001972:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	461a      	mov	r2, r3
 800197a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fd7b 	bl	8001478 <compensate_temperature>
 8001982:	4602      	mov	r2, r0
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	461a      	mov	r2, r3
 800198c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff fdab 	bl	80014ea <compensate_pressure>
 8001994:	4602      	mov	r2, r0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00d      	beq.n	80019bc <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80019a0:	7fbb      	ldrb	r3, [r7, #30]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	7ffa      	ldrb	r2, [r7, #31]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	461a      	mov	r2, r3
 80019ae:	6a39      	ldr	r1, [r7, #32]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff ff44 	bl	800183e <compensate_humidity>
 80019b6:	4602      	mov	r2, r0
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	601a      	str	r2, [r3, #0]
	}

	return true;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3730      	adds	r7, #48	; 0x30
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <bmp280_read_float+0x1a>
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	e000      	b.n	80019e4 <bmp280_read_float+0x1c>
 80019e2:	2300      	movs	r3, #0
 80019e4:	f107 0218 	add.w	r2, r7, #24
 80019e8:	f107 011c 	add.w	r1, r7, #28
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff ff85 	bl	80018fc <bmp280_read_fixed>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d028      	beq.n	8001a4a <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a02:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001a54 <bmp280_read_float+0x8c>
 8001a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a1a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001a58 <bmp280_read_float+0x90>
 8001a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00b      	beq.n	8001a46 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a38:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001a5c <bmp280_read_float+0x94>
 8001a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <bmp280_read_float+0x84>
	}

	return false;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	42c80000 	.word	0x42c80000
 8001a58:	43800000 	.word	0x43800000
 8001a5c:	44800000 	.word	0x44800000

08001a60 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <vApplicationGetIdleTaskMemory+0x30>)
 8001a76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	2000020c 	.word	0x2000020c
 8001a90:	20000260 	.word	0x20000260

08001a94 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	70fb      	strb	r3, [r7, #3]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70bb      	strb	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 8001ab2:	4a4f      	ldr	r2, [pc, #316]	; (8001bf0 <lcdInit+0x15c>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <lcdInit+0x15c>)
 8001ac0:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001ac2:	4a4b      	ldr	r2, [pc, #300]	; (8001bf0 <lcdInit+0x15c>)
 8001ac4:	78bb      	ldrb	r3, [r7, #2]
 8001ac6:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001ac8:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <lcdInit+0x15c>)
 8001aca:	787b      	ldrb	r3, [r7, #1]
 8001acc:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001ace:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <lcdInit+0x15c>)
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001ad4:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <lcdInit+0x160>)
 8001ad6:	2234      	movs	r2, #52	; 0x34
 8001ad8:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <lcdInit+0x160>)
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	4b45      	ldr	r3, [pc, #276]	; (8001bf4 <lcdInit+0x160>)
 8001ae0:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001ae2:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <lcdInit+0x160>)
 8001ae4:	2230      	movs	r2, #48	; 0x30
 8001ae6:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	75fb      	strb	r3, [r7, #23]
 8001aec:	e030      	b.n	8001b50 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001aee:	4b40      	ldr	r3, [pc, #256]	; (8001bf0 <lcdInit+0x15c>)
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <lcdInit+0x15c>)
 8001af4:	799b      	ldrb	r3, [r3, #6]
 8001af6:	b299      	uxth	r1, r3
 8001af8:	2303      	movs	r3, #3
 8001afa:	4a3e      	ldr	r2, [pc, #248]	; (8001bf4 <lcdInit+0x160>)
 8001afc:	f002 fb70 	bl	80041e0 <HAL_I2C_Master_Transmit_DMA>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <lcdInit+0x76>
            return false;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e06d      	b.n	8001be6 <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 8001b0a:	f006 fe9b 	bl	8008844 <xTaskGetTickCount>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001b12:	e002      	b.n	8001b1a <lcdInit+0x86>
            vTaskDelay(1);
 8001b14:	2001      	movs	r0, #1
 8001b16:	f006 fbc1 	bl	800829c <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <lcdInit+0x15c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fa09 	bl	8004f36 <HAL_I2C_GetState>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d1f4      	bne.n	8001b14 <lcdInit+0x80>
        }

        if (i == 2) {
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d106      	bne.n	8001b3e <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	2101      	movs	r1, #1
 8001b36:	4618      	mov	r0, r3
 8001b38:	f006 fb36 	bl	80081a8 <vTaskDelayUntil>
 8001b3c:	e005      	b.n	8001b4a <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	2105      	movs	r1, #5
 8001b44:	4618      	mov	r0, r3
 8001b46:	f006 fb2f 	bl	80081a8 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d9cb      	bls.n	8001aee <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001b56:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <lcdInit+0x160>)
 8001b58:	222c      	movs	r2, #44	; 0x2c
 8001b5a:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <lcdInit+0x160>)
 8001b5e:	781a      	ldrb	r2, [r3, #0]
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <lcdInit+0x160>)
 8001b62:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <lcdInit+0x160>)
 8001b66:	2228      	movs	r2, #40	; 0x28
 8001b68:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <lcdInit+0x15c>)
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <lcdInit+0x15c>)
 8001b70:	799b      	ldrb	r3, [r3, #6]
 8001b72:	b299      	uxth	r1, r3
 8001b74:	2303      	movs	r3, #3
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <lcdInit+0x160>)
 8001b78:	f002 fb32 	bl	80041e0 <HAL_I2C_Master_Transmit_DMA>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <lcdInit+0xf8>
        return false;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e02f      	b.n	8001be6 <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001b86:	2001      	movs	r0, #1
 8001b88:	f006 fb88 	bl	800829c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <lcdInit+0x15c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 f9d0 	bl	8004f36 <HAL_I2C_GetState>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d1f4      	bne.n	8001b86 <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <lcdInit+0x15c>)
 8001ba8:	791b      	ldrb	r3, [r3, #4]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d904      	bls.n	8001bb8 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001bb8:	f107 030f 	add.w	r3, r7, #15
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 f962 	bl	8001e88 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f000 f816 	bl	8001bf8 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001bcc:	2101      	movs	r1, #1
 8001bce:	2007      	movs	r0, #7
 8001bd0:	f000 f812 	bl	8001bf8 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f000 f80e 	bl	8001bf8 <lcdCommand>
    lcdCursorHome();
 8001bdc:	2101      	movs	r1, #1
 8001bde:	2005      	movs	r0, #5
 8001be0:	f000 f80a 	bl	8001bf8 <lcdCommand>

    return true;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000468 	.word	0x20000468
 8001bf4:	20000460 	.word	0x20000460

08001bf8 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460a      	mov	r2, r1
 8001c02:	71fb      	strb	r3, [r7, #7]
 8001c04:	4613      	mov	r3, r2
 8001c06:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d06e      	beq.n	8001cf0 <lcdCommand+0xf8>
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	f040 80b4 	bne.w	8001d80 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	2b07      	cmp	r3, #7
 8001c1e:	d864      	bhi.n	8001cea <lcdCommand+0xf2>
 8001c20:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <lcdCommand+0x30>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c49 	.word	0x08001c49
 8001c2c:	08001c79 	.word	0x08001c79
 8001c30:	08001c59 	.word	0x08001c59
 8001c34:	08001c69 	.word	0x08001c69
 8001c38:	08001c9d 	.word	0x08001c9d
 8001c3c:	08001cd1 	.word	0x08001cd1
 8001c40:	08001cc1 	.word	0x08001cc1
 8001c44:	08001cdb 	.word	0x08001cdb
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001c48:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <lcdCommand+0x1f0>)
 8001c4a:	7a1b      	ldrb	r3, [r3, #8]
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b65      	ldr	r3, [pc, #404]	; (8001de8 <lcdCommand+0x1f0>)
 8001c54:	721a      	strb	r2, [r3, #8]
                    break;
 8001c56:	e04a      	b.n	8001cee <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8001c58:	4b63      	ldr	r3, [pc, #396]	; (8001de8 <lcdCommand+0x1f0>)
 8001c5a:	7a1b      	ldrb	r3, [r3, #8]
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b61      	ldr	r3, [pc, #388]	; (8001de8 <lcdCommand+0x1f0>)
 8001c64:	721a      	strb	r2, [r3, #8]
                    break;
 8001c66:	e042      	b.n	8001cee <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001c68:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <lcdCommand+0x1f0>)
 8001c6a:	7a1b      	ldrb	r3, [r3, #8]
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b5d      	ldr	r3, [pc, #372]	; (8001de8 <lcdCommand+0x1f0>)
 8001c74:	721a      	strb	r2, [r3, #8]
                    break;
 8001c76:	e03a      	b.n	8001cee <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001c7c:	f107 030f 	add.w	r3, r7, #15
 8001c80:	4619      	mov	r1, r3
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f900 	bl	8001e88 <lcdWriteByte>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <lcdCommand+0x9a>
                        return false;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e0a6      	b.n	8001de0 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 8001c92:	2002      	movs	r0, #2
 8001c94:	f006 fb02 	bl	800829c <vTaskDelay>
                        return true;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0a1      	b.n	8001de0 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001ca0:	f107 030f 	add.w	r3, r7, #15
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 f8ee 	bl	8001e88 <lcdWriteByte>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <lcdCommand+0xbe>
                        return false;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e094      	b.n	8001de0 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f006 faf0 	bl	800829c <vTaskDelay>
                        return true;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e08f      	b.n	8001de0 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <lcdCommand+0x1f0>)
 8001cc2:	7a5b      	ldrb	r3, [r3, #9]
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <lcdCommand+0x1f0>)
 8001ccc:	725a      	strb	r2, [r3, #9]
                    break;
 8001cce:	e00e      	b.n	8001cee <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001cd0:	4b45      	ldr	r3, [pc, #276]	; (8001de8 <lcdCommand+0x1f0>)
 8001cd2:	7a5a      	ldrb	r2, [r3, #9]
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <lcdCommand+0x1f0>)
 8001cd6:	725a      	strb	r2, [r3, #9]
                    break;
 8001cd8:	e009      	b.n	8001cee <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <lcdCommand+0x1f0>)
 8001cdc:	7a5b      	ldrb	r3, [r3, #9]
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <lcdCommand+0x1f0>)
 8001ce6:	725a      	strb	r2, [r3, #9]
                    break;
 8001ce8:	e001      	b.n	8001cee <lcdCommand+0xf6>

                default:
                    return false;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e078      	b.n	8001de0 <lcdCommand+0x1e8>
            }

            break;
 8001cee:	e049      	b.n	8001d84 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	2b07      	cmp	r3, #7
 8001cf6:	d840      	bhi.n	8001d7a <lcdCommand+0x182>
 8001cf8:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <lcdCommand+0x108>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d21 	.word	0x08001d21
 8001d04:	08001d7b 	.word	0x08001d7b
 8001d08:	08001d31 	.word	0x08001d31
 8001d0c:	08001d41 	.word	0x08001d41
 8001d10:	08001d7b 	.word	0x08001d7b
 8001d14:	08001d61 	.word	0x08001d61
 8001d18:	08001d51 	.word	0x08001d51
 8001d1c:	08001d6b 	.word	0x08001d6b
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <lcdCommand+0x1f0>)
 8001d22:	7a1b      	ldrb	r3, [r3, #8]
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <lcdCommand+0x1f0>)
 8001d2c:	721a      	strb	r2, [r3, #8]
                    break;
 8001d2e:	e026      	b.n	8001d7e <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <lcdCommand+0x1f0>)
 8001d32:	7a1b      	ldrb	r3, [r3, #8]
 8001d34:	f023 0302 	bic.w	r3, r3, #2
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <lcdCommand+0x1f0>)
 8001d3c:	721a      	strb	r2, [r3, #8]
                    break;
 8001d3e:	e01e      	b.n	8001d7e <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <lcdCommand+0x1f0>)
 8001d42:	7a1b      	ldrb	r3, [r3, #8]
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <lcdCommand+0x1f0>)
 8001d4c:	721a      	strb	r2, [r3, #8]
                    break;
 8001d4e:	e016      	b.n	8001d7e <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <lcdCommand+0x1f0>)
 8001d52:	7a5b      	ldrb	r3, [r3, #9]
 8001d54:	f023 0302 	bic.w	r3, r3, #2
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <lcdCommand+0x1f0>)
 8001d5c:	725a      	strb	r2, [r3, #9]
                    break;
 8001d5e:	e00e      	b.n	8001d7e <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <lcdCommand+0x1f0>)
 8001d62:	7a5a      	ldrb	r2, [r3, #9]
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <lcdCommand+0x1f0>)
 8001d66:	725a      	strb	r2, [r3, #9]
                    break;
 8001d68:	e009      	b.n	8001d7e <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8001d6a:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <lcdCommand+0x1f0>)
 8001d6c:	7a5b      	ldrb	r3, [r3, #9]
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <lcdCommand+0x1f0>)
 8001d76:	725a      	strb	r2, [r3, #9]
                    break;
 8001d78:	e001      	b.n	8001d7e <lcdCommand+0x186>

                default:
                    return false;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e030      	b.n	8001de0 <lcdCommand+0x1e8>
            }

            break;
 8001d7e:	e001      	b.n	8001d84 <lcdCommand+0x18c>

        default:
            return false;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e02d      	b.n	8001de0 <lcdCommand+0x1e8>
    }

    /* Now lets send the command */
    switch (command) {
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	2b07      	cmp	r3, #7
 8001d8a:	d821      	bhi.n	8001dd0 <lcdCommand+0x1d8>
 8001d8c:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <lcdCommand+0x19c>)
 8001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001db5 	.word	0x08001db5
 8001d98:	08001dd1 	.word	0x08001dd1
 8001d9c:	08001db5 	.word	0x08001db5
 8001da0:	08001db5 	.word	0x08001db5
 8001da4:	08001dd1 	.word	0x08001dd1
 8001da8:	08001dc3 	.word	0x08001dc3
 8001dac:	08001dc3 	.word	0x08001dc3
 8001db0:	08001dc3 	.word	0x08001dc3
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <lcdCommand+0x1f0>)
 8001db6:	7a1b      	ldrb	r3, [r3, #8]
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	73fb      	strb	r3, [r7, #15]
            break;
 8001dc0:	e007      	b.n	8001dd2 <lcdCommand+0x1da>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <lcdCommand+0x1f0>)
 8001dc4:	7a5b      	ldrb	r3, [r3, #9]
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	73fb      	strb	r3, [r7, #15]
            break;
 8001dce:	e000      	b.n	8001dd2 <lcdCommand+0x1da>

        default:
            break;
 8001dd0:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001dd2:	f107 030f 	add.w	r3, r7, #15
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 f855 	bl	8001e88 <lcdWriteByte>
 8001dde:	4603      	mov	r3, r0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000468 	.word	0x20000468

08001dec <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	460a      	mov	r2, r1
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <lcdSetCursorPosition+0x50>)
 8001dfe:	791b      	ldrb	r3, [r3, #4]
 8001e00:	79ba      	ldrb	r2, [r7, #6]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d303      	bcc.n	8001e0e <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <lcdSetCursorPosition+0x50>)
 8001e08:	791b      	ldrb	r3, [r3, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001e0e:	79bb      	ldrb	r3, [r7, #6]
 8001e10:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <lcdSetCursorPosition+0x54>)
 8001e12:	5cd2      	ldrb	r2, [r2, r3]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4413      	add	r3, r2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8001e26:	f107 030f 	add.w	r3, r7, #15
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f000 f82b 	bl	8001e88 <lcdWriteByte>
 8001e32:	4603      	mov	r3, r0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000468 	.word	0x20000468
 8001e40:	0800b9b0 	.word	0x0800b9b0

08001e44 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e00e      	b.n	8001e74 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f000 f812 	bl	8001e88 <lcdWriteByte>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <lcdPrintStr+0x2a>
            return false;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e007      	b.n	8001e7e <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	3301      	adds	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d3ec      	bcc.n	8001e56 <lcdPrintStr+0x12>
        }
    }

    return true;
 8001e7c:	2301      	movs	r3, #1
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <lcdWriteByte+0xdc>)
 8001e96:	79da      	ldrb	r2, [r3, #7]
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	f023 030f 	bic.w	r3, r3, #15
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <lcdWriteByte+0xe0>)
 8001eb4:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <lcdWriteByte+0xe0>)
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <lcdWriteByte+0xe0>)
 8001ebc:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <lcdWriteByte+0xdc>)
 8001ec0:	79da      	ldrb	r2, [r3, #7]
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	b25a      	sxtb	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b25b      	sxtb	r3, r3
 8001ed0:	f023 030f 	bic.w	r3, r3, #15
 8001ed4:	b25b      	sxtb	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b25b      	sxtb	r3, r3
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <lcdWriteByte+0xe0>)
 8001ede:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <lcdWriteByte+0xdc>)
 8001ee2:	79da      	ldrb	r2, [r3, #7]
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <lcdWriteByte+0xe0>)
 8001efe:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <lcdWriteByte+0xe0>)
 8001f02:	78da      	ldrb	r2, [r3, #3]
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <lcdWriteByte+0xe0>)
 8001f06:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <lcdWriteByte+0xdc>)
 8001f0a:	79da      	ldrb	r2, [r3, #7]
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	b25a      	sxtb	r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	b25b      	sxtb	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b25b      	sxtb	r3, r3
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <lcdWriteByte+0xe0>)
 8001f24:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <lcdWriteByte+0xdc>)
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <lcdWriteByte+0xdc>)
 8001f2c:	799b      	ldrb	r3, [r3, #6]
 8001f2e:	b299      	uxth	r1, r3
 8001f30:	2306      	movs	r3, #6
 8001f32:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <lcdWriteByte+0xe0>)
 8001f34:	f002 f954 	bl	80041e0 <HAL_I2C_Master_Transmit_DMA>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <lcdWriteByte+0xc0>
        return false;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e00b      	b.n	8001f5a <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f006 f9aa 	bl	800829c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <lcdWriteByte+0xdc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fff2 	bl	8004f36 <HAL_I2C_GetState>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d1f4      	bne.n	8001f42 <lcdWriteByte+0xba>
    }

    return true;
 8001f58:	2301      	movs	r3, #1
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000468 	.word	0x20000468
 8001f68:	20000460 	.word	0x20000460

08001f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b0aa      	sub	sp, #168	; 0xa8
 8001f70:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f72:	f001 f8f9 	bl	8003168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f76:	f000 f8a1 	bl	80020bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f7a:	f000 f9e3 	bl	8002344 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f7e:	f000 f9b9 	bl	80022f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f82:	f000 f98d 	bl	80022a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f86:	f000 f901 	bl	800218c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001f8a:	f000 f92d 	bl	80021e8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001f8e:	f000 f959 	bl	8002244 <MX_I2C3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001f92:	4b3e      	ldr	r3, [pc, #248]	; (800208c <main+0x120>)
 8001f94:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001f98:	461d      	mov	r5, r3
 8001f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001fa6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f005 fe32 	bl	8007c16 <osThreadCreate>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <main+0x124>)
 8001fb6:	601a      	str	r2, [r3, #0]

  /* definition and creation of printLcdTask */
  osThreadDef(printLcdTask, StartLcdTask, osPriorityNormal, 0, 128);
 8001fb8:	4b36      	ldr	r3, [pc, #216]	; (8002094 <main+0x128>)
 8001fba:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001fbe:	461d      	mov	r5, r3
 8001fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  printLcdTaskHandle = osThreadCreate(osThread(printLcdTask), NULL);
 8001fcc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f005 fe1f 	bl	8007c16 <osThreadCreate>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <main+0x12c>)
 8001fdc:	601a      	str	r2, [r3, #0]

  /* definition and creation of checkDataSensor */
  osThreadDef(checkDataSensor, StartDataSensor, osPriorityNormal, 0, 128);
 8001fde:	4b2f      	ldr	r3, [pc, #188]	; (800209c <main+0x130>)
 8001fe0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001fe4:	461d      	mov	r5, r3
 8001fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkDataSensorHandle = osThreadCreate(osThread(checkDataSensor), NULL);
 8001ff2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f005 fe0c 	bl	8007c16 <osThreadCreate>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <main+0x134>)
 8002002:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBtnTask */
  osThreadDef(myBtnTask, StartBtnTask, osPriorityNormal, 0, 128);
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <main+0x138>)
 8002006:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800200a:	461d      	mov	r5, r3
 800200c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800200e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002010:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myBtnTaskHandle = osThreadCreate(osThread(myBtnTask), NULL);
 8002018:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f005 fdf9 	bl	8007c16 <osThreadCreate>
 8002024:	4602      	mov	r2, r0
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <main+0x13c>)
 8002028:	601a      	str	r2, [r3, #0]

  /* definition and creation of myPrintTime */
  osThreadDef(myPrintTime, StartTimeTask, osPriorityNormal, 0, 128);
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <main+0x140>)
 800202c:	f107 041c 	add.w	r4, r7, #28
 8002030:	461d      	mov	r5, r3
 8002032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002036:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800203a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPrintTimeHandle = osThreadCreate(osThread(myPrintTime), NULL);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f005 fde6 	bl	8007c16 <osThreadCreate>
 800204a:	4602      	mov	r2, r0
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <main+0x144>)
 800204e:	601a      	str	r2, [r3, #0]

  /* definition and creation of myStatusTemp */
  osThreadDef(myStatusTemp, StartStatusTemp, osPriorityNormal, 0, 128);
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <main+0x148>)
 8002052:	463c      	mov	r4, r7
 8002054:	461d      	mov	r5, r3
 8002056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800205a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800205e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myStatusTempHandle = osThreadCreate(osThread(myStatusTemp), NULL);
 8002062:	463b      	mov	r3, r7
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f005 fdd5 	bl	8007c16 <osThreadCreate>
 800206c:	4602      	mov	r2, r0
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <main+0x14c>)
 8002070:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  vTaskSuspend(myPrintTimeHandle);
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <main+0x144>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f006 f944 	bl	8008304 <vTaskSuspend>
  vTaskSuspend(checkDataSensorHandle);
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <main+0x134>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f006 f93f 	bl	8008304 <vTaskSuspend>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002086:	f005 fdbf 	bl	8007c08 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800208a:	e7fe      	b.n	800208a <main+0x11e>
 800208c:	0800b734 	.word	0x0800b734
 8002090:	200041e8 	.word	0x200041e8
 8002094:	0800b760 	.word	0x0800b760
 8002098:	20004354 	.word	0x20004354
 800209c:	0800b78c 	.word	0x0800b78c
 80020a0:	20004474 	.word	0x20004474
 80020a4:	0800b7b4 	.word	0x0800b7b4
 80020a8:	200044dc 	.word	0x200044dc
 80020ac:	0800b7dc 	.word	0x0800b7dc
 80020b0:	2000455c 	.word	0x2000455c
 80020b4:	0800b808 	.word	0x0800b808
 80020b8:	20004558 	.word	0x20004558

080020bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b094      	sub	sp, #80	; 0x50
 80020c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	2230      	movs	r2, #48	; 0x30
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f007 faa5 	bl	800961a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <SystemClock_Config+0xc8>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <SystemClock_Config+0xc8>)
 80020ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ee:	6413      	str	r3, [r2, #64]	; 0x40
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <SystemClock_Config+0xc8>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <SystemClock_Config+0xcc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a20      	ldr	r2, [pc, #128]	; (8002188 <SystemClock_Config+0xcc>)
 8002106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <SystemClock_Config+0xcc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002118:	2301      	movs	r3, #1
 800211a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800211c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002122:	2302      	movs	r3, #2
 8002124:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002126:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800212a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800212c:	2308      	movs	r3, #8
 800212e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002130:	2364      	movs	r3, #100	; 0x64
 8002132:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002134:	2302      	movs	r3, #2
 8002136:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002138:	2304      	movs	r3, #4
 800213a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800213c:	f107 0320 	add.w	r3, r7, #32
 8002140:	4618      	mov	r0, r3
 8002142:	f004 fd0b 	bl	8006b5c <HAL_RCC_OscConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800214c:	f000 fd7a 	bl	8002c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002150:	230f      	movs	r3, #15
 8002152:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002154:	2302      	movs	r3, #2
 8002156:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800215c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002160:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	2101      	movs	r1, #1
 800216c:	4618      	mov	r0, r3
 800216e:	f004 ff65 	bl	800703c <HAL_RCC_ClockConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002178:	f000 fd64 	bl	8002c44 <Error_Handler>
  }
}
 800217c:	bf00      	nop
 800217e:	3750      	adds	r7, #80	; 0x50
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	40007000 	.word	0x40007000

0800218c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <MX_I2C1_Init+0x50>)
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <MX_I2C1_Init+0x54>)
 8002194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <MX_I2C1_Init+0x50>)
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <MX_I2C1_Init+0x58>)
 800219a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_I2C1_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MX_I2C1_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <MX_I2C1_Init+0x50>)
 80021aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <MX_I2C1_Init+0x50>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <MX_I2C1_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <MX_I2C1_Init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_I2C1_Init+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021c8:	4804      	ldr	r0, [pc, #16]	; (80021dc <MX_I2C1_Init+0x50>)
 80021ca:	f001 fed1 	bl	8003f70 <HAL_I2C_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021d4:	f000 fd36 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200042a8 	.word	0x200042a8
 80021e0:	40005400 	.word	0x40005400
 80021e4:	000186a0 	.word	0x000186a0

080021e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <MX_I2C2_Init+0x50>)
 80021ee:	4a13      	ldr	r2, [pc, #76]	; (800223c <MX_I2C2_Init+0x54>)
 80021f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <MX_I2C2_Init+0x50>)
 80021f4:	4a12      	ldr	r2, [pc, #72]	; (8002240 <MX_I2C2_Init+0x58>)
 80021f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <MX_I2C2_Init+0x50>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <MX_I2C2_Init+0x50>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <MX_I2C2_Init+0x50>)
 8002206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800220a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <MX_I2C2_Init+0x50>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <MX_I2C2_Init+0x50>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <MX_I2C2_Init+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <MX_I2C2_Init+0x50>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002224:	4804      	ldr	r0, [pc, #16]	; (8002238 <MX_I2C2_Init+0x50>)
 8002226:	f001 fea3 	bl	8003f70 <HAL_I2C_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002230:	f000 fd08 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	200042fc 	.word	0x200042fc
 800223c:	40005800 	.word	0x40005800
 8002240:	000186a0 	.word	0x000186a0

08002244 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <MX_I2C3_Init+0x50>)
 800224a:	4a13      	ldr	r2, [pc, #76]	; (8002298 <MX_I2C3_Init+0x54>)
 800224c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_I2C3_Init+0x50>)
 8002250:	4a12      	ldr	r2, [pc, #72]	; (800229c <MX_I2C3_Init+0x58>)
 8002252:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <MX_I2C3_Init+0x50>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_I2C3_Init+0x50>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_I2C3_Init+0x50>)
 8002262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002266:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <MX_I2C3_Init+0x50>)
 800226a:	2200      	movs	r2, #0
 800226c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_I2C3_Init+0x50>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <MX_I2C3_Init+0x50>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_I2C3_Init+0x50>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002280:	4804      	ldr	r0, [pc, #16]	; (8002294 <MX_I2C3_Init+0x50>)
 8002282:	f001 fe75 	bl	8003f70 <HAL_I2C_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800228c:	f000 fcda 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200041ec 	.word	0x200041ec
 8002298:	40005c00 	.word	0x40005c00
 800229c:	000186a0 	.word	0x000186a0

080022a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <MX_USART2_UART_Init+0x50>)
 80022a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022c6:	220c      	movs	r2, #12
 80022c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022d8:	f005 f8a2 	bl	8007420 <HAL_UART_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022e2:	f000 fcaf 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20004518 	.word	0x20004518
 80022f0:	40004400 	.word	0x40004400

080022f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <MX_DMA_Init+0x4c>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <MX_DMA_Init+0x4c>)
 8002304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <MX_DMA_Init+0x4c>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2105      	movs	r1, #5
 800231a:	200b      	movs	r0, #11
 800231c:	f001 f893 	bl	8003446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002320:	200b      	movs	r0, #11
 8002322:	f001 f8ac 	bl	800347e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2105      	movs	r1, #5
 800232a:	200c      	movs	r0, #12
 800232c:	f001 f88b 	bl	8003446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002330:	200c      	movs	r0, #12
 8002332:	f001 f8a4 	bl	800347e <HAL_NVIC_EnableIRQ>

}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b33      	ldr	r3, [pc, #204]	; (800242c <MX_GPIO_Init+0xe8>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a32      	ldr	r2, [pc, #200]	; (800242c <MX_GPIO_Init+0xe8>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <MX_GPIO_Init+0xe8>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b2c      	ldr	r3, [pc, #176]	; (800242c <MX_GPIO_Init+0xe8>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a2b      	ldr	r2, [pc, #172]	; (800242c <MX_GPIO_Init+0xe8>)
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <MX_GPIO_Init+0xe8>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <MX_GPIO_Init+0xe8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a24      	ldr	r2, [pc, #144]	; (800242c <MX_GPIO_Init+0xe8>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <MX_GPIO_Init+0xe8>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	4b1e      	ldr	r3, [pc, #120]	; (800242c <MX_GPIO_Init+0xe8>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <MX_GPIO_Init+0xe8>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <MX_GPIO_Init+0xe8>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin|RGB_led2_Pin|RGB_led3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2133      	movs	r1, #51	; 0x33
 80023ce:	4818      	ldr	r0, [pc, #96]	; (8002430 <MX_GPIO_Init+0xec>)
 80023d0:	f001 fdb4 	bl	8003f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <MX_GPIO_Init+0xf0>)
 80023dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	4813      	ldr	r0, [pc, #76]	; (8002438 <MX_GPIO_Init+0xf4>)
 80023ea:	f001 fc0d 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SensorBtn_Pin */
  GPIO_InitStruct.Pin = SensorBtn_Pin;
 80023ee:	2301      	movs	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SensorBtn_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <MX_GPIO_Init+0xf4>)
 8002402:	f001 fc01 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_led1_Pin RGB_led2_Pin RGB_led3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RGB_led1_Pin|RGB_led2_Pin|RGB_led3_Pin|LD2_Pin;
 8002406:	2333      	movs	r3, #51	; 0x33
 8002408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240a:	2301      	movs	r3, #1
 800240c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	4619      	mov	r1, r3
 800241c:	4804      	ldr	r0, [pc, #16]	; (8002430 <MX_GPIO_Init+0xec>)
 800241e:	f001 fbf3 	bl	8003c08 <HAL_GPIO_Init>

}
 8002422:	bf00      	nop
 8002424:	3728      	adds	r7, #40	; 0x28
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000
 8002434:	10210000 	.word	0x10210000
 8002438:	40020800 	.word	0x40020800

0800243c <initBME280>:

/* USER CODE BEGIN 4 */
void initBME280(I2C_HandleTypeDef *i2c) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8002444:	2314      	movs	r3, #20
 8002446:	2204      	movs	r2, #4
 8002448:	2127      	movs	r1, #39	; 0x27
 800244a:	4828      	ldr	r0, [pc, #160]	; (80024ec <initBME280+0xb0>)
 800244c:	f7ff fb22 	bl	8001a94 <lcdInit>

	bmp280_init_default_params(&bmp280.params);
 8002450:	4827      	ldr	r0, [pc, #156]	; (80024f0 <initBME280+0xb4>)
 8002452:	f7fe fde9 	bl	8001028 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <initBME280+0xb8>)
 8002458:	2276      	movs	r2, #118	; 0x76
 800245a:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = i2c;
 800245c:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <initBME280+0xb8>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6293      	str	r3, [r2, #40]	; 0x28

    while (!bmp280_init(&bmp280, &bmp280.params))
 8002462:	e00f      	b.n	8002484 <initBME280+0x48>
    {
    	lcdSetCursorPosition(0, 0);
 8002464:	2100      	movs	r1, #0
 8002466:	2000      	movs	r0, #0
 8002468:	f7ff fcc0 	bl	8001dec <lcdSetCursorPosition>
    	lcdPrintStr((uint8_t*)"BMP280 - failed", 15);
 800246c:	210f      	movs	r1, #15
 800246e:	4822      	ldr	r0, [pc, #136]	; (80024f8 <initBME280+0xbc>)
 8002470:	f7ff fce8 	bl	8001e44 <lcdPrintStr>
    	HAL_Delay(1000);
 8002474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002478:	f000 fee8 	bl	800324c <HAL_Delay>
    	lcdDisplayClear();
 800247c:	2101      	movs	r1, #1
 800247e:	2002      	movs	r0, #2
 8002480:	f7ff fbba 	bl	8001bf8 <lcdCommand>
    while (!bmp280_init(&bmp280, &bmp280.params))
 8002484:	491a      	ldr	r1, [pc, #104]	; (80024f0 <initBME280+0xb4>)
 8002486:	481b      	ldr	r0, [pc, #108]	; (80024f4 <initBME280+0xb8>)
 8002488:	f7fe ff49 	bl	800131e <bmp280_init>
 800248c:	4603      	mov	r3, r0
 800248e:	f083 0301 	eor.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e5      	bne.n	8002464 <initBME280+0x28>
	}

    bool bme280p = bmp280.id == BME280_CHIP_ID;
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <initBME280+0xb8>)
 800249a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800249e:	2b60      	cmp	r3, #96	; 0x60
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]

	lcdSetCursorPosition(0, 1);
 80024a8:	2101      	movs	r1, #1
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff fc9e 	bl	8001dec <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Our sensor is ", 14);
 80024b0:	210e      	movs	r1, #14
 80024b2:	4812      	ldr	r0, [pc, #72]	; (80024fc <initBME280+0xc0>)
 80024b4:	f7ff fcc6 	bl	8001e44 <lcdPrintStr>

	lcdSetCursorPosition(14, 1);
 80024b8:	2101      	movs	r1, #1
 80024ba:	200e      	movs	r0, #14
 80024bc:	f7ff fc96 	bl	8001dec <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) bme280p ? bmeStr : bmpStr, 6);
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <initBME280+0x8e>
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <initBME280+0xc4>)
 80024c8:	e000      	b.n	80024cc <initBME280+0x90>
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <initBME280+0xc8>)
 80024cc:	2106      	movs	r1, #6
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fcb8 	bl	8001e44 <lcdPrintStr>

    HAL_Delay(2000);
 80024d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024d8:	f000 feb8 	bl	800324c <HAL_Delay>
    lcdDisplayClear();
 80024dc:	2101      	movs	r1, #1
 80024de:	2002      	movs	r0, #2
 80024e0:	f7ff fb8a 	bl	8001bf8 <lcdCommand>
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200042a8 	.word	0x200042a8
 80024f0:	20004510 	.word	0x20004510
 80024f4:	200044e4 	.word	0x200044e4
 80024f8:	0800b824 	.word	0x0800b824
 80024fc:	0800b834 	.word	0x0800b834
 8002500:	20000000 	.word	0x20000000
 8002504:	20000008 	.word	0x20000008

08002508 <checkBME280>:

void checkBME280(void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	while(!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 800250c:	e017      	b.n	800253e <checkBME280+0x36>
	{
		lcdSetCursorPosition(0, 1);
 800250e:	2101      	movs	r1, #1
 8002510:	2000      	movs	r0, #0
 8002512:	f7ff fc6b 	bl	8001dec <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) "Read data - failed!", 18);
 8002516:	2112      	movs	r1, #18
 8002518:	482d      	ldr	r0, [pc, #180]	; (80025d0 <checkBME280+0xc8>)
 800251a:	f7ff fc93 	bl	8001e44 <lcdPrintStr>
		lcdSetCursorPosition(0, 2);
 800251e:	2102      	movs	r1, #2
 8002520:	2000      	movs	r0, #0
 8002522:	f7ff fc63 	bl	8001dec <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) "Check connection!", 17);
 8002526:	2111      	movs	r1, #17
 8002528:	482a      	ldr	r0, [pc, #168]	; (80025d4 <checkBME280+0xcc>)
 800252a:	f7ff fc8b 	bl	8001e44 <lcdPrintStr>
		HAL_Delay(1000);
 800252e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002532:	f000 fe8b 	bl	800324c <HAL_Delay>
		lcdDisplayClear();
 8002536:	2101      	movs	r1, #1
 8002538:	2002      	movs	r0, #2
 800253a:	f7ff fb5d 	bl	8001bf8 <lcdCommand>
	while(!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <checkBME280+0xd0>)
 8002540:	4a26      	ldr	r2, [pc, #152]	; (80025dc <checkBME280+0xd4>)
 8002542:	4927      	ldr	r1, [pc, #156]	; (80025e0 <checkBME280+0xd8>)
 8002544:	4827      	ldr	r0, [pc, #156]	; (80025e4 <checkBME280+0xdc>)
 8002546:	f7ff fa3f 	bl	80019c8 <bmp280_read_float>
 800254a:	4603      	mov	r3, r0
 800254c:	f083 0301 	eor.w	r3, r3, #1
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1db      	bne.n	800250e <checkBME280+0x6>
	}

	fPartTemp = (int) temperature;
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <checkBME280+0xd8>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002560:	ee17 2a90 	vmov	r2, s15
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <checkBME280+0xe0>)
 8002566:	601a      	str	r2, [r3, #0]
	sPartTemp = (temperature - fPartTemp) * 1000;
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <checkBME280+0xd8>)
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <checkBME280+0xe0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80025ec <checkBME280+0xe4>
 8002582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258a:	ee17 2a90 	vmov	r2, s15
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <checkBME280+0xe8>)
 8002590:	601a      	str	r2, [r3, #0]

	MMPressure = pressure / 133;
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <checkBME280+0xd4>)
 8002594:	ed93 7a00 	vldr	s14, [r3]
 8002598:	eddf 6a16 	vldr	s13, [pc, #88]	; 80025f4 <checkBME280+0xec>
 800259c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025a0:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <checkBME280+0xf0>)
 80025a2:	edc3 7a00 	vstr	s15, [r3]
	fPartPressure = (int) MMPressure;
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <checkBME280+0xf0>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b0:	ee17 2a90 	vmov	r2, s15
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <checkBME280+0xf4>)
 80025b6:	601a      	str	r2, [r3, #0]

	fHumidity = (int) humidity;
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <checkBME280+0xd0>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c2:	ee17 2a90 	vmov	r2, s15
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <checkBME280+0xf8>)
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	0800b844 	.word	0x0800b844
 80025d4:	0800b858 	.word	0x0800b858
 80025d8:	2000435c 	.word	0x2000435c
 80025dc:	20004358 	.word	0x20004358
 80025e0:	20004350 	.word	0x20004350
 80025e4:	200044e4 	.word	0x200044e4
 80025e8:	20004240 	.word	0x20004240
 80025ec:	447a0000 	.word	0x447a0000
 80025f0:	20004560 	.word	0x20004560
 80025f4:	43050000 	.word	0x43050000
 80025f8:	20004360 	.word	0x20004360
 80025fc:	200044e0 	.word	0x200044e0
 8002600:	20004244 	.word	0x20004244

08002604 <convertData>:

void convertData(void) {
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
	itoa(fPartTemp, TempFirstPart, 10);
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <convertData+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	220a      	movs	r2, #10
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <convertData+0x44>)
 8002610:	4618      	mov	r0, r3
 8002612:	f006 fff5 	bl	8009600 <itoa>
	itoa(sPartTemp, TempSecondPart, 10);
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <convertData+0x48>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	220a      	movs	r2, #10
 800261c:	490c      	ldr	r1, [pc, #48]	; (8002650 <convertData+0x4c>)
 800261e:	4618      	mov	r0, r3
 8002620:	f006 ffee 	bl	8009600 <itoa>
	itoa(fPartPressure, PressureStr, 10);
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <convertData+0x50>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	220a      	movs	r2, #10
 800262a:	490b      	ldr	r1, [pc, #44]	; (8002658 <convertData+0x54>)
 800262c:	4618      	mov	r0, r3
 800262e:	f006 ffe7 	bl	8009600 <itoa>
	itoa(fHumidity, HumidityStr, 10);
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <convertData+0x58>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	220a      	movs	r2, #10
 8002638:	4909      	ldr	r1, [pc, #36]	; (8002660 <convertData+0x5c>)
 800263a:	4618      	mov	r0, r3
 800263c:	f006 ffe0 	bl	8009600 <itoa>
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20004240 	.word	0x20004240
 8002648:	20000478 	.word	0x20000478
 800264c:	20004560 	.word	0x20004560
 8002650:	2000047c 	.word	0x2000047c
 8002654:	200044e0 	.word	0x200044e0
 8002658:	20000480 	.word	0x20000480
 800265c:	20004244 	.word	0x20004244
 8002660:	20000484 	.word	0x20000484

08002664 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  for(;;)
  {
	  checkBME280();
 800266c:	f7ff ff4c 	bl	8002508 <checkBME280>
	  vTaskDelay(1000);
 8002670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002674:	f005 fe12 	bl	800829c <vTaskDelay>
	  checkBME280();
 8002678:	e7f8      	b.n	800266c <StartDefaultTask+0x8>
	...

0800267c <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void const * argument)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8002684:	2314      	movs	r3, #20
 8002686:	2204      	movs	r2, #4
 8002688:	2127      	movs	r1, #39	; 0x27
 800268a:	4864      	ldr	r0, [pc, #400]	; (800281c <StartLcdTask+0x1a0>)
 800268c:	f7ff fa02 	bl	8001a94 <lcdInit>

  initBME280(&hi2c2);
 8002690:	4863      	ldr	r0, [pc, #396]	; (8002820 <StartLcdTask+0x1a4>)
 8002692:	f7ff fed3 	bl	800243c <initBME280>

  for(;;)
  {
	  getTime(&hi2c3);
 8002696:	4863      	ldr	r0, [pc, #396]	; (8002824 <StartLcdTask+0x1a8>)
 8002698:	f7fe fc76 	bl	8000f88 <getTime>
	  convertData();
 800269c:	f7ff ffb2 	bl	8002604 <convertData>

	  lcdDisplayClear();
 80026a0:	2101      	movs	r1, #1
 80026a2:	2002      	movs	r0, #2
 80026a4:	f7ff faa8 	bl	8001bf8 <lcdCommand>

	  lcdSetCursorPosition(0, 0);
 80026a8:	2100      	movs	r1, #0
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7ff fb9e 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Hello, dear user!" , 17);
 80026b0:	2111      	movs	r1, #17
 80026b2:	485d      	ldr	r0, [pc, #372]	; (8002828 <StartLcdTask+0x1ac>)
 80026b4:	f7ff fbc6 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(0, 1);
 80026b8:	2101      	movs	r1, #1
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7ff fb96 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Today's ", 8);
 80026c0:	2108      	movs	r1, #8
 80026c2:	485a      	ldr	r0, [pc, #360]	; (800282c <StartLcdTask+0x1b0>)
 80026c4:	f7ff fbbe 	bl	8001e44 <lcdPrintStr>

	  sprintf(buffer, "%02d", time.dayofmonth);
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <StartLcdTask+0x1b4>)
 80026ca:	791b      	ldrb	r3, [r3, #4]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4959      	ldr	r1, [pc, #356]	; (8002834 <StartLcdTask+0x1b8>)
 80026d0:	4859      	ldr	r0, [pc, #356]	; (8002838 <StartLcdTask+0x1bc>)
 80026d2:	f007 fc07 	bl	8009ee4 <siprintf>
	  lcdSetCursorPosition(8, 1);
 80026d6:	2101      	movs	r1, #1
 80026d8:	2008      	movs	r0, #8
 80026da:	f7ff fb87 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 2);
 80026de:	2102      	movs	r1, #2
 80026e0:	4855      	ldr	r0, [pc, #340]	; (8002838 <StartLcdTask+0x1bc>)
 80026e2:	f7ff fbaf 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(11, 1);
 80026e6:	2101      	movs	r1, #1
 80026e8:	200b      	movs	r0, #11
 80026ea:	f7ff fb7f 	bl	8001dec <lcdSetCursorPosition>
	  switch(time.month) {
 80026ee:	4b50      	ldr	r3, [pc, #320]	; (8002830 <StartLcdTask+0x1b4>)
 80026f0:	795b      	ldrb	r3, [r3, #5]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	2b0b      	cmp	r3, #11
 80026f6:	d857      	bhi.n	80027a8 <StartLcdTask+0x12c>
 80026f8:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <StartLcdTask+0x84>)
 80026fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fe:	bf00      	nop
 8002700:	08002731 	.word	0x08002731
 8002704:	0800273b 	.word	0x0800273b
 8002708:	08002745 	.word	0x08002745
 800270c:	0800274f 	.word	0x0800274f
 8002710:	08002759 	.word	0x08002759
 8002714:	08002763 	.word	0x08002763
 8002718:	0800276d 	.word	0x0800276d
 800271c:	08002777 	.word	0x08002777
 8002720:	08002781 	.word	0x08002781
 8002724:	0800278b 	.word	0x0800278b
 8002728:	08002795 	.word	0x08002795
 800272c:	0800279f 	.word	0x0800279f
	  case 1:
		  lcdPrintStr((uint8_t*) "January", 7);
 8002730:	2107      	movs	r1, #7
 8002732:	4842      	ldr	r0, [pc, #264]	; (800283c <StartLcdTask+0x1c0>)
 8002734:	f7ff fb86 	bl	8001e44 <lcdPrintStr>
		  break;
 8002738:	e036      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 2:
		  lcdPrintStr((uint8_t*) "February", 8);
 800273a:	2108      	movs	r1, #8
 800273c:	4840      	ldr	r0, [pc, #256]	; (8002840 <StartLcdTask+0x1c4>)
 800273e:	f7ff fb81 	bl	8001e44 <lcdPrintStr>
		  break;
 8002742:	e031      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 3:
		  lcdPrintStr((uint8_t*) "March", 5);
 8002744:	2105      	movs	r1, #5
 8002746:	483f      	ldr	r0, [pc, #252]	; (8002844 <StartLcdTask+0x1c8>)
 8002748:	f7ff fb7c 	bl	8001e44 <lcdPrintStr>
		  break;
 800274c:	e02c      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 4:
		  lcdPrintStr((uint8_t*) "April", 5);
 800274e:	2105      	movs	r1, #5
 8002750:	483d      	ldr	r0, [pc, #244]	; (8002848 <StartLcdTask+0x1cc>)
 8002752:	f7ff fb77 	bl	8001e44 <lcdPrintStr>
		  break;
 8002756:	e027      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 5:
		  lcdPrintStr((uint8_t*) "May", 3);
 8002758:	2103      	movs	r1, #3
 800275a:	483c      	ldr	r0, [pc, #240]	; (800284c <StartLcdTask+0x1d0>)
 800275c:	f7ff fb72 	bl	8001e44 <lcdPrintStr>
		  break;
 8002760:	e022      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 6:
		  lcdPrintStr((uint8_t*) "June", 4);
 8002762:	2104      	movs	r1, #4
 8002764:	483a      	ldr	r0, [pc, #232]	; (8002850 <StartLcdTask+0x1d4>)
 8002766:	f7ff fb6d 	bl	8001e44 <lcdPrintStr>
		  break;
 800276a:	e01d      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 7:
		  lcdPrintStr((uint8_t*) "July", 4);
 800276c:	2104      	movs	r1, #4
 800276e:	4839      	ldr	r0, [pc, #228]	; (8002854 <StartLcdTask+0x1d8>)
 8002770:	f7ff fb68 	bl	8001e44 <lcdPrintStr>
		  break;
 8002774:	e018      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 8:
		  lcdPrintStr((uint8_t*) "August", 6);
 8002776:	2106      	movs	r1, #6
 8002778:	4837      	ldr	r0, [pc, #220]	; (8002858 <StartLcdTask+0x1dc>)
 800277a:	f7ff fb63 	bl	8001e44 <lcdPrintStr>
		  break;
 800277e:	e013      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 9:
		  lcdPrintStr((uint8_t*) "September", 9);
 8002780:	2109      	movs	r1, #9
 8002782:	4836      	ldr	r0, [pc, #216]	; (800285c <StartLcdTask+0x1e0>)
 8002784:	f7ff fb5e 	bl	8001e44 <lcdPrintStr>
		  break;
 8002788:	e00e      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 10:
		  lcdPrintStr((uint8_t*) "October", 7);
 800278a:	2107      	movs	r1, #7
 800278c:	4834      	ldr	r0, [pc, #208]	; (8002860 <StartLcdTask+0x1e4>)
 800278e:	f7ff fb59 	bl	8001e44 <lcdPrintStr>
		  break;
 8002792:	e009      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 11:
		  lcdPrintStr((uint8_t*) "November", 8);
 8002794:	2108      	movs	r1, #8
 8002796:	4833      	ldr	r0, [pc, #204]	; (8002864 <StartLcdTask+0x1e8>)
 8002798:	f7ff fb54 	bl	8001e44 <lcdPrintStr>
		  break;
 800279c:	e004      	b.n	80027a8 <StartLcdTask+0x12c>
	  case 12:
		  lcdPrintStr((uint8_t*) "December", 8);
 800279e:	2108      	movs	r1, #8
 80027a0:	4831      	ldr	r0, [pc, #196]	; (8002868 <StartLcdTask+0x1ec>)
 80027a2:	f7ff fb4f 	bl	8001e44 <lcdPrintStr>
		  break;
 80027a6:	bf00      	nop
	  }

	  lcdSetCursorPosition(0, 2);
 80027a8:	2102      	movs	r1, #2
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7ff fb1e 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Temperature: ", 13);
 80027b0:	210d      	movs	r1, #13
 80027b2:	482e      	ldr	r0, [pc, #184]	; (800286c <StartLcdTask+0x1f0>)
 80027b4:	f7ff fb46 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(13, 2);
 80027b8:	2102      	movs	r1, #2
 80027ba:	200d      	movs	r0, #13
 80027bc:	f7ff fb16 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) TempFirstPart, 2);
 80027c0:	2102      	movs	r1, #2
 80027c2:	482b      	ldr	r0, [pc, #172]	; (8002870 <StartLcdTask+0x1f4>)
 80027c4:	f7ff fb3e 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(16, 2);
 80027c8:	2102      	movs	r1, #2
 80027ca:	2010      	movs	r0, #16
 80027cc:	f7ff fb0e 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "C", 1);
 80027d0:	2101      	movs	r1, #1
 80027d2:	4828      	ldr	r0, [pc, #160]	; (8002874 <StartLcdTask+0x1f8>)
 80027d4:	f7ff fb36 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(0, 3);
 80027d8:	2103      	movs	r1, #3
 80027da:	2000      	movs	r0, #0
 80027dc:	f7ff fb06 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Time: ", 6);
 80027e0:	2106      	movs	r1, #6
 80027e2:	4825      	ldr	r0, [pc, #148]	; (8002878 <StartLcdTask+0x1fc>)
 80027e4:	f7ff fb2e 	bl	8001e44 <lcdPrintStr>

	  sprintf(buffer, "%02d:%02d", time.hour, time.minutes);
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <StartLcdTask+0x1b4>)
 80027ea:	789b      	ldrb	r3, [r3, #2]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <StartLcdTask+0x1b4>)
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	4922      	ldr	r1, [pc, #136]	; (800287c <StartLcdTask+0x200>)
 80027f4:	4810      	ldr	r0, [pc, #64]	; (8002838 <StartLcdTask+0x1bc>)
 80027f6:	f007 fb75 	bl	8009ee4 <siprintf>
	  lcdSetCursorPosition(6, 3);
 80027fa:	2103      	movs	r1, #3
 80027fc:	2006      	movs	r0, #6
 80027fe:	f7ff faf5 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 5);
 8002802:	2105      	movs	r1, #5
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <StartLcdTask+0x1bc>)
 8002806:	f7ff fb1d 	bl	8001e44 <lcdPrintStr>

	  HAL_Delay(2000);
 800280a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800280e:	f000 fd1d 	bl	800324c <HAL_Delay>

	  vTaskDelay(100);
 8002812:	2064      	movs	r0, #100	; 0x64
 8002814:	f005 fd42 	bl	800829c <vTaskDelay>
	  getTime(&hi2c3);
 8002818:	e73d      	b.n	8002696 <StartLcdTask+0x1a>
 800281a:	bf00      	nop
 800281c:	200042a8 	.word	0x200042a8
 8002820:	200042fc 	.word	0x200042fc
 8002824:	200041ec 	.word	0x200041ec
 8002828:	0800b86c 	.word	0x0800b86c
 800282c:	0800b880 	.word	0x0800b880
 8002830:	200041e0 	.word	0x200041e0
 8002834:	0800b88c 	.word	0x0800b88c
 8002838:	20004464 	.word	0x20004464
 800283c:	0800b894 	.word	0x0800b894
 8002840:	0800b89c 	.word	0x0800b89c
 8002844:	0800b8a8 	.word	0x0800b8a8
 8002848:	0800b8b0 	.word	0x0800b8b0
 800284c:	0800b8b8 	.word	0x0800b8b8
 8002850:	0800b8bc 	.word	0x0800b8bc
 8002854:	0800b8c4 	.word	0x0800b8c4
 8002858:	0800b8cc 	.word	0x0800b8cc
 800285c:	0800b8d4 	.word	0x0800b8d4
 8002860:	0800b8e0 	.word	0x0800b8e0
 8002864:	0800b8e8 	.word	0x0800b8e8
 8002868:	0800b8f4 	.word	0x0800b8f4
 800286c:	0800b900 	.word	0x0800b900
 8002870:	20000478 	.word	0x20000478
 8002874:	0800b910 	.word	0x0800b910
 8002878:	0800b914 	.word	0x0800b914
 800287c:	0800b91c 	.word	0x0800b91c

08002880 <StartDataSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDataSensor */
void StartDataSensor(void const * argument)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDataSensor */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8002888:	2314      	movs	r3, #20
 800288a:	2204      	movs	r2, #4
 800288c:	2127      	movs	r1, #39	; 0x27
 800288e:	483e      	ldr	r0, [pc, #248]	; (8002988 <StartDataSensor+0x108>)
 8002890:	f7ff f900 	bl	8001a94 <lcdInit>

  for(;;) {

	  lcdDisplayClear();
 8002894:	2101      	movs	r1, #1
 8002896:	2002      	movs	r0, #2
 8002898:	f7ff f9ae 	bl	8001bf8 <lcdCommand>

	  convertData();
 800289c:	f7ff feb2 	bl	8002604 <convertData>

	  lcdSetCursorPosition(0, 0);
 80028a0:	2100      	movs	r1, #0
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7ff faa2 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Sensor data:", 12);
 80028a8:	210c      	movs	r1, #12
 80028aa:	4838      	ldr	r0, [pc, #224]	; (800298c <StartDataSensor+0x10c>)
 80028ac:	f7ff faca 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(0, 1);
 80028b0:	2101      	movs	r1, #1
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7ff fa9a 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Humidity = ", 11);
 80028b8:	210b      	movs	r1, #11
 80028ba:	4835      	ldr	r0, [pc, #212]	; (8002990 <StartDataSensor+0x110>)
 80028bc:	f7ff fac2 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(11, 1);
 80028c0:	2101      	movs	r1, #1
 80028c2:	200b      	movs	r0, #11
 80028c4:	f7ff fa92 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) HumidityStr, 2);
 80028c8:	2102      	movs	r1, #2
 80028ca:	4832      	ldr	r0, [pc, #200]	; (8002994 <StartDataSensor+0x114>)
 80028cc:	f7ff faba 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(14, 1);
 80028d0:	2101      	movs	r1, #1
 80028d2:	200e      	movs	r0, #14
 80028d4:	f7ff fa8a 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "%", 1);
 80028d8:	2101      	movs	r1, #1
 80028da:	482f      	ldr	r0, [pc, #188]	; (8002998 <StartDataSensor+0x118>)
 80028dc:	f7ff fab2 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(0, 2);
 80028e0:	2102      	movs	r1, #2
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7ff fa82 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "Pressure = ", 11);
 80028e8:	210b      	movs	r1, #11
 80028ea:	482c      	ldr	r0, [pc, #176]	; (800299c <StartDataSensor+0x11c>)
 80028ec:	f7ff faaa 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(11, 2);
 80028f0:	2102      	movs	r1, #2
 80028f2:	200b      	movs	r0, #11
 80028f4:	f7ff fa7a 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) PressureStr, 3);
 80028f8:	2103      	movs	r1, #3
 80028fa:	4829      	ldr	r0, [pc, #164]	; (80029a0 <StartDataSensor+0x120>)
 80028fc:	f7ff faa2 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(15, 2);
 8002900:	2102      	movs	r1, #2
 8002902:	200f      	movs	r0, #15
 8002904:	f7ff fa72 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*) "mmHg", 4);
 8002908:	2104      	movs	r1, #4
 800290a:	4826      	ldr	r0, [pc, #152]	; (80029a4 <StartDataSensor+0x124>)
 800290c:	f7ff fa9a 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(0, 3);
 8002910:	2103      	movs	r1, #3
 8002912:	2000      	movs	r0, #0
 8002914:	f7ff fa6a 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Temp = ", 7);
 8002918:	2107      	movs	r1, #7
 800291a:	4823      	ldr	r0, [pc, #140]	; (80029a8 <StartDataSensor+0x128>)
 800291c:	f7ff fa92 	bl	8001e44 <lcdPrintStr>

	  sprintf(buffer, "%02d", fPartTemp);
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <StartDataSensor+0x12c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4922      	ldr	r1, [pc, #136]	; (80029b0 <StartDataSensor+0x130>)
 8002928:	4822      	ldr	r0, [pc, #136]	; (80029b4 <StartDataSensor+0x134>)
 800292a:	f007 fadb 	bl	8009ee4 <siprintf>
	  lcdSetCursorPosition(7, 3);
 800292e:	2103      	movs	r1, #3
 8002930:	2007      	movs	r0, #7
 8002932:	f7ff fa5b 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 2);
 8002936:	2102      	movs	r1, #2
 8002938:	481e      	ldr	r0, [pc, #120]	; (80029b4 <StartDataSensor+0x134>)
 800293a:	f7ff fa83 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(9, 3);
 800293e:	2103      	movs	r1, #3
 8002940:	2009      	movs	r0, #9
 8002942:	f7ff fa53 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)".", 1);
 8002946:	2101      	movs	r1, #1
 8002948:	481b      	ldr	r0, [pc, #108]	; (80029b8 <StartDataSensor+0x138>)
 800294a:	f7ff fa7b 	bl	8001e44 <lcdPrintStr>

	  sprintf(buffer, "%02d", sPartTemp);
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <StartDataSensor+0x13c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	4916      	ldr	r1, [pc, #88]	; (80029b0 <StartDataSensor+0x130>)
 8002956:	4817      	ldr	r0, [pc, #92]	; (80029b4 <StartDataSensor+0x134>)
 8002958:	f007 fac4 	bl	8009ee4 <siprintf>
	  lcdSetCursorPosition(10, 3);
 800295c:	2103      	movs	r1, #3
 800295e:	200a      	movs	r0, #10
 8002960:	f7ff fa44 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 2);
 8002964:	2102      	movs	r1, #2
 8002966:	4813      	ldr	r0, [pc, #76]	; (80029b4 <StartDataSensor+0x134>)
 8002968:	f7ff fa6c 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(13, 3);
 800296c:	2103      	movs	r1, #3
 800296e:	200d      	movs	r0, #13
 8002970:	f7ff fa3c 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Celsius", 7);
 8002974:	2107      	movs	r1, #7
 8002976:	4812      	ldr	r0, [pc, #72]	; (80029c0 <StartDataSensor+0x140>)
 8002978:	f7ff fa64 	bl	8001e44 <lcdPrintStr>

	  osDelay(1000);
 800297c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002980:	f005 f995 	bl	8007cae <osDelay>
	  lcdDisplayClear();
 8002984:	e786      	b.n	8002894 <StartDataSensor+0x14>
 8002986:	bf00      	nop
 8002988:	200042a8 	.word	0x200042a8
 800298c:	0800b928 	.word	0x0800b928
 8002990:	0800b938 	.word	0x0800b938
 8002994:	20000484 	.word	0x20000484
 8002998:	0800b944 	.word	0x0800b944
 800299c:	0800b948 	.word	0x0800b948
 80029a0:	20000480 	.word	0x20000480
 80029a4:	0800b954 	.word	0x0800b954
 80029a8:	0800b95c 	.word	0x0800b95c
 80029ac:	20004240 	.word	0x20004240
 80029b0:	0800b88c 	.word	0x0800b88c
 80029b4:	20004464 	.word	0x20004464
 80029b8:	0800b964 	.word	0x0800b964
 80029bc:	20004560 	.word	0x20004560
 80029c0:	0800b968 	.word	0x0800b968

080029c4 <StartBtnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBtnTask */
void StartBtnTask(void const * argument)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBtnTask */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(SensorBtn_GPIO_Port, SensorBtn_Pin) == GPIO_PIN_SET)
 80029cc:	2101      	movs	r1, #1
 80029ce:	4835      	ldr	r0, [pc, #212]	; (8002aa4 <StartBtnTask+0xe0>)
 80029d0:	f001 fa9c 	bl	8003f0c <HAL_GPIO_ReadPin>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d15f      	bne.n	8002a9a <StartBtnTask+0xd6>
	  {
		  osDelay(100);
 80029da:	2064      	movs	r0, #100	; 0x64
 80029dc:	f005 f967 	bl	8007cae <osDelay>

		  if(numTask == 3)
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <StartBtnTask+0xe4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d102      	bne.n	80029ee <StartBtnTask+0x2a>
		  {
			  numTask = 0;
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <StartBtnTask+0xe4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
		  }


		  if(numTask == 0)
 80029ee:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <StartBtnTask+0xe4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d118      	bne.n	8002a28 <StartBtnTask+0x64>
		  {
			osThreadSuspend(printLcdTaskHandle);
 80029f6:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <StartBtnTask+0xe8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f005 f96b 	bl	8007cd6 <osThreadSuspend>
			osThreadSuspend(myPrintTimeHandle);
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <StartBtnTask+0xec>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f005 f966 	bl	8007cd6 <osThreadSuspend>
			lcdDisplayClear();
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f7ff f8f3 	bl	8001bf8 <lcdCommand>
			osThreadResume(checkDataSensorHandle);
 8002a12:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <StartBtnTask+0xf0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 f96a 	bl	8007cf0 <osThreadResume>
			numTask++;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <StartBtnTask+0xe4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <StartBtnTask+0xe4>)
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e038      	b.n	8002a9a <StartBtnTask+0xd6>
		  }
		  else if(numTask == 1)
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <StartBtnTask+0xe4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d118      	bne.n	8002a62 <StartBtnTask+0x9e>
		  {
			osThreadSuspend(checkDataSensorHandle);
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <StartBtnTask+0xf0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f005 f94e 	bl	8007cd6 <osThreadSuspend>
			osThreadSuspend(printLcdTaskHandle);
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <StartBtnTask+0xe8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f005 f949 	bl	8007cd6 <osThreadSuspend>
			lcdDisplayClear();
 8002a44:	2101      	movs	r1, #1
 8002a46:	2002      	movs	r0, #2
 8002a48:	f7ff f8d6 	bl	8001bf8 <lcdCommand>
			osThreadResume(myPrintTimeHandle);
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <StartBtnTask+0xec>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f005 f94d 	bl	8007cf0 <osThreadResume>
			numTask++;
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <StartBtnTask+0xe4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <StartBtnTask+0xe4>)
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	e01b      	b.n	8002a9a <StartBtnTask+0xd6>
		  }
		  else if(numTask == 2)
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <StartBtnTask+0xe4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d117      	bne.n	8002a9a <StartBtnTask+0xd6>
		  {
			osThreadSuspend(checkDataSensorHandle);
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <StartBtnTask+0xf0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f005 f931 	bl	8007cd6 <osThreadSuspend>
			osThreadSuspend(myPrintTimeHandle);
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <StartBtnTask+0xec>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 f92c 	bl	8007cd6 <osThreadSuspend>
			lcdDisplayClear();
 8002a7e:	2101      	movs	r1, #1
 8002a80:	2002      	movs	r0, #2
 8002a82:	f7ff f8b9 	bl	8001bf8 <lcdCommand>
			osThreadResume(printLcdTaskHandle);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <StartBtnTask+0xe8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f005 f930 	bl	8007cf0 <osThreadResume>
			numTask++;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <StartBtnTask+0xe4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <StartBtnTask+0xe4>)
 8002a98:	6013      	str	r3, [r2, #0]
		  }
	  }
	  osDelay(100);
 8002a9a:	2064      	movs	r0, #100	; 0x64
 8002a9c:	f005 f907 	bl	8007cae <osDelay>
	  if(HAL_GPIO_ReadPin(SensorBtn_GPIO_Port, SensorBtn_Pin) == GPIO_PIN_SET)
 8002aa0:	e794      	b.n	80029cc <StartBtnTask+0x8>
 8002aa2:	bf00      	nop
 8002aa4:	40020800 	.word	0x40020800
 8002aa8:	20000474 	.word	0x20000474
 8002aac:	20004354 	.word	0x20004354
 8002ab0:	2000455c 	.word	0x2000455c
 8002ab4:	20004474 	.word	0x20004474

08002ab8 <StartTimeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimeTask */
void StartTimeTask(void const * argument)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeTask */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8002ac0:	2314      	movs	r3, #20
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	2127      	movs	r1, #39	; 0x27
 8002ac6:	4825      	ldr	r0, [pc, #148]	; (8002b5c <StartTimeTask+0xa4>)
 8002ac8:	f7fe ffe4 	bl	8001a94 <lcdInit>

  for(;;)
  {
	  lcdDisplayClear();
 8002acc:	2101      	movs	r1, #1
 8002ace:	2002      	movs	r0, #2
 8002ad0:	f7ff f892 	bl	8001bf8 <lcdCommand>

	  getTime(&hi2c3);
 8002ad4:	4822      	ldr	r0, [pc, #136]	; (8002b60 <StartTimeTask+0xa8>)
 8002ad6:	f7fe fa57 	bl	8000f88 <getTime>

	  lcdSetCursorPosition(0, 0);
 8002ada:	2100      	movs	r1, #0
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7ff f985 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Your time: ", 11);
 8002ae2:	210b      	movs	r1, #11
 8002ae4:	481f      	ldr	r0, [pc, #124]	; (8002b64 <StartTimeTask+0xac>)
 8002ae6:	f7ff f9ad 	bl	8001e44 <lcdPrintStr>

	  sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8002aea:	4b1f      	ldr	r3, [pc, #124]	; (8002b68 <StartTimeTask+0xb0>)
 8002aec:	789b      	ldrb	r3, [r3, #2]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <StartTimeTask+0xb0>)
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	4619      	mov	r1, r3
 8002af6:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <StartTimeTask+0xb0>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	460b      	mov	r3, r1
 8002afe:	491b      	ldr	r1, [pc, #108]	; (8002b6c <StartTimeTask+0xb4>)
 8002b00:	481b      	ldr	r0, [pc, #108]	; (8002b70 <StartTimeTask+0xb8>)
 8002b02:	f007 f9ef 	bl	8009ee4 <siprintf>
	  lcdSetCursorPosition(11, 0);
 8002b06:	2100      	movs	r1, #0
 8002b08:	200b      	movs	r0, #11
 8002b0a:	f7ff f96f 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 8);
 8002b0e:	2108      	movs	r1, #8
 8002b10:	4817      	ldr	r0, [pc, #92]	; (8002b70 <StartTimeTask+0xb8>)
 8002b12:	f7ff f997 	bl	8001e44 <lcdPrintStr>

	  lcdSetCursorPosition(0, 2);
 8002b16:	2102      	movs	r1, #2
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7ff f967 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Date: ", 6);
 8002b1e:	2106      	movs	r1, #6
 8002b20:	4814      	ldr	r0, [pc, #80]	; (8002b74 <StartTimeTask+0xbc>)
 8002b22:	f7ff f98f 	bl	8001e44 <lcdPrintStr>

	  sprintf(buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <StartTimeTask+0xb0>)
 8002b28:	791b      	ldrb	r3, [r3, #4]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <StartTimeTask+0xb0>)
 8002b2e:	795b      	ldrb	r3, [r3, #5]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <StartTimeTask+0xb0>)
 8002b34:	799b      	ldrb	r3, [r3, #6]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	490f      	ldr	r1, [pc, #60]	; (8002b78 <StartTimeTask+0xc0>)
 8002b3c:	480c      	ldr	r0, [pc, #48]	; (8002b70 <StartTimeTask+0xb8>)
 8002b3e:	f007 f9d1 	bl	8009ee4 <siprintf>
	  lcdSetCursorPosition(6, 2);
 8002b42:	2102      	movs	r1, #2
 8002b44:	2006      	movs	r0, #6
 8002b46:	f7ff f951 	bl	8001dec <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)buffer, 10);
 8002b4a:	210a      	movs	r1, #10
 8002b4c:	4808      	ldr	r0, [pc, #32]	; (8002b70 <StartTimeTask+0xb8>)
 8002b4e:	f7ff f979 	bl	8001e44 <lcdPrintStr>

	  HAL_Delay(1000);
 8002b52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b56:	f000 fb79 	bl	800324c <HAL_Delay>
	  lcdDisplayClear();
 8002b5a:	e7b7      	b.n	8002acc <StartTimeTask+0x14>
 8002b5c:	200042a8 	.word	0x200042a8
 8002b60:	200041ec 	.word	0x200041ec
 8002b64:	0800b970 	.word	0x0800b970
 8002b68:	200041e0 	.word	0x200041e0
 8002b6c:	0800b97c 	.word	0x0800b97c
 8002b70:	20004464 	.word	0x20004464
 8002b74:	0800b98c 	.word	0x0800b98c
 8002b78:	0800b994 	.word	0x0800b994

08002b7c <StartStatusTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusTemp */
void StartStatusTemp(void const * argument)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusTemp */
  for(;;)
  {
	  if(temperature >= 18 && temperature <= 20)
 8002b84:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <StartStatusTemp+0xc0>)
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8002b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	db19      	blt.n	8002bcc <StartStatusTemp+0x50>
 8002b98:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <StartStatusTemp+0xc0>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002baa:	d80f      	bhi.n	8002bcc <StartStatusTemp+0x50>
	  {
		  HAL_GPIO_WritePin(GPIOA, RGB_led2_Pin, GPIO_PIN_RESET);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2102      	movs	r1, #2
 8002bb0:	4823      	ldr	r0, [pc, #140]	; (8002c40 <StartStatusTemp+0xc4>)
 8002bb2:	f001 f9c3 	bl	8003f3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin, GPIO_PIN_SET);
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4821      	ldr	r0, [pc, #132]	; (8002c40 <StartStatusTemp+0xc4>)
 8002bbc:	f001 f9be 	bl	8003f3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led3_Pin, GPIO_PIN_SET);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	481e      	ldr	r0, [pc, #120]	; (8002c40 <StartStatusTemp+0xc4>)
 8002bc6:	f001 f9b9 	bl	8003f3c <HAL_GPIO_WritePin>
 8002bca:	e032      	b.n	8002c32 <StartStatusTemp+0xb6>
	  }
	  else if(temperature >= 21 && temperature <= 24)
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <StartStatusTemp+0xc0>)
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8002bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bde:	db19      	blt.n	8002c14 <StartStatusTemp+0x98>
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <StartStatusTemp+0xc0>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf2:	d80f      	bhi.n	8002c14 <StartStatusTemp+0x98>
	  {
		  HAL_GPIO_WritePin(GPIOA, RGB_led2_Pin, GPIO_PIN_SET);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	4811      	ldr	r0, [pc, #68]	; (8002c40 <StartStatusTemp+0xc4>)
 8002bfa:	f001 f99f 	bl	8003f3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin, GPIO_PIN_RESET);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2101      	movs	r1, #1
 8002c02:	480f      	ldr	r0, [pc, #60]	; (8002c40 <StartStatusTemp+0xc4>)
 8002c04:	f001 f99a 	bl	8003f3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led3_Pin, GPIO_PIN_RESET);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2110      	movs	r1, #16
 8002c0c:	480c      	ldr	r0, [pc, #48]	; (8002c40 <StartStatusTemp+0xc4>)
 8002c0e:	f001 f995 	bl	8003f3c <HAL_GPIO_WritePin>
 8002c12:	e00e      	b.n	8002c32 <StartStatusTemp+0xb6>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, RGB_led2_Pin, GPIO_PIN_RESET);
 8002c14:	2200      	movs	r2, #0
 8002c16:	2102      	movs	r1, #2
 8002c18:	4809      	ldr	r0, [pc, #36]	; (8002c40 <StartStatusTemp+0xc4>)
 8002c1a:	f001 f98f 	bl	8003f3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led1_Pin, GPIO_PIN_SET);
 8002c1e:	2201      	movs	r2, #1
 8002c20:	2101      	movs	r1, #1
 8002c22:	4807      	ldr	r0, [pc, #28]	; (8002c40 <StartStatusTemp+0xc4>)
 8002c24:	f001 f98a 	bl	8003f3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RGB_led3_Pin, GPIO_PIN_RESET);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2110      	movs	r1, #16
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <StartStatusTemp+0xc4>)
 8002c2e:	f001 f985 	bl	8003f3c <HAL_GPIO_WritePin>
	  }

      vTaskDelay(1000);
 8002c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c36:	f005 fb31 	bl	800829c <vTaskDelay>
	  if(temperature >= 18 && temperature <= 20)
 8002c3a:	e7a3      	b.n	8002b84 <StartStatusTemp+0x8>
 8002c3c:	20004350 	.word	0x20004350
 8002c40:	40020000 	.word	0x40020000

08002c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_MspInit+0x54>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <HAL_MspInit+0x54>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <HAL_MspInit+0x54>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_MspInit+0x54>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <HAL_MspInit+0x54>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_MspInit+0x54>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	210f      	movs	r1, #15
 8002c96:	f06f 0001 	mvn.w	r0, #1
 8002c9a:	f000 fbd4 	bl	8003446 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	; 0x38
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a9a      	ldr	r2, [pc, #616]	; (8002f34 <HAL_I2C_MspInit+0x288>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	f040 8098 	bne.w	8002e00 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
 8002cd4:	4b98      	ldr	r3, [pc, #608]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	4a97      	ldr	r2, [pc, #604]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce0:	4b95      	ldr	r3, [pc, #596]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	623b      	str	r3, [r7, #32]
 8002cea:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cec:	23c0      	movs	r3, #192	; 0xc0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf0:	2312      	movs	r3, #18
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d04:	4619      	mov	r1, r3
 8002d06:	488d      	ldr	r0, [pc, #564]	; (8002f3c <HAL_I2C_MspInit+0x290>)
 8002d08:	f000 ff7e 	bl	8003c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	4b89      	ldr	r3, [pc, #548]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	4a88      	ldr	r2, [pc, #544]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1c:	4b86      	ldr	r3, [pc, #536]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	69fb      	ldr	r3, [r7, #28]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002d28:	4b85      	ldr	r3, [pc, #532]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d2a:	4a86      	ldr	r2, [pc, #536]	; (8002f44 <HAL_I2C_MspInit+0x298>)
 8002d2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002d2e:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d34:	4b82      	ldr	r3, [pc, #520]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d36:	2240      	movs	r2, #64	; 0x40
 8002d38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d3a:	4b81      	ldr	r3, [pc, #516]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d40:	4b7f      	ldr	r3, [pc, #508]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d48:	4b7d      	ldr	r3, [pc, #500]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d4e:	4b7c      	ldr	r3, [pc, #496]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002d54:	4b7a      	ldr	r3, [pc, #488]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d5a:	4b79      	ldr	r3, [pc, #484]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d60:	4b77      	ldr	r3, [pc, #476]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002d66:	4876      	ldr	r0, [pc, #472]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d68:	f000 fba4 	bl	80034b4 <HAL_DMA_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002d72:	f7ff ff67 	bl	8002c44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a71      	ldr	r2, [pc, #452]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d7a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d7c:	4a70      	ldr	r2, [pc, #448]	; (8002f40 <HAL_I2C_MspInit+0x294>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002d82:	4b71      	ldr	r3, [pc, #452]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002d84:	4a71      	ldr	r2, [pc, #452]	; (8002f4c <HAL_I2C_MspInit+0x2a0>)
 8002d86:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002d88:	4b6f      	ldr	r3, [pc, #444]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002d8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d8e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d90:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d96:	4b6c      	ldr	r3, [pc, #432]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002da2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002da4:	4b68      	ldr	r3, [pc, #416]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002daa:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002db0:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002db6:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dbc:	4b62      	ldr	r3, [pc, #392]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002dc2:	4861      	ldr	r0, [pc, #388]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002dc4:	f000 fb76 	bl	80034b4 <HAL_DMA_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002dce:	f7ff ff39 	bl	8002c44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a5c      	ldr	r2, [pc, #368]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd8:	4a5b      	ldr	r2, [pc, #364]	; (8002f48 <HAL_I2C_MspInit+0x29c>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2105      	movs	r1, #5
 8002de2:	201f      	movs	r0, #31
 8002de4:	f000 fb2f 	bl	8003446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002de8:	201f      	movs	r0, #31
 8002dea:	f000 fb48 	bl	800347e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2105      	movs	r1, #5
 8002df2:	2020      	movs	r0, #32
 8002df4:	f000 fb27 	bl	8003446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002df8:	2020      	movs	r0, #32
 8002dfa:	f000 fb40 	bl	800347e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002dfe:	e094      	b.n	8002f2a <HAL_I2C_MspInit+0x27e>
  else if(hi2c->Instance==I2C2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a52      	ldr	r2, [pc, #328]	; (8002f50 <HAL_I2C_MspInit+0x2a4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d13e      	bne.n	8002e88 <HAL_I2C_MspInit+0x1dc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a49      	ldr	r2, [pc, #292]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e2c:	2312      	movs	r3, #18
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e38:	2304      	movs	r3, #4
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	4619      	mov	r1, r3
 8002e42:	483e      	ldr	r0, [pc, #248]	; (8002f3c <HAL_I2C_MspInit+0x290>)
 8002e44:	f000 fee0 	bl	8003c08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e4e:	2312      	movs	r3, #18
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e52:	2301      	movs	r3, #1
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002e5a:	2309      	movs	r3, #9
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e62:	4619      	mov	r1, r3
 8002e64:	4835      	ldr	r0, [pc, #212]	; (8002f3c <HAL_I2C_MspInit+0x290>)
 8002e66:	f000 fecf 	bl	8003c08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	4b32      	ldr	r3, [pc, #200]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	4a31      	ldr	r2, [pc, #196]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002e74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]
}
 8002e86:	e050      	b.n	8002f2a <HAL_I2C_MspInit+0x27e>
  else if(hi2c->Instance==I2C3)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a31      	ldr	r2, [pc, #196]	; (8002f54 <HAL_I2C_MspInit+0x2a8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d14b      	bne.n	8002f2a <HAL_I2C_MspInit+0x27e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed0:	2312      	movs	r3, #18
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002edc:	2304      	movs	r3, #4
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	481c      	ldr	r0, [pc, #112]	; (8002f58 <HAL_I2C_MspInit+0x2ac>)
 8002ee8:	f000 fe8e 	bl	8003c08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef2:	2312      	movs	r3, #18
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002efe:	2304      	movs	r3, #4
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f06:	4619      	mov	r1, r3
 8002f08:	4814      	ldr	r0, [pc, #80]	; (8002f5c <HAL_I2C_MspInit+0x2b0>)
 8002f0a:	f000 fe7d 	bl	8003c08 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002f18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_I2C_MspInit+0x28c>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
}
 8002f2a:	bf00      	nop
 8002f2c:	3738      	adds	r7, #56	; 0x38
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40005400 	.word	0x40005400
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	20004248 	.word	0x20004248
 8002f44:	40026028 	.word	0x40026028
 8002f48:	2000447c 	.word	0x2000447c
 8002f4c:	40026010 	.word	0x40026010
 8002f50:	40005800 	.word	0x40005800
 8002f54:	40005c00 	.word	0x40005c00
 8002f58:	40020800 	.word	0x40020800
 8002f5c:	40020000 	.word	0x40020000

08002f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a19      	ldr	r2, [pc, #100]	; (8002fe4 <HAL_UART_MspInit+0x84>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d12b      	bne.n	8002fda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fba:	230c      	movs	r3, #12
 8002fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fca:	2307      	movs	r3, #7
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4805      	ldr	r0, [pc, #20]	; (8002fec <HAL_UART_MspInit+0x8c>)
 8002fd6:	f000 fe17 	bl	8003c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40004400 	.word	0x40004400
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020000 	.word	0x40020000

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003002:	e7fe      	b.n	8003002 <HardFault_Handler+0x4>

08003004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003008:	e7fe      	b.n	8003008 <MemManage_Handler+0x4>

0800300a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800300e:	e7fe      	b.n	800300e <BusFault_Handler+0x4>

08003010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003014:	e7fe      	b.n	8003014 <UsageFault_Handler+0x4>

08003016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003028:	f000 f8f0 	bl	800320c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800302c:	f005 fe08 	bl	8008c40 <xTaskGetSchedulerState>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d001      	beq.n	800303a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003036:	f006 f83f 	bl	80090b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <DMA1_Stream0_IRQHandler+0x10>)
 8003046:	f000 fb5d 	bl	8003704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2000447c 	.word	0x2000447c

08003054 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003058:	4802      	ldr	r0, [pc, #8]	; (8003064 <DMA1_Stream1_IRQHandler+0x10>)
 800305a:	f000 fb53 	bl	8003704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20004248 	.word	0x20004248

08003068 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <I2C1_EV_IRQHandler+0x10>)
 800306e:	f001 fced 	bl	8004a4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	200042a8 	.word	0x200042a8

0800307c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <I2C1_ER_IRQHandler+0x10>)
 8003082:	f001 fe49 	bl	8004d18 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200042a8 	.word	0x200042a8

08003090 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <_sbrk+0x50>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <_sbrk+0x16>
		heap_end = &end;
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <_sbrk+0x50>)
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <_sbrk+0x54>)
 80030a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <_sbrk+0x50>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <_sbrk+0x50>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	466a      	mov	r2, sp
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d907      	bls.n	80030ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80030ba:	f006 fa5f 	bl	800957c <__errno>
 80030be:	4602      	mov	r2, r0
 80030c0:	230c      	movs	r3, #12
 80030c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	e006      	b.n	80030d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <_sbrk+0x50>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	4a03      	ldr	r2, [pc, #12]	; (80030e0 <_sbrk+0x50>)
 80030d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030d6:	68fb      	ldr	r3, [r7, #12]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000488 	.word	0x20000488
 80030e4:	20004570 	.word	0x20004570

080030e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <SystemInit+0x28>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	4a07      	ldr	r2, [pc, #28]	; (8003110 <SystemInit+0x28>)
 80030f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <SystemInit+0x28>)
 80030fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003102:	609a      	str	r2, [r3, #8]
#endif
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800314c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003118:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800311a:	e003      	b.n	8003124 <LoopCopyDataInit>

0800311c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800311e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003120:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003122:	3104      	adds	r1, #4

08003124 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003124:	480b      	ldr	r0, [pc, #44]	; (8003154 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003128:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800312a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800312c:	d3f6      	bcc.n	800311c <CopyDataInit>
  ldr  r2, =_sbss
 800312e:	4a0b      	ldr	r2, [pc, #44]	; (800315c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003130:	e002      	b.n	8003138 <LoopFillZerobss>

08003132 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003132:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003134:	f842 3b04 	str.w	r3, [r2], #4

08003138 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800313a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800313c:	d3f9      	bcc.n	8003132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800313e:	f7ff ffd3 	bl	80030e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003142:	f006 fa21 	bl	8009588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003146:	f7fe ff11 	bl	8001f6c <main>
  bx  lr    
 800314a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800314c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003150:	0800bc68 	.word	0x0800bc68
  ldr  r0, =_sdata
 8003154:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003158:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 800315c:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8003160:	2000456c 	.word	0x2000456c

08003164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003164:	e7fe      	b.n	8003164 <ADC_IRQHandler>
	...

08003168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <HAL_Init+0x40>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <HAL_Init+0x40>)
 8003172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_Init+0x40>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <HAL_Init+0x40>)
 800317e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_Init+0x40>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a07      	ldr	r2, [pc, #28]	; (80031a8 <HAL_Init+0x40>)
 800318a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003190:	2003      	movs	r0, #3
 8003192:	f000 f94d 	bl	8003430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003196:	200f      	movs	r0, #15
 8003198:	f000 f808 	bl	80031ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800319c:	f7ff fd5a 	bl	8002c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023c00 	.word	0x40023c00

080031ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_InitTick+0x54>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_InitTick+0x58>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f965 	bl	800349a <HAL_SYSTICK_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00e      	b.n	80031f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d80a      	bhi.n	80031f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031e0:	2200      	movs	r2, #0
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f000 f92d 	bl	8003446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031ec:	4a06      	ldr	r2, [pc, #24]	; (8003208 <HAL_InitTick+0x5c>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20000010 	.word	0x20000010
 8003204:	20000018 	.word	0x20000018
 8003208:	20000014 	.word	0x20000014

0800320c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_IncTick+0x20>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_IncTick+0x24>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4413      	add	r3, r2
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_IncTick+0x24>)
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000018 	.word	0x20000018
 8003230:	20004564 	.word	0x20004564

08003234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return uwTick;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_GetTick+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20004564 	.word	0x20004564

0800324c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7ff ffee 	bl	8003234 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d005      	beq.n	8003272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_Delay+0x40>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003272:	bf00      	nop
 8003274:	f7ff ffde 	bl	8003234 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d8f7      	bhi.n	8003274 <HAL_Delay+0x28>
  {
  }
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000018 	.word	0x20000018

08003290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c2:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	60d3      	str	r3, [r2, #12]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <__NVIC_GetPriorityGrouping+0x18>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 0307 	and.w	r3, r3, #7
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db0b      	blt.n	800331e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	4907      	ldr	r1, [pc, #28]	; (800332c <__NVIC_EnableIRQ+0x38>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2001      	movs	r0, #1
 8003316:	fa00 f202 	lsl.w	r2, r0, r2
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000e100 	.word	0xe000e100

08003330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	2b00      	cmp	r3, #0
 8003342:	db0a      	blt.n	800335a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	490c      	ldr	r1, [pc, #48]	; (800337c <__NVIC_SetPriority+0x4c>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	440b      	add	r3, r1
 8003354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003358:	e00a      	b.n	8003370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <__NVIC_SetPriority+0x50>)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	3b04      	subs	r3, #4
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	440b      	add	r3, r1
 800336e:	761a      	strb	r2, [r3, #24]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000e100 	.word	0xe000e100
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f1c3 0307 	rsb	r3, r3, #7
 800339e:	2b04      	cmp	r3, #4
 80033a0:	bf28      	it	cs
 80033a2:	2304      	movcs	r3, #4
 80033a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d902      	bls.n	80033b4 <NVIC_EncodePriority+0x30>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3b03      	subs	r3, #3
 80033b2:	e000      	b.n	80033b6 <NVIC_EncodePriority+0x32>
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	401a      	ands	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033cc:	f04f 31ff 	mov.w	r1, #4294967295
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	43d9      	mvns	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	4313      	orrs	r3, r2
         );
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3724      	adds	r7, #36	; 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033fc:	d301      	bcc.n	8003402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033fe:	2301      	movs	r3, #1
 8003400:	e00f      	b.n	8003422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <SysTick_Config+0x40>)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3b01      	subs	r3, #1
 8003408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340a:	210f      	movs	r1, #15
 800340c:	f04f 30ff 	mov.w	r0, #4294967295
 8003410:	f7ff ff8e 	bl	8003330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <SysTick_Config+0x40>)
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341a:	4b04      	ldr	r3, [pc, #16]	; (800342c <SysTick_Config+0x40>)
 800341c:	2207      	movs	r2, #7
 800341e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	e000e010 	.word	0xe000e010

08003430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff29 	bl	8003290 <__NVIC_SetPriorityGrouping>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003458:	f7ff ff3e 	bl	80032d8 <__NVIC_GetPriorityGrouping>
 800345c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	6978      	ldr	r0, [r7, #20]
 8003464:	f7ff ff8e 	bl	8003384 <NVIC_EncodePriority>
 8003468:	4602      	mov	r2, r0
 800346a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff5d 	bl	8003330 <__NVIC_SetPriority>
}
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff31 	bl	80032f4 <__NVIC_EnableIRQ>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ffa2 	bl	80033ec <SysTick_Config>
 80034a8:	4603      	mov	r3, r0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034c0:	f7ff feb8 	bl	8003234 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e099      	b.n	8003604 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f0:	e00f      	b.n	8003512 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f2:	f7ff fe9f 	bl	8003234 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d908      	bls.n	8003512 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2203      	movs	r2, #3
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e078      	b.n	8003604 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e8      	bne.n	80034f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_DMA_Init+0x158>)
 800352c:	4013      	ands	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800353e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003556:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2b04      	cmp	r3, #4
 800356a:	d107      	bne.n	800357c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	4313      	orrs	r3, r2
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 0307 	bic.w	r3, r3, #7
 8003592:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d117      	bne.n	80035d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 faab 	bl	8003b14 <DMA_CheckFifoParam>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035d2:	2301      	movs	r3, #1
 80035d4:	e016      	b.n	8003604 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fa62 	bl	8003aa8 <DMA_CalcBaseAndBitshift>
 80035e4:	4603      	mov	r3, r0
 80035e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	223f      	movs	r2, #63	; 0x3f
 80035ee:	409a      	lsls	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	f010803f 	.word	0xf010803f

08003610 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_DMA_Start_IT+0x26>
 8003632:	2302      	movs	r3, #2
 8003634:	e040      	b.n	80036b8 <HAL_DMA_Start_IT+0xa8>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d12f      	bne.n	80036aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f9f4 	bl	8003a4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	223f      	movs	r2, #63	; 0x3f
 800366a:	409a      	lsls	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0216 	orr.w	r2, r2, #22
 800367e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0208 	orr.w	r2, r2, #8
 8003696:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e005      	b.n	80036b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
 80036b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d004      	beq.n	80036de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e00c      	b.n	80036f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2205      	movs	r2, #5
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003710:	4b92      	ldr	r3, [pc, #584]	; (800395c <HAL_DMA_IRQHandler+0x258>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a92      	ldr	r2, [pc, #584]	; (8003960 <HAL_DMA_IRQHandler+0x25c>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0a9b      	lsrs	r3, r3, #10
 800371c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	2208      	movs	r2, #8
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01a      	beq.n	8003770 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	2208      	movs	r2, #8
 800375e:	409a      	lsls	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	2201      	movs	r2, #1
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d012      	beq.n	80037a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	2201      	movs	r2, #1
 8003794:	409a      	lsls	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	f043 0202 	orr.w	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	2204      	movs	r2, #4
 80037ac:	409a      	lsls	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d012      	beq.n	80037dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	2204      	movs	r2, #4
 80037ca:	409a      	lsls	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	f043 0204 	orr.w	r2, r3, #4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	2210      	movs	r2, #16
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d043      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d03c      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	2210      	movs	r2, #16
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d018      	beq.n	8003846 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d024      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
 8003832:	e01f      	b.n	8003874 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01b      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
 8003844:	e016      	b.n	8003874 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d107      	bne.n	8003864 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0208 	bic.w	r2, r2, #8
 8003862:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	2220      	movs	r2, #32
 800387a:	409a      	lsls	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 808e 	beq.w	80039a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8086 	beq.w	80039a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	2220      	movs	r2, #32
 800389c:	409a      	lsls	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d136      	bne.n	800391c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0216 	bic.w	r2, r2, #22
 80038bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <HAL_DMA_IRQHandler+0x1da>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0208 	bic.w	r2, r2, #8
 80038ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	223f      	movs	r2, #63	; 0x3f
 80038f4:	409a      	lsls	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390e:	2b00      	cmp	r3, #0
 8003910:	d07d      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
        }
        return;
 800391a:	e078      	b.n	8003a0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01c      	beq.n	8003964 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d108      	bne.n	800394a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	2b00      	cmp	r3, #0
 800393e:	d030      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
 8003948:	e02b      	b.n	80039a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4798      	blx	r3
 800395a:	e022      	b.n	80039a2 <HAL_DMA_IRQHandler+0x29e>
 800395c:	20000010 	.word	0x20000010
 8003960:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0210 	bic.w	r2, r2, #16
 8003980:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d032      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d022      	beq.n	80039fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2205      	movs	r2, #5
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d307      	bcc.n	80039ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f2      	bne.n	80039ce <HAL_DMA_IRQHandler+0x2ca>
 80039e8:	e000      	b.n	80039ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80039ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
 8003a0c:	e000      	b.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a0e:	bf00      	nop
    }
  }
}
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop

08003a18 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a26:	b2db      	uxtb	r3, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d108      	bne.n	8003a8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a8a:	e007      	b.n	8003a9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3b10      	subs	r3, #16
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <DMA_CalcBaseAndBitshift+0x64>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ac2:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <DMA_CalcBaseAndBitshift+0x68>)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d909      	bls.n	8003aea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ae8:	e007      	b.n	8003afa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	aaaaaaab 	.word	0xaaaaaaab
 8003b10:	0800b9cc 	.word	0x0800b9cc

08003b14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11f      	bne.n	8003b6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d855      	bhi.n	8003be0 <DMA_CheckFifoParam+0xcc>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <DMA_CheckFifoParam+0x28>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b5f 	.word	0x08003b5f
 8003b44:	08003b4d 	.word	0x08003b4d
 8003b48:	08003be1 	.word	0x08003be1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d045      	beq.n	8003be4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b5c:	e042      	b.n	8003be4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b66:	d13f      	bne.n	8003be8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6c:	e03c      	b.n	8003be8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b76:	d121      	bne.n	8003bbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d836      	bhi.n	8003bec <DMA_CheckFifoParam+0xd8>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <DMA_CheckFifoParam+0x70>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003b9b 	.word	0x08003b9b
 8003b8c:	08003b95 	.word	0x08003b95
 8003b90:	08003bad 	.word	0x08003bad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e02f      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d024      	beq.n	8003bf0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003baa:	e021      	b.n	8003bf0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bb4:	d11e      	bne.n	8003bf4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bba:	e01b      	b.n	8003bf4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d902      	bls.n	8003bc8 <DMA_CheckFifoParam+0xb4>
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d003      	beq.n	8003bce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bc6:	e018      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      break;
 8003bcc:	e015      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bde:	e00b      	b.n	8003bf8 <DMA_CheckFifoParam+0xe4>
      break;
 8003be0:	bf00      	nop
 8003be2:	e00a      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003be4:	bf00      	nop
 8003be6:	e008      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003be8:	bf00      	nop
 8003bea:	e006      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003bec:	bf00      	nop
 8003bee:	e004      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003bf0:	bf00      	nop
 8003bf2:	e002      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;   
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003bf8:	bf00      	nop
    }
  } 
  
  return status; 
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	; 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e159      	b.n	8003ed8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c24:	2201      	movs	r2, #1
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	f040 8148 	bne.w	8003ed2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d00b      	beq.n	8003c62 <HAL_GPIO_Init+0x5a>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d007      	beq.n	8003c62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c56:	2b11      	cmp	r3, #17
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b12      	cmp	r3, #18
 8003c60:	d130      	bne.n	8003cc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c98:	2201      	movs	r2, #1
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 0201 	and.w	r2, r3, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0xfc>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b12      	cmp	r3, #18
 8003d02:	d123      	bne.n	8003d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	08da      	lsrs	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3208      	adds	r2, #8
 8003d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	220f      	movs	r2, #15
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	08da      	lsrs	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3208      	adds	r2, #8
 8003d46:	69b9      	ldr	r1, [r7, #24]
 8003d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0203 	and.w	r2, r3, #3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80a2 	beq.w	8003ed2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	4b56      	ldr	r3, [pc, #344]	; (8003eec <HAL_GPIO_Init+0x2e4>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	4a55      	ldr	r2, [pc, #340]	; (8003eec <HAL_GPIO_Init+0x2e4>)
 8003d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d9e:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_GPIO_Init+0x2e4>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003daa:	4a51      	ldr	r2, [pc, #324]	; (8003ef0 <HAL_GPIO_Init+0x2e8>)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	089b      	lsrs	r3, r3, #2
 8003db0:	3302      	adds	r3, #2
 8003db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a48      	ldr	r2, [pc, #288]	; (8003ef4 <HAL_GPIO_Init+0x2ec>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d019      	beq.n	8003e0a <HAL_GPIO_Init+0x202>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a47      	ldr	r2, [pc, #284]	; (8003ef8 <HAL_GPIO_Init+0x2f0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_GPIO_Init+0x1fe>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a46      	ldr	r2, [pc, #280]	; (8003efc <HAL_GPIO_Init+0x2f4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00d      	beq.n	8003e02 <HAL_GPIO_Init+0x1fa>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a45      	ldr	r2, [pc, #276]	; (8003f00 <HAL_GPIO_Init+0x2f8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <HAL_GPIO_Init+0x1f6>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a44      	ldr	r2, [pc, #272]	; (8003f04 <HAL_GPIO_Init+0x2fc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_GPIO_Init+0x1f2>
 8003df6:	2304      	movs	r3, #4
 8003df8:	e008      	b.n	8003e0c <HAL_GPIO_Init+0x204>
 8003dfa:	2307      	movs	r3, #7
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x204>
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e004      	b.n	8003e0c <HAL_GPIO_Init+0x204>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e002      	b.n	8003e0c <HAL_GPIO_Init+0x204>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_GPIO_Init+0x204>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f002 0203 	and.w	r2, r2, #3
 8003e12:	0092      	lsls	r2, r2, #2
 8003e14:	4093      	lsls	r3, r2
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e1c:	4934      	ldr	r1, [pc, #208]	; (8003ef0 <HAL_GPIO_Init+0x2e8>)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	3302      	adds	r3, #2
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e2a:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <HAL_GPIO_Init+0x300>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e4e:	4a2e      	ldr	r2, [pc, #184]	; (8003f08 <HAL_GPIO_Init+0x300>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e54:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <HAL_GPIO_Init+0x300>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e78:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <HAL_GPIO_Init+0x300>)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e7e:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <HAL_GPIO_Init+0x300>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <HAL_GPIO_Init+0x300>)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea8:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <HAL_GPIO_Init+0x300>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ecc:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <HAL_GPIO_Init+0x300>)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	f67f aea2 	bls.w	8003c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	3724      	adds	r7, #36	; 0x24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	40020000 	.word	0x40020000
 8003ef8:	40020400 	.word	0x40020400
 8003efc:	40020800 	.word	0x40020800
 8003f00:	40020c00 	.word	0x40020c00
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40013c00 	.word	0x40013c00

08003f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	887b      	ldrh	r3, [r7, #2]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	e001      	b.n	8003f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f4c:	787b      	ldrb	r3, [r7, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f58:	e003      	b.n	8003f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f5a:	887b      	ldrh	r3, [r7, #2]
 8003f5c:	041a      	lsls	r2, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	619a      	str	r2, [r3, #24]
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e11f      	b.n	80041c2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fe fe88 	bl	8002cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0201 	bic.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f003 f9fc 	bl	80073d0 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4a7b      	ldr	r2, [pc, #492]	; (80041cc <HAL_I2C_Init+0x25c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d807      	bhi.n	8003ff4 <HAL_I2C_Init+0x84>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a7a      	ldr	r2, [pc, #488]	; (80041d0 <HAL_I2C_Init+0x260>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bf94      	ite	ls
 8003fec:	2301      	movls	r3, #1
 8003fee:	2300      	movhi	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e006      	b.n	8004002 <HAL_I2C_Init+0x92>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4a77      	ldr	r2, [pc, #476]	; (80041d4 <HAL_I2C_Init+0x264>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	bf94      	ite	ls
 8003ffc:	2301      	movls	r3, #1
 8003ffe:	2300      	movhi	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0db      	b.n	80041c2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a72      	ldr	r2, [pc, #456]	; (80041d8 <HAL_I2C_Init+0x268>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	0c9b      	lsrs	r3, r3, #18
 8004014:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a64      	ldr	r2, [pc, #400]	; (80041cc <HAL_I2C_Init+0x25c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d802      	bhi.n	8004044 <HAL_I2C_Init+0xd4>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	3301      	adds	r3, #1
 8004042:	e009      	b.n	8004058 <HAL_I2C_Init+0xe8>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	4a63      	ldr	r2, [pc, #396]	; (80041dc <HAL_I2C_Init+0x26c>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	3301      	adds	r3, #1
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	430b      	orrs	r3, r1
 800405e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800406a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4956      	ldr	r1, [pc, #344]	; (80041cc <HAL_I2C_Init+0x25c>)
 8004074:	428b      	cmp	r3, r1
 8004076:	d80d      	bhi.n	8004094 <HAL_I2C_Init+0x124>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1e59      	subs	r1, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fbb1 f3f3 	udiv	r3, r1, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408c:	2b04      	cmp	r3, #4
 800408e:	bf38      	it	cc
 8004090:	2304      	movcc	r3, #4
 8004092:	e04f      	b.n	8004134 <HAL_I2C_Init+0x1c4>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d111      	bne.n	80040c0 <HAL_I2C_Init+0x150>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1e58      	subs	r0, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	440b      	add	r3, r1
 80040aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ae:	3301      	adds	r3, #1
 80040b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e012      	b.n	80040e6 <HAL_I2C_Init+0x176>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1e58      	subs	r0, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	0099      	lsls	r1, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_I2C_Init+0x17e>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e022      	b.n	8004134 <HAL_I2C_Init+0x1c4>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10e      	bne.n	8004114 <HAL_I2C_Init+0x1a4>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1e58      	subs	r0, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6859      	ldr	r1, [r3, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	440b      	add	r3, r1
 8004104:	fbb0 f3f3 	udiv	r3, r0, r3
 8004108:	3301      	adds	r3, #1
 800410a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004112:	e00f      	b.n	8004134 <HAL_I2C_Init+0x1c4>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1e58      	subs	r0, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	0099      	lsls	r1, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	fbb0 f3f3 	udiv	r3, r0, r3
 800412a:	3301      	adds	r3, #1
 800412c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	6809      	ldr	r1, [r1, #0]
 8004138:	4313      	orrs	r3, r2
 800413a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6911      	ldr	r1, [r2, #16]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68d2      	ldr	r2, [r2, #12]
 800416e:	4311      	orrs	r1, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	430b      	orrs	r3, r1
 8004176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	000186a0 	.word	0x000186a0
 80041d0:	001e847f 	.word	0x001e847f
 80041d4:	003d08ff 	.word	0x003d08ff
 80041d8:	431bde83 	.word	0x431bde83
 80041dc:	10624dd3 	.word	0x10624dd3

080041e0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	461a      	mov	r2, r3
 80041ec:	460b      	mov	r3, r1
 80041ee:	817b      	strh	r3, [r7, #10]
 80041f0:	4613      	mov	r3, r2
 80041f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b20      	cmp	r3, #32
 8004202:	f040 80f4 	bne.w	80043ee <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004206:	4b7c      	ldr	r3, [pc, #496]	; (80043f8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	08db      	lsrs	r3, r3, #3
 800420c:	4a7b      	ldr	r2, [pc, #492]	; (80043fc <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0a1a      	lsrs	r2, r3, #8
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009a      	lsls	r2, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3b01      	subs	r3, #1
 8004224:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d116      	bne.n	800425a <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0ca      	b.n	80043f0 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b02      	cmp	r3, #2
 8004266:	d0db      	beq.n	8004220 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_I2C_Master_Transmit_DMA+0x96>
 8004272:	2302      	movs	r3, #2
 8004274:	e0bc      	b.n	80043f0 <HAL_I2C_Master_Transmit_DMA+0x210>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d007      	beq.n	800429c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2221      	movs	r2, #33	; 0x21
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2210      	movs	r2, #16
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	893a      	ldrh	r2, [r7, #8]
 80042cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a49      	ldr	r2, [pc, #292]	; (8004400 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80042dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80042de:	897a      	ldrh	r2, [r7, #10]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d062      	beq.n	80043b2 <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	4a44      	ldr	r2, [pc, #272]	; (8004404 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80042f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f8:	4a43      	ldr	r2, [pc, #268]	; (8004408 <HAL_I2C_Master_Transmit_DMA+0x228>)
 80042fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	2200      	movs	r2, #0
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004308:	2200      	movs	r2, #0
 800430a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004310:	2200      	movs	r2, #0
 8004312:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004318:	2200      	movs	r2, #0
 800431a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	4619      	mov	r1, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3310      	adds	r3, #16
 800432c:	461a      	mov	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	f7ff f96d 	bl	8003610 <HAL_DMA_Start_IT>
 8004336:	4603      	mov	r3, r0
 8004338:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d124      	bne.n	800438a <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800434e:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004376:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	e02f      	b.n	80043ea <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f043 0210 	orr.w	r2, r3, #16
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e01e      	b.n	80043f0 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043c0:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d0:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80043e8:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
  }
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000010 	.word	0x20000010
 80043fc:	14f8b589 	.word	0x14f8b589
 8004400:	ffff0000 	.word	0xffff0000
 8004404:	08006449 	.word	0x08006449
 8004408:	080065f3 	.word	0x080065f3

0800440c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	4608      	mov	r0, r1
 8004416:	4611      	mov	r1, r2
 8004418:	461a      	mov	r2, r3
 800441a:	4603      	mov	r3, r0
 800441c:	817b      	strh	r3, [r7, #10]
 800441e:	460b      	mov	r3, r1
 8004420:	813b      	strh	r3, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004426:	f7fe ff05 	bl	8003234 <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b20      	cmp	r3, #32
 8004436:	f040 80d9 	bne.w	80045ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2319      	movs	r3, #25
 8004440:	2201      	movs	r2, #1
 8004442:	496d      	ldr	r1, [pc, #436]	; (80045f8 <HAL_I2C_Mem_Write+0x1ec>)
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f002 f990 	bl	800676a <I2C_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
 8004452:	e0cc      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_I2C_Mem_Write+0x56>
 800445e:	2302      	movs	r3, #2
 8004460:	e0c5      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d007      	beq.n	8004488 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004496:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2221      	movs	r2, #33	; 0x21
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2240      	movs	r2, #64	; 0x40
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a3a      	ldr	r2, [r7, #32]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a4d      	ldr	r2, [pc, #308]	; (80045fc <HAL_I2C_Mem_Write+0x1f0>)
 80044c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ca:	88f8      	ldrh	r0, [r7, #6]
 80044cc:	893a      	ldrh	r2, [r7, #8]
 80044ce:	8979      	ldrh	r1, [r7, #10]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	4603      	mov	r3, r0
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f001 fe3a 	bl	8006154 <I2C_RequestMemoryWrite>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d052      	beq.n	800458c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e081      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f002 fa11 	bl	8006916 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d107      	bne.n	8004512 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004510:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e06b      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b04      	cmp	r3, #4
 8004552:	d11b      	bne.n	800458c <HAL_I2C_Mem_Write+0x180>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d017      	beq.n	800458c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1aa      	bne.n	80044ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f002 f9fd 	bl	8006998 <I2C_WaitOnBTFFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00d      	beq.n	80045c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d107      	bne.n	80045bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e016      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	00100002 	.word	0x00100002
 80045fc:	ffff0000 	.word	0xffff0000

08004600 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08c      	sub	sp, #48	; 0x30
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	461a      	mov	r2, r3
 800460e:	4603      	mov	r3, r0
 8004610:	817b      	strh	r3, [r7, #10]
 8004612:	460b      	mov	r3, r1
 8004614:	813b      	strh	r3, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800461a:	f7fe fe0b 	bl	8003234 <HAL_GetTick>
 800461e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	f040 8208 	bne.w	8004a3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2319      	movs	r3, #25
 8004634:	2201      	movs	r2, #1
 8004636:	497b      	ldr	r1, [pc, #492]	; (8004824 <HAL_I2C_Mem_Read+0x224>)
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f002 f896 	bl	800676a <I2C_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
 8004646:	e1fb      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_I2C_Mem_Read+0x56>
 8004652:	2302      	movs	r3, #2
 8004654:	e1f4      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d007      	beq.n	800467c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2222      	movs	r2, #34	; 0x22
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2240      	movs	r2, #64	; 0x40
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a5b      	ldr	r2, [pc, #364]	; (8004828 <HAL_I2C_Mem_Read+0x228>)
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046be:	88f8      	ldrh	r0, [r7, #6]
 80046c0:	893a      	ldrh	r2, [r7, #8]
 80046c2:	8979      	ldrh	r1, [r7, #10]
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f001 fdd4 	bl	800627c <I2C_RequestMemoryRead>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e1b0      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d113      	bne.n	800470e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e6:	2300      	movs	r3, #0
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	623b      	str	r3, [r7, #32]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e184      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	2b01      	cmp	r3, #1
 8004714:	d11b      	bne.n	800474e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004724:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e164      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	2b02      	cmp	r3, #2
 8004754:	d11b      	bne.n	800478e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004764:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004774:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	e144      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047a4:	e138      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	f200 80f1 	bhi.w	8004992 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d123      	bne.n	8004800 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f002 f92c 	bl	8006a1a <I2C_WaitOnRXNEFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e139      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047fe:	e10b      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004804:	2b02      	cmp	r3, #2
 8004806:	d14e      	bne.n	80048a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	2200      	movs	r2, #0
 8004810:	4906      	ldr	r1, [pc, #24]	; (800482c <HAL_I2C_Mem_Read+0x22c>)
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f001 ffa9 	bl	800676a <I2C_WaitOnFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e10e      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
 8004822:	bf00      	nop
 8004824:	00100002 	.word	0x00100002
 8004828:	ffff0000 	.word	0xffff0000
 800482c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048a4:	e0b8      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	2200      	movs	r2, #0
 80048ae:	4966      	ldr	r1, [pc, #408]	; (8004a48 <HAL_I2C_Mem_Read+0x448>)
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f001 ff5a 	bl	800676a <I2C_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0bf      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	2200      	movs	r2, #0
 800490a:	494f      	ldr	r1, [pc, #316]	; (8004a48 <HAL_I2C_Mem_Read+0x448>)
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f001 ff2c 	bl	800676a <I2C_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e091      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004990:	e042      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f002 f83f 	bl	8006a1a <I2C_WaitOnRXNEFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e04c      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d118      	bne.n	8004a18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f47f aec2 	bne.w	80047a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3728      	adds	r7, #40	; 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	00010004 	.word	0x00010004

08004a4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a6c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a74:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d003      	beq.n	8004a84 <HAL_I2C_EV_IRQHandler+0x38>
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	f040 80b6 	bne.w	8004bf0 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10d      	bne.n	8004aba <HAL_I2C_EV_IRQHandler+0x6e>
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004aa4:	d003      	beq.n	8004aae <HAL_I2C_EV_IRQHandler+0x62>
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004aac:	d101      	bne.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x66>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <HAL_I2C_EV_IRQHandler+0x68>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	f000 8127 	beq.w	8004d08 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00c      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x92>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	0a5b      	lsrs	r3, r3, #9
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d006      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f002 f827 	bl	8006b24 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fd2a 	bl	8005530 <I2C_Master_SB>
 8004adc:	e087      	b.n	8004bee <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	08db      	lsrs	r3, r3, #3
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_I2C_EV_IRQHandler+0xb2>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	0a5b      	lsrs	r3, r3, #9
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fda0 	bl	800563c <I2C_Master_ADD10>
 8004afc:	e077      	b.n	8004bee <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_I2C_EV_IRQHandler+0xd2>
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	0a5b      	lsrs	r3, r3, #9
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fdba 	bl	8005690 <I2C_Master_ADDR>
 8004b1c:	e067      	b.n	8004bee <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	089b      	lsrs	r3, r3, #2
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d030      	beq.n	8004b8c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b38:	f000 80e8 	beq.w	8004d0c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	09db      	lsrs	r3, r3, #7
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00f      	beq.n	8004b68 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	0a9b      	lsrs	r3, r3, #10
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	089b      	lsrs	r3, r3, #2
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f9f6 	bl	8004f52 <I2C_MasterTransmit_TXE>
 8004b66:	e042      	b.n	8004bee <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80cb 	beq.w	8004d0c <HAL_I2C_EV_IRQHandler+0x2c0>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	0a5b      	lsrs	r3, r3, #9
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80c4 	beq.w	8004d0c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fa80 	bl	800508a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b8a:	e0bf      	b.n	8004d0c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9a:	f000 80b7 	beq.w	8004d0c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	099b      	lsrs	r3, r3, #6
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00f      	beq.n	8004bca <HAL_I2C_EV_IRQHandler+0x17e>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	0a9b      	lsrs	r3, r3, #10
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_I2C_EV_IRQHandler+0x17e>
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fb48 	bl	8005258 <I2C_MasterReceive_RXNE>
 8004bc8:	e011      	b.n	8004bee <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 809a 	beq.w	8004d0c <HAL_I2C_EV_IRQHandler+0x2c0>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	0a5b      	lsrs	r3, r3, #9
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8093 	beq.w	8004d0c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fbb8 	bl	800535c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bec:	e08e      	b.n	8004d0c <HAL_I2C_EV_IRQHandler+0x2c0>
 8004bee:	e08d      	b.n	8004d0c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	e007      	b.n	8004c12 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d012      	beq.n	8004c44 <HAL_I2C_EV_IRQHandler+0x1f8>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	0a5b      	lsrs	r3, r3, #9
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00c      	beq.n	8004c44 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c3a:	69b9      	ldr	r1, [r7, #24]
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 ff76 	bl	8005b2e <I2C_Slave_ADDR>
 8004c42:	e066      	b.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	091b      	lsrs	r3, r3, #4
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <HAL_I2C_EV_IRQHandler+0x218>
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	0a5b      	lsrs	r3, r3, #9
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 ffab 	bl	8005bb8 <I2C_Slave_STOPF>
 8004c62:	e056      	b.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c64:	7bbb      	ldrb	r3, [r7, #14]
 8004c66:	2b21      	cmp	r3, #33	; 0x21
 8004c68:	d002      	beq.n	8004c70 <HAL_I2C_EV_IRQHandler+0x224>
 8004c6a:	7bbb      	ldrb	r3, [r7, #14]
 8004c6c:	2b29      	cmp	r3, #41	; 0x29
 8004c6e:	d125      	bne.n	8004cbc <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	09db      	lsrs	r3, r3, #7
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00f      	beq.n	8004c9c <HAL_I2C_EV_IRQHandler+0x250>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	0a9b      	lsrs	r3, r3, #10
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <HAL_I2C_EV_IRQHandler+0x250>
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	089b      	lsrs	r3, r3, #2
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fe8c 	bl	80059b2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c9a:	e039      	b.n	8004d10 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d033      	beq.n	8004d10 <HAL_I2C_EV_IRQHandler+0x2c4>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	0a5b      	lsrs	r3, r3, #9
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d02d      	beq.n	8004d10 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 feb9 	bl	8005a2c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cba:	e029      	b.n	8004d10 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00f      	beq.n	8004ce8 <HAL_I2C_EV_IRQHandler+0x29c>
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	0a9b      	lsrs	r3, r3, #10
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <HAL_I2C_EV_IRQHandler+0x29c>
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	089b      	lsrs	r3, r3, #2
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d103      	bne.n	8004ce8 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fec4 	bl	8005a6e <I2C_SlaveReceive_RXNE>
 8004ce6:	e014      	b.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	089b      	lsrs	r3, r3, #2
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00e      	beq.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	0a5b      	lsrs	r3, r3, #9
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fef2 	bl	8005aea <I2C_SlaveReceive_BTF>
 8004d06:	e004      	b.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004d08:	bf00      	nop
 8004d0a:	e002      	b.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d0c:	bf00      	nop
 8004d0e:	e000      	b.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d10:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d3a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	0a1b      	lsrs	r3, r3, #8
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00e      	beq.n	8004d66 <HAL_I2C_ER_IRQHandler+0x4e>
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	0a5b      	lsrs	r3, r3, #9
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00e      	beq.n	8004d90 <HAL_I2C_ER_IRQHandler+0x78>
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004d8e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	0a9b      	lsrs	r3, r3, #10
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d03f      	beq.n	8004e1c <HAL_I2C_ER_IRQHandler+0x104>
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d039      	beq.n	8004e1c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004da8:	7efb      	ldrb	r3, [r7, #27]
 8004daa:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dba:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004dc2:	7ebb      	ldrb	r3, [r7, #26]
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d112      	bne.n	8004dee <HAL_I2C_ER_IRQHandler+0xd6>
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10f      	bne.n	8004dee <HAL_I2C_ER_IRQHandler+0xd6>
 8004dce:	7cfb      	ldrb	r3, [r7, #19]
 8004dd0:	2b21      	cmp	r3, #33	; 0x21
 8004dd2:	d008      	beq.n	8004de6 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	2b29      	cmp	r3, #41	; 0x29
 8004dd8:	d005      	beq.n	8004de6 <HAL_I2C_ER_IRQHandler+0xce>
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	2b28      	cmp	r3, #40	; 0x28
 8004dde:	d106      	bne.n	8004dee <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b21      	cmp	r3, #33	; 0x21
 8004de4:	d103      	bne.n	8004dee <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f001 f816 	bl	8005e18 <I2C_Slave_AF>
 8004dec:	e016      	b.n	8004e1c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004df6:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	f043 0304 	orr.w	r3, r3, #4
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e00:	7efb      	ldrb	r3, [r7, #27]
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d002      	beq.n	8004e0c <HAL_I2C_ER_IRQHandler+0xf4>
 8004e06:	7efb      	ldrb	r3, [r7, #27]
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d107      	bne.n	8004e1c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	0adb      	lsrs	r3, r3, #11
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00e      	beq.n	8004e46 <HAL_I2C_ER_IRQHandler+0x12e>
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	f043 0308 	orr.w	r3, r3, #8
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004e44:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 f84d 	bl	8005ef8 <I2C_ITError>
  }
}
 8004e5e:	bf00      	nop
 8004e60:	3728      	adds	r7, #40	; 0x28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	70fb      	strb	r3, [r7, #3]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f44:	b2db      	uxtb	r3, r3
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f68:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d150      	bne.n	800501a <I2C_MasterTransmit_TXE+0xc8>
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b21      	cmp	r3, #33	; 0x21
 8004f7c:	d14d      	bne.n	800501a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d01d      	beq.n	8004fc0 <I2C_MasterTransmit_TXE+0x6e>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d01a      	beq.n	8004fc0 <I2C_MasterTransmit_TXE+0x6e>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f90:	d016      	beq.n	8004fc0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fa0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2211      	movs	r2, #17
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff ff54 	bl	8004e66 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fbe:	e060      	b.n	8005082 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fce:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fde:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d107      	bne.n	800500a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff ff6f 	bl	8004ee6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005008:	e03b      	b.n	8005082 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff27 	bl	8004e66 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005018:	e033      	b.n	8005082 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	2b21      	cmp	r3, #33	; 0x21
 800501e:	d005      	beq.n	800502c <I2C_MasterTransmit_TXE+0xda>
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d12d      	bne.n	8005082 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b22      	cmp	r3, #34	; 0x22
 800502a:	d12a      	bne.n	8005082 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d108      	bne.n	8005048 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005044:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005046:	e01c      	b.n	8005082 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d103      	bne.n	800505c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f898 	bl	800518a <I2C_MemoryTransmit_TXE_BTF>
}
 800505a:	e012      	b.n	8005082 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005080:	e7ff      	b.n	8005082 <I2C_MasterTransmit_TXE+0x130>
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b21      	cmp	r3, #33	; 0x21
 80050a2:	d165      	bne.n	8005170 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d012      	beq.n	80050d4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80050d2:	e056      	b.n	8005182 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d01d      	beq.n	8005116 <I2C_MasterTransmit_BTF+0x8c>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d01a      	beq.n	8005116 <I2C_MasterTransmit_BTF+0x8c>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050e6:	d016      	beq.n	8005116 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050f6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2211      	movs	r2, #17
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fea9 	bl	8004e66 <HAL_I2C_MasterTxCpltCallback>
}
 8005114:	e035      	b.n	8005182 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005124:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005134:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d107      	bne.n	8005160 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff fec4 	bl	8004ee6 <HAL_I2C_MemTxCpltCallback>
}
 800515e:	e010      	b.n	8005182 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fe7c 	bl	8004e66 <HAL_I2C_MasterTxCpltCallback>
}
 800516e:	e008      	b.n	8005182 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d102      	bne.n	8005182 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f804 	bl	800518a <I2C_MemoryTransmit_TXE_BTF>
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005196:	2b00      	cmp	r3, #0
 8005198:	d11d      	bne.n	80051d6 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d10b      	bne.n	80051ba <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b2:	1c9a      	adds	r2, r3, #2
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80051b8:	e048      	b.n	800524c <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051be:	b29b      	uxth	r3, r3
 80051c0:	121b      	asrs	r3, r3, #8
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051d4:	e03a      	b.n	800524c <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d10b      	bne.n	80051f6 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051f4:	e02a      	b.n	800524c <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d126      	bne.n	800524c <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b22      	cmp	r3, #34	; 0x22
 8005208:	d108      	bne.n	800521c <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	e017      	b.n	800524c <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b21      	cmp	r3, #33	; 0x21
 8005226:	d111      	bne.n	800524c <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	781a      	ldrb	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b22      	cmp	r3, #34	; 0x22
 800526a:	d173      	bne.n	8005354 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b03      	cmp	r3, #3
 8005278:	d920      	bls.n	80052bc <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d154      	bne.n	8005354 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80052ba:	e04b      	b.n	8005354 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d047      	beq.n	8005354 <I2C_MasterReceive_RXNE+0xfc>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d002      	beq.n	80052d0 <I2C_MasterReceive_RXNE+0x78>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d141      	bne.n	8005354 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052de:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ee:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d10a      	bne.n	8005340 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff fdde 	bl	8004efa <HAL_I2C_MemRxCpltCallback>
}
 800533e:	e009      	b.n	8005354 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2212      	movs	r2, #18
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fd93 	bl	8004e7a <HAL_I2C_MasterRxCpltCallback>
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b04      	cmp	r3, #4
 8005372:	d11b      	bne.n	80053ac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005382:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80053aa:	e0bd      	b.n	8005528 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d129      	bne.n	800540a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d00a      	beq.n	80053e2 <I2C_MasterReceive_BTF+0x86>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d007      	beq.n	80053e2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005408:	e08e      	b.n	8005528 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d176      	bne.n	8005502 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d002      	beq.n	8005420 <I2C_MasterReceive_BTF+0xc4>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b10      	cmp	r3, #16
 800541e:	d108      	bne.n	8005432 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e019      	b.n	8005466 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d002      	beq.n	800543e <I2C_MasterReceive_BTF+0xe2>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d108      	bne.n	8005450 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e00a      	b.n	8005466 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b10      	cmp	r3, #16
 8005454:	d007      	beq.n	8005466 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005464:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80054c0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d10a      	bne.n	80054ec <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff fd08 	bl	8004efa <HAL_I2C_MemRxCpltCallback>
}
 80054ea:	e01d      	b.n	8005528 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2212      	movs	r2, #18
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fcbd 	bl	8004e7a <HAL_I2C_MasterRxCpltCallback>
}
 8005500:	e012      	b.n	8005528 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d117      	bne.n	8005574 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005548:	2b00      	cmp	r3, #0
 800554a:	d109      	bne.n	8005560 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	b2db      	uxtb	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800555c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800555e:	e067      	b.n	8005630 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	b2da      	uxtb	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	611a      	str	r2, [r3, #16]
}
 8005572:	e05d      	b.n	8005630 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800557c:	d133      	bne.n	80055e6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b21      	cmp	r3, #33	; 0x21
 8005588:	d109      	bne.n	800559e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800559a:	611a      	str	r2, [r3, #16]
 800559c:	e008      	b.n	80055b0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <I2C_Master_SB+0x92>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d108      	bne.n	80055d4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d032      	beq.n	8005630 <I2C_Master_SB+0x100>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d02d      	beq.n	8005630 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e2:	605a      	str	r2, [r3, #4]
}
 80055e4:	e024      	b.n	8005630 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10e      	bne.n	800560c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	11db      	asrs	r3, r3, #7
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f003 0306 	and.w	r3, r3, #6
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f063 030f 	orn	r3, r3, #15
 8005602:	b2da      	uxtb	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	611a      	str	r2, [r3, #16]
}
 800560a:	e011      	b.n	8005630 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005610:	2b01      	cmp	r3, #1
 8005612:	d10d      	bne.n	8005630 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	b29b      	uxth	r3, r3
 800561a:	11db      	asrs	r3, r3, #7
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 0306 	and.w	r3, r3, #6
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f063 030e 	orn	r3, r3, #14
 8005628:	b2da      	uxtb	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	611a      	str	r2, [r3, #16]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005648:	b2da      	uxtb	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005654:	2b00      	cmp	r3, #0
 8005656:	d103      	bne.n	8005660 <I2C_Master_ADD10+0x24>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	2b00      	cmp	r3, #0
 800565e:	d011      	beq.n	8005684 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <I2C_Master_ADD10+0x38>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005682:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005690:	b480      	push	{r7}
 8005692:	b091      	sub	sp, #68	; 0x44
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800569e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b22      	cmp	r3, #34	; 0x22
 80056b8:	f040 8169 	bne.w	800598e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10f      	bne.n	80056e4 <I2C_Master_ADDR+0x54>
 80056c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d10b      	bne.n	80056e4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056cc:	2300      	movs	r3, #0
 80056ce:	633b      	str	r3, [r7, #48]	; 0x30
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	633b      	str	r3, [r7, #48]	; 0x30
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	e160      	b.n	80059a6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11d      	bne.n	8005728 <I2C_Master_ADDR+0x98>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056f4:	d118      	bne.n	8005728 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f6:	2300      	movs	r3, #0
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800571a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	651a      	str	r2, [r3, #80]	; 0x50
 8005726:	e13e      	b.n	80059a6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d113      	bne.n	800575a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005732:	2300      	movs	r3, #0
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	e115      	b.n	8005986 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	f040 808a 	bne.w	800587a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800576c:	d137      	bne.n	80057de <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578c:	d113      	bne.n	80057b6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800579c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579e:	2300      	movs	r3, #0
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	e0e7      	b.n	8005986 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b6:	2300      	movs	r3, #0
 80057b8:	623b      	str	r3, [r7, #32]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e0d3      	b.n	8005986 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d02e      	beq.n	8005842 <I2C_Master_ADDR+0x1b2>
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d02b      	beq.n	8005842 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80057ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ec:	2b12      	cmp	r3, #18
 80057ee:	d102      	bne.n	80057f6 <I2C_Master_ADDR+0x166>
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d125      	bne.n	8005842 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d00e      	beq.n	800581a <I2C_Master_ADDR+0x18a>
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d00b      	beq.n	800581a <I2C_Master_ADDR+0x18a>
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	2b10      	cmp	r3, #16
 8005806:	d008      	beq.n	800581a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e007      	b.n	800582a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005828:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	e0a1      	b.n	8005986 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005850:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e085      	b.n	8005986 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d14d      	bne.n	8005920 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	2b04      	cmp	r3, #4
 8005888:	d016      	beq.n	80058b8 <I2C_Master_ADDR+0x228>
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	2b02      	cmp	r3, #2
 800588e:	d013      	beq.n	80058b8 <I2C_Master_ADDR+0x228>
 8005890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005892:	2b10      	cmp	r3, #16
 8005894:	d010      	beq.n	80058b8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e007      	b.n	80058c8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058c6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d6:	d117      	bne.n	8005908 <I2C_Master_ADDR+0x278>
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058de:	d00b      	beq.n	80058f8 <I2C_Master_ADDR+0x268>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d008      	beq.n	80058f8 <I2C_Master_ADDR+0x268>
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d005      	beq.n	80058f8 <I2C_Master_ADDR+0x268>
 80058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d002      	beq.n	80058f8 <I2C_Master_ADDR+0x268>
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d107      	bne.n	8005908 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005906:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	e032      	b.n	8005986 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800592e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593e:	d117      	bne.n	8005970 <I2C_Master_ADDR+0x2e0>
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005946:	d00b      	beq.n	8005960 <I2C_Master_ADDR+0x2d0>
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	2b01      	cmp	r3, #1
 800594c:	d008      	beq.n	8005960 <I2C_Master_ADDR+0x2d0>
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	2b08      	cmp	r3, #8
 8005952:	d005      	beq.n	8005960 <I2C_Master_ADDR+0x2d0>
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	2b10      	cmp	r3, #16
 8005958:	d002      	beq.n	8005960 <I2C_Master_ADDR+0x2d0>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	2b20      	cmp	r3, #32
 800595e:	d107      	bne.n	8005970 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800596e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800598c:	e00b      	b.n	80059a6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
}
 80059a4:	e7ff      	b.n	80059a6 <I2C_Master_ADDR+0x316>
 80059a6:	bf00      	nop
 80059a8:	3744      	adds	r7, #68	; 0x44
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d02b      	beq.n	8005a24 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d114      	bne.n	8005a24 <I2C_SlaveTransmit_TXE+0x72>
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	2b29      	cmp	r3, #41	; 0x29
 80059fe:	d111      	bne.n	8005a24 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2221      	movs	r2, #33	; 0x21
 8005a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2228      	movs	r2, #40	; 0x28
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fa35 	bl	8004e8e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d011      	beq.n	8005a62 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d02c      	beq.n	8005ae2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d114      	bne.n	8005ae2 <I2C_SlaveReceive_RXNE+0x74>
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b2a      	cmp	r3, #42	; 0x2a
 8005abc:	d111      	bne.n	8005ae2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005acc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2222      	movs	r2, #34	; 0x22
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2228      	movs	r2, #40	; 0x28
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff f9e0 	bl	8004ea2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d012      	beq.n	8005b22 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b48:	2b28      	cmp	r3, #40	; 0x28
 8005b4a:	d127      	bne.n	8005b9c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	089b      	lsrs	r3, r3, #2
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	09db      	lsrs	r3, r3, #7
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d103      	bne.n	8005b80 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	81bb      	strh	r3, [r7, #12]
 8005b7e:	e002      	b.n	8005b86 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005b8e:	89ba      	ldrh	r2, [r7, #12]
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff f98e 	bl	8004eb6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005b9a:	e008      	b.n	8005bae <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0202 	mvn.w	r2, #2
 8005ba4:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bd6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60bb      	str	r3, [r7, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	60bb      	str	r3, [r7, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c04:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c14:	d172      	bne.n	8005cfc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	2b22      	cmp	r3, #34	; 0x22
 8005c1a:	d002      	beq.n	8005c22 <I2C_Slave_STOPF+0x6a>
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c20:	d135      	bne.n	8005c8e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	f043 0204 	orr.w	r2, r3, #4
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c54:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fd fedc 	bl	8003a18 <HAL_DMA_GetState>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d049      	beq.n	8005cfa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	4a69      	ldr	r2, [pc, #420]	; (8005e10 <I2C_Slave_STOPF+0x258>)
 8005c6c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fd fd24 	bl	80036c0 <HAL_DMA_Abort_IT>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d03d      	beq.n	8005cfa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c8c:	e035      	b.n	8005cfa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f043 0204 	orr.w	r2, r3, #4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cc0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fd fea6 	bl	8003a18 <HAL_DMA_GetState>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d014      	beq.n	8005cfc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd6:	4a4e      	ldr	r2, [pc, #312]	; (8005e10 <I2C_Slave_STOPF+0x258>)
 8005cd8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fd fcee 	bl	80036c0 <HAL_DMA_Abort_IT>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
 8005cf8:	e000      	b.n	8005cfc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cfa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d03e      	beq.n	8005d84 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d112      	bne.n	8005d3a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d112      	bne.n	8005d6e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	f043 0204 	orr.w	r2, r3, #4
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8b3 	bl	8005ef8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005d92:	e039      	b.n	8005e08 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b2a      	cmp	r3, #42	; 0x2a
 8005d98:	d109      	bne.n	8005dae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2228      	movs	r2, #40	; 0x28
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff f87a 	bl	8004ea2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b28      	cmp	r3, #40	; 0x28
 8005db8:	d111      	bne.n	8005dde <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <I2C_Slave_STOPF+0x25c>)
 8005dbe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff f87b 	bl	8004ed2 <HAL_I2C_ListenCpltCallback>
}
 8005ddc:	e014      	b.n	8005e08 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	2b22      	cmp	r3, #34	; 0x22
 8005de4:	d002      	beq.n	8005dec <I2C_Slave_STOPF+0x234>
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b22      	cmp	r3, #34	; 0x22
 8005dea:	d10d      	bne.n	8005e08 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff f84d 	bl	8004ea2 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	0800666d 	.word	0x0800666d
 8005e14:	ffff0000 	.word	0xffff0000

08005e18 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e26:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d002      	beq.n	8005e3a <I2C_Slave_AF+0x22>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d129      	bne.n	8005e8e <I2C_Slave_AF+0x76>
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b28      	cmp	r3, #40	; 0x28
 8005e3e:	d126      	bne.n	8005e8e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a2c      	ldr	r2, [pc, #176]	; (8005ef4 <I2C_Slave_AF+0xdc>)
 8005e44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e54:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e5e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff f823 	bl	8004ed2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005e8c:	e02e      	b.n	8005eec <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	2b21      	cmp	r3, #33	; 0x21
 8005e92:	d126      	bne.n	8005ee2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <I2C_Slave_AF+0xdc>)
 8005e98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2221      	movs	r2, #33	; 0x21
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ebe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fe ffd7 	bl	8004e8e <HAL_I2C_SlaveTxCpltCallback>
}
 8005ee0:	e004      	b.n	8005eec <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005eea:	615a      	str	r2, [r3, #20]
}
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	ffff0000 	.word	0xffff0000

08005ef8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f06:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d10a      	bne.n	8005f2a <I2C_ITError+0x32>
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	2b22      	cmp	r3, #34	; 0x22
 8005f18:	d107      	bne.n	8005f2a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f28:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f30:	2b28      	cmp	r3, #40	; 0x28
 8005f32:	d107      	bne.n	8005f44 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2228      	movs	r2, #40	; 0x28
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f42:	e015      	b.n	8005f70 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f52:	d006      	beq.n	8005f62 <I2C_ITError+0x6a>
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2b60      	cmp	r3, #96	; 0x60
 8005f58:	d003      	beq.n	8005f62 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f7e:	d162      	bne.n	8006046 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f8e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d020      	beq.n	8005fe0 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	4a6a      	ldr	r2, [pc, #424]	; (800614c <I2C_ITError+0x254>)
 8005fa4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fd fb88 	bl	80036c0 <HAL_DMA_Abort_IT>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 8089 	beq.w	80060ca <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4798      	blx	r3
 8005fde:	e074      	b.n	80060ca <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	4a59      	ldr	r2, [pc, #356]	; (800614c <I2C_ITError+0x254>)
 8005fe6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fd fb67 	bl	80036c0 <HAL_DMA_Abort_IT>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d068      	beq.n	80060ca <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d10b      	bne.n	800601e <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0201 	bic.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
 8006044:	e041      	b.n	80060ca <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b60      	cmp	r3, #96	; 0x60
 8006050:	d125      	bne.n	800609e <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d10b      	bne.n	8006086 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0201 	bic.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fe ff43 	bl	8004f22 <HAL_I2C_AbortCpltCallback>
 800609c:	e015      	b.n	80060ca <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	d10b      	bne.n	80060c4 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691a      	ldr	r2, [r3, #16]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7fe ff22 	bl	8004f0e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10e      	bne.n	80060f8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006106:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b04      	cmp	r3, #4
 800611a:	d113      	bne.n	8006144 <I2C_ITError+0x24c>
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b28      	cmp	r3, #40	; 0x28
 8006120:	d110      	bne.n	8006144 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <I2C_ITError+0x258>)
 8006126:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fe fec7 	bl	8004ed2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006144:	bf00      	nop
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	0800666d 	.word	0x0800666d
 8006150:	ffff0000 	.word	0xffff0000

08006154 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	4608      	mov	r0, r1
 800615e:	4611      	mov	r1, r2
 8006160:	461a      	mov	r2, r3
 8006162:	4603      	mov	r3, r0
 8006164:	817b      	strh	r3, [r7, #10]
 8006166:	460b      	mov	r3, r1
 8006168:	813b      	strh	r3, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800617c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	2200      	movs	r2, #0
 8006186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 faed 	bl	800676a <I2C_WaitOnFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e05f      	b.n	8006270 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061b0:	897b      	ldrh	r3, [r7, #10]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	6a3a      	ldr	r2, [r7, #32]
 80061c4:	492c      	ldr	r1, [pc, #176]	; (8006278 <I2C_RequestMemoryWrite+0x124>)
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fb26 	bl	8006818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e04c      	b.n	8006270 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ee:	6a39      	ldr	r1, [r7, #32]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fb90 	bl	8006916 <I2C_WaitOnTXEFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00d      	beq.n	8006218 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	2b04      	cmp	r3, #4
 8006202:	d107      	bne.n	8006214 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006212:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e02b      	b.n	8006270 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d105      	bne.n	800622a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800621e:	893b      	ldrh	r3, [r7, #8]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	611a      	str	r2, [r3, #16]
 8006228:	e021      	b.n	800626e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800622a:	893b      	ldrh	r3, [r7, #8]
 800622c:	0a1b      	lsrs	r3, r3, #8
 800622e:	b29b      	uxth	r3, r3
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623a:	6a39      	ldr	r1, [r7, #32]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fb6a 	bl	8006916 <I2C_WaitOnTXEFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00d      	beq.n	8006264 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624c:	2b04      	cmp	r3, #4
 800624e:	d107      	bne.n	8006260 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800625e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e005      	b.n	8006270 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006264:	893b      	ldrh	r3, [r7, #8]
 8006266:	b2da      	uxtb	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	00010002 	.word	0x00010002

0800627c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	4608      	mov	r0, r1
 8006286:	4611      	mov	r1, r2
 8006288:	461a      	mov	r2, r3
 800628a:	4603      	mov	r3, r0
 800628c:	817b      	strh	r3, [r7, #10]
 800628e:	460b      	mov	r3, r1
 8006290:	813b      	strh	r3, [r7, #8]
 8006292:	4613      	mov	r3, r2
 8006294:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	2200      	movs	r2, #0
 80062be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 fa51 	bl	800676a <I2C_WaitOnFlagUntilTimeout>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e0a9      	b.n	800643c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062e8:	897b      	ldrh	r3, [r7, #10]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	6a3a      	ldr	r2, [r7, #32]
 80062fc:	4951      	ldr	r1, [pc, #324]	; (8006444 <I2C_RequestMemoryRead+0x1c8>)
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fa8a 	bl	8006818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e096      	b.n	800643c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006326:	6a39      	ldr	r1, [r7, #32]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 faf4 	bl	8006916 <I2C_WaitOnTXEFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00d      	beq.n	8006350 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006338:	2b04      	cmp	r3, #4
 800633a:	d107      	bne.n	800634c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800634a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e075      	b.n	800643c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006350:	88fb      	ldrh	r3, [r7, #6]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d105      	bne.n	8006362 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006356:	893b      	ldrh	r3, [r7, #8]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	611a      	str	r2, [r3, #16]
 8006360:	e021      	b.n	80063a6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006362:	893b      	ldrh	r3, [r7, #8]
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	b29b      	uxth	r3, r3
 8006368:	b2da      	uxtb	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006372:	6a39      	ldr	r1, [r7, #32]
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 face 	bl	8006916 <I2C_WaitOnTXEFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00d      	beq.n	800639c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	2b04      	cmp	r3, #4
 8006386:	d107      	bne.n	8006398 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006396:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e04f      	b.n	800643c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800639c:	893b      	ldrh	r3, [r7, #8]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a8:	6a39      	ldr	r1, [r7, #32]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fab3 	bl	8006916 <I2C_WaitOnTXEFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00d      	beq.n	80063d2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d107      	bne.n	80063ce <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e034      	b.n	800643c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f9bb 	bl	800676a <I2C_WaitOnFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00c      	beq.n	8006414 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e013      	b.n	800643c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006414:	897b      	ldrh	r3, [r7, #10]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f043 0301 	orr.w	r3, r3, #1
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	6a3a      	ldr	r2, [r7, #32]
 8006428:	4906      	ldr	r1, [pc, #24]	; (8006444 <I2C_RequestMemoryRead+0x1c8>)
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 f9f4 	bl	8006818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	00010002 	.word	0x00010002

08006448 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006464:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800647a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006488:	2200      	movs	r2, #0
 800648a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	2200      	movs	r2, #0
 800649a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800649c:	7cfb      	ldrb	r3, [r7, #19]
 800649e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80064a2:	2b21      	cmp	r3, #33	; 0x21
 80064a4:	d007      	beq.n	80064b6 <I2C_DMAXferCplt+0x6e>
 80064a6:	7cfb      	ldrb	r3, [r7, #19]
 80064a8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80064ac:	2b22      	cmp	r3, #34	; 0x22
 80064ae:	d131      	bne.n	8006514 <I2C_DMAXferCplt+0xcc>
 80064b0:	7cbb      	ldrb	r3, [r7, #18]
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d12e      	bne.n	8006514 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064c4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2200      	movs	r2, #0
 80064ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80064cc:	7cfb      	ldrb	r3, [r7, #19]
 80064ce:	2b29      	cmp	r3, #41	; 0x29
 80064d0:	d10a      	bne.n	80064e8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2221      	movs	r2, #33	; 0x21
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2228      	movs	r2, #40	; 0x28
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064e0:	6978      	ldr	r0, [r7, #20]
 80064e2:	f7fe fcd4 	bl	8004e8e <HAL_I2C_SlaveTxCpltCallback>
 80064e6:	e00c      	b.n	8006502 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064e8:	7cfb      	ldrb	r3, [r7, #19]
 80064ea:	2b2a      	cmp	r3, #42	; 0x2a
 80064ec:	d109      	bne.n	8006502 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2222      	movs	r2, #34	; 0x22
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2228      	movs	r2, #40	; 0x28
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064fc:	6978      	ldr	r0, [r7, #20]
 80064fe:	f7fe fcd0 	bl	8004ea2 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006510:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006512:	e06a      	b.n	80065ea <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d064      	beq.n	80065ea <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b01      	cmp	r3, #1
 8006528:	d107      	bne.n	800653a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006538:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006548:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006550:	d009      	beq.n	8006566 <I2C_DMAXferCplt+0x11e>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b08      	cmp	r3, #8
 8006556:	d006      	beq.n	8006566 <I2C_DMAXferCplt+0x11e>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800655e:	d002      	beq.n	8006566 <I2C_DMAXferCplt+0x11e>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b20      	cmp	r3, #32
 8006564:	d107      	bne.n	8006576 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006574:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006584:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006594:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2200      	movs	r2, #0
 800659a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80065a4:	6978      	ldr	r0, [r7, #20]
 80065a6:	f7fe fcb2 	bl	8004f0e <HAL_I2C_ErrorCallback>
}
 80065aa:	e01e      	b.n	80065ea <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d10a      	bne.n	80065d6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2200      	movs	r2, #0
 80065cc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80065ce:	6978      	ldr	r0, [r7, #20]
 80065d0:	f7fe fc93 	bl	8004efa <HAL_I2C_MemRxCpltCallback>
}
 80065d4:	e009      	b.n	80065ea <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2212      	movs	r2, #18
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80065e4:	6978      	ldr	r0, [r7, #20]
 80065e6:	f7fe fc48 	bl	8004e7a <HAL_I2C_MasterRxCpltCallback>
}
 80065ea:	bf00      	nop
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660c:	2200      	movs	r2, #0
 800660e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	2200      	movs	r2, #0
 800661e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7fd fa07 	bl	8003a34 <HAL_DMA_GetError>
 8006626:	4603      	mov	r3, r0
 8006628:	2b02      	cmp	r3, #2
 800662a:	d01b      	beq.n	8006664 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f043 0210 	orr.w	r2, r3, #16
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7fe fc55 	bl	8004f0e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006678:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006680:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	2200      	movs	r2, #0
 8006690:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669e:	2200      	movs	r2, #0
 80066a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	2200      	movs	r2, #0
 80066c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	2200      	movs	r2, #0
 80066d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b60      	cmp	r3, #96	; 0x60
 80066f2:	d10e      	bne.n	8006712 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7fe fc09 	bl	8004f22 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006710:	e027      	b.n	8006762 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006712:	7afb      	ldrb	r3, [r7, #11]
 8006714:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006718:	2b28      	cmp	r3, #40	; 0x28
 800671a:	d117      	bne.n	800674c <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800673a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2228      	movs	r2, #40	; 0x28
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800674a:	e007      	b.n	800675c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7fe fbd6 	bl	8004f0e <HAL_I2C_ErrorCallback>
}
 8006762:	bf00      	nop
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	4613      	mov	r3, r2
 8006778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800677a:	e025      	b.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006782:	d021      	beq.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006784:	f7fc fd56 	bl	8003234 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d302      	bcc.n	800679a <I2C_WaitOnFlagUntilTimeout+0x30>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d116      	bne.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	f043 0220 	orr.w	r2, r3, #32
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e023      	b.n	8006810 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	0c1b      	lsrs	r3, r3, #16
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d10d      	bne.n	80067ee <I2C_WaitOnFlagUntilTimeout+0x84>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	43da      	mvns	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4013      	ands	r3, r2
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	e00c      	b.n	8006808 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	43da      	mvns	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	4013      	ands	r3, r2
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf0c      	ite	eq
 8006800:	2301      	moveq	r3, #1
 8006802:	2300      	movne	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	429a      	cmp	r2, r3
 800680c:	d0b6      	beq.n	800677c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006826:	e051      	b.n	80068cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006836:	d123      	bne.n	8006880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006846:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	f043 0204 	orr.w	r2, r3, #4
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e046      	b.n	800690e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	d021      	beq.n	80068cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006888:	f7fc fcd4 	bl	8003234 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d302      	bcc.n	800689e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d116      	bne.n	80068cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	f043 0220 	orr.w	r2, r3, #32
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e020      	b.n	800690e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	0c1b      	lsrs	r3, r3, #16
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d10c      	bne.n	80068f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	43da      	mvns	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4013      	ands	r3, r2
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e00b      	b.n	8006908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	43da      	mvns	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4013      	ands	r3, r2
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bf14      	ite	ne
 8006902:	2301      	movne	r3, #1
 8006904:	2300      	moveq	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d18d      	bne.n	8006828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006922:	e02d      	b.n	8006980 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f8ce 	bl	8006ac6 <I2C_IsAcknowledgeFailed>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e02d      	b.n	8006990 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d021      	beq.n	8006980 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693c:	f7fc fc7a 	bl	8003234 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	429a      	cmp	r2, r3
 800694a:	d302      	bcc.n	8006952 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d116      	bne.n	8006980 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	f043 0220 	orr.w	r2, r3, #32
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e007      	b.n	8006990 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698a:	2b80      	cmp	r3, #128	; 0x80
 800698c:	d1ca      	bne.n	8006924 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069a4:	e02d      	b.n	8006a02 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f88d 	bl	8006ac6 <I2C_IsAcknowledgeFailed>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e02d      	b.n	8006a12 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d021      	beq.n	8006a02 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069be:	f7fc fc39 	bl	8003234 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d302      	bcc.n	80069d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d116      	bne.n	8006a02 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	f043 0220 	orr.w	r2, r3, #32
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e007      	b.n	8006a12 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d1ca      	bne.n	80069a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a26:	e042      	b.n	8006aae <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	2b10      	cmp	r3, #16
 8006a34:	d119      	bne.n	8006a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f06f 0210 	mvn.w	r2, #16
 8006a3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e029      	b.n	8006abe <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a6a:	f7fc fbe3 	bl	8003234 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d302      	bcc.n	8006a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d116      	bne.n	8006aae <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	f043 0220 	orr.w	r2, r3, #32
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e007      	b.n	8006abe <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d1b5      	bne.n	8006a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d11b      	bne.n	8006b16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ae6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f043 0204 	orr.w	r2, r3, #4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b34:	d103      	bne.n	8006b3e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b3c:	e007      	b.n	8006b4e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b46:	d102      	bne.n	8006b4e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e25b      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d075      	beq.n	8006c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b7a:	4ba3      	ldr	r3, [pc, #652]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d00c      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b86:	4ba0      	ldr	r3, [pc, #640]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d112      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b92:	4b9d      	ldr	r3, [pc, #628]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b9e:	d10b      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba0:	4b99      	ldr	r3, [pc, #612]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d05b      	beq.n	8006c64 <HAL_RCC_OscConfig+0x108>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d157      	bne.n	8006c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e236      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc0:	d106      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x74>
 8006bc2:	4b91      	ldr	r3, [pc, #580]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a90      	ldr	r2, [pc, #576]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	e01d      	b.n	8006c0c <HAL_RCC_OscConfig+0xb0>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bd8:	d10c      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x98>
 8006bda:	4b8b      	ldr	r3, [pc, #556]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a8a      	ldr	r2, [pc, #552]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	4b88      	ldr	r3, [pc, #544]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a87      	ldr	r2, [pc, #540]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	e00b      	b.n	8006c0c <HAL_RCC_OscConfig+0xb0>
 8006bf4:	4b84      	ldr	r3, [pc, #528]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a83      	ldr	r2, [pc, #524]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	4b81      	ldr	r3, [pc, #516]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a80      	ldr	r2, [pc, #512]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d013      	beq.n	8006c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c14:	f7fc fb0e 	bl	8003234 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c1c:	f7fc fb0a 	bl	8003234 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b64      	cmp	r3, #100	; 0x64
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e1fb      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c2e:	4b76      	ldr	r3, [pc, #472]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0f0      	beq.n	8006c1c <HAL_RCC_OscConfig+0xc0>
 8006c3a:	e014      	b.n	8006c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3c:	f7fc fafa 	bl	8003234 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c44:	f7fc faf6 	bl	8003234 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b64      	cmp	r3, #100	; 0x64
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e1e7      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c56:	4b6c      	ldr	r3, [pc, #432]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0xe8>
 8006c62:	e000      	b.n	8006c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d063      	beq.n	8006d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c72:	4b65      	ldr	r3, [pc, #404]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 030c 	and.w	r3, r3, #12
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00b      	beq.n	8006c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c7e:	4b62      	ldr	r3, [pc, #392]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d11c      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c8a:	4b5f      	ldr	r3, [pc, #380]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d116      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c96:	4b5c      	ldr	r3, [pc, #368]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d005      	beq.n	8006cae <HAL_RCC_OscConfig+0x152>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d001      	beq.n	8006cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e1bb      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cae:	4b56      	ldr	r3, [pc, #344]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4952      	ldr	r1, [pc, #328]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cc2:	e03a      	b.n	8006d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d020      	beq.n	8006d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ccc:	4b4f      	ldr	r3, [pc, #316]	; (8006e0c <HAL_RCC_OscConfig+0x2b0>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd2:	f7fc faaf 	bl	8003234 <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cda:	f7fc faab 	bl	8003234 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e19c      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cec:	4b46      	ldr	r3, [pc, #280]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf8:	4b43      	ldr	r3, [pc, #268]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4940      	ldr	r1, [pc, #256]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	600b      	str	r3, [r1, #0]
 8006d0c:	e015      	b.n	8006d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d0e:	4b3f      	ldr	r3, [pc, #252]	; (8006e0c <HAL_RCC_OscConfig+0x2b0>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d14:	f7fc fa8e 	bl	8003234 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d1c:	f7fc fa8a 	bl	8003234 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e17b      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d2e:	4b36      	ldr	r3, [pc, #216]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f0      	bne.n	8006d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d030      	beq.n	8006da8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d016      	beq.n	8006d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d4e:	4b30      	ldr	r3, [pc, #192]	; (8006e10 <HAL_RCC_OscConfig+0x2b4>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d54:	f7fc fa6e 	bl	8003234 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d5c:	f7fc fa6a 	bl	8003234 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e15b      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d6e:	4b26      	ldr	r3, [pc, #152]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <HAL_RCC_OscConfig+0x200>
 8006d7a:	e015      	b.n	8006da8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d7c:	4b24      	ldr	r3, [pc, #144]	; (8006e10 <HAL_RCC_OscConfig+0x2b4>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d82:	f7fc fa57 	bl	8003234 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d8a:	f7fc fa53 	bl	8003234 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e144      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d9c:	4b1a      	ldr	r3, [pc, #104]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f0      	bne.n	8006d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 80a0 	beq.w	8006ef6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dba:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10f      	bne.n	8006de6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60bb      	str	r3, [r7, #8]
 8006dca:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	4a0e      	ldr	r2, [pc, #56]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <HAL_RCC_OscConfig+0x2ac>)
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dde:	60bb      	str	r3, [r7, #8]
 8006de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006de2:	2301      	movs	r3, #1
 8006de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_OscConfig+0x2b8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d121      	bne.n	8006e36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006df2:	4b08      	ldr	r3, [pc, #32]	; (8006e14 <HAL_RCC_OscConfig+0x2b8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a07      	ldr	r2, [pc, #28]	; (8006e14 <HAL_RCC_OscConfig+0x2b8>)
 8006df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dfe:	f7fc fa19 	bl	8003234 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e04:	e011      	b.n	8006e2a <HAL_RCC_OscConfig+0x2ce>
 8006e06:	bf00      	nop
 8006e08:	40023800 	.word	0x40023800
 8006e0c:	42470000 	.word	0x42470000
 8006e10:	42470e80 	.word	0x42470e80
 8006e14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e18:	f7fc fa0c 	bl	8003234 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e0fd      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e2a:	4b81      	ldr	r3, [pc, #516]	; (8007030 <HAL_RCC_OscConfig+0x4d4>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0f0      	beq.n	8006e18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d106      	bne.n	8006e4c <HAL_RCC_OscConfig+0x2f0>
 8006e3e:	4b7d      	ldr	r3, [pc, #500]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e42:	4a7c      	ldr	r2, [pc, #496]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006e44:	f043 0301 	orr.w	r3, r3, #1
 8006e48:	6713      	str	r3, [r2, #112]	; 0x70
 8006e4a:	e01c      	b.n	8006e86 <HAL_RCC_OscConfig+0x32a>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b05      	cmp	r3, #5
 8006e52:	d10c      	bne.n	8006e6e <HAL_RCC_OscConfig+0x312>
 8006e54:	4b77      	ldr	r3, [pc, #476]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e58:	4a76      	ldr	r2, [pc, #472]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006e5a:	f043 0304 	orr.w	r3, r3, #4
 8006e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e60:	4b74      	ldr	r3, [pc, #464]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e64:	4a73      	ldr	r2, [pc, #460]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006e66:	f043 0301 	orr.w	r3, r3, #1
 8006e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6c:	e00b      	b.n	8006e86 <HAL_RCC_OscConfig+0x32a>
 8006e6e:	4b71      	ldr	r3, [pc, #452]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e72:	4a70      	ldr	r2, [pc, #448]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7a:	4b6e      	ldr	r3, [pc, #440]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7e:	4a6d      	ldr	r2, [pc, #436]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006e80:	f023 0304 	bic.w	r3, r3, #4
 8006e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d015      	beq.n	8006eba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e8e:	f7fc f9d1 	bl	8003234 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e94:	e00a      	b.n	8006eac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e96:	f7fc f9cd 	bl	8003234 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e0bc      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eac:	4b61      	ldr	r3, [pc, #388]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0ee      	beq.n	8006e96 <HAL_RCC_OscConfig+0x33a>
 8006eb8:	e014      	b.n	8006ee4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eba:	f7fc f9bb 	bl	8003234 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ec0:	e00a      	b.n	8006ed8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ec2:	f7fc f9b7 	bl	8003234 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e0a6      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ed8:	4b56      	ldr	r3, [pc, #344]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1ee      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d105      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eea:	4b52      	ldr	r3, [pc, #328]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	4a51      	ldr	r2, [pc, #324]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 8092 	beq.w	8007024 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f00:	4b4c      	ldr	r3, [pc, #304]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 030c 	and.w	r3, r3, #12
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d05c      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d141      	bne.n	8006f98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f14:	4b48      	ldr	r3, [pc, #288]	; (8007038 <HAL_RCC_OscConfig+0x4dc>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1a:	f7fc f98b 	bl	8003234 <HAL_GetTick>
 8006f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f22:	f7fc f987 	bl	8003234 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e078      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f34:	4b3f      	ldr	r3, [pc, #252]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1f0      	bne.n	8006f22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69da      	ldr	r2, [r3, #28]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	019b      	lsls	r3, r3, #6
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f56:	085b      	lsrs	r3, r3, #1
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	061b      	lsls	r3, r3, #24
 8006f64:	4933      	ldr	r1, [pc, #204]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f6a:	4b33      	ldr	r3, [pc, #204]	; (8007038 <HAL_RCC_OscConfig+0x4dc>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f70:	f7fc f960 	bl	8003234 <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f78:	f7fc f95c 	bl	8003234 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e04d      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f8a:	4b2a      	ldr	r3, [pc, #168]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0f0      	beq.n	8006f78 <HAL_RCC_OscConfig+0x41c>
 8006f96:	e045      	b.n	8007024 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f98:	4b27      	ldr	r3, [pc, #156]	; (8007038 <HAL_RCC_OscConfig+0x4dc>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f9e:	f7fc f949 	bl	8003234 <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa4:	e008      	b.n	8006fb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fa6:	f7fc f945 	bl	8003234 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d901      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e036      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb8:	4b1e      	ldr	r3, [pc, #120]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1f0      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x44a>
 8006fc4:	e02e      	b.n	8007024 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d101      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e029      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006fd2:	4b18      	ldr	r3, [pc, #96]	; (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d11c      	bne.n	8007020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d115      	bne.n	8007020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007000:	4293      	cmp	r3, r2
 8007002:	d10d      	bne.n	8007020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800700e:	429a      	cmp	r2, r3
 8007010:	d106      	bne.n	8007020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800701c:	429a      	cmp	r2, r3
 800701e:	d001      	beq.n	8007024 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40007000 	.word	0x40007000
 8007034:	40023800 	.word	0x40023800
 8007038:	42470060 	.word	0x42470060

0800703c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0cc      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007050:	4b68      	ldr	r3, [pc, #416]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d90c      	bls.n	8007078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800705e:	4b65      	ldr	r3, [pc, #404]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007066:	4b63      	ldr	r3, [pc, #396]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d001      	beq.n	8007078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0b8      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d020      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007090:	4b59      	ldr	r3, [pc, #356]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	4a58      	ldr	r2, [pc, #352]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800709a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070a8:	4b53      	ldr	r3, [pc, #332]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	4a52      	ldr	r2, [pc, #328]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070b4:	4b50      	ldr	r3, [pc, #320]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	494d      	ldr	r1, [pc, #308]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d044      	beq.n	800715c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d107      	bne.n	80070ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070da:	4b47      	ldr	r3, [pc, #284]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d119      	bne.n	800711a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e07f      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d003      	beq.n	80070fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d107      	bne.n	800710a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fa:	4b3f      	ldr	r3, [pc, #252]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e06f      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800710a:	4b3b      	ldr	r3, [pc, #236]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e067      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800711a:	4b37      	ldr	r3, [pc, #220]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f023 0203 	bic.w	r2, r3, #3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	4934      	ldr	r1, [pc, #208]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007128:	4313      	orrs	r3, r2
 800712a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800712c:	f7fc f882 	bl	8003234 <HAL_GetTick>
 8007130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007132:	e00a      	b.n	800714a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007134:	f7fc f87e 	bl	8003234 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007142:	4293      	cmp	r3, r2
 8007144:	d901      	bls.n	800714a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e04f      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714a:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 020c 	and.w	r2, r3, #12
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	429a      	cmp	r2, r3
 800715a:	d1eb      	bne.n	8007134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800715c:	4b25      	ldr	r3, [pc, #148]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 030f 	and.w	r3, r3, #15
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d20c      	bcs.n	8007184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716a:	4b22      	ldr	r3, [pc, #136]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007172:	4b20      	ldr	r3, [pc, #128]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d001      	beq.n	8007184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e032      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d008      	beq.n	80071a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007190:	4b19      	ldr	r3, [pc, #100]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4916      	ldr	r1, [pc, #88]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d009      	beq.n	80071c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071ae:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	490e      	ldr	r1, [pc, #56]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071c2:	f000 f821 	bl	8007208 <HAL_RCC_GetSysClockFreq>
 80071c6:	4601      	mov	r1, r0
 80071c8:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	091b      	lsrs	r3, r3, #4
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	4a0a      	ldr	r2, [pc, #40]	; (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 80071d4:	5cd3      	ldrb	r3, [r2, r3]
 80071d6:	fa21 f303 	lsr.w	r3, r1, r3
 80071da:	4a09      	ldr	r2, [pc, #36]	; (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80071dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <HAL_RCC_ClockConfig+0x1c8>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fb ffe2 	bl	80031ac <HAL_InitTick>

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	40023c00 	.word	0x40023c00
 80071f8:	40023800 	.word	0x40023800
 80071fc:	0800b9b4 	.word	0x0800b9b4
 8007200:	20000010 	.word	0x20000010
 8007204:	20000014 	.word	0x20000014

08007208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	2300      	movs	r3, #0
 8007218:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800721e:	4b63      	ldr	r3, [pc, #396]	; (80073ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 030c 	and.w	r3, r3, #12
 8007226:	2b04      	cmp	r3, #4
 8007228:	d007      	beq.n	800723a <HAL_RCC_GetSysClockFreq+0x32>
 800722a:	2b08      	cmp	r3, #8
 800722c:	d008      	beq.n	8007240 <HAL_RCC_GetSysClockFreq+0x38>
 800722e:	2b00      	cmp	r3, #0
 8007230:	f040 80b4 	bne.w	800739c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007234:	4b5e      	ldr	r3, [pc, #376]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007236:	60bb      	str	r3, [r7, #8]
       break;
 8007238:	e0b3      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800723a:	4b5e      	ldr	r3, [pc, #376]	; (80073b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800723c:	60bb      	str	r3, [r7, #8]
      break;
 800723e:	e0b0      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007240:	4b5a      	ldr	r3, [pc, #360]	; (80073ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007248:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800724a:	4b58      	ldr	r3, [pc, #352]	; (80073ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d04a      	beq.n	80072ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007256:	4b55      	ldr	r3, [pc, #340]	; (80073ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	099b      	lsrs	r3, r3, #6
 800725c:	f04f 0400 	mov.w	r4, #0
 8007260:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	ea03 0501 	and.w	r5, r3, r1
 800726c:	ea04 0602 	and.w	r6, r4, r2
 8007270:	4629      	mov	r1, r5
 8007272:	4632      	mov	r2, r6
 8007274:	f04f 0300 	mov.w	r3, #0
 8007278:	f04f 0400 	mov.w	r4, #0
 800727c:	0154      	lsls	r4, r2, #5
 800727e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007282:	014b      	lsls	r3, r1, #5
 8007284:	4619      	mov	r1, r3
 8007286:	4622      	mov	r2, r4
 8007288:	1b49      	subs	r1, r1, r5
 800728a:	eb62 0206 	sbc.w	r2, r2, r6
 800728e:	f04f 0300 	mov.w	r3, #0
 8007292:	f04f 0400 	mov.w	r4, #0
 8007296:	0194      	lsls	r4, r2, #6
 8007298:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800729c:	018b      	lsls	r3, r1, #6
 800729e:	1a5b      	subs	r3, r3, r1
 80072a0:	eb64 0402 	sbc.w	r4, r4, r2
 80072a4:	f04f 0100 	mov.w	r1, #0
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	00e2      	lsls	r2, r4, #3
 80072ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80072b2:	00d9      	lsls	r1, r3, #3
 80072b4:	460b      	mov	r3, r1
 80072b6:	4614      	mov	r4, r2
 80072b8:	195b      	adds	r3, r3, r5
 80072ba:	eb44 0406 	adc.w	r4, r4, r6
 80072be:	f04f 0100 	mov.w	r1, #0
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	0262      	lsls	r2, r4, #9
 80072c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80072cc:	0259      	lsls	r1, r3, #9
 80072ce:	460b      	mov	r3, r1
 80072d0:	4614      	mov	r4, r2
 80072d2:	4618      	mov	r0, r3
 80072d4:	4621      	mov	r1, r4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f04f 0400 	mov.w	r4, #0
 80072dc:	461a      	mov	r2, r3
 80072de:	4623      	mov	r3, r4
 80072e0:	f7f9 fcba 	bl	8000c58 <__aeabi_uldivmod>
 80072e4:	4603      	mov	r3, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e049      	b.n	8007380 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072ec:	4b2f      	ldr	r3, [pc, #188]	; (80073ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	099b      	lsrs	r3, r3, #6
 80072f2:	f04f 0400 	mov.w	r4, #0
 80072f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	ea03 0501 	and.w	r5, r3, r1
 8007302:	ea04 0602 	and.w	r6, r4, r2
 8007306:	4629      	mov	r1, r5
 8007308:	4632      	mov	r2, r6
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	f04f 0400 	mov.w	r4, #0
 8007312:	0154      	lsls	r4, r2, #5
 8007314:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007318:	014b      	lsls	r3, r1, #5
 800731a:	4619      	mov	r1, r3
 800731c:	4622      	mov	r2, r4
 800731e:	1b49      	subs	r1, r1, r5
 8007320:	eb62 0206 	sbc.w	r2, r2, r6
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	f04f 0400 	mov.w	r4, #0
 800732c:	0194      	lsls	r4, r2, #6
 800732e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007332:	018b      	lsls	r3, r1, #6
 8007334:	1a5b      	subs	r3, r3, r1
 8007336:	eb64 0402 	sbc.w	r4, r4, r2
 800733a:	f04f 0100 	mov.w	r1, #0
 800733e:	f04f 0200 	mov.w	r2, #0
 8007342:	00e2      	lsls	r2, r4, #3
 8007344:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007348:	00d9      	lsls	r1, r3, #3
 800734a:	460b      	mov	r3, r1
 800734c:	4614      	mov	r4, r2
 800734e:	195b      	adds	r3, r3, r5
 8007350:	eb44 0406 	adc.w	r4, r4, r6
 8007354:	f04f 0100 	mov.w	r1, #0
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	02a2      	lsls	r2, r4, #10
 800735e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007362:	0299      	lsls	r1, r3, #10
 8007364:	460b      	mov	r3, r1
 8007366:	4614      	mov	r4, r2
 8007368:	4618      	mov	r0, r3
 800736a:	4621      	mov	r1, r4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f04f 0400 	mov.w	r4, #0
 8007372:	461a      	mov	r2, r3
 8007374:	4623      	mov	r3, r4
 8007376:	f7f9 fc6f 	bl	8000c58 <__aeabi_uldivmod>
 800737a:	4603      	mov	r3, r0
 800737c:	460c      	mov	r4, r1
 800737e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	0c1b      	lsrs	r3, r3, #16
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	3301      	adds	r3, #1
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	fbb2 f3f3 	udiv	r3, r2, r3
 8007398:	60bb      	str	r3, [r7, #8]
      break;
 800739a:	e002      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800739c:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800739e:	60bb      	str	r3, [r7, #8]
      break;
 80073a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073a2:	68bb      	ldr	r3, [r7, #8]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ac:	40023800 	.word	0x40023800
 80073b0:	00f42400 	.word	0x00f42400
 80073b4:	007a1200 	.word	0x007a1200

080073b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073bc:	4b03      	ldr	r3, [pc, #12]	; (80073cc <HAL_RCC_GetHCLKFreq+0x14>)
 80073be:	681b      	ldr	r3, [r3, #0]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20000010 	.word	0x20000010

080073d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073d4:	f7ff fff0 	bl	80073b8 <HAL_RCC_GetHCLKFreq>
 80073d8:	4601      	mov	r1, r0
 80073da:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	0a9b      	lsrs	r3, r3, #10
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	4a03      	ldr	r2, [pc, #12]	; (80073f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073e6:	5cd3      	ldrb	r3, [r2, r3]
 80073e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40023800 	.word	0x40023800
 80073f4:	0800b9c4 	.word	0x0800b9c4

080073f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073fc:	f7ff ffdc 	bl	80073b8 <HAL_RCC_GetHCLKFreq>
 8007400:	4601      	mov	r1, r0
 8007402:	4b05      	ldr	r3, [pc, #20]	; (8007418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	0b5b      	lsrs	r3, r3, #13
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	4a03      	ldr	r2, [pc, #12]	; (800741c <HAL_RCC_GetPCLK2Freq+0x24>)
 800740e:	5cd3      	ldrb	r3, [r2, r3]
 8007410:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007414:	4618      	mov	r0, r3
 8007416:	bd80      	pop	{r7, pc}
 8007418:	40023800 	.word	0x40023800
 800741c:	0800b9c4 	.word	0x0800b9c4

08007420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e03f      	b.n	80074b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7fb fd8a 	bl	8002f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2224      	movs	r2, #36	; 0x24
 8007450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f829 	bl	80074bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695a      	ldr	r2, [r3, #20]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80074fe:	f023 030c 	bic.w	r3, r3, #12
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6812      	ldr	r2, [r2, #0]
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	430b      	orrs	r3, r1
 800750a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800752a:	f040 818b 	bne.w	8007844 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4ac1      	ldr	r2, [pc, #772]	; (8007838 <UART_SetConfig+0x37c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d005      	beq.n	8007544 <UART_SetConfig+0x88>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4abf      	ldr	r2, [pc, #764]	; (800783c <UART_SetConfig+0x380>)
 800753e:	4293      	cmp	r3, r2
 8007540:	f040 80bd 	bne.w	80076be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007544:	f7ff ff58 	bl	80073f8 <HAL_RCC_GetPCLK2Freq>
 8007548:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	461d      	mov	r5, r3
 800754e:	f04f 0600 	mov.w	r6, #0
 8007552:	46a8      	mov	r8, r5
 8007554:	46b1      	mov	r9, r6
 8007556:	eb18 0308 	adds.w	r3, r8, r8
 800755a:	eb49 0409 	adc.w	r4, r9, r9
 800755e:	4698      	mov	r8, r3
 8007560:	46a1      	mov	r9, r4
 8007562:	eb18 0805 	adds.w	r8, r8, r5
 8007566:	eb49 0906 	adc.w	r9, r9, r6
 800756a:	f04f 0100 	mov.w	r1, #0
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007576:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800757a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800757e:	4688      	mov	r8, r1
 8007580:	4691      	mov	r9, r2
 8007582:	eb18 0005 	adds.w	r0, r8, r5
 8007586:	eb49 0106 	adc.w	r1, r9, r6
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	461d      	mov	r5, r3
 8007590:	f04f 0600 	mov.w	r6, #0
 8007594:	196b      	adds	r3, r5, r5
 8007596:	eb46 0406 	adc.w	r4, r6, r6
 800759a:	461a      	mov	r2, r3
 800759c:	4623      	mov	r3, r4
 800759e:	f7f9 fb5b 	bl	8000c58 <__aeabi_uldivmod>
 80075a2:	4603      	mov	r3, r0
 80075a4:	460c      	mov	r4, r1
 80075a6:	461a      	mov	r2, r3
 80075a8:	4ba5      	ldr	r3, [pc, #660]	; (8007840 <UART_SetConfig+0x384>)
 80075aa:	fba3 2302 	umull	r2, r3, r3, r2
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	461d      	mov	r5, r3
 80075b8:	f04f 0600 	mov.w	r6, #0
 80075bc:	46a9      	mov	r9, r5
 80075be:	46b2      	mov	sl, r6
 80075c0:	eb19 0309 	adds.w	r3, r9, r9
 80075c4:	eb4a 040a 	adc.w	r4, sl, sl
 80075c8:	4699      	mov	r9, r3
 80075ca:	46a2      	mov	sl, r4
 80075cc:	eb19 0905 	adds.w	r9, r9, r5
 80075d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80075d4:	f04f 0100 	mov.w	r1, #0
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075e8:	4689      	mov	r9, r1
 80075ea:	4692      	mov	sl, r2
 80075ec:	eb19 0005 	adds.w	r0, r9, r5
 80075f0:	eb4a 0106 	adc.w	r1, sl, r6
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	461d      	mov	r5, r3
 80075fa:	f04f 0600 	mov.w	r6, #0
 80075fe:	196b      	adds	r3, r5, r5
 8007600:	eb46 0406 	adc.w	r4, r6, r6
 8007604:	461a      	mov	r2, r3
 8007606:	4623      	mov	r3, r4
 8007608:	f7f9 fb26 	bl	8000c58 <__aeabi_uldivmod>
 800760c:	4603      	mov	r3, r0
 800760e:	460c      	mov	r4, r1
 8007610:	461a      	mov	r2, r3
 8007612:	4b8b      	ldr	r3, [pc, #556]	; (8007840 <UART_SetConfig+0x384>)
 8007614:	fba3 1302 	umull	r1, r3, r3, r2
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	2164      	movs	r1, #100	; 0x64
 800761c:	fb01 f303 	mul.w	r3, r1, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	3332      	adds	r3, #50	; 0x32
 8007626:	4a86      	ldr	r2, [pc, #536]	; (8007840 <UART_SetConfig+0x384>)
 8007628:	fba2 2303 	umull	r2, r3, r2, r3
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007634:	4498      	add	r8, r3
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	461d      	mov	r5, r3
 800763a:	f04f 0600 	mov.w	r6, #0
 800763e:	46a9      	mov	r9, r5
 8007640:	46b2      	mov	sl, r6
 8007642:	eb19 0309 	adds.w	r3, r9, r9
 8007646:	eb4a 040a 	adc.w	r4, sl, sl
 800764a:	4699      	mov	r9, r3
 800764c:	46a2      	mov	sl, r4
 800764e:	eb19 0905 	adds.w	r9, r9, r5
 8007652:	eb4a 0a06 	adc.w	sl, sl, r6
 8007656:	f04f 0100 	mov.w	r1, #0
 800765a:	f04f 0200 	mov.w	r2, #0
 800765e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007662:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007666:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800766a:	4689      	mov	r9, r1
 800766c:	4692      	mov	sl, r2
 800766e:	eb19 0005 	adds.w	r0, r9, r5
 8007672:	eb4a 0106 	adc.w	r1, sl, r6
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	461d      	mov	r5, r3
 800767c:	f04f 0600 	mov.w	r6, #0
 8007680:	196b      	adds	r3, r5, r5
 8007682:	eb46 0406 	adc.w	r4, r6, r6
 8007686:	461a      	mov	r2, r3
 8007688:	4623      	mov	r3, r4
 800768a:	f7f9 fae5 	bl	8000c58 <__aeabi_uldivmod>
 800768e:	4603      	mov	r3, r0
 8007690:	460c      	mov	r4, r1
 8007692:	461a      	mov	r2, r3
 8007694:	4b6a      	ldr	r3, [pc, #424]	; (8007840 <UART_SetConfig+0x384>)
 8007696:	fba3 1302 	umull	r1, r3, r3, r2
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	2164      	movs	r1, #100	; 0x64
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	3332      	adds	r3, #50	; 0x32
 80076a8:	4a65      	ldr	r2, [pc, #404]	; (8007840 <UART_SetConfig+0x384>)
 80076aa:	fba2 2303 	umull	r2, r3, r2, r3
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	f003 0207 	and.w	r2, r3, #7
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4442      	add	r2, r8
 80076ba:	609a      	str	r2, [r3, #8]
 80076bc:	e26f      	b.n	8007b9e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076be:	f7ff fe87 	bl	80073d0 <HAL_RCC_GetPCLK1Freq>
 80076c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	461d      	mov	r5, r3
 80076c8:	f04f 0600 	mov.w	r6, #0
 80076cc:	46a8      	mov	r8, r5
 80076ce:	46b1      	mov	r9, r6
 80076d0:	eb18 0308 	adds.w	r3, r8, r8
 80076d4:	eb49 0409 	adc.w	r4, r9, r9
 80076d8:	4698      	mov	r8, r3
 80076da:	46a1      	mov	r9, r4
 80076dc:	eb18 0805 	adds.w	r8, r8, r5
 80076e0:	eb49 0906 	adc.w	r9, r9, r6
 80076e4:	f04f 0100 	mov.w	r1, #0
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80076f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80076f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80076f8:	4688      	mov	r8, r1
 80076fa:	4691      	mov	r9, r2
 80076fc:	eb18 0005 	adds.w	r0, r8, r5
 8007700:	eb49 0106 	adc.w	r1, r9, r6
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	461d      	mov	r5, r3
 800770a:	f04f 0600 	mov.w	r6, #0
 800770e:	196b      	adds	r3, r5, r5
 8007710:	eb46 0406 	adc.w	r4, r6, r6
 8007714:	461a      	mov	r2, r3
 8007716:	4623      	mov	r3, r4
 8007718:	f7f9 fa9e 	bl	8000c58 <__aeabi_uldivmod>
 800771c:	4603      	mov	r3, r0
 800771e:	460c      	mov	r4, r1
 8007720:	461a      	mov	r2, r3
 8007722:	4b47      	ldr	r3, [pc, #284]	; (8007840 <UART_SetConfig+0x384>)
 8007724:	fba3 2302 	umull	r2, r3, r3, r2
 8007728:	095b      	lsrs	r3, r3, #5
 800772a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	461d      	mov	r5, r3
 8007732:	f04f 0600 	mov.w	r6, #0
 8007736:	46a9      	mov	r9, r5
 8007738:	46b2      	mov	sl, r6
 800773a:	eb19 0309 	adds.w	r3, r9, r9
 800773e:	eb4a 040a 	adc.w	r4, sl, sl
 8007742:	4699      	mov	r9, r3
 8007744:	46a2      	mov	sl, r4
 8007746:	eb19 0905 	adds.w	r9, r9, r5
 800774a:	eb4a 0a06 	adc.w	sl, sl, r6
 800774e:	f04f 0100 	mov.w	r1, #0
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800775a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800775e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007762:	4689      	mov	r9, r1
 8007764:	4692      	mov	sl, r2
 8007766:	eb19 0005 	adds.w	r0, r9, r5
 800776a:	eb4a 0106 	adc.w	r1, sl, r6
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	461d      	mov	r5, r3
 8007774:	f04f 0600 	mov.w	r6, #0
 8007778:	196b      	adds	r3, r5, r5
 800777a:	eb46 0406 	adc.w	r4, r6, r6
 800777e:	461a      	mov	r2, r3
 8007780:	4623      	mov	r3, r4
 8007782:	f7f9 fa69 	bl	8000c58 <__aeabi_uldivmod>
 8007786:	4603      	mov	r3, r0
 8007788:	460c      	mov	r4, r1
 800778a:	461a      	mov	r2, r3
 800778c:	4b2c      	ldr	r3, [pc, #176]	; (8007840 <UART_SetConfig+0x384>)
 800778e:	fba3 1302 	umull	r1, r3, r3, r2
 8007792:	095b      	lsrs	r3, r3, #5
 8007794:	2164      	movs	r1, #100	; 0x64
 8007796:	fb01 f303 	mul.w	r3, r1, r3
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	3332      	adds	r3, #50	; 0x32
 80077a0:	4a27      	ldr	r2, [pc, #156]	; (8007840 <UART_SetConfig+0x384>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077ae:	4498      	add	r8, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	461d      	mov	r5, r3
 80077b4:	f04f 0600 	mov.w	r6, #0
 80077b8:	46a9      	mov	r9, r5
 80077ba:	46b2      	mov	sl, r6
 80077bc:	eb19 0309 	adds.w	r3, r9, r9
 80077c0:	eb4a 040a 	adc.w	r4, sl, sl
 80077c4:	4699      	mov	r9, r3
 80077c6:	46a2      	mov	sl, r4
 80077c8:	eb19 0905 	adds.w	r9, r9, r5
 80077cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80077d0:	f04f 0100 	mov.w	r1, #0
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077e4:	4689      	mov	r9, r1
 80077e6:	4692      	mov	sl, r2
 80077e8:	eb19 0005 	adds.w	r0, r9, r5
 80077ec:	eb4a 0106 	adc.w	r1, sl, r6
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	461d      	mov	r5, r3
 80077f6:	f04f 0600 	mov.w	r6, #0
 80077fa:	196b      	adds	r3, r5, r5
 80077fc:	eb46 0406 	adc.w	r4, r6, r6
 8007800:	461a      	mov	r2, r3
 8007802:	4623      	mov	r3, r4
 8007804:	f7f9 fa28 	bl	8000c58 <__aeabi_uldivmod>
 8007808:	4603      	mov	r3, r0
 800780a:	460c      	mov	r4, r1
 800780c:	461a      	mov	r2, r3
 800780e:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <UART_SetConfig+0x384>)
 8007810:	fba3 1302 	umull	r1, r3, r3, r2
 8007814:	095b      	lsrs	r3, r3, #5
 8007816:	2164      	movs	r1, #100	; 0x64
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	3332      	adds	r3, #50	; 0x32
 8007822:	4a07      	ldr	r2, [pc, #28]	; (8007840 <UART_SetConfig+0x384>)
 8007824:	fba2 2303 	umull	r2, r3, r2, r3
 8007828:	095b      	lsrs	r3, r3, #5
 800782a:	f003 0207 	and.w	r2, r3, #7
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4442      	add	r2, r8
 8007834:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007836:	e1b2      	b.n	8007b9e <UART_SetConfig+0x6e2>
 8007838:	40011000 	.word	0x40011000
 800783c:	40011400 	.word	0x40011400
 8007840:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4ad7      	ldr	r2, [pc, #860]	; (8007ba8 <UART_SetConfig+0x6ec>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d005      	beq.n	800785a <UART_SetConfig+0x39e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4ad6      	ldr	r2, [pc, #856]	; (8007bac <UART_SetConfig+0x6f0>)
 8007854:	4293      	cmp	r3, r2
 8007856:	f040 80d1 	bne.w	80079fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800785a:	f7ff fdcd 	bl	80073f8 <HAL_RCC_GetPCLK2Freq>
 800785e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	469a      	mov	sl, r3
 8007864:	f04f 0b00 	mov.w	fp, #0
 8007868:	46d0      	mov	r8, sl
 800786a:	46d9      	mov	r9, fp
 800786c:	eb18 0308 	adds.w	r3, r8, r8
 8007870:	eb49 0409 	adc.w	r4, r9, r9
 8007874:	4698      	mov	r8, r3
 8007876:	46a1      	mov	r9, r4
 8007878:	eb18 080a 	adds.w	r8, r8, sl
 800787c:	eb49 090b 	adc.w	r9, r9, fp
 8007880:	f04f 0100 	mov.w	r1, #0
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800788c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007890:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007894:	4688      	mov	r8, r1
 8007896:	4691      	mov	r9, r2
 8007898:	eb1a 0508 	adds.w	r5, sl, r8
 800789c:	eb4b 0609 	adc.w	r6, fp, r9
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	4619      	mov	r1, r3
 80078a6:	f04f 0200 	mov.w	r2, #0
 80078aa:	f04f 0300 	mov.w	r3, #0
 80078ae:	f04f 0400 	mov.w	r4, #0
 80078b2:	0094      	lsls	r4, r2, #2
 80078b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078b8:	008b      	lsls	r3, r1, #2
 80078ba:	461a      	mov	r2, r3
 80078bc:	4623      	mov	r3, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	4631      	mov	r1, r6
 80078c2:	f7f9 f9c9 	bl	8000c58 <__aeabi_uldivmod>
 80078c6:	4603      	mov	r3, r0
 80078c8:	460c      	mov	r4, r1
 80078ca:	461a      	mov	r2, r3
 80078cc:	4bb8      	ldr	r3, [pc, #736]	; (8007bb0 <UART_SetConfig+0x6f4>)
 80078ce:	fba3 2302 	umull	r2, r3, r3, r2
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	469b      	mov	fp, r3
 80078dc:	f04f 0c00 	mov.w	ip, #0
 80078e0:	46d9      	mov	r9, fp
 80078e2:	46e2      	mov	sl, ip
 80078e4:	eb19 0309 	adds.w	r3, r9, r9
 80078e8:	eb4a 040a 	adc.w	r4, sl, sl
 80078ec:	4699      	mov	r9, r3
 80078ee:	46a2      	mov	sl, r4
 80078f0:	eb19 090b 	adds.w	r9, r9, fp
 80078f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078f8:	f04f 0100 	mov.w	r1, #0
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800790c:	4689      	mov	r9, r1
 800790e:	4692      	mov	sl, r2
 8007910:	eb1b 0509 	adds.w	r5, fp, r9
 8007914:	eb4c 060a 	adc.w	r6, ip, sl
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	4619      	mov	r1, r3
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	f04f 0400 	mov.w	r4, #0
 800792a:	0094      	lsls	r4, r2, #2
 800792c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007930:	008b      	lsls	r3, r1, #2
 8007932:	461a      	mov	r2, r3
 8007934:	4623      	mov	r3, r4
 8007936:	4628      	mov	r0, r5
 8007938:	4631      	mov	r1, r6
 800793a:	f7f9 f98d 	bl	8000c58 <__aeabi_uldivmod>
 800793e:	4603      	mov	r3, r0
 8007940:	460c      	mov	r4, r1
 8007942:	461a      	mov	r2, r3
 8007944:	4b9a      	ldr	r3, [pc, #616]	; (8007bb0 <UART_SetConfig+0x6f4>)
 8007946:	fba3 1302 	umull	r1, r3, r3, r2
 800794a:	095b      	lsrs	r3, r3, #5
 800794c:	2164      	movs	r1, #100	; 0x64
 800794e:	fb01 f303 	mul.w	r3, r1, r3
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	3332      	adds	r3, #50	; 0x32
 8007958:	4a95      	ldr	r2, [pc, #596]	; (8007bb0 <UART_SetConfig+0x6f4>)
 800795a:	fba2 2303 	umull	r2, r3, r2, r3
 800795e:	095b      	lsrs	r3, r3, #5
 8007960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007964:	4498      	add	r8, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	469b      	mov	fp, r3
 800796a:	f04f 0c00 	mov.w	ip, #0
 800796e:	46d9      	mov	r9, fp
 8007970:	46e2      	mov	sl, ip
 8007972:	eb19 0309 	adds.w	r3, r9, r9
 8007976:	eb4a 040a 	adc.w	r4, sl, sl
 800797a:	4699      	mov	r9, r3
 800797c:	46a2      	mov	sl, r4
 800797e:	eb19 090b 	adds.w	r9, r9, fp
 8007982:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007986:	f04f 0100 	mov.w	r1, #0
 800798a:	f04f 0200 	mov.w	r2, #0
 800798e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007992:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007996:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800799a:	4689      	mov	r9, r1
 800799c:	4692      	mov	sl, r2
 800799e:	eb1b 0509 	adds.w	r5, fp, r9
 80079a2:	eb4c 060a 	adc.w	r6, ip, sl
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	4619      	mov	r1, r3
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	f04f 0400 	mov.w	r4, #0
 80079b8:	0094      	lsls	r4, r2, #2
 80079ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079be:	008b      	lsls	r3, r1, #2
 80079c0:	461a      	mov	r2, r3
 80079c2:	4623      	mov	r3, r4
 80079c4:	4628      	mov	r0, r5
 80079c6:	4631      	mov	r1, r6
 80079c8:	f7f9 f946 	bl	8000c58 <__aeabi_uldivmod>
 80079cc:	4603      	mov	r3, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	461a      	mov	r2, r3
 80079d2:	4b77      	ldr	r3, [pc, #476]	; (8007bb0 <UART_SetConfig+0x6f4>)
 80079d4:	fba3 1302 	umull	r1, r3, r3, r2
 80079d8:	095b      	lsrs	r3, r3, #5
 80079da:	2164      	movs	r1, #100	; 0x64
 80079dc:	fb01 f303 	mul.w	r3, r1, r3
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	3332      	adds	r3, #50	; 0x32
 80079e6:	4a72      	ldr	r2, [pc, #456]	; (8007bb0 <UART_SetConfig+0x6f4>)
 80079e8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ec:	095b      	lsrs	r3, r3, #5
 80079ee:	f003 020f 	and.w	r2, r3, #15
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4442      	add	r2, r8
 80079f8:	609a      	str	r2, [r3, #8]
 80079fa:	e0d0      	b.n	8007b9e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80079fc:	f7ff fce8 	bl	80073d0 <HAL_RCC_GetPCLK1Freq>
 8007a00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	469a      	mov	sl, r3
 8007a06:	f04f 0b00 	mov.w	fp, #0
 8007a0a:	46d0      	mov	r8, sl
 8007a0c:	46d9      	mov	r9, fp
 8007a0e:	eb18 0308 	adds.w	r3, r8, r8
 8007a12:	eb49 0409 	adc.w	r4, r9, r9
 8007a16:	4698      	mov	r8, r3
 8007a18:	46a1      	mov	r9, r4
 8007a1a:	eb18 080a 	adds.w	r8, r8, sl
 8007a1e:	eb49 090b 	adc.w	r9, r9, fp
 8007a22:	f04f 0100 	mov.w	r1, #0
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a36:	4688      	mov	r8, r1
 8007a38:	4691      	mov	r9, r2
 8007a3a:	eb1a 0508 	adds.w	r5, sl, r8
 8007a3e:	eb4b 0609 	adc.w	r6, fp, r9
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	4619      	mov	r1, r3
 8007a48:	f04f 0200 	mov.w	r2, #0
 8007a4c:	f04f 0300 	mov.w	r3, #0
 8007a50:	f04f 0400 	mov.w	r4, #0
 8007a54:	0094      	lsls	r4, r2, #2
 8007a56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a5a:	008b      	lsls	r3, r1, #2
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4623      	mov	r3, r4
 8007a60:	4628      	mov	r0, r5
 8007a62:	4631      	mov	r1, r6
 8007a64:	f7f9 f8f8 	bl	8000c58 <__aeabi_uldivmod>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	4b50      	ldr	r3, [pc, #320]	; (8007bb0 <UART_SetConfig+0x6f4>)
 8007a70:	fba3 2302 	umull	r2, r3, r3, r2
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	469b      	mov	fp, r3
 8007a7e:	f04f 0c00 	mov.w	ip, #0
 8007a82:	46d9      	mov	r9, fp
 8007a84:	46e2      	mov	sl, ip
 8007a86:	eb19 0309 	adds.w	r3, r9, r9
 8007a8a:	eb4a 040a 	adc.w	r4, sl, sl
 8007a8e:	4699      	mov	r9, r3
 8007a90:	46a2      	mov	sl, r4
 8007a92:	eb19 090b 	adds.w	r9, r9, fp
 8007a96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a9a:	f04f 0100 	mov.w	r1, #0
 8007a9e:	f04f 0200 	mov.w	r2, #0
 8007aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007aa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007aaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007aae:	4689      	mov	r9, r1
 8007ab0:	4692      	mov	sl, r2
 8007ab2:	eb1b 0509 	adds.w	r5, fp, r9
 8007ab6:	eb4c 060a 	adc.w	r6, ip, sl
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	f04f 0200 	mov.w	r2, #0
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	f04f 0400 	mov.w	r4, #0
 8007acc:	0094      	lsls	r4, r2, #2
 8007ace:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ad2:	008b      	lsls	r3, r1, #2
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	4623      	mov	r3, r4
 8007ad8:	4628      	mov	r0, r5
 8007ada:	4631      	mov	r1, r6
 8007adc:	f7f9 f8bc 	bl	8000c58 <__aeabi_uldivmod>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4b32      	ldr	r3, [pc, #200]	; (8007bb0 <UART_SetConfig+0x6f4>)
 8007ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8007aec:	095b      	lsrs	r3, r3, #5
 8007aee:	2164      	movs	r1, #100	; 0x64
 8007af0:	fb01 f303 	mul.w	r3, r1, r3
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	3332      	adds	r3, #50	; 0x32
 8007afa:	4a2d      	ldr	r2, [pc, #180]	; (8007bb0 <UART_SetConfig+0x6f4>)
 8007afc:	fba2 2303 	umull	r2, r3, r2, r3
 8007b00:	095b      	lsrs	r3, r3, #5
 8007b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b06:	4498      	add	r8, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	469b      	mov	fp, r3
 8007b0c:	f04f 0c00 	mov.w	ip, #0
 8007b10:	46d9      	mov	r9, fp
 8007b12:	46e2      	mov	sl, ip
 8007b14:	eb19 0309 	adds.w	r3, r9, r9
 8007b18:	eb4a 040a 	adc.w	r4, sl, sl
 8007b1c:	4699      	mov	r9, r3
 8007b1e:	46a2      	mov	sl, r4
 8007b20:	eb19 090b 	adds.w	r9, r9, fp
 8007b24:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b28:	f04f 0100 	mov.w	r1, #0
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b3c:	4689      	mov	r9, r1
 8007b3e:	4692      	mov	sl, r2
 8007b40:	eb1b 0509 	adds.w	r5, fp, r9
 8007b44:	eb4c 060a 	adc.w	r6, ip, sl
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	f04f 0300 	mov.w	r3, #0
 8007b56:	f04f 0400 	mov.w	r4, #0
 8007b5a:	0094      	lsls	r4, r2, #2
 8007b5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b60:	008b      	lsls	r3, r1, #2
 8007b62:	461a      	mov	r2, r3
 8007b64:	4623      	mov	r3, r4
 8007b66:	4628      	mov	r0, r5
 8007b68:	4631      	mov	r1, r6
 8007b6a:	f7f9 f875 	bl	8000c58 <__aeabi_uldivmod>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	460c      	mov	r4, r1
 8007b72:	461a      	mov	r2, r3
 8007b74:	4b0e      	ldr	r3, [pc, #56]	; (8007bb0 <UART_SetConfig+0x6f4>)
 8007b76:	fba3 1302 	umull	r1, r3, r3, r2
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	2164      	movs	r1, #100	; 0x64
 8007b7e:	fb01 f303 	mul.w	r3, r1, r3
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	3332      	adds	r3, #50	; 0x32
 8007b88:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <UART_SetConfig+0x6f4>)
 8007b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	f003 020f 	and.w	r2, r3, #15
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4442      	add	r2, r8
 8007b9a:	609a      	str	r2, [r3, #8]
}
 8007b9c:	e7ff      	b.n	8007b9e <UART_SetConfig+0x6e2>
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba8:	40011000 	.word	0x40011000
 8007bac:	40011400 	.word	0x40011400
 8007bb0:	51eb851f 	.word	0x51eb851f

08007bb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bc6:	2b84      	cmp	r3, #132	; 0x84
 8007bc8:	d005      	beq.n	8007bd6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007bca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	3303      	adds	r3, #3
 8007bd4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bea:	f3ef 8305 	mrs	r3, IPSR
 8007bee:	607b      	str	r3, [r7, #4]
  return(result);
 8007bf0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bf14      	ite	ne
 8007bf6:	2301      	movne	r3, #1
 8007bf8:	2300      	moveq	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c0c:	f000 fd12 	bl	8008634 <vTaskStartScheduler>
  
  return osOK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c18:	b089      	sub	sp, #36	; 0x24
 8007c1a:	af04      	add	r7, sp, #16
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d020      	beq.n	8007c6a <osThreadCreate+0x54>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01c      	beq.n	8007c6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685c      	ldr	r4, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681d      	ldr	r5, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691e      	ldr	r6, [r3, #16]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff ffb6 	bl	8007bb4 <makeFreeRtosPriority>
 8007c48:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c52:	9202      	str	r2, [sp, #8]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	9100      	str	r1, [sp, #0]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 f91c 	bl	8007e9c <xTaskCreateStatic>
 8007c64:	4603      	mov	r3, r0
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	e01c      	b.n	8007ca4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685c      	ldr	r4, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c76:	b29e      	uxth	r6, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff ff98 	bl	8007bb4 <makeFreeRtosPriority>
 8007c84:	4602      	mov	r2, r0
 8007c86:	f107 030c 	add.w	r3, r7, #12
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	9200      	str	r2, [sp, #0]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	4632      	mov	r2, r6
 8007c92:	4629      	mov	r1, r5
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 f95a 	bl	8007f4e <xTaskCreate>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d001      	beq.n	8007ca4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e000      	b.n	8007ca6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <osDelay+0x16>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	e000      	b.n	8007cc6 <osDelay+0x18>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fae8 	bl	800829c <vTaskDelay>
  
  return osOK;
 8007ccc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fb10 	bl	8008304 <vTaskSuspend>
  
  return osOK;
 8007ce4:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8007cf8:	f7ff ff74 	bl	8007be4 <inHandlerMode>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00e      	beq.n	8007d20 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fc26 	bl	8008554 <xTaskResumeFromISR>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d10b      	bne.n	8007d26 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8007d0e:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <osThreadResume+0x40>)
 8007d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	e002      	b.n	8007d26 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fbbb 	bl	800849c <vTaskResume>
  }
  return osOK;
 8007d26:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	e000ed04 	.word	0xe000ed04

08007d34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f103 0208 	add.w	r2, r3, #8
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f103 0208 	add.w	r2, r3, #8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f103 0208 	add.w	r2, r3, #8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
}
 8007dca:	bf00      	nop
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dec:	d103      	bne.n	8007df6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	e00c      	b.n	8007e10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3308      	adds	r3, #8
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	e002      	b.n	8007e04 <vListInsert+0x2e>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d2f6      	bcs.n	8007dfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	601a      	str	r2, [r3, #0]
}
 8007e3c:	bf00      	nop
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6892      	ldr	r2, [r2, #8]
 8007e5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6852      	ldr	r2, [r2, #4]
 8007e68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d103      	bne.n	8007e7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	1e5a      	subs	r2, r3, #1
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08e      	sub	sp, #56	; 0x38
 8007ea0:	af04      	add	r7, sp, #16
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d109      	bne.n	8007ec4 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	623b      	str	r3, [r7, #32]
 8007ec2:	e7fe      	b.n	8007ec2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d109      	bne.n	8007ede <xTaskCreateStatic+0x42>
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e7fe      	b.n	8007edc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ede:	2354      	movs	r3, #84	; 0x54
 8007ee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b54      	cmp	r3, #84	; 0x54
 8007ee6:	d009      	beq.n	8007efc <xTaskCreateStatic+0x60>
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	e7fe      	b.n	8007efa <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d01e      	beq.n	8007f40 <xTaskCreateStatic+0xa4>
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01b      	beq.n	8007f40 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	2202      	movs	r2, #2
 8007f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9303      	str	r3, [sp, #12]
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	9302      	str	r3, [sp, #8]
 8007f22:	f107 0314 	add.w	r3, r7, #20
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	68b9      	ldr	r1, [r7, #8]
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f850 	bl	8007fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f3a:	f000 f8cb 	bl	80080d4 <prvAddNewTaskToReadyList>
 8007f3e:	e001      	b.n	8007f44 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f44:	697b      	ldr	r3, [r7, #20]
	}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3728      	adds	r7, #40	; 0x28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b08c      	sub	sp, #48	; 0x30
 8007f52:	af04      	add	r7, sp, #16
 8007f54:	60f8      	str	r0, [r7, #12]
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	603b      	str	r3, [r7, #0]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f5e:	88fb      	ldrh	r3, [r7, #6]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 f934 	bl	80091d0 <pvPortMalloc>
 8007f68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00e      	beq.n	8007f8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007f70:	2054      	movs	r0, #84	; 0x54
 8007f72:	f001 f92d 	bl	80091d0 <pvPortMalloc>
 8007f76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30
 8007f84:	e005      	b.n	8007f92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f86:	6978      	ldr	r0, [r7, #20]
 8007f88:	f001 f9e4 	bl	8009354 <vPortFree>
 8007f8c:	e001      	b.n	8007f92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d017      	beq.n	8007fc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fa0:	88fa      	ldrh	r2, [r7, #6]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9303      	str	r3, [sp, #12]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	9302      	str	r3, [sp, #8]
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 f80e 	bl	8007fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fbc:	69f8      	ldr	r0, [r7, #28]
 8007fbe:	f000 f889 	bl	80080d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	e002      	b.n	8007fce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fce:	69bb      	ldr	r3, [r7, #24]
	}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3720      	adds	r7, #32
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <prvInitialiseNewTask+0x46>
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e7fe      	b.n	800801c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800801e:	2300      	movs	r3, #0
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	e012      	b.n	800804a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	4413      	add	r3, r2
 800802a:	7819      	ldrb	r1, [r3, #0]
 800802c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	4413      	add	r3, r2
 8008032:	3334      	adds	r3, #52	; 0x34
 8008034:	460a      	mov	r2, r1
 8008036:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	4413      	add	r3, r2
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d006      	beq.n	8008052 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	3301      	adds	r3, #1
 8008048:	61fb      	str	r3, [r7, #28]
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	2b0f      	cmp	r3, #15
 800804e:	d9e9      	bls.n	8008024 <prvInitialiseNewTask+0x4c>
 8008050:	e000      	b.n	8008054 <prvInitialiseNewTask+0x7c>
		{
			break;
 8008052:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	2b06      	cmp	r3, #6
 8008060:	d901      	bls.n	8008066 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008062:	2306      	movs	r3, #6
 8008064:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800806a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008070:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2200      	movs	r2, #0
 8008076:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	3304      	adds	r3, #4
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff fe79 	bl	8007d74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	3318      	adds	r3, #24
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff fe74 	bl	8007d74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008090:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	f1c3 0207 	rsb	r2, r3, #7
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	2200      	movs	r2, #0
 80080a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	69b8      	ldr	r0, [r7, #24]
 80080b6:	f000 fe47 	bl	8008d48 <pxPortInitialiseStack>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080cc:	bf00      	nop
 80080ce:	3720      	adds	r7, #32
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080dc:	f000 ff5e 	bl	8008f9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080e0:	4b2a      	ldr	r3, [pc, #168]	; (800818c <prvAddNewTaskToReadyList+0xb8>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3301      	adds	r3, #1
 80080e6:	4a29      	ldr	r2, [pc, #164]	; (800818c <prvAddNewTaskToReadyList+0xb8>)
 80080e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080ea:	4b29      	ldr	r3, [pc, #164]	; (8008190 <prvAddNewTaskToReadyList+0xbc>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d109      	bne.n	8008106 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080f2:	4a27      	ldr	r2, [pc, #156]	; (8008190 <prvAddNewTaskToReadyList+0xbc>)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080f8:	4b24      	ldr	r3, [pc, #144]	; (800818c <prvAddNewTaskToReadyList+0xb8>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d110      	bne.n	8008122 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008100:	f000 fcde 	bl	8008ac0 <prvInitialiseTaskLists>
 8008104:	e00d      	b.n	8008122 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008106:	4b23      	ldr	r3, [pc, #140]	; (8008194 <prvAddNewTaskToReadyList+0xc0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d109      	bne.n	8008122 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800810e:	4b20      	ldr	r3, [pc, #128]	; (8008190 <prvAddNewTaskToReadyList+0xbc>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	429a      	cmp	r2, r3
 800811a:	d802      	bhi.n	8008122 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800811c:	4a1c      	ldr	r2, [pc, #112]	; (8008190 <prvAddNewTaskToReadyList+0xbc>)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008122:	4b1d      	ldr	r3, [pc, #116]	; (8008198 <prvAddNewTaskToReadyList+0xc4>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3301      	adds	r3, #1
 8008128:	4a1b      	ldr	r2, [pc, #108]	; (8008198 <prvAddNewTaskToReadyList+0xc4>)
 800812a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	2201      	movs	r2, #1
 8008132:	409a      	lsls	r2, r3
 8008134:	4b19      	ldr	r3, [pc, #100]	; (800819c <prvAddNewTaskToReadyList+0xc8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4313      	orrs	r3, r2
 800813a:	4a18      	ldr	r2, [pc, #96]	; (800819c <prvAddNewTaskToReadyList+0xc8>)
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4a15      	ldr	r2, [pc, #84]	; (80081a0 <prvAddNewTaskToReadyList+0xcc>)
 800814c:	441a      	add	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f7ff fe1a 	bl	8007d8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800815a:	f000 ff4d 	bl	8008ff8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800815e:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <prvAddNewTaskToReadyList+0xc0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00e      	beq.n	8008184 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008166:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <prvAddNewTaskToReadyList+0xbc>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	429a      	cmp	r2, r3
 8008172:	d207      	bcs.n	8008184 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008174:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <prvAddNewTaskToReadyList+0xd0>)
 8008176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	2000058c 	.word	0x2000058c
 8008190:	2000048c 	.word	0x2000048c
 8008194:	20000598 	.word	0x20000598
 8008198:	200005a8 	.word	0x200005a8
 800819c:	20000594 	.word	0x20000594
 80081a0:	20000490 	.word	0x20000490
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d109      	bne.n	80081d0 <vTaskDelayUntil+0x28>
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	e7fe      	b.n	80081ce <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <vTaskDelayUntil+0x42>
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	e7fe      	b.n	80081e8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80081ea:	4b29      	ldr	r3, [pc, #164]	; (8008290 <vTaskDelayUntil+0xe8>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d009      	beq.n	8008206 <vTaskDelayUntil+0x5e>
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e7fe      	b.n	8008204 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8008206:	f000 fa73 	bl	80086f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800820a:	4b22      	ldr	r3, [pc, #136]	; (8008294 <vTaskDelayUntil+0xec>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	4413      	add	r3, r2
 8008218:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6a3a      	ldr	r2, [r7, #32]
 8008220:	429a      	cmp	r2, r3
 8008222:	d20b      	bcs.n	800823c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69fa      	ldr	r2, [r7, #28]
 800822a:	429a      	cmp	r2, r3
 800822c:	d211      	bcs.n	8008252 <vTaskDelayUntil+0xaa>
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	429a      	cmp	r2, r3
 8008234:	d90d      	bls.n	8008252 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8008236:	2301      	movs	r3, #1
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
 800823a:	e00a      	b.n	8008252 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69fa      	ldr	r2, [r7, #28]
 8008242:	429a      	cmp	r2, r3
 8008244:	d303      	bcc.n	800824e <vTaskDelayUntil+0xa6>
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	429a      	cmp	r2, r3
 800824c:	d901      	bls.n	8008252 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800824e:	2301      	movs	r3, #1
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d006      	beq.n	800826c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2100      	movs	r1, #0
 8008266:	4618      	mov	r0, r3
 8008268:	f000 fd08 	bl	8008c7c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800826c:	f000 fa4e 	bl	800870c <xTaskResumeAll>
 8008270:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d107      	bne.n	8008288 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8008278:	4b07      	ldr	r3, [pc, #28]	; (8008298 <vTaskDelayUntil+0xf0>)
 800827a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008288:	bf00      	nop
 800828a:	3728      	adds	r7, #40	; 0x28
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	200005b4 	.word	0x200005b4
 8008294:	20000590 	.word	0x20000590
 8008298:	e000ed04 	.word	0xe000ed04

0800829c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d016      	beq.n	80082dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082ae:	4b13      	ldr	r3, [pc, #76]	; (80082fc <vTaskDelay+0x60>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <vTaskDelay+0x2e>
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	60bb      	str	r3, [r7, #8]
 80082c8:	e7fe      	b.n	80082c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80082ca:	f000 fa11 	bl	80086f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082ce:	2100      	movs	r1, #0
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fcd3 	bl	8008c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082d6:	f000 fa19 	bl	800870c <xTaskResumeAll>
 80082da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d107      	bne.n	80082f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80082e2:	4b07      	ldr	r3, [pc, #28]	; (8008300 <vTaskDelay+0x64>)
 80082e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082f2:	bf00      	nop
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	200005b4 	.word	0x200005b4
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800830c:	f000 fe46 	bl	8008f9c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d102      	bne.n	800831c <vTaskSuspend+0x18>
 8008316:	4b3c      	ldr	r3, [pc, #240]	; (8008408 <vTaskSuspend+0x104>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	e000      	b.n	800831e <vTaskSuspend+0x1a>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3304      	adds	r3, #4
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fd8f 	bl	8007e48 <uxListRemove>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d115      	bne.n	800835c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008334:	4935      	ldr	r1, [pc, #212]	; (800840c <vTaskSuspend+0x108>)
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	440b      	add	r3, r1
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10a      	bne.n	800835c <vTaskSuspend+0x58>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834a:	2201      	movs	r2, #1
 800834c:	fa02 f303 	lsl.w	r3, r2, r3
 8008350:	43da      	mvns	r2, r3
 8008352:	4b2f      	ldr	r3, [pc, #188]	; (8008410 <vTaskSuspend+0x10c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4013      	ands	r3, r2
 8008358:	4a2d      	ldr	r2, [pc, #180]	; (8008410 <vTaskSuspend+0x10c>)
 800835a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	2b00      	cmp	r3, #0
 8008362:	d004      	beq.n	800836e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3318      	adds	r3, #24
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff fd6d 	bl	8007e48 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3304      	adds	r3, #4
 8008372:	4619      	mov	r1, r3
 8008374:	4827      	ldr	r0, [pc, #156]	; (8008414 <vTaskSuspend+0x110>)
 8008376:	f7ff fd0a 	bl	8007d8e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b01      	cmp	r3, #1
 8008384:	d103      	bne.n	800838e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800838e:	f000 fe33 	bl	8008ff8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008392:	4b21      	ldr	r3, [pc, #132]	; (8008418 <vTaskSuspend+0x114>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800839a:	f000 fdff 	bl	8008f9c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800839e:	f000 fc29 	bl	8008bf4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80083a2:	f000 fe29 	bl	8008ff8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80083a6:	4b18      	ldr	r3, [pc, #96]	; (8008408 <vTaskSuspend+0x104>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d126      	bne.n	80083fe <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80083b0:	4b19      	ldr	r3, [pc, #100]	; (8008418 <vTaskSuspend+0x114>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d016      	beq.n	80083e6 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80083b8:	4b18      	ldr	r3, [pc, #96]	; (800841c <vTaskSuspend+0x118>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d009      	beq.n	80083d4 <vTaskSuspend+0xd0>
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	60bb      	str	r3, [r7, #8]
 80083d2:	e7fe      	b.n	80083d2 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80083d4:	4b12      	ldr	r3, [pc, #72]	; (8008420 <vTaskSuspend+0x11c>)
 80083d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083e4:	e00b      	b.n	80083fe <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80083e6:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <vTaskSuspend+0x110>)
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	4b0e      	ldr	r3, [pc, #56]	; (8008424 <vTaskSuspend+0x120>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d103      	bne.n	80083fa <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 80083f2:	4b05      	ldr	r3, [pc, #20]	; (8008408 <vTaskSuspend+0x104>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
	}
 80083f8:	e001      	b.n	80083fe <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 80083fa:	f000 faef 	bl	80089dc <vTaskSwitchContext>
	}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	2000048c 	.word	0x2000048c
 800840c:	20000490 	.word	0x20000490
 8008410:	20000594 	.word	0x20000594
 8008414:	20000578 	.word	0x20000578
 8008418:	20000598 	.word	0x20000598
 800841c:	200005b4 	.word	0x200005b4
 8008420:	e000ed04 	.word	0xe000ed04
 8008424:	2000058c 	.word	0x2000058c

08008428 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008430:	2300      	movs	r3, #0
 8008432:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <prvTaskIsTaskSuspended+0x2a>
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	e7fe      	b.n	8008450 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	4a0f      	ldr	r2, [pc, #60]	; (8008494 <prvTaskIsTaskSuspended+0x6c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d101      	bne.n	8008460 <prvTaskIsTaskSuspended+0x38>
 800845c:	2301      	movs	r3, #1
 800845e:	e000      	b.n	8008462 <prvTaskIsTaskSuspended+0x3a>
 8008460:	2300      	movs	r3, #0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00f      	beq.n	8008486 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	4a0b      	ldr	r2, [pc, #44]	; (8008498 <prvTaskIsTaskSuspended+0x70>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00a      	beq.n	8008486 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <prvTaskIsTaskSuspended+0x54>
 8008478:	2301      	movs	r3, #1
 800847a:	e000      	b.n	800847e <prvTaskIsTaskSuspended+0x56>
 800847c:	2300      	movs	r3, #0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8008482:	2301      	movs	r3, #1
 8008484:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008486:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008488:	4618      	mov	r0, r3
 800848a:	371c      	adds	r7, #28
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	20000578 	.word	0x20000578
 8008498:	2000054c 	.word	0x2000054c

0800849c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d109      	bne.n	80084c2 <vTaskResume+0x26>
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	60bb      	str	r3, [r7, #8]
 80084c0:	e7fe      	b.n	80084c0 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d039      	beq.n	800853c <vTaskResume+0xa0>
 80084c8:	4b1e      	ldr	r3, [pc, #120]	; (8008544 <vTaskResume+0xa8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d034      	beq.n	800853c <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 80084d2:	f000 fd63 	bl	8008f9c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f7ff ffa6 	bl	8008428 <prvTaskIsTaskSuspended>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d02a      	beq.n	8008538 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff fcae 	bl	8007e48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	2201      	movs	r2, #1
 80084f2:	409a      	lsls	r2, r3
 80084f4:	4b14      	ldr	r3, [pc, #80]	; (8008548 <vTaskResume+0xac>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	4a13      	ldr	r2, [pc, #76]	; (8008548 <vTaskResume+0xac>)
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4a10      	ldr	r2, [pc, #64]	; (800854c <vTaskResume+0xb0>)
 800850c:	441a      	add	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3304      	adds	r3, #4
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f7ff fc3a 	bl	8007d8e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <vTaskResume+0xa8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	429a      	cmp	r2, r3
 8008526:	d307      	bcc.n	8008538 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008528:	4b09      	ldr	r3, [pc, #36]	; (8008550 <vTaskResume+0xb4>)
 800852a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008538:	f000 fd5e 	bl	8008ff8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	2000048c 	.word	0x2000048c
 8008548:	20000594 	.word	0x20000594
 800854c:	20000490 	.word	0x20000490
 8008550:	e000ed04 	.word	0xe000ed04

08008554 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	; 0x28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800855c:	2300      	movs	r3, #0
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d109      	bne.n	800857e <xTaskResumeFromISR+0x2a>
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	61bb      	str	r3, [r7, #24]
 800857c:	e7fe      	b.n	800857c <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800857e:	f000 fde9 	bl	8009154 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008582:	f3ef 8211 	mrs	r2, BASEPRI
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	617a      	str	r2, [r7, #20]
 8008598:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800859a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800859c:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800859e:	6a38      	ldr	r0, [r7, #32]
 80085a0:	f7ff ff42 	bl	8008428 <prvTaskIsTaskSuspended>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d02f      	beq.n	800860a <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085aa:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <xTaskResumeFromISR+0xcc>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d125      	bne.n	80085fe <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b6:	4b1b      	ldr	r3, [pc, #108]	; (8008624 <xTaskResumeFromISR+0xd0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	429a      	cmp	r2, r3
 80085be:	d301      	bcc.n	80085c4 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 80085c0:	2301      	movs	r3, #1
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff fc3d 	bl	8007e48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	2201      	movs	r2, #1
 80085d4:	409a      	lsls	r2, r3
 80085d6:	4b14      	ldr	r3, [pc, #80]	; (8008628 <xTaskResumeFromISR+0xd4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4313      	orrs	r3, r2
 80085dc:	4a12      	ldr	r2, [pc, #72]	; (8008628 <xTaskResumeFromISR+0xd4>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4a0f      	ldr	r2, [pc, #60]	; (800862c <xTaskResumeFromISR+0xd8>)
 80085ee:	441a      	add	r2, r3
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	3304      	adds	r3, #4
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	f7ff fbc9 	bl	8007d8e <vListInsertEnd>
 80085fc:	e005      	b.n	800860a <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	3318      	adds	r3, #24
 8008602:	4619      	mov	r1, r3
 8008604:	480a      	ldr	r0, [pc, #40]	; (8008630 <xTaskResumeFromISR+0xdc>)
 8008606:	f7ff fbc2 	bl	8007d8e <vListInsertEnd>
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008616:	4618      	mov	r0, r3
 8008618:	3728      	adds	r7, #40	; 0x28
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	200005b4 	.word	0x200005b4
 8008624:	2000048c 	.word	0x2000048c
 8008628:	20000594 	.word	0x20000594
 800862c:	20000490 	.word	0x20000490
 8008630:	2000054c 	.word	0x2000054c

08008634 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	; 0x28
 8008638:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800863a:	2300      	movs	r3, #0
 800863c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008642:	463a      	mov	r2, r7
 8008644:	1d39      	adds	r1, r7, #4
 8008646:	f107 0308 	add.w	r3, r7, #8
 800864a:	4618      	mov	r0, r3
 800864c:	f7f9 fa08 	bl	8001a60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	9202      	str	r2, [sp, #8]
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	2300      	movs	r3, #0
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	2300      	movs	r3, #0
 8008660:	460a      	mov	r2, r1
 8008662:	491d      	ldr	r1, [pc, #116]	; (80086d8 <vTaskStartScheduler+0xa4>)
 8008664:	481d      	ldr	r0, [pc, #116]	; (80086dc <vTaskStartScheduler+0xa8>)
 8008666:	f7ff fc19 	bl	8007e9c <xTaskCreateStatic>
 800866a:	4602      	mov	r2, r0
 800866c:	4b1c      	ldr	r3, [pc, #112]	; (80086e0 <vTaskStartScheduler+0xac>)
 800866e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008670:	4b1b      	ldr	r3, [pc, #108]	; (80086e0 <vTaskStartScheduler+0xac>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008678:	2301      	movs	r3, #1
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	e001      	b.n	8008682 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800867e:	2300      	movs	r3, #0
 8008680:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d115      	bne.n	80086b4 <vTaskStartScheduler+0x80>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800869a:	4b12      	ldr	r3, [pc, #72]	; (80086e4 <vTaskStartScheduler+0xb0>)
 800869c:	f04f 32ff 	mov.w	r2, #4294967295
 80086a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086a2:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <vTaskStartScheduler+0xb4>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80086a8:	4b10      	ldr	r3, [pc, #64]	; (80086ec <vTaskStartScheduler+0xb8>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086ae:	f000 fbd7 	bl	8008e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086b2:	e00d      	b.n	80086d0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ba:	d109      	bne.n	80086d0 <vTaskStartScheduler+0x9c>
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	e7fe      	b.n	80086ce <vTaskStartScheduler+0x9a>
}
 80086d0:	bf00      	nop
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	0800b9a8 	.word	0x0800b9a8
 80086dc:	08008a91 	.word	0x08008a91
 80086e0:	200005b0 	.word	0x200005b0
 80086e4:	200005ac 	.word	0x200005ac
 80086e8:	20000598 	.word	0x20000598
 80086ec:	20000590 	.word	0x20000590

080086f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <vTaskSuspendAll+0x18>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3301      	adds	r3, #1
 80086fa:	4a03      	ldr	r2, [pc, #12]	; (8008708 <vTaskSuspendAll+0x18>)
 80086fc:	6013      	str	r3, [r2, #0]
}
 80086fe:	bf00      	nop
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	200005b4 	.word	0x200005b4

0800870c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008716:	2300      	movs	r3, #0
 8008718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800871a:	4b41      	ldr	r3, [pc, #260]	; (8008820 <xTaskResumeAll+0x114>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <xTaskResumeAll+0x2a>
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	e7fe      	b.n	8008734 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008736:	f000 fc31 	bl	8008f9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800873a:	4b39      	ldr	r3, [pc, #228]	; (8008820 <xTaskResumeAll+0x114>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3b01      	subs	r3, #1
 8008740:	4a37      	ldr	r2, [pc, #220]	; (8008820 <xTaskResumeAll+0x114>)
 8008742:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008744:	4b36      	ldr	r3, [pc, #216]	; (8008820 <xTaskResumeAll+0x114>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d161      	bne.n	8008810 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800874c:	4b35      	ldr	r3, [pc, #212]	; (8008824 <xTaskResumeAll+0x118>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d05d      	beq.n	8008810 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008754:	e02e      	b.n	80087b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008756:	4b34      	ldr	r3, [pc, #208]	; (8008828 <xTaskResumeAll+0x11c>)
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3318      	adds	r3, #24
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff fb70 	bl	8007e48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3304      	adds	r3, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff fb6b 	bl	8007e48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008776:	2201      	movs	r2, #1
 8008778:	409a      	lsls	r2, r3
 800877a:	4b2c      	ldr	r3, [pc, #176]	; (800882c <xTaskResumeAll+0x120>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4313      	orrs	r3, r2
 8008780:	4a2a      	ldr	r2, [pc, #168]	; (800882c <xTaskResumeAll+0x120>)
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4a27      	ldr	r2, [pc, #156]	; (8008830 <xTaskResumeAll+0x124>)
 8008792:	441a      	add	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3304      	adds	r3, #4
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7ff faf7 	bl	8007d8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a4:	4b23      	ldr	r3, [pc, #140]	; (8008834 <xTaskResumeAll+0x128>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d302      	bcc.n	80087b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80087ae:	4b22      	ldr	r3, [pc, #136]	; (8008838 <xTaskResumeAll+0x12c>)
 80087b0:	2201      	movs	r2, #1
 80087b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087b4:	4b1c      	ldr	r3, [pc, #112]	; (8008828 <xTaskResumeAll+0x11c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1cc      	bne.n	8008756 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087c2:	f000 fa17 	bl	8008bf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80087c6:	4b1d      	ldr	r3, [pc, #116]	; (800883c <xTaskResumeAll+0x130>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d010      	beq.n	80087f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087d2:	f000 f847 	bl	8008864 <xTaskIncrementTick>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80087dc:	4b16      	ldr	r3, [pc, #88]	; (8008838 <xTaskResumeAll+0x12c>)
 80087de:	2201      	movs	r2, #1
 80087e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f1      	bne.n	80087d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80087ee:	4b13      	ldr	r3, [pc, #76]	; (800883c <xTaskResumeAll+0x130>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087f4:	4b10      	ldr	r3, [pc, #64]	; (8008838 <xTaskResumeAll+0x12c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d009      	beq.n	8008810 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087fc:	2301      	movs	r3, #1
 80087fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008800:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <xTaskResumeAll+0x134>)
 8008802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008810:	f000 fbf2 	bl	8008ff8 <vPortExitCritical>

	return xAlreadyYielded;
 8008814:	68bb      	ldr	r3, [r7, #8]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	200005b4 	.word	0x200005b4
 8008824:	2000058c 	.word	0x2000058c
 8008828:	2000054c 	.word	0x2000054c
 800882c:	20000594 	.word	0x20000594
 8008830:	20000490 	.word	0x20000490
 8008834:	2000048c 	.word	0x2000048c
 8008838:	200005a0 	.word	0x200005a0
 800883c:	2000059c 	.word	0x2000059c
 8008840:	e000ed04 	.word	0xe000ed04

08008844 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800884a:	4b05      	ldr	r3, [pc, #20]	; (8008860 <xTaskGetTickCount+0x1c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008850:	687b      	ldr	r3, [r7, #4]
}
 8008852:	4618      	mov	r0, r3
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	20000590 	.word	0x20000590

08008864 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800886e:	4b50      	ldr	r3, [pc, #320]	; (80089b0 <xTaskIncrementTick+0x14c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	f040 808c 	bne.w	8008990 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008878:	4b4e      	ldr	r3, [pc, #312]	; (80089b4 <xTaskIncrementTick+0x150>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008880:	4a4c      	ldr	r2, [pc, #304]	; (80089b4 <xTaskIncrementTick+0x150>)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d11f      	bne.n	80088cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800888c:	4b4a      	ldr	r3, [pc, #296]	; (80089b8 <xTaskIncrementTick+0x154>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <xTaskIncrementTick+0x46>
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	e7fe      	b.n	80088a8 <xTaskIncrementTick+0x44>
 80088aa:	4b43      	ldr	r3, [pc, #268]	; (80089b8 <xTaskIncrementTick+0x154>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	4b42      	ldr	r3, [pc, #264]	; (80089bc <xTaskIncrementTick+0x158>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a40      	ldr	r2, [pc, #256]	; (80089b8 <xTaskIncrementTick+0x154>)
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	4a40      	ldr	r2, [pc, #256]	; (80089bc <xTaskIncrementTick+0x158>)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	4b40      	ldr	r3, [pc, #256]	; (80089c0 <xTaskIncrementTick+0x15c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3301      	adds	r3, #1
 80088c4:	4a3e      	ldr	r2, [pc, #248]	; (80089c0 <xTaskIncrementTick+0x15c>)
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	f000 f994 	bl	8008bf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088cc:	4b3d      	ldr	r3, [pc, #244]	; (80089c4 <xTaskIncrementTick+0x160>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d34d      	bcc.n	8008972 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088d6:	4b38      	ldr	r3, [pc, #224]	; (80089b8 <xTaskIncrementTick+0x154>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <xTaskIncrementTick+0x80>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e000      	b.n	80088e6 <xTaskIncrementTick+0x82>
 80088e4:	2300      	movs	r3, #0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d004      	beq.n	80088f4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ea:	4b36      	ldr	r3, [pc, #216]	; (80089c4 <xTaskIncrementTick+0x160>)
 80088ec:	f04f 32ff 	mov.w	r2, #4294967295
 80088f0:	601a      	str	r2, [r3, #0]
					break;
 80088f2:	e03e      	b.n	8008972 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80088f4:	4b30      	ldr	r3, [pc, #192]	; (80089b8 <xTaskIncrementTick+0x154>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	429a      	cmp	r2, r3
 800890a:	d203      	bcs.n	8008914 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800890c:	4a2d      	ldr	r2, [pc, #180]	; (80089c4 <xTaskIncrementTick+0x160>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6013      	str	r3, [r2, #0]
						break;
 8008912:	e02e      	b.n	8008972 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	3304      	adds	r3, #4
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff fa95 	bl	8007e48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	3318      	adds	r3, #24
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff fa8c 	bl	8007e48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	2201      	movs	r2, #1
 8008936:	409a      	lsls	r2, r3
 8008938:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <xTaskIncrementTick+0x164>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4313      	orrs	r3, r2
 800893e:	4a22      	ldr	r2, [pc, #136]	; (80089c8 <xTaskIncrementTick+0x164>)
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4a1f      	ldr	r2, [pc, #124]	; (80089cc <xTaskIncrementTick+0x168>)
 8008950:	441a      	add	r2, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	3304      	adds	r3, #4
 8008956:	4619      	mov	r1, r3
 8008958:	4610      	mov	r0, r2
 800895a:	f7ff fa18 	bl	8007d8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008962:	4b1b      	ldr	r3, [pc, #108]	; (80089d0 <xTaskIncrementTick+0x16c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	429a      	cmp	r2, r3
 800896a:	d3b4      	bcc.n	80088d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800896c:	2301      	movs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008970:	e7b1      	b.n	80088d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008972:	4b17      	ldr	r3, [pc, #92]	; (80089d0 <xTaskIncrementTick+0x16c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008978:	4914      	ldr	r1, [pc, #80]	; (80089cc <xTaskIncrementTick+0x168>)
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	440b      	add	r3, r1
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d907      	bls.n	800899a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800898a:	2301      	movs	r3, #1
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	e004      	b.n	800899a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008990:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <xTaskIncrementTick+0x170>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3301      	adds	r3, #1
 8008996:	4a0f      	ldr	r2, [pc, #60]	; (80089d4 <xTaskIncrementTick+0x170>)
 8008998:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800899a:	4b0f      	ldr	r3, [pc, #60]	; (80089d8 <xTaskIncrementTick+0x174>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80089a2:	2301      	movs	r3, #1
 80089a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80089a6:	697b      	ldr	r3, [r7, #20]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	200005b4 	.word	0x200005b4
 80089b4:	20000590 	.word	0x20000590
 80089b8:	20000544 	.word	0x20000544
 80089bc:	20000548 	.word	0x20000548
 80089c0:	200005a4 	.word	0x200005a4
 80089c4:	200005ac 	.word	0x200005ac
 80089c8:	20000594 	.word	0x20000594
 80089cc:	20000490 	.word	0x20000490
 80089d0:	2000048c 	.word	0x2000048c
 80089d4:	2000059c 	.word	0x2000059c
 80089d8:	200005a0 	.word	0x200005a0

080089dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089e2:	4b26      	ldr	r3, [pc, #152]	; (8008a7c <vTaskSwitchContext+0xa0>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089ea:	4b25      	ldr	r3, [pc, #148]	; (8008a80 <vTaskSwitchContext+0xa4>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089f0:	e03e      	b.n	8008a70 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80089f2:	4b23      	ldr	r3, [pc, #140]	; (8008a80 <vTaskSwitchContext+0xa4>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80089f8:	4b22      	ldr	r3, [pc, #136]	; (8008a84 <vTaskSwitchContext+0xa8>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	fab3 f383 	clz	r3, r3
 8008a04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a06:	7afb      	ldrb	r3, [r7, #11]
 8008a08:	f1c3 031f 	rsb	r3, r3, #31
 8008a0c:	617b      	str	r3, [r7, #20]
 8008a0e:	491e      	ldr	r1, [pc, #120]	; (8008a88 <vTaskSwitchContext+0xac>)
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d109      	bne.n	8008a36 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	607b      	str	r3, [r7, #4]
 8008a34:	e7fe      	b.n	8008a34 <vTaskSwitchContext+0x58>
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4a11      	ldr	r2, [pc, #68]	; (8008a88 <vTaskSwitchContext+0xac>)
 8008a42:	4413      	add	r3, r2
 8008a44:	613b      	str	r3, [r7, #16]
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	605a      	str	r2, [r3, #4]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	3308      	adds	r3, #8
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d104      	bne.n	8008a66 <vTaskSwitchContext+0x8a>
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	605a      	str	r2, [r3, #4]
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	4a07      	ldr	r2, [pc, #28]	; (8008a8c <vTaskSwitchContext+0xb0>)
 8008a6e:	6013      	str	r3, [r2, #0]
}
 8008a70:	bf00      	nop
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	200005b4 	.word	0x200005b4
 8008a80:	200005a0 	.word	0x200005a0
 8008a84:	20000594 	.word	0x20000594
 8008a88:	20000490 	.word	0x20000490
 8008a8c:	2000048c 	.word	0x2000048c

08008a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a98:	f000 f852 	bl	8008b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a9c:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <prvIdleTask+0x28>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d9f9      	bls.n	8008a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008aa4:	4b05      	ldr	r3, [pc, #20]	; (8008abc <prvIdleTask+0x2c>)
 8008aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ab4:	e7f0      	b.n	8008a98 <prvIdleTask+0x8>
 8008ab6:	bf00      	nop
 8008ab8:	20000490 	.word	0x20000490
 8008abc:	e000ed04 	.word	0xe000ed04

08008ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	e00c      	b.n	8008ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4a12      	ldr	r2, [pc, #72]	; (8008b20 <prvInitialiseTaskLists+0x60>)
 8008ad8:	4413      	add	r3, r2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff f92a 	bl	8007d34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b06      	cmp	r3, #6
 8008aea:	d9ef      	bls.n	8008acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008aec:	480d      	ldr	r0, [pc, #52]	; (8008b24 <prvInitialiseTaskLists+0x64>)
 8008aee:	f7ff f921 	bl	8007d34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008af2:	480d      	ldr	r0, [pc, #52]	; (8008b28 <prvInitialiseTaskLists+0x68>)
 8008af4:	f7ff f91e 	bl	8007d34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008af8:	480c      	ldr	r0, [pc, #48]	; (8008b2c <prvInitialiseTaskLists+0x6c>)
 8008afa:	f7ff f91b 	bl	8007d34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008afe:	480c      	ldr	r0, [pc, #48]	; (8008b30 <prvInitialiseTaskLists+0x70>)
 8008b00:	f7ff f918 	bl	8007d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b04:	480b      	ldr	r0, [pc, #44]	; (8008b34 <prvInitialiseTaskLists+0x74>)
 8008b06:	f7ff f915 	bl	8007d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <prvInitialiseTaskLists+0x78>)
 8008b0c:	4a05      	ldr	r2, [pc, #20]	; (8008b24 <prvInitialiseTaskLists+0x64>)
 8008b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <prvInitialiseTaskLists+0x7c>)
 8008b12:	4a05      	ldr	r2, [pc, #20]	; (8008b28 <prvInitialiseTaskLists+0x68>)
 8008b14:	601a      	str	r2, [r3, #0]
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20000490 	.word	0x20000490
 8008b24:	2000051c 	.word	0x2000051c
 8008b28:	20000530 	.word	0x20000530
 8008b2c:	2000054c 	.word	0x2000054c
 8008b30:	20000560 	.word	0x20000560
 8008b34:	20000578 	.word	0x20000578
 8008b38:	20000544 	.word	0x20000544
 8008b3c:	20000548 	.word	0x20000548

08008b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b46:	e019      	b.n	8008b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b48:	f000 fa28 	bl	8008f9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008b4c:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <prvCheckTasksWaitingTermination+0x4c>)
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff f975 	bl	8007e48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b5e:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <prvCheckTasksWaitingTermination+0x50>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	4a0a      	ldr	r2, [pc, #40]	; (8008b90 <prvCheckTasksWaitingTermination+0x50>)
 8008b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b68:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <prvCheckTasksWaitingTermination+0x54>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <prvCheckTasksWaitingTermination+0x54>)
 8008b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b72:	f000 fa41 	bl	8008ff8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f80e 	bl	8008b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b7c:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <prvCheckTasksWaitingTermination+0x54>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e1      	bne.n	8008b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20000560 	.word	0x20000560
 8008b90:	2000058c 	.word	0x2000058c
 8008b94:	20000574 	.word	0x20000574

08008b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d108      	bne.n	8008bbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fbd0 	bl	8009354 <vPortFree>
				vPortFree( pxTCB );
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fbcd 	bl	8009354 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bba:	e017      	b.n	8008bec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d103      	bne.n	8008bce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fbc4 	bl	8009354 <vPortFree>
	}
 8008bcc:	e00e      	b.n	8008bec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d009      	beq.n	8008bec <prvDeleteTCB+0x54>
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	e7fe      	b.n	8008bea <prvDeleteTCB+0x52>
	}
 8008bec:	bf00      	nop
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <prvResetNextTaskUnblockTime+0x44>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <prvResetNextTaskUnblockTime+0x14>
 8008c04:	2301      	movs	r3, #1
 8008c06:	e000      	b.n	8008c0a <prvResetNextTaskUnblockTime+0x16>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d004      	beq.n	8008c18 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c0e:	4b0b      	ldr	r3, [pc, #44]	; (8008c3c <prvResetNextTaskUnblockTime+0x48>)
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295
 8008c14:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c16:	e008      	b.n	8008c2a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c18:	4b07      	ldr	r3, [pc, #28]	; (8008c38 <prvResetNextTaskUnblockTime+0x44>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	4a05      	ldr	r2, [pc, #20]	; (8008c3c <prvResetNextTaskUnblockTime+0x48>)
 8008c28:	6013      	str	r3, [r2, #0]
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	20000544 	.word	0x20000544
 8008c3c:	200005ac 	.word	0x200005ac

08008c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c46:	4b0b      	ldr	r3, [pc, #44]	; (8008c74 <xTaskGetSchedulerState+0x34>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d102      	bne.n	8008c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	607b      	str	r3, [r7, #4]
 8008c52:	e008      	b.n	8008c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c54:	4b08      	ldr	r3, [pc, #32]	; (8008c78 <xTaskGetSchedulerState+0x38>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d102      	bne.n	8008c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	607b      	str	r3, [r7, #4]
 8008c60:	e001      	b.n	8008c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c62:	2300      	movs	r3, #0
 8008c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c66:	687b      	ldr	r3, [r7, #4]
	}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	20000598 	.word	0x20000598
 8008c78:	200005b4 	.word	0x200005b4

08008c7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c86:	4b29      	ldr	r3, [pc, #164]	; (8008d2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c8c:	4b28      	ldr	r3, [pc, #160]	; (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff f8d8 	bl	8007e48 <uxListRemove>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008c9e:	4b24      	ldr	r3, [pc, #144]	; (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	43da      	mvns	r2, r3
 8008cac:	4b21      	ldr	r3, [pc, #132]	; (8008d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	4a20      	ldr	r2, [pc, #128]	; (8008d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d10a      	bne.n	8008cd4 <prvAddCurrentTaskToDelayedList+0x58>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d007      	beq.n	8008cd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc4:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	4619      	mov	r1, r3
 8008ccc:	481a      	ldr	r0, [pc, #104]	; (8008d38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008cce:	f7ff f85e 	bl	8007d8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cd2:	e026      	b.n	8008d22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cdc:	4b14      	ldr	r3, [pc, #80]	; (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d209      	bcs.n	8008d00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cec:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	4b0f      	ldr	r3, [pc, #60]	; (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	f7ff f86c 	bl	8007dd6 <vListInsert>
}
 8008cfe:	e010      	b.n	8008d22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d00:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	4b0a      	ldr	r3, [pc, #40]	; (8008d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f7ff f862 	bl	8007dd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d12:	4b0c      	ldr	r3, [pc, #48]	; (8008d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d202      	bcs.n	8008d22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008d1c:	4a09      	ldr	r2, [pc, #36]	; (8008d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	6013      	str	r3, [r2, #0]
}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000590 	.word	0x20000590
 8008d30:	2000048c 	.word	0x2000048c
 8008d34:	20000594 	.word	0x20000594
 8008d38:	20000578 	.word	0x20000578
 8008d3c:	20000548 	.word	0x20000548
 8008d40:	20000544 	.word	0x20000544
 8008d44:	200005ac 	.word	0x200005ac

08008d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3b04      	subs	r3, #4
 8008d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3b04      	subs	r3, #4
 8008d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f023 0201 	bic.w	r2, r3, #1
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3b04      	subs	r3, #4
 8008d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d78:	4a0c      	ldr	r2, [pc, #48]	; (8008dac <pxPortInitialiseStack+0x64>)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3b14      	subs	r3, #20
 8008d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3b04      	subs	r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f06f 0202 	mvn.w	r2, #2
 8008d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3b20      	subs	r3, #32
 8008d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	08008db1 	.word	0x08008db1

08008db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008dba:	4b11      	ldr	r3, [pc, #68]	; (8008e00 <prvTaskExitError+0x50>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc2:	d009      	beq.n	8008dd8 <prvTaskExitError+0x28>
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	e7fe      	b.n	8008dd6 <prvTaskExitError+0x26>
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008dea:	bf00      	nop
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0fc      	beq.n	8008dec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008df2:	bf00      	nop
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	2000001c 	.word	0x2000001c
	...

08008e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e10:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <pxCurrentTCBConst2>)
 8008e12:	6819      	ldr	r1, [r3, #0]
 8008e14:	6808      	ldr	r0, [r1, #0]
 8008e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1a:	f380 8809 	msr	PSP, r0
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f04f 0000 	mov.w	r0, #0
 8008e26:	f380 8811 	msr	BASEPRI, r0
 8008e2a:	4770      	bx	lr
 8008e2c:	f3af 8000 	nop.w

08008e30 <pxCurrentTCBConst2>:
 8008e30:	2000048c 	.word	0x2000048c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop

08008e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e38:	4808      	ldr	r0, [pc, #32]	; (8008e5c <prvPortStartFirstTask+0x24>)
 8008e3a:	6800      	ldr	r0, [r0, #0]
 8008e3c:	6800      	ldr	r0, [r0, #0]
 8008e3e:	f380 8808 	msr	MSP, r0
 8008e42:	f04f 0000 	mov.w	r0, #0
 8008e46:	f380 8814 	msr	CONTROL, r0
 8008e4a:	b662      	cpsie	i
 8008e4c:	b661      	cpsie	f
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	df00      	svc	0
 8008e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e5a:	bf00      	nop
 8008e5c:	e000ed08 	.word	0xe000ed08

08008e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e66:	4b44      	ldr	r3, [pc, #272]	; (8008f78 <xPortStartScheduler+0x118>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a44      	ldr	r2, [pc, #272]	; (8008f7c <xPortStartScheduler+0x11c>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d109      	bne.n	8008e84 <xPortStartScheduler+0x24>
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	613b      	str	r3, [r7, #16]
 8008e82:	e7fe      	b.n	8008e82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e84:	4b3c      	ldr	r3, [pc, #240]	; (8008f78 <xPortStartScheduler+0x118>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a3d      	ldr	r2, [pc, #244]	; (8008f80 <xPortStartScheduler+0x120>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d109      	bne.n	8008ea2 <xPortStartScheduler+0x42>
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	e7fe      	b.n	8008ea0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ea2:	4b38      	ldr	r3, [pc, #224]	; (8008f84 <xPortStartScheduler+0x124>)
 8008ea4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	22ff      	movs	r2, #255	; 0xff
 8008eb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ebc:	78fb      	ldrb	r3, [r7, #3]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	4b30      	ldr	r3, [pc, #192]	; (8008f88 <xPortStartScheduler+0x128>)
 8008ec8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008eca:	4b30      	ldr	r3, [pc, #192]	; (8008f8c <xPortStartScheduler+0x12c>)
 8008ecc:	2207      	movs	r2, #7
 8008ece:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ed0:	e009      	b.n	8008ee6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008ed2:	4b2e      	ldr	r3, [pc, #184]	; (8008f8c <xPortStartScheduler+0x12c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	4a2c      	ldr	r2, [pc, #176]	; (8008f8c <xPortStartScheduler+0x12c>)
 8008eda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ee6:	78fb      	ldrb	r3, [r7, #3]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eee:	2b80      	cmp	r3, #128	; 0x80
 8008ef0:	d0ef      	beq.n	8008ed2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ef2:	4b26      	ldr	r3, [pc, #152]	; (8008f8c <xPortStartScheduler+0x12c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f1c3 0307 	rsb	r3, r3, #7
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d009      	beq.n	8008f12 <xPortStartScheduler+0xb2>
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	60bb      	str	r3, [r7, #8]
 8008f10:	e7fe      	b.n	8008f10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f12:	4b1e      	ldr	r3, [pc, #120]	; (8008f8c <xPortStartScheduler+0x12c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	4a1c      	ldr	r2, [pc, #112]	; (8008f8c <xPortStartScheduler+0x12c>)
 8008f1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f1c:	4b1b      	ldr	r3, [pc, #108]	; (8008f8c <xPortStartScheduler+0x12c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f24:	4a19      	ldr	r2, [pc, #100]	; (8008f8c <xPortStartScheduler+0x12c>)
 8008f26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f30:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <xPortStartScheduler+0x130>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a16      	ldr	r2, [pc, #88]	; (8008f90 <xPortStartScheduler+0x130>)
 8008f36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f3c:	4b14      	ldr	r3, [pc, #80]	; (8008f90 <xPortStartScheduler+0x130>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a13      	ldr	r2, [pc, #76]	; (8008f90 <xPortStartScheduler+0x130>)
 8008f42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f48:	f000 f8d6 	bl	80090f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f4c:	4b11      	ldr	r3, [pc, #68]	; (8008f94 <xPortStartScheduler+0x134>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f52:	f000 f8f5 	bl	8009140 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f56:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <xPortStartScheduler+0x138>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a0f      	ldr	r2, [pc, #60]	; (8008f98 <xPortStartScheduler+0x138>)
 8008f5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f62:	f7ff ff69 	bl	8008e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f66:	f7ff fd39 	bl	80089dc <vTaskSwitchContext>
	prvTaskExitError();
 8008f6a:	f7ff ff21 	bl	8008db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	e000ed00 	.word	0xe000ed00
 8008f7c:	410fc271 	.word	0x410fc271
 8008f80:	410fc270 	.word	0x410fc270
 8008f84:	e000e400 	.word	0xe000e400
 8008f88:	200005b8 	.word	0x200005b8
 8008f8c:	200005bc 	.word	0x200005bc
 8008f90:	e000ed20 	.word	0xe000ed20
 8008f94:	2000001c 	.word	0x2000001c
 8008f98:	e000ef34 	.word	0xe000ef34

08008f9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fb4:	4b0e      	ldr	r3, [pc, #56]	; (8008ff0 <vPortEnterCritical+0x54>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	4a0d      	ldr	r2, [pc, #52]	; (8008ff0 <vPortEnterCritical+0x54>)
 8008fbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fbe:	4b0c      	ldr	r3, [pc, #48]	; (8008ff0 <vPortEnterCritical+0x54>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d10e      	bne.n	8008fe4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fc6:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <vPortEnterCritical+0x58>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d009      	beq.n	8008fe4 <vPortEnterCritical+0x48>
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	603b      	str	r3, [r7, #0]
 8008fe2:	e7fe      	b.n	8008fe2 <vPortEnterCritical+0x46>
	}
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	2000001c 	.word	0x2000001c
 8008ff4:	e000ed04 	.word	0xe000ed04

08008ff8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ffe:	4b11      	ldr	r3, [pc, #68]	; (8009044 <vPortExitCritical+0x4c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <vPortExitCritical+0x22>
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	607b      	str	r3, [r7, #4]
 8009018:	e7fe      	b.n	8009018 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800901a:	4b0a      	ldr	r3, [pc, #40]	; (8009044 <vPortExitCritical+0x4c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3b01      	subs	r3, #1
 8009020:	4a08      	ldr	r2, [pc, #32]	; (8009044 <vPortExitCritical+0x4c>)
 8009022:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009024:	4b07      	ldr	r3, [pc, #28]	; (8009044 <vPortExitCritical+0x4c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <vPortExitCritical+0x3e>
 800902c:	2300      	movs	r3, #0
 800902e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	2000001c 	.word	0x2000001c
	...

08009050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009050:	f3ef 8009 	mrs	r0, PSP
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	4b15      	ldr	r3, [pc, #84]	; (80090b0 <pxCurrentTCBConst>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	f01e 0f10 	tst.w	lr, #16
 8009060:	bf08      	it	eq
 8009062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906a:	6010      	str	r0, [r2, #0]
 800906c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009074:	f380 8811 	msr	BASEPRI, r0
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f7ff fcac 	bl	80089dc <vTaskSwitchContext>
 8009084:	f04f 0000 	mov.w	r0, #0
 8009088:	f380 8811 	msr	BASEPRI, r0
 800908c:	bc09      	pop	{r0, r3}
 800908e:	6819      	ldr	r1, [r3, #0]
 8009090:	6808      	ldr	r0, [r1, #0]
 8009092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009096:	f01e 0f10 	tst.w	lr, #16
 800909a:	bf08      	it	eq
 800909c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090a0:	f380 8809 	msr	PSP, r0
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	f3af 8000 	nop.w

080090b0 <pxCurrentTCBConst>:
 80090b0:	2000048c 	.word	0x2000048c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop

080090b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090d0:	f7ff fbc8 	bl	8008864 <xTaskIncrementTick>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090da:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <xPortSysTickHandler+0x3c>)
 80090dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	2300      	movs	r3, #0
 80090e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	e000ed04 	.word	0xe000ed04

080090f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090f8:	b480      	push	{r7}
 80090fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090fc:	4b0b      	ldr	r3, [pc, #44]	; (800912c <vPortSetupTimerInterrupt+0x34>)
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009102:	4b0b      	ldr	r3, [pc, #44]	; (8009130 <vPortSetupTimerInterrupt+0x38>)
 8009104:	2200      	movs	r2, #0
 8009106:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009108:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <vPortSetupTimerInterrupt+0x3c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a0a      	ldr	r2, [pc, #40]	; (8009138 <vPortSetupTimerInterrupt+0x40>)
 800910e:	fba2 2303 	umull	r2, r3, r2, r3
 8009112:	099b      	lsrs	r3, r3, #6
 8009114:	4a09      	ldr	r2, [pc, #36]	; (800913c <vPortSetupTimerInterrupt+0x44>)
 8009116:	3b01      	subs	r3, #1
 8009118:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800911a:	4b04      	ldr	r3, [pc, #16]	; (800912c <vPortSetupTimerInterrupt+0x34>)
 800911c:	2207      	movs	r2, #7
 800911e:	601a      	str	r2, [r3, #0]
}
 8009120:	bf00      	nop
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	e000e010 	.word	0xe000e010
 8009130:	e000e018 	.word	0xe000e018
 8009134:	20000010 	.word	0x20000010
 8009138:	10624dd3 	.word	0x10624dd3
 800913c:	e000e014 	.word	0xe000e014

08009140 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009140:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009150 <vPortEnableVFP+0x10>
 8009144:	6801      	ldr	r1, [r0, #0]
 8009146:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800914a:	6001      	str	r1, [r0, #0]
 800914c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800914e:	bf00      	nop
 8009150:	e000ed88 	.word	0xe000ed88

08009154 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800915a:	f3ef 8305 	mrs	r3, IPSR
 800915e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b0f      	cmp	r3, #15
 8009164:	d913      	bls.n	800918e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009166:	4a16      	ldr	r2, [pc, #88]	; (80091c0 <vPortValidateInterruptPriority+0x6c>)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009170:	4b14      	ldr	r3, [pc, #80]	; (80091c4 <vPortValidateInterruptPriority+0x70>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	7afa      	ldrb	r2, [r7, #11]
 8009176:	429a      	cmp	r2, r3
 8009178:	d209      	bcs.n	800918e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	607b      	str	r3, [r7, #4]
 800918c:	e7fe      	b.n	800918c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800918e:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <vPortValidateInterruptPriority+0x74>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009196:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <vPortValidateInterruptPriority+0x78>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d909      	bls.n	80091b2 <vPortValidateInterruptPriority+0x5e>
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	e7fe      	b.n	80091b0 <vPortValidateInterruptPriority+0x5c>
	}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	e000e3f0 	.word	0xe000e3f0
 80091c4:	200005b8 	.word	0x200005b8
 80091c8:	e000ed0c 	.word	0xe000ed0c
 80091cc:	200005bc 	.word	0x200005bc

080091d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08a      	sub	sp, #40	; 0x28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091dc:	f7ff fa88 	bl	80086f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091e0:	4b57      	ldr	r3, [pc, #348]	; (8009340 <pvPortMalloc+0x170>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091e8:	f000 f90c 	bl	8009404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091ec:	4b55      	ldr	r3, [pc, #340]	; (8009344 <pvPortMalloc+0x174>)
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4013      	ands	r3, r2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 808c 	bne.w	8009312 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d01c      	beq.n	800923a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009200:	2208      	movs	r2, #8
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4413      	add	r3, r2
 8009206:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f003 0307 	and.w	r3, r3, #7
 800920e:	2b00      	cmp	r3, #0
 8009210:	d013      	beq.n	800923a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f023 0307 	bic.w	r3, r3, #7
 8009218:	3308      	adds	r3, #8
 800921a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <pvPortMalloc+0x6a>
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	e7fe      	b.n	8009238 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d068      	beq.n	8009312 <pvPortMalloc+0x142>
 8009240:	4b41      	ldr	r3, [pc, #260]	; (8009348 <pvPortMalloc+0x178>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	429a      	cmp	r2, r3
 8009248:	d863      	bhi.n	8009312 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800924a:	4b40      	ldr	r3, [pc, #256]	; (800934c <pvPortMalloc+0x17c>)
 800924c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800924e:	4b3f      	ldr	r3, [pc, #252]	; (800934c <pvPortMalloc+0x17c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009254:	e004      	b.n	8009260 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	429a      	cmp	r2, r3
 8009268:	d903      	bls.n	8009272 <pvPortMalloc+0xa2>
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1f1      	bne.n	8009256 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009272:	4b33      	ldr	r3, [pc, #204]	; (8009340 <pvPortMalloc+0x170>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009278:	429a      	cmp	r2, r3
 800927a:	d04a      	beq.n	8009312 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2208      	movs	r2, #8
 8009282:	4413      	add	r3, r2
 8009284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	6a3b      	ldr	r3, [r7, #32]
 800928c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	1ad2      	subs	r2, r2, r3
 8009296:	2308      	movs	r3, #8
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	429a      	cmp	r2, r3
 800929c:	d91e      	bls.n	80092dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800929e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4413      	add	r3, r2
 80092a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d009      	beq.n	80092c4 <pvPortMalloc+0xf4>
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	613b      	str	r3, [r7, #16]
 80092c2:	e7fe      	b.n	80092c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	1ad2      	subs	r2, r2, r3
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092d6:	69b8      	ldr	r0, [r7, #24]
 80092d8:	f000 f8f6 	bl	80094c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092dc:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <pvPortMalloc+0x178>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	4a18      	ldr	r2, [pc, #96]	; (8009348 <pvPortMalloc+0x178>)
 80092e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092ea:	4b17      	ldr	r3, [pc, #92]	; (8009348 <pvPortMalloc+0x178>)
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	4b18      	ldr	r3, [pc, #96]	; (8009350 <pvPortMalloc+0x180>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d203      	bcs.n	80092fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092f6:	4b14      	ldr	r3, [pc, #80]	; (8009348 <pvPortMalloc+0x178>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a15      	ldr	r2, [pc, #84]	; (8009350 <pvPortMalloc+0x180>)
 80092fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	4b10      	ldr	r3, [pc, #64]	; (8009344 <pvPortMalloc+0x174>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	431a      	orrs	r2, r3
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	2200      	movs	r2, #0
 8009310:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009312:	f7ff f9fb 	bl	800870c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	f003 0307 	and.w	r3, r3, #7
 800931c:	2b00      	cmp	r3, #0
 800931e:	d009      	beq.n	8009334 <pvPortMalloc+0x164>
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	60fb      	str	r3, [r7, #12]
 8009332:	e7fe      	b.n	8009332 <pvPortMalloc+0x162>
	return pvReturn;
 8009334:	69fb      	ldr	r3, [r7, #28]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3728      	adds	r7, #40	; 0x28
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	200041c8 	.word	0x200041c8
 8009344:	200041d4 	.word	0x200041d4
 8009348:	200041cc 	.word	0x200041cc
 800934c:	200041c0 	.word	0x200041c0
 8009350:	200041d0 	.word	0x200041d0

08009354 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d046      	beq.n	80093f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009366:	2308      	movs	r3, #8
 8009368:	425b      	negs	r3, r3
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	4413      	add	r3, r2
 800936e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	4b20      	ldr	r3, [pc, #128]	; (80093fc <vPortFree+0xa8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4013      	ands	r3, r2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d109      	bne.n	8009396 <vPortFree+0x42>
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	60fb      	str	r3, [r7, #12]
 8009394:	e7fe      	b.n	8009394 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d009      	beq.n	80093b2 <vPortFree+0x5e>
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	60bb      	str	r3, [r7, #8]
 80093b0:	e7fe      	b.n	80093b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	4b11      	ldr	r3, [pc, #68]	; (80093fc <vPortFree+0xa8>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4013      	ands	r3, r2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d019      	beq.n	80093f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d115      	bne.n	80093f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <vPortFree+0xa8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	43db      	mvns	r3, r3
 80093d2:	401a      	ands	r2, r3
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093d8:	f7ff f98a 	bl	80086f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	685a      	ldr	r2, [r3, #4]
 80093e0:	4b07      	ldr	r3, [pc, #28]	; (8009400 <vPortFree+0xac>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4413      	add	r3, r2
 80093e6:	4a06      	ldr	r2, [pc, #24]	; (8009400 <vPortFree+0xac>)
 80093e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093ea:	6938      	ldr	r0, [r7, #16]
 80093ec:	f000 f86c 	bl	80094c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80093f0:	f7ff f98c 	bl	800870c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093f4:	bf00      	nop
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	200041d4 	.word	0x200041d4
 8009400:	200041cc 	.word	0x200041cc

08009404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800940a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800940e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009410:	4b27      	ldr	r3, [pc, #156]	; (80094b0 <prvHeapInit+0xac>)
 8009412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00c      	beq.n	8009438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3307      	adds	r3, #7
 8009422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f023 0307 	bic.w	r3, r3, #7
 800942a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	4a1f      	ldr	r2, [pc, #124]	; (80094b0 <prvHeapInit+0xac>)
 8009434:	4413      	add	r3, r2
 8009436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800943c:	4a1d      	ldr	r2, [pc, #116]	; (80094b4 <prvHeapInit+0xb0>)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009442:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <prvHeapInit+0xb0>)
 8009444:	2200      	movs	r2, #0
 8009446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	4413      	add	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009450:	2208      	movs	r2, #8
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0307 	bic.w	r3, r3, #7
 800945e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4a15      	ldr	r2, [pc, #84]	; (80094b8 <prvHeapInit+0xb4>)
 8009464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009466:	4b14      	ldr	r3, [pc, #80]	; (80094b8 <prvHeapInit+0xb4>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2200      	movs	r2, #0
 800946c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800946e:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <prvHeapInit+0xb4>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	1ad2      	subs	r2, r2, r3
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009484:	4b0c      	ldr	r3, [pc, #48]	; (80094b8 <prvHeapInit+0xb4>)
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	4a0a      	ldr	r2, [pc, #40]	; (80094bc <prvHeapInit+0xb8>)
 8009492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	4a09      	ldr	r2, [pc, #36]	; (80094c0 <prvHeapInit+0xbc>)
 800949a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800949c:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <prvHeapInit+0xc0>)
 800949e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094a2:	601a      	str	r2, [r3, #0]
}
 80094a4:	bf00      	nop
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	200005c0 	.word	0x200005c0
 80094b4:	200041c0 	.word	0x200041c0
 80094b8:	200041c8 	.word	0x200041c8
 80094bc:	200041d0 	.word	0x200041d0
 80094c0:	200041cc 	.word	0x200041cc
 80094c4:	200041d4 	.word	0x200041d4

080094c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094d0:	4b28      	ldr	r3, [pc, #160]	; (8009574 <prvInsertBlockIntoFreeList+0xac>)
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	e002      	b.n	80094dc <prvInsertBlockIntoFreeList+0x14>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d8f7      	bhi.n	80094d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	4413      	add	r3, r2
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d108      	bne.n	800950a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	441a      	add	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	441a      	add	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	429a      	cmp	r2, r3
 800951c:	d118      	bne.n	8009550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	4b15      	ldr	r3, [pc, #84]	; (8009578 <prvInsertBlockIntoFreeList+0xb0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	429a      	cmp	r2, r3
 8009528:	d00d      	beq.n	8009546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	441a      	add	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	e008      	b.n	8009558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009546:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <prvInsertBlockIntoFreeList+0xb0>)
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	e003      	b.n	8009558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	429a      	cmp	r2, r3
 800955e:	d002      	beq.n	8009566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009566:	bf00      	nop
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	200041c0 	.word	0x200041c0
 8009578:	200041c8 	.word	0x200041c8

0800957c <__errno>:
 800957c:	4b01      	ldr	r3, [pc, #4]	; (8009584 <__errno+0x8>)
 800957e:	6818      	ldr	r0, [r3, #0]
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20000020 	.word	0x20000020

08009588 <__libc_init_array>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	4e0d      	ldr	r6, [pc, #52]	; (80095c0 <__libc_init_array+0x38>)
 800958c:	4c0d      	ldr	r4, [pc, #52]	; (80095c4 <__libc_init_array+0x3c>)
 800958e:	1ba4      	subs	r4, r4, r6
 8009590:	10a4      	asrs	r4, r4, #2
 8009592:	2500      	movs	r5, #0
 8009594:	42a5      	cmp	r5, r4
 8009596:	d109      	bne.n	80095ac <__libc_init_array+0x24>
 8009598:	4e0b      	ldr	r6, [pc, #44]	; (80095c8 <__libc_init_array+0x40>)
 800959a:	4c0c      	ldr	r4, [pc, #48]	; (80095cc <__libc_init_array+0x44>)
 800959c:	f002 f8b6 	bl	800b70c <_init>
 80095a0:	1ba4      	subs	r4, r4, r6
 80095a2:	10a4      	asrs	r4, r4, #2
 80095a4:	2500      	movs	r5, #0
 80095a6:	42a5      	cmp	r5, r4
 80095a8:	d105      	bne.n	80095b6 <__libc_init_array+0x2e>
 80095aa:	bd70      	pop	{r4, r5, r6, pc}
 80095ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095b0:	4798      	blx	r3
 80095b2:	3501      	adds	r5, #1
 80095b4:	e7ee      	b.n	8009594 <__libc_init_array+0xc>
 80095b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095ba:	4798      	blx	r3
 80095bc:	3501      	adds	r5, #1
 80095be:	e7f2      	b.n	80095a6 <__libc_init_array+0x1e>
 80095c0:	0800bc60 	.word	0x0800bc60
 80095c4:	0800bc60 	.word	0x0800bc60
 80095c8:	0800bc60 	.word	0x0800bc60
 80095cc:	0800bc64 	.word	0x0800bc64

080095d0 <__itoa>:
 80095d0:	1e93      	subs	r3, r2, #2
 80095d2:	2b22      	cmp	r3, #34	; 0x22
 80095d4:	b510      	push	{r4, lr}
 80095d6:	460c      	mov	r4, r1
 80095d8:	d904      	bls.n	80095e4 <__itoa+0x14>
 80095da:	2300      	movs	r3, #0
 80095dc:	700b      	strb	r3, [r1, #0]
 80095de:	461c      	mov	r4, r3
 80095e0:	4620      	mov	r0, r4
 80095e2:	bd10      	pop	{r4, pc}
 80095e4:	2a0a      	cmp	r2, #10
 80095e6:	d109      	bne.n	80095fc <__itoa+0x2c>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	da07      	bge.n	80095fc <__itoa+0x2c>
 80095ec:	232d      	movs	r3, #45	; 0x2d
 80095ee:	700b      	strb	r3, [r1, #0]
 80095f0:	4240      	negs	r0, r0
 80095f2:	2101      	movs	r1, #1
 80095f4:	4421      	add	r1, r4
 80095f6:	f000 fc95 	bl	8009f24 <__utoa>
 80095fa:	e7f1      	b.n	80095e0 <__itoa+0x10>
 80095fc:	2100      	movs	r1, #0
 80095fe:	e7f9      	b.n	80095f4 <__itoa+0x24>

08009600 <itoa>:
 8009600:	f7ff bfe6 	b.w	80095d0 <__itoa>

08009604 <memcpy>:
 8009604:	b510      	push	{r4, lr}
 8009606:	1e43      	subs	r3, r0, #1
 8009608:	440a      	add	r2, r1
 800960a:	4291      	cmp	r1, r2
 800960c:	d100      	bne.n	8009610 <memcpy+0xc>
 800960e:	bd10      	pop	{r4, pc}
 8009610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009618:	e7f7      	b.n	800960a <memcpy+0x6>

0800961a <memset>:
 800961a:	4402      	add	r2, r0
 800961c:	4603      	mov	r3, r0
 800961e:	4293      	cmp	r3, r2
 8009620:	d100      	bne.n	8009624 <memset+0xa>
 8009622:	4770      	bx	lr
 8009624:	f803 1b01 	strb.w	r1, [r3], #1
 8009628:	e7f9      	b.n	800961e <memset+0x4>

0800962a <__cvt>:
 800962a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800962e:	ec55 4b10 	vmov	r4, r5, d0
 8009632:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009634:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009638:	2d00      	cmp	r5, #0
 800963a:	460e      	mov	r6, r1
 800963c:	4691      	mov	r9, r2
 800963e:	4619      	mov	r1, r3
 8009640:	bfb8      	it	lt
 8009642:	4622      	movlt	r2, r4
 8009644:	462b      	mov	r3, r5
 8009646:	f027 0720 	bic.w	r7, r7, #32
 800964a:	bfbb      	ittet	lt
 800964c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009650:	461d      	movlt	r5, r3
 8009652:	2300      	movge	r3, #0
 8009654:	232d      	movlt	r3, #45	; 0x2d
 8009656:	bfb8      	it	lt
 8009658:	4614      	movlt	r4, r2
 800965a:	2f46      	cmp	r7, #70	; 0x46
 800965c:	700b      	strb	r3, [r1, #0]
 800965e:	d004      	beq.n	800966a <__cvt+0x40>
 8009660:	2f45      	cmp	r7, #69	; 0x45
 8009662:	d100      	bne.n	8009666 <__cvt+0x3c>
 8009664:	3601      	adds	r6, #1
 8009666:	2102      	movs	r1, #2
 8009668:	e000      	b.n	800966c <__cvt+0x42>
 800966a:	2103      	movs	r1, #3
 800966c:	ab03      	add	r3, sp, #12
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	ab02      	add	r3, sp, #8
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	4632      	mov	r2, r6
 8009676:	4653      	mov	r3, sl
 8009678:	ec45 4b10 	vmov	d0, r4, r5
 800967c:	f000 fd1c 	bl	800a0b8 <_dtoa_r>
 8009680:	2f47      	cmp	r7, #71	; 0x47
 8009682:	4680      	mov	r8, r0
 8009684:	d102      	bne.n	800968c <__cvt+0x62>
 8009686:	f019 0f01 	tst.w	r9, #1
 800968a:	d026      	beq.n	80096da <__cvt+0xb0>
 800968c:	2f46      	cmp	r7, #70	; 0x46
 800968e:	eb08 0906 	add.w	r9, r8, r6
 8009692:	d111      	bne.n	80096b8 <__cvt+0x8e>
 8009694:	f898 3000 	ldrb.w	r3, [r8]
 8009698:	2b30      	cmp	r3, #48	; 0x30
 800969a:	d10a      	bne.n	80096b2 <__cvt+0x88>
 800969c:	2200      	movs	r2, #0
 800969e:	2300      	movs	r3, #0
 80096a0:	4620      	mov	r0, r4
 80096a2:	4629      	mov	r1, r5
 80096a4:	f7f7 fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 80096a8:	b918      	cbnz	r0, 80096b2 <__cvt+0x88>
 80096aa:	f1c6 0601 	rsb	r6, r6, #1
 80096ae:	f8ca 6000 	str.w	r6, [sl]
 80096b2:	f8da 3000 	ldr.w	r3, [sl]
 80096b6:	4499      	add	r9, r3
 80096b8:	2200      	movs	r2, #0
 80096ba:	2300      	movs	r3, #0
 80096bc:	4620      	mov	r0, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	f7f7 fa0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80096c4:	b938      	cbnz	r0, 80096d6 <__cvt+0xac>
 80096c6:	2230      	movs	r2, #48	; 0x30
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	454b      	cmp	r3, r9
 80096cc:	d205      	bcs.n	80096da <__cvt+0xb0>
 80096ce:	1c59      	adds	r1, r3, #1
 80096d0:	9103      	str	r1, [sp, #12]
 80096d2:	701a      	strb	r2, [r3, #0]
 80096d4:	e7f8      	b.n	80096c8 <__cvt+0x9e>
 80096d6:	f8cd 900c 	str.w	r9, [sp, #12]
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096de:	eba3 0308 	sub.w	r3, r3, r8
 80096e2:	4640      	mov	r0, r8
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	b004      	add	sp, #16
 80096e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080096ec <__exponent>:
 80096ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ee:	2900      	cmp	r1, #0
 80096f0:	4604      	mov	r4, r0
 80096f2:	bfba      	itte	lt
 80096f4:	4249      	neglt	r1, r1
 80096f6:	232d      	movlt	r3, #45	; 0x2d
 80096f8:	232b      	movge	r3, #43	; 0x2b
 80096fa:	2909      	cmp	r1, #9
 80096fc:	f804 2b02 	strb.w	r2, [r4], #2
 8009700:	7043      	strb	r3, [r0, #1]
 8009702:	dd20      	ble.n	8009746 <__exponent+0x5a>
 8009704:	f10d 0307 	add.w	r3, sp, #7
 8009708:	461f      	mov	r7, r3
 800970a:	260a      	movs	r6, #10
 800970c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009710:	fb06 1115 	mls	r1, r6, r5, r1
 8009714:	3130      	adds	r1, #48	; 0x30
 8009716:	2d09      	cmp	r5, #9
 8009718:	f803 1c01 	strb.w	r1, [r3, #-1]
 800971c:	f103 32ff 	add.w	r2, r3, #4294967295
 8009720:	4629      	mov	r1, r5
 8009722:	dc09      	bgt.n	8009738 <__exponent+0x4c>
 8009724:	3130      	adds	r1, #48	; 0x30
 8009726:	3b02      	subs	r3, #2
 8009728:	f802 1c01 	strb.w	r1, [r2, #-1]
 800972c:	42bb      	cmp	r3, r7
 800972e:	4622      	mov	r2, r4
 8009730:	d304      	bcc.n	800973c <__exponent+0x50>
 8009732:	1a10      	subs	r0, r2, r0
 8009734:	b003      	add	sp, #12
 8009736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009738:	4613      	mov	r3, r2
 800973a:	e7e7      	b.n	800970c <__exponent+0x20>
 800973c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009740:	f804 2b01 	strb.w	r2, [r4], #1
 8009744:	e7f2      	b.n	800972c <__exponent+0x40>
 8009746:	2330      	movs	r3, #48	; 0x30
 8009748:	4419      	add	r1, r3
 800974a:	7083      	strb	r3, [r0, #2]
 800974c:	1d02      	adds	r2, r0, #4
 800974e:	70c1      	strb	r1, [r0, #3]
 8009750:	e7ef      	b.n	8009732 <__exponent+0x46>
	...

08009754 <_printf_float>:
 8009754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009758:	b08d      	sub	sp, #52	; 0x34
 800975a:	460c      	mov	r4, r1
 800975c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009760:	4616      	mov	r6, r2
 8009762:	461f      	mov	r7, r3
 8009764:	4605      	mov	r5, r0
 8009766:	f001 fa5f 	bl	800ac28 <_localeconv_r>
 800976a:	6803      	ldr	r3, [r0, #0]
 800976c:	9304      	str	r3, [sp, #16]
 800976e:	4618      	mov	r0, r3
 8009770:	f7f6 fd36 	bl	80001e0 <strlen>
 8009774:	2300      	movs	r3, #0
 8009776:	930a      	str	r3, [sp, #40]	; 0x28
 8009778:	f8d8 3000 	ldr.w	r3, [r8]
 800977c:	9005      	str	r0, [sp, #20]
 800977e:	3307      	adds	r3, #7
 8009780:	f023 0307 	bic.w	r3, r3, #7
 8009784:	f103 0208 	add.w	r2, r3, #8
 8009788:	f894 a018 	ldrb.w	sl, [r4, #24]
 800978c:	f8d4 b000 	ldr.w	fp, [r4]
 8009790:	f8c8 2000 	str.w	r2, [r8]
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800979c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097a4:	9307      	str	r3, [sp, #28]
 80097a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295
 80097ae:	4ba7      	ldr	r3, [pc, #668]	; (8009a4c <_printf_float+0x2f8>)
 80097b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097b4:	f7f7 f9c2 	bl	8000b3c <__aeabi_dcmpun>
 80097b8:	bb70      	cbnz	r0, 8009818 <_printf_float+0xc4>
 80097ba:	f04f 32ff 	mov.w	r2, #4294967295
 80097be:	4ba3      	ldr	r3, [pc, #652]	; (8009a4c <_printf_float+0x2f8>)
 80097c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097c4:	f7f7 f99c 	bl	8000b00 <__aeabi_dcmple>
 80097c8:	bb30      	cbnz	r0, 8009818 <_printf_float+0xc4>
 80097ca:	2200      	movs	r2, #0
 80097cc:	2300      	movs	r3, #0
 80097ce:	4640      	mov	r0, r8
 80097d0:	4649      	mov	r1, r9
 80097d2:	f7f7 f98b 	bl	8000aec <__aeabi_dcmplt>
 80097d6:	b110      	cbz	r0, 80097de <_printf_float+0x8a>
 80097d8:	232d      	movs	r3, #45	; 0x2d
 80097da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097de:	4a9c      	ldr	r2, [pc, #624]	; (8009a50 <_printf_float+0x2fc>)
 80097e0:	4b9c      	ldr	r3, [pc, #624]	; (8009a54 <_printf_float+0x300>)
 80097e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80097e6:	bf8c      	ite	hi
 80097e8:	4690      	movhi	r8, r2
 80097ea:	4698      	movls	r8, r3
 80097ec:	2303      	movs	r3, #3
 80097ee:	f02b 0204 	bic.w	r2, fp, #4
 80097f2:	6123      	str	r3, [r4, #16]
 80097f4:	6022      	str	r2, [r4, #0]
 80097f6:	f04f 0900 	mov.w	r9, #0
 80097fa:	9700      	str	r7, [sp, #0]
 80097fc:	4633      	mov	r3, r6
 80097fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009800:	4621      	mov	r1, r4
 8009802:	4628      	mov	r0, r5
 8009804:	f000 f9e6 	bl	8009bd4 <_printf_common>
 8009808:	3001      	adds	r0, #1
 800980a:	f040 808d 	bne.w	8009928 <_printf_float+0x1d4>
 800980e:	f04f 30ff 	mov.w	r0, #4294967295
 8009812:	b00d      	add	sp, #52	; 0x34
 8009814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	4640      	mov	r0, r8
 800981e:	4649      	mov	r1, r9
 8009820:	f7f7 f98c 	bl	8000b3c <__aeabi_dcmpun>
 8009824:	b110      	cbz	r0, 800982c <_printf_float+0xd8>
 8009826:	4a8c      	ldr	r2, [pc, #560]	; (8009a58 <_printf_float+0x304>)
 8009828:	4b8c      	ldr	r3, [pc, #560]	; (8009a5c <_printf_float+0x308>)
 800982a:	e7da      	b.n	80097e2 <_printf_float+0x8e>
 800982c:	6861      	ldr	r1, [r4, #4]
 800982e:	1c4b      	adds	r3, r1, #1
 8009830:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009834:	a80a      	add	r0, sp, #40	; 0x28
 8009836:	d13e      	bne.n	80098b6 <_printf_float+0x162>
 8009838:	2306      	movs	r3, #6
 800983a:	6063      	str	r3, [r4, #4]
 800983c:	2300      	movs	r3, #0
 800983e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009842:	ab09      	add	r3, sp, #36	; 0x24
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	ec49 8b10 	vmov	d0, r8, r9
 800984a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800984e:	6022      	str	r2, [r4, #0]
 8009850:	f8cd a004 	str.w	sl, [sp, #4]
 8009854:	6861      	ldr	r1, [r4, #4]
 8009856:	4628      	mov	r0, r5
 8009858:	f7ff fee7 	bl	800962a <__cvt>
 800985c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009860:	2b47      	cmp	r3, #71	; 0x47
 8009862:	4680      	mov	r8, r0
 8009864:	d109      	bne.n	800987a <_printf_float+0x126>
 8009866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009868:	1cd8      	adds	r0, r3, #3
 800986a:	db02      	blt.n	8009872 <_printf_float+0x11e>
 800986c:	6862      	ldr	r2, [r4, #4]
 800986e:	4293      	cmp	r3, r2
 8009870:	dd47      	ble.n	8009902 <_printf_float+0x1ae>
 8009872:	f1aa 0a02 	sub.w	sl, sl, #2
 8009876:	fa5f fa8a 	uxtb.w	sl, sl
 800987a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800987e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009880:	d824      	bhi.n	80098cc <_printf_float+0x178>
 8009882:	3901      	subs	r1, #1
 8009884:	4652      	mov	r2, sl
 8009886:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800988a:	9109      	str	r1, [sp, #36]	; 0x24
 800988c:	f7ff ff2e 	bl	80096ec <__exponent>
 8009890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009892:	1813      	adds	r3, r2, r0
 8009894:	2a01      	cmp	r2, #1
 8009896:	4681      	mov	r9, r0
 8009898:	6123      	str	r3, [r4, #16]
 800989a:	dc02      	bgt.n	80098a2 <_printf_float+0x14e>
 800989c:	6822      	ldr	r2, [r4, #0]
 800989e:	07d1      	lsls	r1, r2, #31
 80098a0:	d501      	bpl.n	80098a6 <_printf_float+0x152>
 80098a2:	3301      	adds	r3, #1
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0a5      	beq.n	80097fa <_printf_float+0xa6>
 80098ae:	232d      	movs	r3, #45	; 0x2d
 80098b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b4:	e7a1      	b.n	80097fa <_printf_float+0xa6>
 80098b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80098ba:	f000 8177 	beq.w	8009bac <_printf_float+0x458>
 80098be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80098c2:	d1bb      	bne.n	800983c <_printf_float+0xe8>
 80098c4:	2900      	cmp	r1, #0
 80098c6:	d1b9      	bne.n	800983c <_printf_float+0xe8>
 80098c8:	2301      	movs	r3, #1
 80098ca:	e7b6      	b.n	800983a <_printf_float+0xe6>
 80098cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80098d0:	d119      	bne.n	8009906 <_printf_float+0x1b2>
 80098d2:	2900      	cmp	r1, #0
 80098d4:	6863      	ldr	r3, [r4, #4]
 80098d6:	dd0c      	ble.n	80098f2 <_printf_float+0x19e>
 80098d8:	6121      	str	r1, [r4, #16]
 80098da:	b913      	cbnz	r3, 80098e2 <_printf_float+0x18e>
 80098dc:	6822      	ldr	r2, [r4, #0]
 80098de:	07d2      	lsls	r2, r2, #31
 80098e0:	d502      	bpl.n	80098e8 <_printf_float+0x194>
 80098e2:	3301      	adds	r3, #1
 80098e4:	440b      	add	r3, r1
 80098e6:	6123      	str	r3, [r4, #16]
 80098e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80098ec:	f04f 0900 	mov.w	r9, #0
 80098f0:	e7d9      	b.n	80098a6 <_printf_float+0x152>
 80098f2:	b913      	cbnz	r3, 80098fa <_printf_float+0x1a6>
 80098f4:	6822      	ldr	r2, [r4, #0]
 80098f6:	07d0      	lsls	r0, r2, #31
 80098f8:	d501      	bpl.n	80098fe <_printf_float+0x1aa>
 80098fa:	3302      	adds	r3, #2
 80098fc:	e7f3      	b.n	80098e6 <_printf_float+0x192>
 80098fe:	2301      	movs	r3, #1
 8009900:	e7f1      	b.n	80098e6 <_printf_float+0x192>
 8009902:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009906:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800990a:	4293      	cmp	r3, r2
 800990c:	db05      	blt.n	800991a <_printf_float+0x1c6>
 800990e:	6822      	ldr	r2, [r4, #0]
 8009910:	6123      	str	r3, [r4, #16]
 8009912:	07d1      	lsls	r1, r2, #31
 8009914:	d5e8      	bpl.n	80098e8 <_printf_float+0x194>
 8009916:	3301      	adds	r3, #1
 8009918:	e7e5      	b.n	80098e6 <_printf_float+0x192>
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfd4      	ite	le
 800991e:	f1c3 0302 	rsble	r3, r3, #2
 8009922:	2301      	movgt	r3, #1
 8009924:	4413      	add	r3, r2
 8009926:	e7de      	b.n	80098e6 <_printf_float+0x192>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	055a      	lsls	r2, r3, #21
 800992c:	d407      	bmi.n	800993e <_printf_float+0x1ea>
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	4642      	mov	r2, r8
 8009932:	4631      	mov	r1, r6
 8009934:	4628      	mov	r0, r5
 8009936:	47b8      	blx	r7
 8009938:	3001      	adds	r0, #1
 800993a:	d12b      	bne.n	8009994 <_printf_float+0x240>
 800993c:	e767      	b.n	800980e <_printf_float+0xba>
 800993e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009942:	f240 80dc 	bls.w	8009afe <_printf_float+0x3aa>
 8009946:	2200      	movs	r2, #0
 8009948:	2300      	movs	r3, #0
 800994a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800994e:	f7f7 f8c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009952:	2800      	cmp	r0, #0
 8009954:	d033      	beq.n	80099be <_printf_float+0x26a>
 8009956:	2301      	movs	r3, #1
 8009958:	4a41      	ldr	r2, [pc, #260]	; (8009a60 <_printf_float+0x30c>)
 800995a:	4631      	mov	r1, r6
 800995c:	4628      	mov	r0, r5
 800995e:	47b8      	blx	r7
 8009960:	3001      	adds	r0, #1
 8009962:	f43f af54 	beq.w	800980e <_printf_float+0xba>
 8009966:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800996a:	429a      	cmp	r2, r3
 800996c:	db02      	blt.n	8009974 <_printf_float+0x220>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	07d8      	lsls	r0, r3, #31
 8009972:	d50f      	bpl.n	8009994 <_printf_float+0x240>
 8009974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009978:	4631      	mov	r1, r6
 800997a:	4628      	mov	r0, r5
 800997c:	47b8      	blx	r7
 800997e:	3001      	adds	r0, #1
 8009980:	f43f af45 	beq.w	800980e <_printf_float+0xba>
 8009984:	f04f 0800 	mov.w	r8, #0
 8009988:	f104 091a 	add.w	r9, r4, #26
 800998c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800998e:	3b01      	subs	r3, #1
 8009990:	4543      	cmp	r3, r8
 8009992:	dc09      	bgt.n	80099a8 <_printf_float+0x254>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	079b      	lsls	r3, r3, #30
 8009998:	f100 8103 	bmi.w	8009ba2 <_printf_float+0x44e>
 800999c:	68e0      	ldr	r0, [r4, #12]
 800999e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a0:	4298      	cmp	r0, r3
 80099a2:	bfb8      	it	lt
 80099a4:	4618      	movlt	r0, r3
 80099a6:	e734      	b.n	8009812 <_printf_float+0xbe>
 80099a8:	2301      	movs	r3, #1
 80099aa:	464a      	mov	r2, r9
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	f43f af2b 	beq.w	800980e <_printf_float+0xba>
 80099b8:	f108 0801 	add.w	r8, r8, #1
 80099bc:	e7e6      	b.n	800998c <_printf_float+0x238>
 80099be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc2b      	bgt.n	8009a1c <_printf_float+0x2c8>
 80099c4:	2301      	movs	r3, #1
 80099c6:	4a26      	ldr	r2, [pc, #152]	; (8009a60 <_printf_float+0x30c>)
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f af1d 	beq.w	800980e <_printf_float+0xba>
 80099d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d6:	b923      	cbnz	r3, 80099e2 <_printf_float+0x28e>
 80099d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099da:	b913      	cbnz	r3, 80099e2 <_printf_float+0x28e>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	07d9      	lsls	r1, r3, #31
 80099e0:	d5d8      	bpl.n	8009994 <_printf_float+0x240>
 80099e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099e6:	4631      	mov	r1, r6
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b8      	blx	r7
 80099ec:	3001      	adds	r0, #1
 80099ee:	f43f af0e 	beq.w	800980e <_printf_float+0xba>
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	f104 0a1a 	add.w	sl, r4, #26
 80099fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099fc:	425b      	negs	r3, r3
 80099fe:	454b      	cmp	r3, r9
 8009a00:	dc01      	bgt.n	8009a06 <_printf_float+0x2b2>
 8009a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a04:	e794      	b.n	8009930 <_printf_float+0x1dc>
 8009a06:	2301      	movs	r3, #1
 8009a08:	4652      	mov	r2, sl
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	47b8      	blx	r7
 8009a10:	3001      	adds	r0, #1
 8009a12:	f43f aefc 	beq.w	800980e <_printf_float+0xba>
 8009a16:	f109 0901 	add.w	r9, r9, #1
 8009a1a:	e7ee      	b.n	80099fa <_printf_float+0x2a6>
 8009a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a20:	429a      	cmp	r2, r3
 8009a22:	bfa8      	it	ge
 8009a24:	461a      	movge	r2, r3
 8009a26:	2a00      	cmp	r2, #0
 8009a28:	4691      	mov	r9, r2
 8009a2a:	dd07      	ble.n	8009a3c <_printf_float+0x2e8>
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4642      	mov	r2, r8
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b8      	blx	r7
 8009a36:	3001      	adds	r0, #1
 8009a38:	f43f aee9 	beq.w	800980e <_printf_float+0xba>
 8009a3c:	f104 031a 	add.w	r3, r4, #26
 8009a40:	f04f 0b00 	mov.w	fp, #0
 8009a44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a48:	9306      	str	r3, [sp, #24]
 8009a4a:	e015      	b.n	8009a78 <_printf_float+0x324>
 8009a4c:	7fefffff 	.word	0x7fefffff
 8009a50:	0800b9d8 	.word	0x0800b9d8
 8009a54:	0800b9d4 	.word	0x0800b9d4
 8009a58:	0800b9e0 	.word	0x0800b9e0
 8009a5c:	0800b9dc 	.word	0x0800b9dc
 8009a60:	0800b9e4 	.word	0x0800b9e4
 8009a64:	2301      	movs	r3, #1
 8009a66:	9a06      	ldr	r2, [sp, #24]
 8009a68:	4631      	mov	r1, r6
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	47b8      	blx	r7
 8009a6e:	3001      	adds	r0, #1
 8009a70:	f43f aecd 	beq.w	800980e <_printf_float+0xba>
 8009a74:	f10b 0b01 	add.w	fp, fp, #1
 8009a78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009a7c:	ebaa 0309 	sub.w	r3, sl, r9
 8009a80:	455b      	cmp	r3, fp
 8009a82:	dcef      	bgt.n	8009a64 <_printf_float+0x310>
 8009a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	44d0      	add	r8, sl
 8009a8c:	db15      	blt.n	8009aba <_printf_float+0x366>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	07da      	lsls	r2, r3, #31
 8009a92:	d412      	bmi.n	8009aba <_printf_float+0x366>
 8009a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a98:	eba3 020a 	sub.w	r2, r3, sl
 8009a9c:	eba3 0a01 	sub.w	sl, r3, r1
 8009aa0:	4592      	cmp	sl, r2
 8009aa2:	bfa8      	it	ge
 8009aa4:	4692      	movge	sl, r2
 8009aa6:	f1ba 0f00 	cmp.w	sl, #0
 8009aaa:	dc0e      	bgt.n	8009aca <_printf_float+0x376>
 8009aac:	f04f 0800 	mov.w	r8, #0
 8009ab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ab4:	f104 091a 	add.w	r9, r4, #26
 8009ab8:	e019      	b.n	8009aee <_printf_float+0x39a>
 8009aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	47b8      	blx	r7
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	d1e5      	bne.n	8009a94 <_printf_float+0x340>
 8009ac8:	e6a1      	b.n	800980e <_printf_float+0xba>
 8009aca:	4653      	mov	r3, sl
 8009acc:	4642      	mov	r2, r8
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	47b8      	blx	r7
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d1e9      	bne.n	8009aac <_printf_float+0x358>
 8009ad8:	e699      	b.n	800980e <_printf_float+0xba>
 8009ada:	2301      	movs	r3, #1
 8009adc:	464a      	mov	r2, r9
 8009ade:	4631      	mov	r1, r6
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	47b8      	blx	r7
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	f43f ae92 	beq.w	800980e <_printf_float+0xba>
 8009aea:	f108 0801 	add.w	r8, r8, #1
 8009aee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	eba3 030a 	sub.w	r3, r3, sl
 8009af8:	4543      	cmp	r3, r8
 8009afa:	dcee      	bgt.n	8009ada <_printf_float+0x386>
 8009afc:	e74a      	b.n	8009994 <_printf_float+0x240>
 8009afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b00:	2a01      	cmp	r2, #1
 8009b02:	dc01      	bgt.n	8009b08 <_printf_float+0x3b4>
 8009b04:	07db      	lsls	r3, r3, #31
 8009b06:	d53a      	bpl.n	8009b7e <_printf_float+0x42a>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	4642      	mov	r2, r8
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	f43f ae7b 	beq.w	800980e <_printf_float+0xba>
 8009b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	f108 0801 	add.w	r8, r8, #1
 8009b28:	f43f ae71 	beq.w	800980e <_printf_float+0xba>
 8009b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f103 3aff 	add.w	sl, r3, #4294967295
 8009b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f7f6 ffcd 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b3e:	b9c8      	cbnz	r0, 8009b74 <_printf_float+0x420>
 8009b40:	4653      	mov	r3, sl
 8009b42:	4642      	mov	r2, r8
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d10e      	bne.n	8009b6c <_printf_float+0x418>
 8009b4e:	e65e      	b.n	800980e <_printf_float+0xba>
 8009b50:	2301      	movs	r3, #1
 8009b52:	4652      	mov	r2, sl
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	f43f ae57 	beq.w	800980e <_printf_float+0xba>
 8009b60:	f108 0801 	add.w	r8, r8, #1
 8009b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b66:	3b01      	subs	r3, #1
 8009b68:	4543      	cmp	r3, r8
 8009b6a:	dcf1      	bgt.n	8009b50 <_printf_float+0x3fc>
 8009b6c:	464b      	mov	r3, r9
 8009b6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b72:	e6de      	b.n	8009932 <_printf_float+0x1de>
 8009b74:	f04f 0800 	mov.w	r8, #0
 8009b78:	f104 0a1a 	add.w	sl, r4, #26
 8009b7c:	e7f2      	b.n	8009b64 <_printf_float+0x410>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e7df      	b.n	8009b42 <_printf_float+0x3ee>
 8009b82:	2301      	movs	r3, #1
 8009b84:	464a      	mov	r2, r9
 8009b86:	4631      	mov	r1, r6
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b8      	blx	r7
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	f43f ae3e 	beq.w	800980e <_printf_float+0xba>
 8009b92:	f108 0801 	add.w	r8, r8, #1
 8009b96:	68e3      	ldr	r3, [r4, #12]
 8009b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b9a:	1a9b      	subs	r3, r3, r2
 8009b9c:	4543      	cmp	r3, r8
 8009b9e:	dcf0      	bgt.n	8009b82 <_printf_float+0x42e>
 8009ba0:	e6fc      	b.n	800999c <_printf_float+0x248>
 8009ba2:	f04f 0800 	mov.w	r8, #0
 8009ba6:	f104 0919 	add.w	r9, r4, #25
 8009baa:	e7f4      	b.n	8009b96 <_printf_float+0x442>
 8009bac:	2900      	cmp	r1, #0
 8009bae:	f43f ae8b 	beq.w	80098c8 <_printf_float+0x174>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009bb8:	ab09      	add	r3, sp, #36	; 0x24
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	ec49 8b10 	vmov	d0, r8, r9
 8009bc0:	6022      	str	r2, [r4, #0]
 8009bc2:	f8cd a004 	str.w	sl, [sp, #4]
 8009bc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f7ff fd2d 	bl	800962a <__cvt>
 8009bd0:	4680      	mov	r8, r0
 8009bd2:	e648      	b.n	8009866 <_printf_float+0x112>

08009bd4 <_printf_common>:
 8009bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd8:	4691      	mov	r9, r2
 8009bda:	461f      	mov	r7, r3
 8009bdc:	688a      	ldr	r2, [r1, #8]
 8009bde:	690b      	ldr	r3, [r1, #16]
 8009be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009be4:	4293      	cmp	r3, r2
 8009be6:	bfb8      	it	lt
 8009be8:	4613      	movlt	r3, r2
 8009bea:	f8c9 3000 	str.w	r3, [r9]
 8009bee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	b112      	cbz	r2, 8009bfe <_printf_common+0x2a>
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	f8c9 3000 	str.w	r3, [r9]
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	0699      	lsls	r1, r3, #26
 8009c02:	bf42      	ittt	mi
 8009c04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c08:	3302      	addmi	r3, #2
 8009c0a:	f8c9 3000 	strmi.w	r3, [r9]
 8009c0e:	6825      	ldr	r5, [r4, #0]
 8009c10:	f015 0506 	ands.w	r5, r5, #6
 8009c14:	d107      	bne.n	8009c26 <_printf_common+0x52>
 8009c16:	f104 0a19 	add.w	sl, r4, #25
 8009c1a:	68e3      	ldr	r3, [r4, #12]
 8009c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c20:	1a9b      	subs	r3, r3, r2
 8009c22:	42ab      	cmp	r3, r5
 8009c24:	dc28      	bgt.n	8009c78 <_printf_common+0xa4>
 8009c26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c2a:	6822      	ldr	r2, [r4, #0]
 8009c2c:	3300      	adds	r3, #0
 8009c2e:	bf18      	it	ne
 8009c30:	2301      	movne	r3, #1
 8009c32:	0692      	lsls	r2, r2, #26
 8009c34:	d42d      	bmi.n	8009c92 <_printf_common+0xbe>
 8009c36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	47c0      	blx	r8
 8009c40:	3001      	adds	r0, #1
 8009c42:	d020      	beq.n	8009c86 <_printf_common+0xb2>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	68e5      	ldr	r5, [r4, #12]
 8009c48:	f8d9 2000 	ldr.w	r2, [r9]
 8009c4c:	f003 0306 	and.w	r3, r3, #6
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	bf08      	it	eq
 8009c54:	1aad      	subeq	r5, r5, r2
 8009c56:	68a3      	ldr	r3, [r4, #8]
 8009c58:	6922      	ldr	r2, [r4, #16]
 8009c5a:	bf0c      	ite	eq
 8009c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c60:	2500      	movne	r5, #0
 8009c62:	4293      	cmp	r3, r2
 8009c64:	bfc4      	itt	gt
 8009c66:	1a9b      	subgt	r3, r3, r2
 8009c68:	18ed      	addgt	r5, r5, r3
 8009c6a:	f04f 0900 	mov.w	r9, #0
 8009c6e:	341a      	adds	r4, #26
 8009c70:	454d      	cmp	r5, r9
 8009c72:	d11a      	bne.n	8009caa <_printf_common+0xd6>
 8009c74:	2000      	movs	r0, #0
 8009c76:	e008      	b.n	8009c8a <_printf_common+0xb6>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	4652      	mov	r2, sl
 8009c7c:	4639      	mov	r1, r7
 8009c7e:	4630      	mov	r0, r6
 8009c80:	47c0      	blx	r8
 8009c82:	3001      	adds	r0, #1
 8009c84:	d103      	bne.n	8009c8e <_printf_common+0xba>
 8009c86:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8e:	3501      	adds	r5, #1
 8009c90:	e7c3      	b.n	8009c1a <_printf_common+0x46>
 8009c92:	18e1      	adds	r1, r4, r3
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	2030      	movs	r0, #48	; 0x30
 8009c98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c9c:	4422      	add	r2, r4
 8009c9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ca2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ca6:	3302      	adds	r3, #2
 8009ca8:	e7c5      	b.n	8009c36 <_printf_common+0x62>
 8009caa:	2301      	movs	r3, #1
 8009cac:	4622      	mov	r2, r4
 8009cae:	4639      	mov	r1, r7
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	47c0      	blx	r8
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d0e6      	beq.n	8009c86 <_printf_common+0xb2>
 8009cb8:	f109 0901 	add.w	r9, r9, #1
 8009cbc:	e7d8      	b.n	8009c70 <_printf_common+0x9c>
	...

08009cc0 <_printf_i>:
 8009cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009cc8:	460c      	mov	r4, r1
 8009cca:	7e09      	ldrb	r1, [r1, #24]
 8009ccc:	b085      	sub	sp, #20
 8009cce:	296e      	cmp	r1, #110	; 0x6e
 8009cd0:	4617      	mov	r7, r2
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	4698      	mov	r8, r3
 8009cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cd8:	f000 80b3 	beq.w	8009e42 <_printf_i+0x182>
 8009cdc:	d822      	bhi.n	8009d24 <_printf_i+0x64>
 8009cde:	2963      	cmp	r1, #99	; 0x63
 8009ce0:	d036      	beq.n	8009d50 <_printf_i+0x90>
 8009ce2:	d80a      	bhi.n	8009cfa <_printf_i+0x3a>
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	f000 80b9 	beq.w	8009e5c <_printf_i+0x19c>
 8009cea:	2958      	cmp	r1, #88	; 0x58
 8009cec:	f000 8083 	beq.w	8009df6 <_printf_i+0x136>
 8009cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cf4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009cf8:	e032      	b.n	8009d60 <_printf_i+0xa0>
 8009cfa:	2964      	cmp	r1, #100	; 0x64
 8009cfc:	d001      	beq.n	8009d02 <_printf_i+0x42>
 8009cfe:	2969      	cmp	r1, #105	; 0x69
 8009d00:	d1f6      	bne.n	8009cf0 <_printf_i+0x30>
 8009d02:	6820      	ldr	r0, [r4, #0]
 8009d04:	6813      	ldr	r3, [r2, #0]
 8009d06:	0605      	lsls	r5, r0, #24
 8009d08:	f103 0104 	add.w	r1, r3, #4
 8009d0c:	d52a      	bpl.n	8009d64 <_printf_i+0xa4>
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6011      	str	r1, [r2, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da03      	bge.n	8009d1e <_printf_i+0x5e>
 8009d16:	222d      	movs	r2, #45	; 0x2d
 8009d18:	425b      	negs	r3, r3
 8009d1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d1e:	486f      	ldr	r0, [pc, #444]	; (8009edc <_printf_i+0x21c>)
 8009d20:	220a      	movs	r2, #10
 8009d22:	e039      	b.n	8009d98 <_printf_i+0xd8>
 8009d24:	2973      	cmp	r1, #115	; 0x73
 8009d26:	f000 809d 	beq.w	8009e64 <_printf_i+0x1a4>
 8009d2a:	d808      	bhi.n	8009d3e <_printf_i+0x7e>
 8009d2c:	296f      	cmp	r1, #111	; 0x6f
 8009d2e:	d020      	beq.n	8009d72 <_printf_i+0xb2>
 8009d30:	2970      	cmp	r1, #112	; 0x70
 8009d32:	d1dd      	bne.n	8009cf0 <_printf_i+0x30>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	f043 0320 	orr.w	r3, r3, #32
 8009d3a:	6023      	str	r3, [r4, #0]
 8009d3c:	e003      	b.n	8009d46 <_printf_i+0x86>
 8009d3e:	2975      	cmp	r1, #117	; 0x75
 8009d40:	d017      	beq.n	8009d72 <_printf_i+0xb2>
 8009d42:	2978      	cmp	r1, #120	; 0x78
 8009d44:	d1d4      	bne.n	8009cf0 <_printf_i+0x30>
 8009d46:	2378      	movs	r3, #120	; 0x78
 8009d48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d4c:	4864      	ldr	r0, [pc, #400]	; (8009ee0 <_printf_i+0x220>)
 8009d4e:	e055      	b.n	8009dfc <_printf_i+0x13c>
 8009d50:	6813      	ldr	r3, [r2, #0]
 8009d52:	1d19      	adds	r1, r3, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6011      	str	r1, [r2, #0]
 8009d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d60:	2301      	movs	r3, #1
 8009d62:	e08c      	b.n	8009e7e <_printf_i+0x1be>
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6011      	str	r1, [r2, #0]
 8009d68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d6c:	bf18      	it	ne
 8009d6e:	b21b      	sxthne	r3, r3
 8009d70:	e7cf      	b.n	8009d12 <_printf_i+0x52>
 8009d72:	6813      	ldr	r3, [r2, #0]
 8009d74:	6825      	ldr	r5, [r4, #0]
 8009d76:	1d18      	adds	r0, r3, #4
 8009d78:	6010      	str	r0, [r2, #0]
 8009d7a:	0628      	lsls	r0, r5, #24
 8009d7c:	d501      	bpl.n	8009d82 <_printf_i+0xc2>
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	e002      	b.n	8009d88 <_printf_i+0xc8>
 8009d82:	0668      	lsls	r0, r5, #25
 8009d84:	d5fb      	bpl.n	8009d7e <_printf_i+0xbe>
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	4854      	ldr	r0, [pc, #336]	; (8009edc <_printf_i+0x21c>)
 8009d8a:	296f      	cmp	r1, #111	; 0x6f
 8009d8c:	bf14      	ite	ne
 8009d8e:	220a      	movne	r2, #10
 8009d90:	2208      	moveq	r2, #8
 8009d92:	2100      	movs	r1, #0
 8009d94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d98:	6865      	ldr	r5, [r4, #4]
 8009d9a:	60a5      	str	r5, [r4, #8]
 8009d9c:	2d00      	cmp	r5, #0
 8009d9e:	f2c0 8095 	blt.w	8009ecc <_printf_i+0x20c>
 8009da2:	6821      	ldr	r1, [r4, #0]
 8009da4:	f021 0104 	bic.w	r1, r1, #4
 8009da8:	6021      	str	r1, [r4, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d13d      	bne.n	8009e2a <_printf_i+0x16a>
 8009dae:	2d00      	cmp	r5, #0
 8009db0:	f040 808e 	bne.w	8009ed0 <_printf_i+0x210>
 8009db4:	4665      	mov	r5, ip
 8009db6:	2a08      	cmp	r2, #8
 8009db8:	d10b      	bne.n	8009dd2 <_printf_i+0x112>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	07db      	lsls	r3, r3, #31
 8009dbe:	d508      	bpl.n	8009dd2 <_printf_i+0x112>
 8009dc0:	6923      	ldr	r3, [r4, #16]
 8009dc2:	6862      	ldr	r2, [r4, #4]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	bfde      	ittt	le
 8009dc8:	2330      	movle	r3, #48	; 0x30
 8009dca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dd2:	ebac 0305 	sub.w	r3, ip, r5
 8009dd6:	6123      	str	r3, [r4, #16]
 8009dd8:	f8cd 8000 	str.w	r8, [sp]
 8009ddc:	463b      	mov	r3, r7
 8009dde:	aa03      	add	r2, sp, #12
 8009de0:	4621      	mov	r1, r4
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff fef6 	bl	8009bd4 <_printf_common>
 8009de8:	3001      	adds	r0, #1
 8009dea:	d14d      	bne.n	8009e88 <_printf_i+0x1c8>
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	b005      	add	sp, #20
 8009df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009df6:	4839      	ldr	r0, [pc, #228]	; (8009edc <_printf_i+0x21c>)
 8009df8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009dfc:	6813      	ldr	r3, [r2, #0]
 8009dfe:	6821      	ldr	r1, [r4, #0]
 8009e00:	1d1d      	adds	r5, r3, #4
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6015      	str	r5, [r2, #0]
 8009e06:	060a      	lsls	r2, r1, #24
 8009e08:	d50b      	bpl.n	8009e22 <_printf_i+0x162>
 8009e0a:	07ca      	lsls	r2, r1, #31
 8009e0c:	bf44      	itt	mi
 8009e0e:	f041 0120 	orrmi.w	r1, r1, #32
 8009e12:	6021      	strmi	r1, [r4, #0]
 8009e14:	b91b      	cbnz	r3, 8009e1e <_printf_i+0x15e>
 8009e16:	6822      	ldr	r2, [r4, #0]
 8009e18:	f022 0220 	bic.w	r2, r2, #32
 8009e1c:	6022      	str	r2, [r4, #0]
 8009e1e:	2210      	movs	r2, #16
 8009e20:	e7b7      	b.n	8009d92 <_printf_i+0xd2>
 8009e22:	064d      	lsls	r5, r1, #25
 8009e24:	bf48      	it	mi
 8009e26:	b29b      	uxthmi	r3, r3
 8009e28:	e7ef      	b.n	8009e0a <_printf_i+0x14a>
 8009e2a:	4665      	mov	r5, ip
 8009e2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e30:	fb02 3311 	mls	r3, r2, r1, r3
 8009e34:	5cc3      	ldrb	r3, [r0, r3]
 8009e36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	d1f5      	bne.n	8009e2c <_printf_i+0x16c>
 8009e40:	e7b9      	b.n	8009db6 <_printf_i+0xf6>
 8009e42:	6813      	ldr	r3, [r2, #0]
 8009e44:	6825      	ldr	r5, [r4, #0]
 8009e46:	6961      	ldr	r1, [r4, #20]
 8009e48:	1d18      	adds	r0, r3, #4
 8009e4a:	6010      	str	r0, [r2, #0]
 8009e4c:	0628      	lsls	r0, r5, #24
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	d501      	bpl.n	8009e56 <_printf_i+0x196>
 8009e52:	6019      	str	r1, [r3, #0]
 8009e54:	e002      	b.n	8009e5c <_printf_i+0x19c>
 8009e56:	066a      	lsls	r2, r5, #25
 8009e58:	d5fb      	bpl.n	8009e52 <_printf_i+0x192>
 8009e5a:	8019      	strh	r1, [r3, #0]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	6123      	str	r3, [r4, #16]
 8009e60:	4665      	mov	r5, ip
 8009e62:	e7b9      	b.n	8009dd8 <_printf_i+0x118>
 8009e64:	6813      	ldr	r3, [r2, #0]
 8009e66:	1d19      	adds	r1, r3, #4
 8009e68:	6011      	str	r1, [r2, #0]
 8009e6a:	681d      	ldr	r5, [r3, #0]
 8009e6c:	6862      	ldr	r2, [r4, #4]
 8009e6e:	2100      	movs	r1, #0
 8009e70:	4628      	mov	r0, r5
 8009e72:	f7f6 f9bd 	bl	80001f0 <memchr>
 8009e76:	b108      	cbz	r0, 8009e7c <_printf_i+0x1bc>
 8009e78:	1b40      	subs	r0, r0, r5
 8009e7a:	6060      	str	r0, [r4, #4]
 8009e7c:	6863      	ldr	r3, [r4, #4]
 8009e7e:	6123      	str	r3, [r4, #16]
 8009e80:	2300      	movs	r3, #0
 8009e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e86:	e7a7      	b.n	8009dd8 <_printf_i+0x118>
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	462a      	mov	r2, r5
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	4630      	mov	r0, r6
 8009e90:	47c0      	blx	r8
 8009e92:	3001      	adds	r0, #1
 8009e94:	d0aa      	beq.n	8009dec <_printf_i+0x12c>
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	079b      	lsls	r3, r3, #30
 8009e9a:	d413      	bmi.n	8009ec4 <_printf_i+0x204>
 8009e9c:	68e0      	ldr	r0, [r4, #12]
 8009e9e:	9b03      	ldr	r3, [sp, #12]
 8009ea0:	4298      	cmp	r0, r3
 8009ea2:	bfb8      	it	lt
 8009ea4:	4618      	movlt	r0, r3
 8009ea6:	e7a3      	b.n	8009df0 <_printf_i+0x130>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	464a      	mov	r2, r9
 8009eac:	4639      	mov	r1, r7
 8009eae:	4630      	mov	r0, r6
 8009eb0:	47c0      	blx	r8
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	d09a      	beq.n	8009dec <_printf_i+0x12c>
 8009eb6:	3501      	adds	r5, #1
 8009eb8:	68e3      	ldr	r3, [r4, #12]
 8009eba:	9a03      	ldr	r2, [sp, #12]
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	42ab      	cmp	r3, r5
 8009ec0:	dcf2      	bgt.n	8009ea8 <_printf_i+0x1e8>
 8009ec2:	e7eb      	b.n	8009e9c <_printf_i+0x1dc>
 8009ec4:	2500      	movs	r5, #0
 8009ec6:	f104 0919 	add.w	r9, r4, #25
 8009eca:	e7f5      	b.n	8009eb8 <_printf_i+0x1f8>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1ac      	bne.n	8009e2a <_printf_i+0x16a>
 8009ed0:	7803      	ldrb	r3, [r0, #0]
 8009ed2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ed6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eda:	e76c      	b.n	8009db6 <_printf_i+0xf6>
 8009edc:	0800b9e6 	.word	0x0800b9e6
 8009ee0:	0800b9f7 	.word	0x0800b9f7

08009ee4 <siprintf>:
 8009ee4:	b40e      	push	{r1, r2, r3}
 8009ee6:	b500      	push	{lr}
 8009ee8:	b09c      	sub	sp, #112	; 0x70
 8009eea:	ab1d      	add	r3, sp, #116	; 0x74
 8009eec:	9002      	str	r0, [sp, #8]
 8009eee:	9006      	str	r0, [sp, #24]
 8009ef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ef4:	4809      	ldr	r0, [pc, #36]	; (8009f1c <siprintf+0x38>)
 8009ef6:	9107      	str	r1, [sp, #28]
 8009ef8:	9104      	str	r1, [sp, #16]
 8009efa:	4909      	ldr	r1, [pc, #36]	; (8009f20 <siprintf+0x3c>)
 8009efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f00:	9105      	str	r1, [sp, #20]
 8009f02:	6800      	ldr	r0, [r0, #0]
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	a902      	add	r1, sp, #8
 8009f08:	f001 fa90 	bl	800b42c <_svfiprintf_r>
 8009f0c:	9b02      	ldr	r3, [sp, #8]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	701a      	strb	r2, [r3, #0]
 8009f12:	b01c      	add	sp, #112	; 0x70
 8009f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f18:	b003      	add	sp, #12
 8009f1a:	4770      	bx	lr
 8009f1c:	20000020 	.word	0x20000020
 8009f20:	ffff0208 	.word	0xffff0208

08009f24 <__utoa>:
 8009f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f26:	4b1d      	ldr	r3, [pc, #116]	; (8009f9c <__utoa+0x78>)
 8009f28:	b08b      	sub	sp, #44	; 0x2c
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	466e      	mov	r6, sp
 8009f30:	f103 0c20 	add.w	ip, r3, #32
 8009f34:	6818      	ldr	r0, [r3, #0]
 8009f36:	6859      	ldr	r1, [r3, #4]
 8009f38:	4637      	mov	r7, r6
 8009f3a:	c703      	stmia	r7!, {r0, r1}
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	4563      	cmp	r3, ip
 8009f40:	463e      	mov	r6, r7
 8009f42:	d1f7      	bne.n	8009f34 <__utoa+0x10>
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	791b      	ldrb	r3, [r3, #4]
 8009f48:	713b      	strb	r3, [r7, #4]
 8009f4a:	1e93      	subs	r3, r2, #2
 8009f4c:	2b22      	cmp	r3, #34	; 0x22
 8009f4e:	6038      	str	r0, [r7, #0]
 8009f50:	f04f 0300 	mov.w	r3, #0
 8009f54:	d904      	bls.n	8009f60 <__utoa+0x3c>
 8009f56:	7023      	strb	r3, [r4, #0]
 8009f58:	461c      	mov	r4, r3
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	b00b      	add	sp, #44	; 0x2c
 8009f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f60:	1e66      	subs	r6, r4, #1
 8009f62:	fbb5 f0f2 	udiv	r0, r5, r2
 8009f66:	af0a      	add	r7, sp, #40	; 0x28
 8009f68:	fb02 5510 	mls	r5, r2, r0, r5
 8009f6c:	443d      	add	r5, r7
 8009f6e:	1c59      	adds	r1, r3, #1
 8009f70:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8009f74:	f806 5f01 	strb.w	r5, [r6, #1]!
 8009f78:	4605      	mov	r5, r0
 8009f7a:	b968      	cbnz	r0, 8009f98 <__utoa+0x74>
 8009f7c:	5460      	strb	r0, [r4, r1]
 8009f7e:	4423      	add	r3, r4
 8009f80:	4622      	mov	r2, r4
 8009f82:	1b19      	subs	r1, r3, r4
 8009f84:	1b10      	subs	r0, r2, r4
 8009f86:	4281      	cmp	r1, r0
 8009f88:	dde7      	ble.n	8009f5a <__utoa+0x36>
 8009f8a:	7811      	ldrb	r1, [r2, #0]
 8009f8c:	7818      	ldrb	r0, [r3, #0]
 8009f8e:	f802 0b01 	strb.w	r0, [r2], #1
 8009f92:	f803 1901 	strb.w	r1, [r3], #-1
 8009f96:	e7f4      	b.n	8009f82 <__utoa+0x5e>
 8009f98:	460b      	mov	r3, r1
 8009f9a:	e7e2      	b.n	8009f62 <__utoa+0x3e>
 8009f9c:	0800ba08 	.word	0x0800ba08

08009fa0 <quorem>:
 8009fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	6903      	ldr	r3, [r0, #16]
 8009fa6:	690c      	ldr	r4, [r1, #16]
 8009fa8:	42a3      	cmp	r3, r4
 8009faa:	4680      	mov	r8, r0
 8009fac:	f2c0 8082 	blt.w	800a0b4 <quorem+0x114>
 8009fb0:	3c01      	subs	r4, #1
 8009fb2:	f101 0714 	add.w	r7, r1, #20
 8009fb6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009fba:	f100 0614 	add.w	r6, r0, #20
 8009fbe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009fc2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009fc6:	eb06 030c 	add.w	r3, r6, ip
 8009fca:	3501      	adds	r5, #1
 8009fcc:	eb07 090c 	add.w	r9, r7, ip
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	fbb0 f5f5 	udiv	r5, r0, r5
 8009fd6:	b395      	cbz	r5, 800a03e <quorem+0x9e>
 8009fd8:	f04f 0a00 	mov.w	sl, #0
 8009fdc:	4638      	mov	r0, r7
 8009fde:	46b6      	mov	lr, r6
 8009fe0:	46d3      	mov	fp, sl
 8009fe2:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fe6:	b293      	uxth	r3, r2
 8009fe8:	fb05 a303 	mla	r3, r5, r3, sl
 8009fec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	ebab 0303 	sub.w	r3, fp, r3
 8009ff6:	0c12      	lsrs	r2, r2, #16
 8009ff8:	f8de b000 	ldr.w	fp, [lr]
 8009ffc:	fb05 a202 	mla	r2, r5, r2, sl
 800a000:	fa13 f38b 	uxtah	r3, r3, fp
 800a004:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a008:	fa1f fb82 	uxth.w	fp, r2
 800a00c:	f8de 2000 	ldr.w	r2, [lr]
 800a010:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a018:	b29b      	uxth	r3, r3
 800a01a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a01e:	4581      	cmp	r9, r0
 800a020:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a024:	f84e 3b04 	str.w	r3, [lr], #4
 800a028:	d2db      	bcs.n	8009fe2 <quorem+0x42>
 800a02a:	f856 300c 	ldr.w	r3, [r6, ip]
 800a02e:	b933      	cbnz	r3, 800a03e <quorem+0x9e>
 800a030:	9b01      	ldr	r3, [sp, #4]
 800a032:	3b04      	subs	r3, #4
 800a034:	429e      	cmp	r6, r3
 800a036:	461a      	mov	r2, r3
 800a038:	d330      	bcc.n	800a09c <quorem+0xfc>
 800a03a:	f8c8 4010 	str.w	r4, [r8, #16]
 800a03e:	4640      	mov	r0, r8
 800a040:	f001 f81e 	bl	800b080 <__mcmp>
 800a044:	2800      	cmp	r0, #0
 800a046:	db25      	blt.n	800a094 <quorem+0xf4>
 800a048:	3501      	adds	r5, #1
 800a04a:	4630      	mov	r0, r6
 800a04c:	f04f 0c00 	mov.w	ip, #0
 800a050:	f857 2b04 	ldr.w	r2, [r7], #4
 800a054:	f8d0 e000 	ldr.w	lr, [r0]
 800a058:	b293      	uxth	r3, r2
 800a05a:	ebac 0303 	sub.w	r3, ip, r3
 800a05e:	0c12      	lsrs	r2, r2, #16
 800a060:	fa13 f38e 	uxtah	r3, r3, lr
 800a064:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a072:	45b9      	cmp	r9, r7
 800a074:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a078:	f840 3b04 	str.w	r3, [r0], #4
 800a07c:	d2e8      	bcs.n	800a050 <quorem+0xb0>
 800a07e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a082:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a086:	b92a      	cbnz	r2, 800a094 <quorem+0xf4>
 800a088:	3b04      	subs	r3, #4
 800a08a:	429e      	cmp	r6, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	d30b      	bcc.n	800a0a8 <quorem+0x108>
 800a090:	f8c8 4010 	str.w	r4, [r8, #16]
 800a094:	4628      	mov	r0, r5
 800a096:	b003      	add	sp, #12
 800a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09c:	6812      	ldr	r2, [r2, #0]
 800a09e:	3b04      	subs	r3, #4
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	d1ca      	bne.n	800a03a <quorem+0x9a>
 800a0a4:	3c01      	subs	r4, #1
 800a0a6:	e7c5      	b.n	800a034 <quorem+0x94>
 800a0a8:	6812      	ldr	r2, [r2, #0]
 800a0aa:	3b04      	subs	r3, #4
 800a0ac:	2a00      	cmp	r2, #0
 800a0ae:	d1ef      	bne.n	800a090 <quorem+0xf0>
 800a0b0:	3c01      	subs	r4, #1
 800a0b2:	e7ea      	b.n	800a08a <quorem+0xea>
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e7ee      	b.n	800a096 <quorem+0xf6>

0800a0b8 <_dtoa_r>:
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	ec57 6b10 	vmov	r6, r7, d0
 800a0c0:	b097      	sub	sp, #92	; 0x5c
 800a0c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0c4:	9106      	str	r1, [sp, #24]
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a0ca:	9312      	str	r3, [sp, #72]	; 0x48
 800a0cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0d0:	e9cd 6700 	strd	r6, r7, [sp]
 800a0d4:	b93d      	cbnz	r5, 800a0e6 <_dtoa_r+0x2e>
 800a0d6:	2010      	movs	r0, #16
 800a0d8:	f000 fdb4 	bl	800ac44 <malloc>
 800a0dc:	6260      	str	r0, [r4, #36]	; 0x24
 800a0de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0e2:	6005      	str	r5, [r0, #0]
 800a0e4:	60c5      	str	r5, [r0, #12]
 800a0e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0e8:	6819      	ldr	r1, [r3, #0]
 800a0ea:	b151      	cbz	r1, 800a102 <_dtoa_r+0x4a>
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	604a      	str	r2, [r1, #4]
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	4093      	lsls	r3, r2
 800a0f4:	608b      	str	r3, [r1, #8]
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 fde0 	bl	800acbc <_Bfree>
 800a0fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	1e3b      	subs	r3, r7, #0
 800a104:	bfbb      	ittet	lt
 800a106:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a10a:	9301      	strlt	r3, [sp, #4]
 800a10c:	2300      	movge	r3, #0
 800a10e:	2201      	movlt	r2, #1
 800a110:	bfac      	ite	ge
 800a112:	f8c8 3000 	strge.w	r3, [r8]
 800a116:	f8c8 2000 	strlt.w	r2, [r8]
 800a11a:	4baf      	ldr	r3, [pc, #700]	; (800a3d8 <_dtoa_r+0x320>)
 800a11c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a120:	ea33 0308 	bics.w	r3, r3, r8
 800a124:	d114      	bne.n	800a150 <_dtoa_r+0x98>
 800a126:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a128:	f242 730f 	movw	r3, #9999	; 0x270f
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	9b00      	ldr	r3, [sp, #0]
 800a130:	b923      	cbnz	r3, 800a13c <_dtoa_r+0x84>
 800a132:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a136:	2800      	cmp	r0, #0
 800a138:	f000 8542 	beq.w	800abc0 <_dtoa_r+0xb08>
 800a13c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a13e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a3ec <_dtoa_r+0x334>
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 8544 	beq.w	800abd0 <_dtoa_r+0xb18>
 800a148:	f10b 0303 	add.w	r3, fp, #3
 800a14c:	f000 bd3e 	b.w	800abcc <_dtoa_r+0xb14>
 800a150:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a154:	2200      	movs	r2, #0
 800a156:	2300      	movs	r3, #0
 800a158:	4630      	mov	r0, r6
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 fcbc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a160:	4681      	mov	r9, r0
 800a162:	b168      	cbz	r0, 800a180 <_dtoa_r+0xc8>
 800a164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a166:	2301      	movs	r3, #1
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 8524 	beq.w	800abba <_dtoa_r+0xb02>
 800a172:	4b9a      	ldr	r3, [pc, #616]	; (800a3dc <_dtoa_r+0x324>)
 800a174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a176:	f103 3bff 	add.w	fp, r3, #4294967295
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	f000 bd28 	b.w	800abd0 <_dtoa_r+0xb18>
 800a180:	aa14      	add	r2, sp, #80	; 0x50
 800a182:	a915      	add	r1, sp, #84	; 0x54
 800a184:	ec47 6b10 	vmov	d0, r6, r7
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 fff0 	bl	800b16e <__d2b>
 800a18e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a192:	9004      	str	r0, [sp, #16]
 800a194:	2d00      	cmp	r5, #0
 800a196:	d07c      	beq.n	800a292 <_dtoa_r+0x1da>
 800a198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a19c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a1a0:	46b2      	mov	sl, r6
 800a1a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a1a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	4b8b      	ldr	r3, [pc, #556]	; (800a3e0 <_dtoa_r+0x328>)
 800a1b2:	4650      	mov	r0, sl
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	f7f6 f86f 	bl	8000298 <__aeabi_dsub>
 800a1ba:	a381      	add	r3, pc, #516	; (adr r3, 800a3c0 <_dtoa_r+0x308>)
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	f7f6 fa22 	bl	8000608 <__aeabi_dmul>
 800a1c4:	a380      	add	r3, pc, #512	; (adr r3, 800a3c8 <_dtoa_r+0x310>)
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	f7f6 f867 	bl	800029c <__adddf3>
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	460f      	mov	r7, r1
 800a1d4:	f7f6 f9ae 	bl	8000534 <__aeabi_i2d>
 800a1d8:	a37d      	add	r3, pc, #500	; (adr r3, 800a3d0 <_dtoa_r+0x318>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f7f6 fa13 	bl	8000608 <__aeabi_dmul>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	f7f6 f857 	bl	800029c <__adddf3>
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460f      	mov	r7, r1
 800a1f2:	f7f6 fcb9 	bl	8000b68 <__aeabi_d2iz>
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4682      	mov	sl, r0
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	f7f6 fc74 	bl	8000aec <__aeabi_dcmplt>
 800a204:	b148      	cbz	r0, 800a21a <_dtoa_r+0x162>
 800a206:	4650      	mov	r0, sl
 800a208:	f7f6 f994 	bl	8000534 <__aeabi_i2d>
 800a20c:	4632      	mov	r2, r6
 800a20e:	463b      	mov	r3, r7
 800a210:	f7f6 fc62 	bl	8000ad8 <__aeabi_dcmpeq>
 800a214:	b908      	cbnz	r0, 800a21a <_dtoa_r+0x162>
 800a216:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a21a:	f1ba 0f16 	cmp.w	sl, #22
 800a21e:	d859      	bhi.n	800a2d4 <_dtoa_r+0x21c>
 800a220:	4970      	ldr	r1, [pc, #448]	; (800a3e4 <_dtoa_r+0x32c>)
 800a222:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a226:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a22a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a22e:	f7f6 fc7b 	bl	8000b28 <__aeabi_dcmpgt>
 800a232:	2800      	cmp	r0, #0
 800a234:	d050      	beq.n	800a2d8 <_dtoa_r+0x220>
 800a236:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a23a:	2300      	movs	r3, #0
 800a23c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a23e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a240:	1b5d      	subs	r5, r3, r5
 800a242:	f1b5 0801 	subs.w	r8, r5, #1
 800a246:	bf49      	itett	mi
 800a248:	f1c5 0301 	rsbmi	r3, r5, #1
 800a24c:	2300      	movpl	r3, #0
 800a24e:	9305      	strmi	r3, [sp, #20]
 800a250:	f04f 0800 	movmi.w	r8, #0
 800a254:	bf58      	it	pl
 800a256:	9305      	strpl	r3, [sp, #20]
 800a258:	f1ba 0f00 	cmp.w	sl, #0
 800a25c:	db3e      	blt.n	800a2dc <_dtoa_r+0x224>
 800a25e:	2300      	movs	r3, #0
 800a260:	44d0      	add	r8, sl
 800a262:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a266:	9307      	str	r3, [sp, #28]
 800a268:	9b06      	ldr	r3, [sp, #24]
 800a26a:	2b09      	cmp	r3, #9
 800a26c:	f200 8090 	bhi.w	800a390 <_dtoa_r+0x2d8>
 800a270:	2b05      	cmp	r3, #5
 800a272:	bfc4      	itt	gt
 800a274:	3b04      	subgt	r3, #4
 800a276:	9306      	strgt	r3, [sp, #24]
 800a278:	9b06      	ldr	r3, [sp, #24]
 800a27a:	f1a3 0302 	sub.w	r3, r3, #2
 800a27e:	bfcc      	ite	gt
 800a280:	2500      	movgt	r5, #0
 800a282:	2501      	movle	r5, #1
 800a284:	2b03      	cmp	r3, #3
 800a286:	f200 808f 	bhi.w	800a3a8 <_dtoa_r+0x2f0>
 800a28a:	e8df f003 	tbb	[pc, r3]
 800a28e:	7f7d      	.short	0x7f7d
 800a290:	7131      	.short	0x7131
 800a292:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a296:	441d      	add	r5, r3
 800a298:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a29c:	2820      	cmp	r0, #32
 800a29e:	dd13      	ble.n	800a2c8 <_dtoa_r+0x210>
 800a2a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a2a4:	9b00      	ldr	r3, [sp, #0]
 800a2a6:	fa08 f800 	lsl.w	r8, r8, r0
 800a2aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a2ae:	fa23 f000 	lsr.w	r0, r3, r0
 800a2b2:	ea48 0000 	orr.w	r0, r8, r0
 800a2b6:	f7f6 f92d 	bl	8000514 <__aeabi_ui2d>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4682      	mov	sl, r0
 800a2be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a2c2:	3d01      	subs	r5, #1
 800a2c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2c6:	e772      	b.n	800a1ae <_dtoa_r+0xf6>
 800a2c8:	9b00      	ldr	r3, [sp, #0]
 800a2ca:	f1c0 0020 	rsb	r0, r0, #32
 800a2ce:	fa03 f000 	lsl.w	r0, r3, r0
 800a2d2:	e7f0      	b.n	800a2b6 <_dtoa_r+0x1fe>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e7b1      	b.n	800a23c <_dtoa_r+0x184>
 800a2d8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a2da:	e7b0      	b.n	800a23e <_dtoa_r+0x186>
 800a2dc:	9b05      	ldr	r3, [sp, #20]
 800a2de:	eba3 030a 	sub.w	r3, r3, sl
 800a2e2:	9305      	str	r3, [sp, #20]
 800a2e4:	f1ca 0300 	rsb	r3, sl, #0
 800a2e8:	9307      	str	r3, [sp, #28]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a2ee:	e7bb      	b.n	800a268 <_dtoa_r+0x1b0>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	dd59      	ble.n	800a3ae <_dtoa_r+0x2f6>
 800a2fa:	9302      	str	r3, [sp, #8]
 800a2fc:	4699      	mov	r9, r3
 800a2fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a300:	2200      	movs	r2, #0
 800a302:	6072      	str	r2, [r6, #4]
 800a304:	2204      	movs	r2, #4
 800a306:	f102 0014 	add.w	r0, r2, #20
 800a30a:	4298      	cmp	r0, r3
 800a30c:	6871      	ldr	r1, [r6, #4]
 800a30e:	d953      	bls.n	800a3b8 <_dtoa_r+0x300>
 800a310:	4620      	mov	r0, r4
 800a312:	f000 fc9f 	bl	800ac54 <_Balloc>
 800a316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a318:	6030      	str	r0, [r6, #0]
 800a31a:	f1b9 0f0e 	cmp.w	r9, #14
 800a31e:	f8d3 b000 	ldr.w	fp, [r3]
 800a322:	f200 80e6 	bhi.w	800a4f2 <_dtoa_r+0x43a>
 800a326:	2d00      	cmp	r5, #0
 800a328:	f000 80e3 	beq.w	800a4f2 <_dtoa_r+0x43a>
 800a32c:	ed9d 7b00 	vldr	d7, [sp]
 800a330:	f1ba 0f00 	cmp.w	sl, #0
 800a334:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a338:	dd74      	ble.n	800a424 <_dtoa_r+0x36c>
 800a33a:	4a2a      	ldr	r2, [pc, #168]	; (800a3e4 <_dtoa_r+0x32c>)
 800a33c:	f00a 030f 	and.w	r3, sl, #15
 800a340:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a344:	ed93 7b00 	vldr	d7, [r3]
 800a348:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a34c:	06f0      	lsls	r0, r6, #27
 800a34e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a352:	d565      	bpl.n	800a420 <_dtoa_r+0x368>
 800a354:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <_dtoa_r+0x330>)
 800a356:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a35a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a35e:	f7f6 fa7d 	bl	800085c <__aeabi_ddiv>
 800a362:	e9cd 0100 	strd	r0, r1, [sp]
 800a366:	f006 060f 	and.w	r6, r6, #15
 800a36a:	2503      	movs	r5, #3
 800a36c:	4f1e      	ldr	r7, [pc, #120]	; (800a3e8 <_dtoa_r+0x330>)
 800a36e:	e04c      	b.n	800a40a <_dtoa_r+0x352>
 800a370:	2301      	movs	r3, #1
 800a372:	930a      	str	r3, [sp, #40]	; 0x28
 800a374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a376:	4453      	add	r3, sl
 800a378:	f103 0901 	add.w	r9, r3, #1
 800a37c:	9302      	str	r3, [sp, #8]
 800a37e:	464b      	mov	r3, r9
 800a380:	2b01      	cmp	r3, #1
 800a382:	bfb8      	it	lt
 800a384:	2301      	movlt	r3, #1
 800a386:	e7ba      	b.n	800a2fe <_dtoa_r+0x246>
 800a388:	2300      	movs	r3, #0
 800a38a:	e7b2      	b.n	800a2f2 <_dtoa_r+0x23a>
 800a38c:	2300      	movs	r3, #0
 800a38e:	e7f0      	b.n	800a372 <_dtoa_r+0x2ba>
 800a390:	2501      	movs	r5, #1
 800a392:	2300      	movs	r3, #0
 800a394:	9306      	str	r3, [sp, #24]
 800a396:	950a      	str	r5, [sp, #40]	; 0x28
 800a398:	f04f 33ff 	mov.w	r3, #4294967295
 800a39c:	9302      	str	r3, [sp, #8]
 800a39e:	4699      	mov	r9, r3
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	2312      	movs	r3, #18
 800a3a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a3a6:	e7aa      	b.n	800a2fe <_dtoa_r+0x246>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a3ac:	e7f4      	b.n	800a398 <_dtoa_r+0x2e0>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	9302      	str	r3, [sp, #8]
 800a3b2:	4699      	mov	r9, r3
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	e7f5      	b.n	800a3a4 <_dtoa_r+0x2ec>
 800a3b8:	3101      	adds	r1, #1
 800a3ba:	6071      	str	r1, [r6, #4]
 800a3bc:	0052      	lsls	r2, r2, #1
 800a3be:	e7a2      	b.n	800a306 <_dtoa_r+0x24e>
 800a3c0:	636f4361 	.word	0x636f4361
 800a3c4:	3fd287a7 	.word	0x3fd287a7
 800a3c8:	8b60c8b3 	.word	0x8b60c8b3
 800a3cc:	3fc68a28 	.word	0x3fc68a28
 800a3d0:	509f79fb 	.word	0x509f79fb
 800a3d4:	3fd34413 	.word	0x3fd34413
 800a3d8:	7ff00000 	.word	0x7ff00000
 800a3dc:	0800b9e5 	.word	0x0800b9e5
 800a3e0:	3ff80000 	.word	0x3ff80000
 800a3e4:	0800ba68 	.word	0x0800ba68
 800a3e8:	0800ba40 	.word	0x0800ba40
 800a3ec:	0800ba36 	.word	0x0800ba36
 800a3f0:	07f1      	lsls	r1, r6, #31
 800a3f2:	d508      	bpl.n	800a406 <_dtoa_r+0x34e>
 800a3f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a3f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3fc:	f7f6 f904 	bl	8000608 <__aeabi_dmul>
 800a400:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a404:	3501      	adds	r5, #1
 800a406:	1076      	asrs	r6, r6, #1
 800a408:	3708      	adds	r7, #8
 800a40a:	2e00      	cmp	r6, #0
 800a40c:	d1f0      	bne.n	800a3f0 <_dtoa_r+0x338>
 800a40e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a412:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a416:	f7f6 fa21 	bl	800085c <__aeabi_ddiv>
 800a41a:	e9cd 0100 	strd	r0, r1, [sp]
 800a41e:	e01a      	b.n	800a456 <_dtoa_r+0x39e>
 800a420:	2502      	movs	r5, #2
 800a422:	e7a3      	b.n	800a36c <_dtoa_r+0x2b4>
 800a424:	f000 80a0 	beq.w	800a568 <_dtoa_r+0x4b0>
 800a428:	f1ca 0600 	rsb	r6, sl, #0
 800a42c:	4b9f      	ldr	r3, [pc, #636]	; (800a6ac <_dtoa_r+0x5f4>)
 800a42e:	4fa0      	ldr	r7, [pc, #640]	; (800a6b0 <_dtoa_r+0x5f8>)
 800a430:	f006 020f 	and.w	r2, r6, #15
 800a434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a440:	f7f6 f8e2 	bl	8000608 <__aeabi_dmul>
 800a444:	e9cd 0100 	strd	r0, r1, [sp]
 800a448:	1136      	asrs	r6, r6, #4
 800a44a:	2300      	movs	r3, #0
 800a44c:	2502      	movs	r5, #2
 800a44e:	2e00      	cmp	r6, #0
 800a450:	d17f      	bne.n	800a552 <_dtoa_r+0x49a>
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1e1      	bne.n	800a41a <_dtoa_r+0x362>
 800a456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f000 8087 	beq.w	800a56c <_dtoa_r+0x4b4>
 800a45e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a462:	2200      	movs	r2, #0
 800a464:	4b93      	ldr	r3, [pc, #588]	; (800a6b4 <_dtoa_r+0x5fc>)
 800a466:	4630      	mov	r0, r6
 800a468:	4639      	mov	r1, r7
 800a46a:	f7f6 fb3f 	bl	8000aec <__aeabi_dcmplt>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d07c      	beq.n	800a56c <_dtoa_r+0x4b4>
 800a472:	f1b9 0f00 	cmp.w	r9, #0
 800a476:	d079      	beq.n	800a56c <_dtoa_r+0x4b4>
 800a478:	9b02      	ldr	r3, [sp, #8]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	dd35      	ble.n	800a4ea <_dtoa_r+0x432>
 800a47e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a482:	9308      	str	r3, [sp, #32]
 800a484:	4639      	mov	r1, r7
 800a486:	2200      	movs	r2, #0
 800a488:	4b8b      	ldr	r3, [pc, #556]	; (800a6b8 <_dtoa_r+0x600>)
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7f6 f8bc 	bl	8000608 <__aeabi_dmul>
 800a490:	e9cd 0100 	strd	r0, r1, [sp]
 800a494:	9f02      	ldr	r7, [sp, #8]
 800a496:	3501      	adds	r5, #1
 800a498:	4628      	mov	r0, r5
 800a49a:	f7f6 f84b 	bl	8000534 <__aeabi_i2d>
 800a49e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4a2:	f7f6 f8b1 	bl	8000608 <__aeabi_dmul>
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	4b84      	ldr	r3, [pc, #528]	; (800a6bc <_dtoa_r+0x604>)
 800a4aa:	f7f5 fef7 	bl	800029c <__adddf3>
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a4b4:	2f00      	cmp	r7, #0
 800a4b6:	d15d      	bne.n	800a574 <_dtoa_r+0x4bc>
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	4b81      	ldr	r3, [pc, #516]	; (800a6c0 <_dtoa_r+0x608>)
 800a4bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4c0:	f7f5 feea 	bl	8000298 <__aeabi_dsub>
 800a4c4:	462a      	mov	r2, r5
 800a4c6:	4633      	mov	r3, r6
 800a4c8:	e9cd 0100 	strd	r0, r1, [sp]
 800a4cc:	f7f6 fb2c 	bl	8000b28 <__aeabi_dcmpgt>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	f040 8288 	bne.w	800a9e6 <_dtoa_r+0x92e>
 800a4d6:	462a      	mov	r2, r5
 800a4d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a4dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4e0:	f7f6 fb04 	bl	8000aec <__aeabi_dcmplt>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f040 827c 	bne.w	800a9e2 <_dtoa_r+0x92a>
 800a4ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4ee:	e9cd 2300 	strd	r2, r3, [sp]
 800a4f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f2c0 8150 	blt.w	800a79a <_dtoa_r+0x6e2>
 800a4fa:	f1ba 0f0e 	cmp.w	sl, #14
 800a4fe:	f300 814c 	bgt.w	800a79a <_dtoa_r+0x6e2>
 800a502:	4b6a      	ldr	r3, [pc, #424]	; (800a6ac <_dtoa_r+0x5f4>)
 800a504:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a508:	ed93 7b00 	vldr	d7, [r3]
 800a50c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a50e:	2b00      	cmp	r3, #0
 800a510:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a514:	f280 80d8 	bge.w	800a6c8 <_dtoa_r+0x610>
 800a518:	f1b9 0f00 	cmp.w	r9, #0
 800a51c:	f300 80d4 	bgt.w	800a6c8 <_dtoa_r+0x610>
 800a520:	f040 825e 	bne.w	800a9e0 <_dtoa_r+0x928>
 800a524:	2200      	movs	r2, #0
 800a526:	4b66      	ldr	r3, [pc, #408]	; (800a6c0 <_dtoa_r+0x608>)
 800a528:	ec51 0b17 	vmov	r0, r1, d7
 800a52c:	f7f6 f86c 	bl	8000608 <__aeabi_dmul>
 800a530:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a534:	f7f6 faee 	bl	8000b14 <__aeabi_dcmpge>
 800a538:	464f      	mov	r7, r9
 800a53a:	464e      	mov	r6, r9
 800a53c:	2800      	cmp	r0, #0
 800a53e:	f040 8234 	bne.w	800a9aa <_dtoa_r+0x8f2>
 800a542:	2331      	movs	r3, #49	; 0x31
 800a544:	f10b 0501 	add.w	r5, fp, #1
 800a548:	f88b 3000 	strb.w	r3, [fp]
 800a54c:	f10a 0a01 	add.w	sl, sl, #1
 800a550:	e22f      	b.n	800a9b2 <_dtoa_r+0x8fa>
 800a552:	07f2      	lsls	r2, r6, #31
 800a554:	d505      	bpl.n	800a562 <_dtoa_r+0x4aa>
 800a556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a55a:	f7f6 f855 	bl	8000608 <__aeabi_dmul>
 800a55e:	3501      	adds	r5, #1
 800a560:	2301      	movs	r3, #1
 800a562:	1076      	asrs	r6, r6, #1
 800a564:	3708      	adds	r7, #8
 800a566:	e772      	b.n	800a44e <_dtoa_r+0x396>
 800a568:	2502      	movs	r5, #2
 800a56a:	e774      	b.n	800a456 <_dtoa_r+0x39e>
 800a56c:	f8cd a020 	str.w	sl, [sp, #32]
 800a570:	464f      	mov	r7, r9
 800a572:	e791      	b.n	800a498 <_dtoa_r+0x3e0>
 800a574:	4b4d      	ldr	r3, [pc, #308]	; (800a6ac <_dtoa_r+0x5f4>)
 800a576:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a57a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a580:	2b00      	cmp	r3, #0
 800a582:	d047      	beq.n	800a614 <_dtoa_r+0x55c>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	2000      	movs	r0, #0
 800a58a:	494e      	ldr	r1, [pc, #312]	; (800a6c4 <_dtoa_r+0x60c>)
 800a58c:	f7f6 f966 	bl	800085c <__aeabi_ddiv>
 800a590:	462a      	mov	r2, r5
 800a592:	4633      	mov	r3, r6
 800a594:	f7f5 fe80 	bl	8000298 <__aeabi_dsub>
 800a598:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a59c:	465d      	mov	r5, fp
 800a59e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5a2:	f7f6 fae1 	bl	8000b68 <__aeabi_d2iz>
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	f7f5 ffc4 	bl	8000534 <__aeabi_i2d>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5b4:	f7f5 fe70 	bl	8000298 <__aeabi_dsub>
 800a5b8:	3630      	adds	r6, #48	; 0x30
 800a5ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a5be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a5c2:	e9cd 0100 	strd	r0, r1, [sp]
 800a5c6:	f7f6 fa91 	bl	8000aec <__aeabi_dcmplt>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d163      	bne.n	800a696 <_dtoa_r+0x5de>
 800a5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	4937      	ldr	r1, [pc, #220]	; (800a6b4 <_dtoa_r+0x5fc>)
 800a5d6:	f7f5 fe5f 	bl	8000298 <__aeabi_dsub>
 800a5da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a5de:	f7f6 fa85 	bl	8000aec <__aeabi_dcmplt>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	f040 80b7 	bne.w	800a756 <_dtoa_r+0x69e>
 800a5e8:	eba5 030b 	sub.w	r3, r5, fp
 800a5ec:	429f      	cmp	r7, r3
 800a5ee:	f77f af7c 	ble.w	800a4ea <_dtoa_r+0x432>
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	4b30      	ldr	r3, [pc, #192]	; (800a6b8 <_dtoa_r+0x600>)
 800a5f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5fa:	f7f6 f805 	bl	8000608 <__aeabi_dmul>
 800a5fe:	2200      	movs	r2, #0
 800a600:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a604:	4b2c      	ldr	r3, [pc, #176]	; (800a6b8 <_dtoa_r+0x600>)
 800a606:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a60a:	f7f5 fffd 	bl	8000608 <__aeabi_dmul>
 800a60e:	e9cd 0100 	strd	r0, r1, [sp]
 800a612:	e7c4      	b.n	800a59e <_dtoa_r+0x4e6>
 800a614:	462a      	mov	r2, r5
 800a616:	4633      	mov	r3, r6
 800a618:	f7f5 fff6 	bl	8000608 <__aeabi_dmul>
 800a61c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a620:	eb0b 0507 	add.w	r5, fp, r7
 800a624:	465e      	mov	r6, fp
 800a626:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a62a:	f7f6 fa9d 	bl	8000b68 <__aeabi_d2iz>
 800a62e:	4607      	mov	r7, r0
 800a630:	f7f5 ff80 	bl	8000534 <__aeabi_i2d>
 800a634:	3730      	adds	r7, #48	; 0x30
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a63e:	f7f5 fe2b 	bl	8000298 <__aeabi_dsub>
 800a642:	f806 7b01 	strb.w	r7, [r6], #1
 800a646:	42ae      	cmp	r6, r5
 800a648:	e9cd 0100 	strd	r0, r1, [sp]
 800a64c:	f04f 0200 	mov.w	r2, #0
 800a650:	d126      	bne.n	800a6a0 <_dtoa_r+0x5e8>
 800a652:	4b1c      	ldr	r3, [pc, #112]	; (800a6c4 <_dtoa_r+0x60c>)
 800a654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a658:	f7f5 fe20 	bl	800029c <__adddf3>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a664:	f7f6 fa60 	bl	8000b28 <__aeabi_dcmpgt>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d174      	bne.n	800a756 <_dtoa_r+0x69e>
 800a66c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a670:	2000      	movs	r0, #0
 800a672:	4914      	ldr	r1, [pc, #80]	; (800a6c4 <_dtoa_r+0x60c>)
 800a674:	f7f5 fe10 	bl	8000298 <__aeabi_dsub>
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a680:	f7f6 fa34 	bl	8000aec <__aeabi_dcmplt>
 800a684:	2800      	cmp	r0, #0
 800a686:	f43f af30 	beq.w	800a4ea <_dtoa_r+0x432>
 800a68a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a68e:	2b30      	cmp	r3, #48	; 0x30
 800a690:	f105 32ff 	add.w	r2, r5, #4294967295
 800a694:	d002      	beq.n	800a69c <_dtoa_r+0x5e4>
 800a696:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a69a:	e04a      	b.n	800a732 <_dtoa_r+0x67a>
 800a69c:	4615      	mov	r5, r2
 800a69e:	e7f4      	b.n	800a68a <_dtoa_r+0x5d2>
 800a6a0:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <_dtoa_r+0x600>)
 800a6a2:	f7f5 ffb1 	bl	8000608 <__aeabi_dmul>
 800a6a6:	e9cd 0100 	strd	r0, r1, [sp]
 800a6aa:	e7bc      	b.n	800a626 <_dtoa_r+0x56e>
 800a6ac:	0800ba68 	.word	0x0800ba68
 800a6b0:	0800ba40 	.word	0x0800ba40
 800a6b4:	3ff00000 	.word	0x3ff00000
 800a6b8:	40240000 	.word	0x40240000
 800a6bc:	401c0000 	.word	0x401c0000
 800a6c0:	40140000 	.word	0x40140000
 800a6c4:	3fe00000 	.word	0x3fe00000
 800a6c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a6cc:	465d      	mov	r5, fp
 800a6ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	f7f6 f8c1 	bl	800085c <__aeabi_ddiv>
 800a6da:	f7f6 fa45 	bl	8000b68 <__aeabi_d2iz>
 800a6de:	4680      	mov	r8, r0
 800a6e0:	f7f5 ff28 	bl	8000534 <__aeabi_i2d>
 800a6e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6e8:	f7f5 ff8e 	bl	8000608 <__aeabi_dmul>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a6f8:	f7f5 fdce 	bl	8000298 <__aeabi_dsub>
 800a6fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a700:	eba5 060b 	sub.w	r6, r5, fp
 800a704:	45b1      	cmp	r9, r6
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	d139      	bne.n	800a780 <_dtoa_r+0x6c8>
 800a70c:	f7f5 fdc6 	bl	800029c <__adddf3>
 800a710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a714:	4606      	mov	r6, r0
 800a716:	460f      	mov	r7, r1
 800a718:	f7f6 fa06 	bl	8000b28 <__aeabi_dcmpgt>
 800a71c:	b9c8      	cbnz	r0, 800a752 <_dtoa_r+0x69a>
 800a71e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a722:	4630      	mov	r0, r6
 800a724:	4639      	mov	r1, r7
 800a726:	f7f6 f9d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a72a:	b110      	cbz	r0, 800a732 <_dtoa_r+0x67a>
 800a72c:	f018 0f01 	tst.w	r8, #1
 800a730:	d10f      	bne.n	800a752 <_dtoa_r+0x69a>
 800a732:	9904      	ldr	r1, [sp, #16]
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fac1 	bl	800acbc <_Bfree>
 800a73a:	2300      	movs	r3, #0
 800a73c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a73e:	702b      	strb	r3, [r5, #0]
 800a740:	f10a 0301 	add.w	r3, sl, #1
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 8241 	beq.w	800abd0 <_dtoa_r+0xb18>
 800a74e:	601d      	str	r5, [r3, #0]
 800a750:	e23e      	b.n	800abd0 <_dtoa_r+0xb18>
 800a752:	f8cd a020 	str.w	sl, [sp, #32]
 800a756:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a75a:	2a39      	cmp	r2, #57	; 0x39
 800a75c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a760:	d108      	bne.n	800a774 <_dtoa_r+0x6bc>
 800a762:	459b      	cmp	fp, r3
 800a764:	d10a      	bne.n	800a77c <_dtoa_r+0x6c4>
 800a766:	9b08      	ldr	r3, [sp, #32]
 800a768:	3301      	adds	r3, #1
 800a76a:	9308      	str	r3, [sp, #32]
 800a76c:	2330      	movs	r3, #48	; 0x30
 800a76e:	f88b 3000 	strb.w	r3, [fp]
 800a772:	465b      	mov	r3, fp
 800a774:	781a      	ldrb	r2, [r3, #0]
 800a776:	3201      	adds	r2, #1
 800a778:	701a      	strb	r2, [r3, #0]
 800a77a:	e78c      	b.n	800a696 <_dtoa_r+0x5de>
 800a77c:	461d      	mov	r5, r3
 800a77e:	e7ea      	b.n	800a756 <_dtoa_r+0x69e>
 800a780:	2200      	movs	r2, #0
 800a782:	4b9b      	ldr	r3, [pc, #620]	; (800a9f0 <_dtoa_r+0x938>)
 800a784:	f7f5 ff40 	bl	8000608 <__aeabi_dmul>
 800a788:	2200      	movs	r2, #0
 800a78a:	2300      	movs	r3, #0
 800a78c:	4606      	mov	r6, r0
 800a78e:	460f      	mov	r7, r1
 800a790:	f7f6 f9a2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a794:	2800      	cmp	r0, #0
 800a796:	d09a      	beq.n	800a6ce <_dtoa_r+0x616>
 800a798:	e7cb      	b.n	800a732 <_dtoa_r+0x67a>
 800a79a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a79c:	2a00      	cmp	r2, #0
 800a79e:	f000 808b 	beq.w	800a8b8 <_dtoa_r+0x800>
 800a7a2:	9a06      	ldr	r2, [sp, #24]
 800a7a4:	2a01      	cmp	r2, #1
 800a7a6:	dc6e      	bgt.n	800a886 <_dtoa_r+0x7ce>
 800a7a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7aa:	2a00      	cmp	r2, #0
 800a7ac:	d067      	beq.n	800a87e <_dtoa_r+0x7c6>
 800a7ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a7b2:	9f07      	ldr	r7, [sp, #28]
 800a7b4:	9d05      	ldr	r5, [sp, #20]
 800a7b6:	9a05      	ldr	r2, [sp, #20]
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	441a      	add	r2, r3
 800a7bc:	4620      	mov	r0, r4
 800a7be:	9205      	str	r2, [sp, #20]
 800a7c0:	4498      	add	r8, r3
 800a7c2:	f000 fb1b 	bl	800adfc <__i2b>
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	2d00      	cmp	r5, #0
 800a7ca:	dd0c      	ble.n	800a7e6 <_dtoa_r+0x72e>
 800a7cc:	f1b8 0f00 	cmp.w	r8, #0
 800a7d0:	dd09      	ble.n	800a7e6 <_dtoa_r+0x72e>
 800a7d2:	4545      	cmp	r5, r8
 800a7d4:	9a05      	ldr	r2, [sp, #20]
 800a7d6:	462b      	mov	r3, r5
 800a7d8:	bfa8      	it	ge
 800a7da:	4643      	movge	r3, r8
 800a7dc:	1ad2      	subs	r2, r2, r3
 800a7de:	9205      	str	r2, [sp, #20]
 800a7e0:	1aed      	subs	r5, r5, r3
 800a7e2:	eba8 0803 	sub.w	r8, r8, r3
 800a7e6:	9b07      	ldr	r3, [sp, #28]
 800a7e8:	b1eb      	cbz	r3, 800a826 <_dtoa_r+0x76e>
 800a7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d067      	beq.n	800a8c0 <_dtoa_r+0x808>
 800a7f0:	b18f      	cbz	r7, 800a816 <_dtoa_r+0x75e>
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	463a      	mov	r2, r7
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 fba0 	bl	800af3c <__pow5mult>
 800a7fc:	9a04      	ldr	r2, [sp, #16]
 800a7fe:	4601      	mov	r1, r0
 800a800:	4606      	mov	r6, r0
 800a802:	4620      	mov	r0, r4
 800a804:	f000 fb03 	bl	800ae0e <__multiply>
 800a808:	9904      	ldr	r1, [sp, #16]
 800a80a:	9008      	str	r0, [sp, #32]
 800a80c:	4620      	mov	r0, r4
 800a80e:	f000 fa55 	bl	800acbc <_Bfree>
 800a812:	9b08      	ldr	r3, [sp, #32]
 800a814:	9304      	str	r3, [sp, #16]
 800a816:	9b07      	ldr	r3, [sp, #28]
 800a818:	1bda      	subs	r2, r3, r7
 800a81a:	d004      	beq.n	800a826 <_dtoa_r+0x76e>
 800a81c:	9904      	ldr	r1, [sp, #16]
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 fb8c 	bl	800af3c <__pow5mult>
 800a824:	9004      	str	r0, [sp, #16]
 800a826:	2101      	movs	r1, #1
 800a828:	4620      	mov	r0, r4
 800a82a:	f000 fae7 	bl	800adfc <__i2b>
 800a82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a830:	4607      	mov	r7, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 81d0 	beq.w	800abd8 <_dtoa_r+0xb20>
 800a838:	461a      	mov	r2, r3
 800a83a:	4601      	mov	r1, r0
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 fb7d 	bl	800af3c <__pow5mult>
 800a842:	9b06      	ldr	r3, [sp, #24]
 800a844:	2b01      	cmp	r3, #1
 800a846:	4607      	mov	r7, r0
 800a848:	dc40      	bgt.n	800a8cc <_dtoa_r+0x814>
 800a84a:	9b00      	ldr	r3, [sp, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d139      	bne.n	800a8c4 <_dtoa_r+0x80c>
 800a850:	9b01      	ldr	r3, [sp, #4]
 800a852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a856:	2b00      	cmp	r3, #0
 800a858:	d136      	bne.n	800a8c8 <_dtoa_r+0x810>
 800a85a:	9b01      	ldr	r3, [sp, #4]
 800a85c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a860:	0d1b      	lsrs	r3, r3, #20
 800a862:	051b      	lsls	r3, r3, #20
 800a864:	b12b      	cbz	r3, 800a872 <_dtoa_r+0x7ba>
 800a866:	9b05      	ldr	r3, [sp, #20]
 800a868:	3301      	adds	r3, #1
 800a86a:	9305      	str	r3, [sp, #20]
 800a86c:	f108 0801 	add.w	r8, r8, #1
 800a870:	2301      	movs	r3, #1
 800a872:	9307      	str	r3, [sp, #28]
 800a874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a876:	2b00      	cmp	r3, #0
 800a878:	d12a      	bne.n	800a8d0 <_dtoa_r+0x818>
 800a87a:	2001      	movs	r0, #1
 800a87c:	e030      	b.n	800a8e0 <_dtoa_r+0x828>
 800a87e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a880:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a884:	e795      	b.n	800a7b2 <_dtoa_r+0x6fa>
 800a886:	9b07      	ldr	r3, [sp, #28]
 800a888:	f109 37ff 	add.w	r7, r9, #4294967295
 800a88c:	42bb      	cmp	r3, r7
 800a88e:	bfbf      	itttt	lt
 800a890:	9b07      	ldrlt	r3, [sp, #28]
 800a892:	9707      	strlt	r7, [sp, #28]
 800a894:	1afa      	sublt	r2, r7, r3
 800a896:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a898:	bfbb      	ittet	lt
 800a89a:	189b      	addlt	r3, r3, r2
 800a89c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a89e:	1bdf      	subge	r7, r3, r7
 800a8a0:	2700      	movlt	r7, #0
 800a8a2:	f1b9 0f00 	cmp.w	r9, #0
 800a8a6:	bfb5      	itete	lt
 800a8a8:	9b05      	ldrlt	r3, [sp, #20]
 800a8aa:	9d05      	ldrge	r5, [sp, #20]
 800a8ac:	eba3 0509 	sublt.w	r5, r3, r9
 800a8b0:	464b      	movge	r3, r9
 800a8b2:	bfb8      	it	lt
 800a8b4:	2300      	movlt	r3, #0
 800a8b6:	e77e      	b.n	800a7b6 <_dtoa_r+0x6fe>
 800a8b8:	9f07      	ldr	r7, [sp, #28]
 800a8ba:	9d05      	ldr	r5, [sp, #20]
 800a8bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a8be:	e783      	b.n	800a7c8 <_dtoa_r+0x710>
 800a8c0:	9a07      	ldr	r2, [sp, #28]
 800a8c2:	e7ab      	b.n	800a81c <_dtoa_r+0x764>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e7d4      	b.n	800a872 <_dtoa_r+0x7ba>
 800a8c8:	9b00      	ldr	r3, [sp, #0]
 800a8ca:	e7d2      	b.n	800a872 <_dtoa_r+0x7ba>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	9307      	str	r3, [sp, #28]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a8d6:	6918      	ldr	r0, [r3, #16]
 800a8d8:	f000 fa42 	bl	800ad60 <__hi0bits>
 800a8dc:	f1c0 0020 	rsb	r0, r0, #32
 800a8e0:	4440      	add	r0, r8
 800a8e2:	f010 001f 	ands.w	r0, r0, #31
 800a8e6:	d047      	beq.n	800a978 <_dtoa_r+0x8c0>
 800a8e8:	f1c0 0320 	rsb	r3, r0, #32
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	dd3b      	ble.n	800a968 <_dtoa_r+0x8b0>
 800a8f0:	9b05      	ldr	r3, [sp, #20]
 800a8f2:	f1c0 001c 	rsb	r0, r0, #28
 800a8f6:	4403      	add	r3, r0
 800a8f8:	9305      	str	r3, [sp, #20]
 800a8fa:	4405      	add	r5, r0
 800a8fc:	4480      	add	r8, r0
 800a8fe:	9b05      	ldr	r3, [sp, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	dd05      	ble.n	800a910 <_dtoa_r+0x858>
 800a904:	461a      	mov	r2, r3
 800a906:	9904      	ldr	r1, [sp, #16]
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fb65 	bl	800afd8 <__lshift>
 800a90e:	9004      	str	r0, [sp, #16]
 800a910:	f1b8 0f00 	cmp.w	r8, #0
 800a914:	dd05      	ble.n	800a922 <_dtoa_r+0x86a>
 800a916:	4639      	mov	r1, r7
 800a918:	4642      	mov	r2, r8
 800a91a:	4620      	mov	r0, r4
 800a91c:	f000 fb5c 	bl	800afd8 <__lshift>
 800a920:	4607      	mov	r7, r0
 800a922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a924:	b353      	cbz	r3, 800a97c <_dtoa_r+0x8c4>
 800a926:	4639      	mov	r1, r7
 800a928:	9804      	ldr	r0, [sp, #16]
 800a92a:	f000 fba9 	bl	800b080 <__mcmp>
 800a92e:	2800      	cmp	r0, #0
 800a930:	da24      	bge.n	800a97c <_dtoa_r+0x8c4>
 800a932:	2300      	movs	r3, #0
 800a934:	220a      	movs	r2, #10
 800a936:	9904      	ldr	r1, [sp, #16]
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 f9d6 	bl	800acea <__multadd>
 800a93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a940:	9004      	str	r0, [sp, #16]
 800a942:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a946:	2b00      	cmp	r3, #0
 800a948:	f000 814d 	beq.w	800abe6 <_dtoa_r+0xb2e>
 800a94c:	2300      	movs	r3, #0
 800a94e:	4631      	mov	r1, r6
 800a950:	220a      	movs	r2, #10
 800a952:	4620      	mov	r0, r4
 800a954:	f000 f9c9 	bl	800acea <__multadd>
 800a958:	9b02      	ldr	r3, [sp, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	4606      	mov	r6, r0
 800a95e:	dc4f      	bgt.n	800aa00 <_dtoa_r+0x948>
 800a960:	9b06      	ldr	r3, [sp, #24]
 800a962:	2b02      	cmp	r3, #2
 800a964:	dd4c      	ble.n	800aa00 <_dtoa_r+0x948>
 800a966:	e011      	b.n	800a98c <_dtoa_r+0x8d4>
 800a968:	d0c9      	beq.n	800a8fe <_dtoa_r+0x846>
 800a96a:	9a05      	ldr	r2, [sp, #20]
 800a96c:	331c      	adds	r3, #28
 800a96e:	441a      	add	r2, r3
 800a970:	9205      	str	r2, [sp, #20]
 800a972:	441d      	add	r5, r3
 800a974:	4498      	add	r8, r3
 800a976:	e7c2      	b.n	800a8fe <_dtoa_r+0x846>
 800a978:	4603      	mov	r3, r0
 800a97a:	e7f6      	b.n	800a96a <_dtoa_r+0x8b2>
 800a97c:	f1b9 0f00 	cmp.w	r9, #0
 800a980:	dc38      	bgt.n	800a9f4 <_dtoa_r+0x93c>
 800a982:	9b06      	ldr	r3, [sp, #24]
 800a984:	2b02      	cmp	r3, #2
 800a986:	dd35      	ble.n	800a9f4 <_dtoa_r+0x93c>
 800a988:	f8cd 9008 	str.w	r9, [sp, #8]
 800a98c:	9b02      	ldr	r3, [sp, #8]
 800a98e:	b963      	cbnz	r3, 800a9aa <_dtoa_r+0x8f2>
 800a990:	4639      	mov	r1, r7
 800a992:	2205      	movs	r2, #5
 800a994:	4620      	mov	r0, r4
 800a996:	f000 f9a8 	bl	800acea <__multadd>
 800a99a:	4601      	mov	r1, r0
 800a99c:	4607      	mov	r7, r0
 800a99e:	9804      	ldr	r0, [sp, #16]
 800a9a0:	f000 fb6e 	bl	800b080 <__mcmp>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	f73f adcc 	bgt.w	800a542 <_dtoa_r+0x48a>
 800a9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ac:	465d      	mov	r5, fp
 800a9ae:	ea6f 0a03 	mvn.w	sl, r3
 800a9b2:	f04f 0900 	mov.w	r9, #0
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 f97f 	bl	800acbc <_Bfree>
 800a9be:	2e00      	cmp	r6, #0
 800a9c0:	f43f aeb7 	beq.w	800a732 <_dtoa_r+0x67a>
 800a9c4:	f1b9 0f00 	cmp.w	r9, #0
 800a9c8:	d005      	beq.n	800a9d6 <_dtoa_r+0x91e>
 800a9ca:	45b1      	cmp	r9, r6
 800a9cc:	d003      	beq.n	800a9d6 <_dtoa_r+0x91e>
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 f973 	bl	800acbc <_Bfree>
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f000 f96f 	bl	800acbc <_Bfree>
 800a9de:	e6a8      	b.n	800a732 <_dtoa_r+0x67a>
 800a9e0:	2700      	movs	r7, #0
 800a9e2:	463e      	mov	r6, r7
 800a9e4:	e7e1      	b.n	800a9aa <_dtoa_r+0x8f2>
 800a9e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a9ea:	463e      	mov	r6, r7
 800a9ec:	e5a9      	b.n	800a542 <_dtoa_r+0x48a>
 800a9ee:	bf00      	nop
 800a9f0:	40240000 	.word	0x40240000
 800a9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f000 80fa 	beq.w	800abf4 <_dtoa_r+0xb3c>
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	dd05      	ble.n	800aa10 <_dtoa_r+0x958>
 800aa04:	4631      	mov	r1, r6
 800aa06:	462a      	mov	r2, r5
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fae5 	bl	800afd8 <__lshift>
 800aa0e:	4606      	mov	r6, r0
 800aa10:	9b07      	ldr	r3, [sp, #28]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d04c      	beq.n	800aab0 <_dtoa_r+0x9f8>
 800aa16:	6871      	ldr	r1, [r6, #4]
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f000 f91b 	bl	800ac54 <_Balloc>
 800aa1e:	6932      	ldr	r2, [r6, #16]
 800aa20:	3202      	adds	r2, #2
 800aa22:	4605      	mov	r5, r0
 800aa24:	0092      	lsls	r2, r2, #2
 800aa26:	f106 010c 	add.w	r1, r6, #12
 800aa2a:	300c      	adds	r0, #12
 800aa2c:	f7fe fdea 	bl	8009604 <memcpy>
 800aa30:	2201      	movs	r2, #1
 800aa32:	4629      	mov	r1, r5
 800aa34:	4620      	mov	r0, r4
 800aa36:	f000 facf 	bl	800afd8 <__lshift>
 800aa3a:	9b00      	ldr	r3, [sp, #0]
 800aa3c:	f8cd b014 	str.w	fp, [sp, #20]
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	46b1      	mov	r9, r6
 800aa46:	9307      	str	r3, [sp, #28]
 800aa48:	4606      	mov	r6, r0
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	9804      	ldr	r0, [sp, #16]
 800aa4e:	f7ff faa7 	bl	8009fa0 <quorem>
 800aa52:	4649      	mov	r1, r9
 800aa54:	4605      	mov	r5, r0
 800aa56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aa5a:	9804      	ldr	r0, [sp, #16]
 800aa5c:	f000 fb10 	bl	800b080 <__mcmp>
 800aa60:	4632      	mov	r2, r6
 800aa62:	9000      	str	r0, [sp, #0]
 800aa64:	4639      	mov	r1, r7
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 fb24 	bl	800b0b4 <__mdiff>
 800aa6c:	68c3      	ldr	r3, [r0, #12]
 800aa6e:	4602      	mov	r2, r0
 800aa70:	bb03      	cbnz	r3, 800aab4 <_dtoa_r+0x9fc>
 800aa72:	4601      	mov	r1, r0
 800aa74:	9008      	str	r0, [sp, #32]
 800aa76:	9804      	ldr	r0, [sp, #16]
 800aa78:	f000 fb02 	bl	800b080 <__mcmp>
 800aa7c:	9a08      	ldr	r2, [sp, #32]
 800aa7e:	4603      	mov	r3, r0
 800aa80:	4611      	mov	r1, r2
 800aa82:	4620      	mov	r0, r4
 800aa84:	9308      	str	r3, [sp, #32]
 800aa86:	f000 f919 	bl	800acbc <_Bfree>
 800aa8a:	9b08      	ldr	r3, [sp, #32]
 800aa8c:	b9a3      	cbnz	r3, 800aab8 <_dtoa_r+0xa00>
 800aa8e:	9a06      	ldr	r2, [sp, #24]
 800aa90:	b992      	cbnz	r2, 800aab8 <_dtoa_r+0xa00>
 800aa92:	9a07      	ldr	r2, [sp, #28]
 800aa94:	b982      	cbnz	r2, 800aab8 <_dtoa_r+0xa00>
 800aa96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa9a:	d029      	beq.n	800aaf0 <_dtoa_r+0xa38>
 800aa9c:	9b00      	ldr	r3, [sp, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dd01      	ble.n	800aaa6 <_dtoa_r+0x9ee>
 800aaa2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aaa6:	9b05      	ldr	r3, [sp, #20]
 800aaa8:	1c5d      	adds	r5, r3, #1
 800aaaa:	f883 8000 	strb.w	r8, [r3]
 800aaae:	e782      	b.n	800a9b6 <_dtoa_r+0x8fe>
 800aab0:	4630      	mov	r0, r6
 800aab2:	e7c2      	b.n	800aa3a <_dtoa_r+0x982>
 800aab4:	2301      	movs	r3, #1
 800aab6:	e7e3      	b.n	800aa80 <_dtoa_r+0x9c8>
 800aab8:	9a00      	ldr	r2, [sp, #0]
 800aaba:	2a00      	cmp	r2, #0
 800aabc:	db04      	blt.n	800aac8 <_dtoa_r+0xa10>
 800aabe:	d125      	bne.n	800ab0c <_dtoa_r+0xa54>
 800aac0:	9a06      	ldr	r2, [sp, #24]
 800aac2:	bb1a      	cbnz	r2, 800ab0c <_dtoa_r+0xa54>
 800aac4:	9a07      	ldr	r2, [sp, #28]
 800aac6:	bb0a      	cbnz	r2, 800ab0c <_dtoa_r+0xa54>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	ddec      	ble.n	800aaa6 <_dtoa_r+0x9ee>
 800aacc:	2201      	movs	r2, #1
 800aace:	9904      	ldr	r1, [sp, #16]
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 fa81 	bl	800afd8 <__lshift>
 800aad6:	4639      	mov	r1, r7
 800aad8:	9004      	str	r0, [sp, #16]
 800aada:	f000 fad1 	bl	800b080 <__mcmp>
 800aade:	2800      	cmp	r0, #0
 800aae0:	dc03      	bgt.n	800aaea <_dtoa_r+0xa32>
 800aae2:	d1e0      	bne.n	800aaa6 <_dtoa_r+0x9ee>
 800aae4:	f018 0f01 	tst.w	r8, #1
 800aae8:	d0dd      	beq.n	800aaa6 <_dtoa_r+0x9ee>
 800aaea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aaee:	d1d8      	bne.n	800aaa2 <_dtoa_r+0x9ea>
 800aaf0:	9b05      	ldr	r3, [sp, #20]
 800aaf2:	9a05      	ldr	r2, [sp, #20]
 800aaf4:	1c5d      	adds	r5, r3, #1
 800aaf6:	2339      	movs	r3, #57	; 0x39
 800aaf8:	7013      	strb	r3, [r2, #0]
 800aafa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aafe:	2b39      	cmp	r3, #57	; 0x39
 800ab00:	f105 32ff 	add.w	r2, r5, #4294967295
 800ab04:	d04f      	beq.n	800aba6 <_dtoa_r+0xaee>
 800ab06:	3301      	adds	r3, #1
 800ab08:	7013      	strb	r3, [r2, #0]
 800ab0a:	e754      	b.n	800a9b6 <_dtoa_r+0x8fe>
 800ab0c:	9a05      	ldr	r2, [sp, #20]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f102 0501 	add.w	r5, r2, #1
 800ab14:	dd06      	ble.n	800ab24 <_dtoa_r+0xa6c>
 800ab16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab1a:	d0e9      	beq.n	800aaf0 <_dtoa_r+0xa38>
 800ab1c:	f108 0801 	add.w	r8, r8, #1
 800ab20:	9b05      	ldr	r3, [sp, #20]
 800ab22:	e7c2      	b.n	800aaaa <_dtoa_r+0x9f2>
 800ab24:	9a02      	ldr	r2, [sp, #8]
 800ab26:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ab2a:	eba5 030b 	sub.w	r3, r5, fp
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d021      	beq.n	800ab76 <_dtoa_r+0xabe>
 800ab32:	2300      	movs	r3, #0
 800ab34:	220a      	movs	r2, #10
 800ab36:	9904      	ldr	r1, [sp, #16]
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 f8d6 	bl	800acea <__multadd>
 800ab3e:	45b1      	cmp	r9, r6
 800ab40:	9004      	str	r0, [sp, #16]
 800ab42:	f04f 0300 	mov.w	r3, #0
 800ab46:	f04f 020a 	mov.w	r2, #10
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	d105      	bne.n	800ab5c <_dtoa_r+0xaa4>
 800ab50:	f000 f8cb 	bl	800acea <__multadd>
 800ab54:	4681      	mov	r9, r0
 800ab56:	4606      	mov	r6, r0
 800ab58:	9505      	str	r5, [sp, #20]
 800ab5a:	e776      	b.n	800aa4a <_dtoa_r+0x992>
 800ab5c:	f000 f8c5 	bl	800acea <__multadd>
 800ab60:	4631      	mov	r1, r6
 800ab62:	4681      	mov	r9, r0
 800ab64:	2300      	movs	r3, #0
 800ab66:	220a      	movs	r2, #10
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f000 f8be 	bl	800acea <__multadd>
 800ab6e:	4606      	mov	r6, r0
 800ab70:	e7f2      	b.n	800ab58 <_dtoa_r+0xaa0>
 800ab72:	f04f 0900 	mov.w	r9, #0
 800ab76:	2201      	movs	r2, #1
 800ab78:	9904      	ldr	r1, [sp, #16]
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f000 fa2c 	bl	800afd8 <__lshift>
 800ab80:	4639      	mov	r1, r7
 800ab82:	9004      	str	r0, [sp, #16]
 800ab84:	f000 fa7c 	bl	800b080 <__mcmp>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	dcb6      	bgt.n	800aafa <_dtoa_r+0xa42>
 800ab8c:	d102      	bne.n	800ab94 <_dtoa_r+0xadc>
 800ab8e:	f018 0f01 	tst.w	r8, #1
 800ab92:	d1b2      	bne.n	800aafa <_dtoa_r+0xa42>
 800ab94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab98:	2b30      	cmp	r3, #48	; 0x30
 800ab9a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ab9e:	f47f af0a 	bne.w	800a9b6 <_dtoa_r+0x8fe>
 800aba2:	4615      	mov	r5, r2
 800aba4:	e7f6      	b.n	800ab94 <_dtoa_r+0xadc>
 800aba6:	4593      	cmp	fp, r2
 800aba8:	d105      	bne.n	800abb6 <_dtoa_r+0xafe>
 800abaa:	2331      	movs	r3, #49	; 0x31
 800abac:	f10a 0a01 	add.w	sl, sl, #1
 800abb0:	f88b 3000 	strb.w	r3, [fp]
 800abb4:	e6ff      	b.n	800a9b6 <_dtoa_r+0x8fe>
 800abb6:	4615      	mov	r5, r2
 800abb8:	e79f      	b.n	800aafa <_dtoa_r+0xa42>
 800abba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ac20 <_dtoa_r+0xb68>
 800abbe:	e007      	b.n	800abd0 <_dtoa_r+0xb18>
 800abc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abc2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ac24 <_dtoa_r+0xb6c>
 800abc6:	b11b      	cbz	r3, 800abd0 <_dtoa_r+0xb18>
 800abc8:	f10b 0308 	add.w	r3, fp, #8
 800abcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	4658      	mov	r0, fp
 800abd2:	b017      	add	sp, #92	; 0x5c
 800abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd8:	9b06      	ldr	r3, [sp, #24]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	f77f ae35 	ble.w	800a84a <_dtoa_r+0x792>
 800abe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abe2:	9307      	str	r3, [sp, #28]
 800abe4:	e649      	b.n	800a87a <_dtoa_r+0x7c2>
 800abe6:	9b02      	ldr	r3, [sp, #8]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	dc03      	bgt.n	800abf4 <_dtoa_r+0xb3c>
 800abec:	9b06      	ldr	r3, [sp, #24]
 800abee:	2b02      	cmp	r3, #2
 800abf0:	f73f aecc 	bgt.w	800a98c <_dtoa_r+0x8d4>
 800abf4:	465d      	mov	r5, fp
 800abf6:	4639      	mov	r1, r7
 800abf8:	9804      	ldr	r0, [sp, #16]
 800abfa:	f7ff f9d1 	bl	8009fa0 <quorem>
 800abfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ac02:	f805 8b01 	strb.w	r8, [r5], #1
 800ac06:	9a02      	ldr	r2, [sp, #8]
 800ac08:	eba5 030b 	sub.w	r3, r5, fp
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	ddb0      	ble.n	800ab72 <_dtoa_r+0xaba>
 800ac10:	2300      	movs	r3, #0
 800ac12:	220a      	movs	r2, #10
 800ac14:	9904      	ldr	r1, [sp, #16]
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 f867 	bl	800acea <__multadd>
 800ac1c:	9004      	str	r0, [sp, #16]
 800ac1e:	e7ea      	b.n	800abf6 <_dtoa_r+0xb3e>
 800ac20:	0800b9e4 	.word	0x0800b9e4
 800ac24:	0800ba2d 	.word	0x0800ba2d

0800ac28 <_localeconv_r>:
 800ac28:	4b04      	ldr	r3, [pc, #16]	; (800ac3c <_localeconv_r+0x14>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6a18      	ldr	r0, [r3, #32]
 800ac2e:	4b04      	ldr	r3, [pc, #16]	; (800ac40 <_localeconv_r+0x18>)
 800ac30:	2800      	cmp	r0, #0
 800ac32:	bf08      	it	eq
 800ac34:	4618      	moveq	r0, r3
 800ac36:	30f0      	adds	r0, #240	; 0xf0
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	20000020 	.word	0x20000020
 800ac40:	20000084 	.word	0x20000084

0800ac44 <malloc>:
 800ac44:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <malloc+0xc>)
 800ac46:	4601      	mov	r1, r0
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	f000 bb3b 	b.w	800b2c4 <_malloc_r>
 800ac4e:	bf00      	nop
 800ac50:	20000020 	.word	0x20000020

0800ac54 <_Balloc>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac58:	4604      	mov	r4, r0
 800ac5a:	460e      	mov	r6, r1
 800ac5c:	b93d      	cbnz	r5, 800ac6e <_Balloc+0x1a>
 800ac5e:	2010      	movs	r0, #16
 800ac60:	f7ff fff0 	bl	800ac44 <malloc>
 800ac64:	6260      	str	r0, [r4, #36]	; 0x24
 800ac66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac6a:	6005      	str	r5, [r0, #0]
 800ac6c:	60c5      	str	r5, [r0, #12]
 800ac6e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ac70:	68eb      	ldr	r3, [r5, #12]
 800ac72:	b183      	cbz	r3, 800ac96 <_Balloc+0x42>
 800ac74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ac7c:	b9b8      	cbnz	r0, 800acae <_Balloc+0x5a>
 800ac7e:	2101      	movs	r1, #1
 800ac80:	fa01 f506 	lsl.w	r5, r1, r6
 800ac84:	1d6a      	adds	r2, r5, #5
 800ac86:	0092      	lsls	r2, r2, #2
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fabf 	bl	800b20c <_calloc_r>
 800ac8e:	b160      	cbz	r0, 800acaa <_Balloc+0x56>
 800ac90:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ac94:	e00e      	b.n	800acb4 <_Balloc+0x60>
 800ac96:	2221      	movs	r2, #33	; 0x21
 800ac98:	2104      	movs	r1, #4
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f000 fab6 	bl	800b20c <_calloc_r>
 800aca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aca2:	60e8      	str	r0, [r5, #12]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e4      	bne.n	800ac74 <_Balloc+0x20>
 800acaa:	2000      	movs	r0, #0
 800acac:	bd70      	pop	{r4, r5, r6, pc}
 800acae:	6802      	ldr	r2, [r0, #0]
 800acb0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800acb4:	2300      	movs	r3, #0
 800acb6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acba:	e7f7      	b.n	800acac <_Balloc+0x58>

0800acbc <_Bfree>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800acc0:	4606      	mov	r6, r0
 800acc2:	460d      	mov	r5, r1
 800acc4:	b93c      	cbnz	r4, 800acd6 <_Bfree+0x1a>
 800acc6:	2010      	movs	r0, #16
 800acc8:	f7ff ffbc 	bl	800ac44 <malloc>
 800accc:	6270      	str	r0, [r6, #36]	; 0x24
 800acce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acd2:	6004      	str	r4, [r0, #0]
 800acd4:	60c4      	str	r4, [r0, #12]
 800acd6:	b13d      	cbz	r5, 800ace8 <_Bfree+0x2c>
 800acd8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800acda:	686a      	ldr	r2, [r5, #4]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ace2:	6029      	str	r1, [r5, #0]
 800ace4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ace8:	bd70      	pop	{r4, r5, r6, pc}

0800acea <__multadd>:
 800acea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acee:	690d      	ldr	r5, [r1, #16]
 800acf0:	461f      	mov	r7, r3
 800acf2:	4606      	mov	r6, r0
 800acf4:	460c      	mov	r4, r1
 800acf6:	f101 0c14 	add.w	ip, r1, #20
 800acfa:	2300      	movs	r3, #0
 800acfc:	f8dc 0000 	ldr.w	r0, [ip]
 800ad00:	b281      	uxth	r1, r0
 800ad02:	fb02 7101 	mla	r1, r2, r1, r7
 800ad06:	0c0f      	lsrs	r7, r1, #16
 800ad08:	0c00      	lsrs	r0, r0, #16
 800ad0a:	fb02 7000 	mla	r0, r2, r0, r7
 800ad0e:	b289      	uxth	r1, r1
 800ad10:	3301      	adds	r3, #1
 800ad12:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ad16:	429d      	cmp	r5, r3
 800ad18:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ad1c:	f84c 1b04 	str.w	r1, [ip], #4
 800ad20:	dcec      	bgt.n	800acfc <__multadd+0x12>
 800ad22:	b1d7      	cbz	r7, 800ad5a <__multadd+0x70>
 800ad24:	68a3      	ldr	r3, [r4, #8]
 800ad26:	42ab      	cmp	r3, r5
 800ad28:	dc12      	bgt.n	800ad50 <__multadd+0x66>
 800ad2a:	6861      	ldr	r1, [r4, #4]
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	3101      	adds	r1, #1
 800ad30:	f7ff ff90 	bl	800ac54 <_Balloc>
 800ad34:	6922      	ldr	r2, [r4, #16]
 800ad36:	3202      	adds	r2, #2
 800ad38:	f104 010c 	add.w	r1, r4, #12
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	0092      	lsls	r2, r2, #2
 800ad40:	300c      	adds	r0, #12
 800ad42:	f7fe fc5f 	bl	8009604 <memcpy>
 800ad46:	4621      	mov	r1, r4
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f7ff ffb7 	bl	800acbc <_Bfree>
 800ad4e:	4644      	mov	r4, r8
 800ad50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad54:	3501      	adds	r5, #1
 800ad56:	615f      	str	r7, [r3, #20]
 800ad58:	6125      	str	r5, [r4, #16]
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ad60 <__hi0bits>:
 800ad60:	0c02      	lsrs	r2, r0, #16
 800ad62:	0412      	lsls	r2, r2, #16
 800ad64:	4603      	mov	r3, r0
 800ad66:	b9b2      	cbnz	r2, 800ad96 <__hi0bits+0x36>
 800ad68:	0403      	lsls	r3, r0, #16
 800ad6a:	2010      	movs	r0, #16
 800ad6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad70:	bf04      	itt	eq
 800ad72:	021b      	lsleq	r3, r3, #8
 800ad74:	3008      	addeq	r0, #8
 800ad76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad7a:	bf04      	itt	eq
 800ad7c:	011b      	lsleq	r3, r3, #4
 800ad7e:	3004      	addeq	r0, #4
 800ad80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad84:	bf04      	itt	eq
 800ad86:	009b      	lsleq	r3, r3, #2
 800ad88:	3002      	addeq	r0, #2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	db06      	blt.n	800ad9c <__hi0bits+0x3c>
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	d503      	bpl.n	800ad9a <__hi0bits+0x3a>
 800ad92:	3001      	adds	r0, #1
 800ad94:	4770      	bx	lr
 800ad96:	2000      	movs	r0, #0
 800ad98:	e7e8      	b.n	800ad6c <__hi0bits+0xc>
 800ad9a:	2020      	movs	r0, #32
 800ad9c:	4770      	bx	lr

0800ad9e <__lo0bits>:
 800ad9e:	6803      	ldr	r3, [r0, #0]
 800ada0:	f013 0207 	ands.w	r2, r3, #7
 800ada4:	4601      	mov	r1, r0
 800ada6:	d00b      	beq.n	800adc0 <__lo0bits+0x22>
 800ada8:	07da      	lsls	r2, r3, #31
 800adaa:	d423      	bmi.n	800adf4 <__lo0bits+0x56>
 800adac:	0798      	lsls	r0, r3, #30
 800adae:	bf49      	itett	mi
 800adb0:	085b      	lsrmi	r3, r3, #1
 800adb2:	089b      	lsrpl	r3, r3, #2
 800adb4:	2001      	movmi	r0, #1
 800adb6:	600b      	strmi	r3, [r1, #0]
 800adb8:	bf5c      	itt	pl
 800adba:	600b      	strpl	r3, [r1, #0]
 800adbc:	2002      	movpl	r0, #2
 800adbe:	4770      	bx	lr
 800adc0:	b298      	uxth	r0, r3
 800adc2:	b9a8      	cbnz	r0, 800adf0 <__lo0bits+0x52>
 800adc4:	0c1b      	lsrs	r3, r3, #16
 800adc6:	2010      	movs	r0, #16
 800adc8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800adcc:	bf04      	itt	eq
 800adce:	0a1b      	lsreq	r3, r3, #8
 800add0:	3008      	addeq	r0, #8
 800add2:	071a      	lsls	r2, r3, #28
 800add4:	bf04      	itt	eq
 800add6:	091b      	lsreq	r3, r3, #4
 800add8:	3004      	addeq	r0, #4
 800adda:	079a      	lsls	r2, r3, #30
 800addc:	bf04      	itt	eq
 800adde:	089b      	lsreq	r3, r3, #2
 800ade0:	3002      	addeq	r0, #2
 800ade2:	07da      	lsls	r2, r3, #31
 800ade4:	d402      	bmi.n	800adec <__lo0bits+0x4e>
 800ade6:	085b      	lsrs	r3, r3, #1
 800ade8:	d006      	beq.n	800adf8 <__lo0bits+0x5a>
 800adea:	3001      	adds	r0, #1
 800adec:	600b      	str	r3, [r1, #0]
 800adee:	4770      	bx	lr
 800adf0:	4610      	mov	r0, r2
 800adf2:	e7e9      	b.n	800adc8 <__lo0bits+0x2a>
 800adf4:	2000      	movs	r0, #0
 800adf6:	4770      	bx	lr
 800adf8:	2020      	movs	r0, #32
 800adfa:	4770      	bx	lr

0800adfc <__i2b>:
 800adfc:	b510      	push	{r4, lr}
 800adfe:	460c      	mov	r4, r1
 800ae00:	2101      	movs	r1, #1
 800ae02:	f7ff ff27 	bl	800ac54 <_Balloc>
 800ae06:	2201      	movs	r2, #1
 800ae08:	6144      	str	r4, [r0, #20]
 800ae0a:	6102      	str	r2, [r0, #16]
 800ae0c:	bd10      	pop	{r4, pc}

0800ae0e <__multiply>:
 800ae0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae12:	4614      	mov	r4, r2
 800ae14:	690a      	ldr	r2, [r1, #16]
 800ae16:	6923      	ldr	r3, [r4, #16]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	bfb8      	it	lt
 800ae1c:	460b      	movlt	r3, r1
 800ae1e:	4688      	mov	r8, r1
 800ae20:	bfbc      	itt	lt
 800ae22:	46a0      	movlt	r8, r4
 800ae24:	461c      	movlt	r4, r3
 800ae26:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae2a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ae2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae32:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae36:	eb07 0609 	add.w	r6, r7, r9
 800ae3a:	42b3      	cmp	r3, r6
 800ae3c:	bfb8      	it	lt
 800ae3e:	3101      	addlt	r1, #1
 800ae40:	f7ff ff08 	bl	800ac54 <_Balloc>
 800ae44:	f100 0514 	add.w	r5, r0, #20
 800ae48:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	2200      	movs	r2, #0
 800ae50:	4573      	cmp	r3, lr
 800ae52:	d316      	bcc.n	800ae82 <__multiply+0x74>
 800ae54:	f104 0214 	add.w	r2, r4, #20
 800ae58:	f108 0114 	add.w	r1, r8, #20
 800ae5c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ae60:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	9b00      	ldr	r3, [sp, #0]
 800ae68:	9201      	str	r2, [sp, #4]
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d80c      	bhi.n	800ae88 <__multiply+0x7a>
 800ae6e:	2e00      	cmp	r6, #0
 800ae70:	dd03      	ble.n	800ae7a <__multiply+0x6c>
 800ae72:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d05d      	beq.n	800af36 <__multiply+0x128>
 800ae7a:	6106      	str	r6, [r0, #16]
 800ae7c:	b003      	add	sp, #12
 800ae7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae82:	f843 2b04 	str.w	r2, [r3], #4
 800ae86:	e7e3      	b.n	800ae50 <__multiply+0x42>
 800ae88:	f8b2 b000 	ldrh.w	fp, [r2]
 800ae8c:	f1bb 0f00 	cmp.w	fp, #0
 800ae90:	d023      	beq.n	800aeda <__multiply+0xcc>
 800ae92:	4689      	mov	r9, r1
 800ae94:	46ac      	mov	ip, r5
 800ae96:	f04f 0800 	mov.w	r8, #0
 800ae9a:	f859 4b04 	ldr.w	r4, [r9], #4
 800ae9e:	f8dc a000 	ldr.w	sl, [ip]
 800aea2:	b2a3      	uxth	r3, r4
 800aea4:	fa1f fa8a 	uxth.w	sl, sl
 800aea8:	fb0b a303 	mla	r3, fp, r3, sl
 800aeac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aeb0:	f8dc 4000 	ldr.w	r4, [ip]
 800aeb4:	4443      	add	r3, r8
 800aeb6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aeba:	fb0b 840a 	mla	r4, fp, sl, r8
 800aebe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aec2:	46e2      	mov	sl, ip
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aeca:	454f      	cmp	r7, r9
 800aecc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aed0:	f84a 3b04 	str.w	r3, [sl], #4
 800aed4:	d82b      	bhi.n	800af2e <__multiply+0x120>
 800aed6:	f8cc 8004 	str.w	r8, [ip, #4]
 800aeda:	9b01      	ldr	r3, [sp, #4]
 800aedc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aee0:	3204      	adds	r2, #4
 800aee2:	f1ba 0f00 	cmp.w	sl, #0
 800aee6:	d020      	beq.n	800af2a <__multiply+0x11c>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	4689      	mov	r9, r1
 800aeec:	46a8      	mov	r8, r5
 800aeee:	f04f 0b00 	mov.w	fp, #0
 800aef2:	f8b9 c000 	ldrh.w	ip, [r9]
 800aef6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aefa:	fb0a 440c 	mla	r4, sl, ip, r4
 800aefe:	445c      	add	r4, fp
 800af00:	46c4      	mov	ip, r8
 800af02:	b29b      	uxth	r3, r3
 800af04:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800af08:	f84c 3b04 	str.w	r3, [ip], #4
 800af0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800af10:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800af14:	0c1b      	lsrs	r3, r3, #16
 800af16:	fb0a b303 	mla	r3, sl, r3, fp
 800af1a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800af1e:	454f      	cmp	r7, r9
 800af20:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800af24:	d805      	bhi.n	800af32 <__multiply+0x124>
 800af26:	f8c8 3004 	str.w	r3, [r8, #4]
 800af2a:	3504      	adds	r5, #4
 800af2c:	e79b      	b.n	800ae66 <__multiply+0x58>
 800af2e:	46d4      	mov	ip, sl
 800af30:	e7b3      	b.n	800ae9a <__multiply+0x8c>
 800af32:	46e0      	mov	r8, ip
 800af34:	e7dd      	b.n	800aef2 <__multiply+0xe4>
 800af36:	3e01      	subs	r6, #1
 800af38:	e799      	b.n	800ae6e <__multiply+0x60>
	...

0800af3c <__pow5mult>:
 800af3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af40:	4615      	mov	r5, r2
 800af42:	f012 0203 	ands.w	r2, r2, #3
 800af46:	4606      	mov	r6, r0
 800af48:	460f      	mov	r7, r1
 800af4a:	d007      	beq.n	800af5c <__pow5mult+0x20>
 800af4c:	3a01      	subs	r2, #1
 800af4e:	4c21      	ldr	r4, [pc, #132]	; (800afd4 <__pow5mult+0x98>)
 800af50:	2300      	movs	r3, #0
 800af52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af56:	f7ff fec8 	bl	800acea <__multadd>
 800af5a:	4607      	mov	r7, r0
 800af5c:	10ad      	asrs	r5, r5, #2
 800af5e:	d035      	beq.n	800afcc <__pow5mult+0x90>
 800af60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af62:	b93c      	cbnz	r4, 800af74 <__pow5mult+0x38>
 800af64:	2010      	movs	r0, #16
 800af66:	f7ff fe6d 	bl	800ac44 <malloc>
 800af6a:	6270      	str	r0, [r6, #36]	; 0x24
 800af6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af70:	6004      	str	r4, [r0, #0]
 800af72:	60c4      	str	r4, [r0, #12]
 800af74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af7c:	b94c      	cbnz	r4, 800af92 <__pow5mult+0x56>
 800af7e:	f240 2171 	movw	r1, #625	; 0x271
 800af82:	4630      	mov	r0, r6
 800af84:	f7ff ff3a 	bl	800adfc <__i2b>
 800af88:	2300      	movs	r3, #0
 800af8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800af8e:	4604      	mov	r4, r0
 800af90:	6003      	str	r3, [r0, #0]
 800af92:	f04f 0800 	mov.w	r8, #0
 800af96:	07eb      	lsls	r3, r5, #31
 800af98:	d50a      	bpl.n	800afb0 <__pow5mult+0x74>
 800af9a:	4639      	mov	r1, r7
 800af9c:	4622      	mov	r2, r4
 800af9e:	4630      	mov	r0, r6
 800afa0:	f7ff ff35 	bl	800ae0e <__multiply>
 800afa4:	4639      	mov	r1, r7
 800afa6:	4681      	mov	r9, r0
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7ff fe87 	bl	800acbc <_Bfree>
 800afae:	464f      	mov	r7, r9
 800afb0:	106d      	asrs	r5, r5, #1
 800afb2:	d00b      	beq.n	800afcc <__pow5mult+0x90>
 800afb4:	6820      	ldr	r0, [r4, #0]
 800afb6:	b938      	cbnz	r0, 800afc8 <__pow5mult+0x8c>
 800afb8:	4622      	mov	r2, r4
 800afba:	4621      	mov	r1, r4
 800afbc:	4630      	mov	r0, r6
 800afbe:	f7ff ff26 	bl	800ae0e <__multiply>
 800afc2:	6020      	str	r0, [r4, #0]
 800afc4:	f8c0 8000 	str.w	r8, [r0]
 800afc8:	4604      	mov	r4, r0
 800afca:	e7e4      	b.n	800af96 <__pow5mult+0x5a>
 800afcc:	4638      	mov	r0, r7
 800afce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd2:	bf00      	nop
 800afd4:	0800bb30 	.word	0x0800bb30

0800afd8 <__lshift>:
 800afd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afdc:	460c      	mov	r4, r1
 800afde:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afe2:	6923      	ldr	r3, [r4, #16]
 800afe4:	6849      	ldr	r1, [r1, #4]
 800afe6:	eb0a 0903 	add.w	r9, sl, r3
 800afea:	68a3      	ldr	r3, [r4, #8]
 800afec:	4607      	mov	r7, r0
 800afee:	4616      	mov	r6, r2
 800aff0:	f109 0501 	add.w	r5, r9, #1
 800aff4:	42ab      	cmp	r3, r5
 800aff6:	db32      	blt.n	800b05e <__lshift+0x86>
 800aff8:	4638      	mov	r0, r7
 800affa:	f7ff fe2b 	bl	800ac54 <_Balloc>
 800affe:	2300      	movs	r3, #0
 800b000:	4680      	mov	r8, r0
 800b002:	f100 0114 	add.w	r1, r0, #20
 800b006:	461a      	mov	r2, r3
 800b008:	4553      	cmp	r3, sl
 800b00a:	db2b      	blt.n	800b064 <__lshift+0x8c>
 800b00c:	6920      	ldr	r0, [r4, #16]
 800b00e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b012:	f104 0314 	add.w	r3, r4, #20
 800b016:	f016 021f 	ands.w	r2, r6, #31
 800b01a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b01e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b022:	d025      	beq.n	800b070 <__lshift+0x98>
 800b024:	f1c2 0e20 	rsb	lr, r2, #32
 800b028:	2000      	movs	r0, #0
 800b02a:	681e      	ldr	r6, [r3, #0]
 800b02c:	468a      	mov	sl, r1
 800b02e:	4096      	lsls	r6, r2
 800b030:	4330      	orrs	r0, r6
 800b032:	f84a 0b04 	str.w	r0, [sl], #4
 800b036:	f853 0b04 	ldr.w	r0, [r3], #4
 800b03a:	459c      	cmp	ip, r3
 800b03c:	fa20 f00e 	lsr.w	r0, r0, lr
 800b040:	d814      	bhi.n	800b06c <__lshift+0x94>
 800b042:	6048      	str	r0, [r1, #4]
 800b044:	b108      	cbz	r0, 800b04a <__lshift+0x72>
 800b046:	f109 0502 	add.w	r5, r9, #2
 800b04a:	3d01      	subs	r5, #1
 800b04c:	4638      	mov	r0, r7
 800b04e:	f8c8 5010 	str.w	r5, [r8, #16]
 800b052:	4621      	mov	r1, r4
 800b054:	f7ff fe32 	bl	800acbc <_Bfree>
 800b058:	4640      	mov	r0, r8
 800b05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b05e:	3101      	adds	r1, #1
 800b060:	005b      	lsls	r3, r3, #1
 800b062:	e7c7      	b.n	800aff4 <__lshift+0x1c>
 800b064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b068:	3301      	adds	r3, #1
 800b06a:	e7cd      	b.n	800b008 <__lshift+0x30>
 800b06c:	4651      	mov	r1, sl
 800b06e:	e7dc      	b.n	800b02a <__lshift+0x52>
 800b070:	3904      	subs	r1, #4
 800b072:	f853 2b04 	ldr.w	r2, [r3], #4
 800b076:	f841 2f04 	str.w	r2, [r1, #4]!
 800b07a:	459c      	cmp	ip, r3
 800b07c:	d8f9      	bhi.n	800b072 <__lshift+0x9a>
 800b07e:	e7e4      	b.n	800b04a <__lshift+0x72>

0800b080 <__mcmp>:
 800b080:	6903      	ldr	r3, [r0, #16]
 800b082:	690a      	ldr	r2, [r1, #16]
 800b084:	1a9b      	subs	r3, r3, r2
 800b086:	b530      	push	{r4, r5, lr}
 800b088:	d10c      	bne.n	800b0a4 <__mcmp+0x24>
 800b08a:	0092      	lsls	r2, r2, #2
 800b08c:	3014      	adds	r0, #20
 800b08e:	3114      	adds	r1, #20
 800b090:	1884      	adds	r4, r0, r2
 800b092:	4411      	add	r1, r2
 800b094:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b098:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b09c:	4295      	cmp	r5, r2
 800b09e:	d003      	beq.n	800b0a8 <__mcmp+0x28>
 800b0a0:	d305      	bcc.n	800b0ae <__mcmp+0x2e>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	bd30      	pop	{r4, r5, pc}
 800b0a8:	42a0      	cmp	r0, r4
 800b0aa:	d3f3      	bcc.n	800b094 <__mcmp+0x14>
 800b0ac:	e7fa      	b.n	800b0a4 <__mcmp+0x24>
 800b0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b2:	e7f7      	b.n	800b0a4 <__mcmp+0x24>

0800b0b4 <__mdiff>:
 800b0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b8:	460d      	mov	r5, r1
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	4611      	mov	r1, r2
 800b0be:	4628      	mov	r0, r5
 800b0c0:	4614      	mov	r4, r2
 800b0c2:	f7ff ffdd 	bl	800b080 <__mcmp>
 800b0c6:	1e06      	subs	r6, r0, #0
 800b0c8:	d108      	bne.n	800b0dc <__mdiff+0x28>
 800b0ca:	4631      	mov	r1, r6
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff fdc1 	bl	800ac54 <_Balloc>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0dc:	bfa4      	itt	ge
 800b0de:	4623      	movge	r3, r4
 800b0e0:	462c      	movge	r4, r5
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	6861      	ldr	r1, [r4, #4]
 800b0e6:	bfa6      	itte	ge
 800b0e8:	461d      	movge	r5, r3
 800b0ea:	2600      	movge	r6, #0
 800b0ec:	2601      	movlt	r6, #1
 800b0ee:	f7ff fdb1 	bl	800ac54 <_Balloc>
 800b0f2:	692b      	ldr	r3, [r5, #16]
 800b0f4:	60c6      	str	r6, [r0, #12]
 800b0f6:	6926      	ldr	r6, [r4, #16]
 800b0f8:	f105 0914 	add.w	r9, r5, #20
 800b0fc:	f104 0214 	add.w	r2, r4, #20
 800b100:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b104:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b108:	f100 0514 	add.w	r5, r0, #20
 800b10c:	f04f 0e00 	mov.w	lr, #0
 800b110:	f852 ab04 	ldr.w	sl, [r2], #4
 800b114:	f859 4b04 	ldr.w	r4, [r9], #4
 800b118:	fa1e f18a 	uxtah	r1, lr, sl
 800b11c:	b2a3      	uxth	r3, r4
 800b11e:	1ac9      	subs	r1, r1, r3
 800b120:	0c23      	lsrs	r3, r4, #16
 800b122:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b126:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b12a:	b289      	uxth	r1, r1
 800b12c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b130:	45c8      	cmp	r8, r9
 800b132:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b136:	4694      	mov	ip, r2
 800b138:	f845 3b04 	str.w	r3, [r5], #4
 800b13c:	d8e8      	bhi.n	800b110 <__mdiff+0x5c>
 800b13e:	45bc      	cmp	ip, r7
 800b140:	d304      	bcc.n	800b14c <__mdiff+0x98>
 800b142:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b146:	b183      	cbz	r3, 800b16a <__mdiff+0xb6>
 800b148:	6106      	str	r6, [r0, #16]
 800b14a:	e7c5      	b.n	800b0d8 <__mdiff+0x24>
 800b14c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b150:	fa1e f381 	uxtah	r3, lr, r1
 800b154:	141a      	asrs	r2, r3, #16
 800b156:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b160:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b164:	f845 3b04 	str.w	r3, [r5], #4
 800b168:	e7e9      	b.n	800b13e <__mdiff+0x8a>
 800b16a:	3e01      	subs	r6, #1
 800b16c:	e7e9      	b.n	800b142 <__mdiff+0x8e>

0800b16e <__d2b>:
 800b16e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b172:	460e      	mov	r6, r1
 800b174:	2101      	movs	r1, #1
 800b176:	ec59 8b10 	vmov	r8, r9, d0
 800b17a:	4615      	mov	r5, r2
 800b17c:	f7ff fd6a 	bl	800ac54 <_Balloc>
 800b180:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b184:	4607      	mov	r7, r0
 800b186:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b18a:	bb34      	cbnz	r4, 800b1da <__d2b+0x6c>
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	f1b8 0300 	subs.w	r3, r8, #0
 800b192:	d027      	beq.n	800b1e4 <__d2b+0x76>
 800b194:	a802      	add	r0, sp, #8
 800b196:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b19a:	f7ff fe00 	bl	800ad9e <__lo0bits>
 800b19e:	9900      	ldr	r1, [sp, #0]
 800b1a0:	b1f0      	cbz	r0, 800b1e0 <__d2b+0x72>
 800b1a2:	9a01      	ldr	r2, [sp, #4]
 800b1a4:	f1c0 0320 	rsb	r3, r0, #32
 800b1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ac:	430b      	orrs	r3, r1
 800b1ae:	40c2      	lsrs	r2, r0
 800b1b0:	617b      	str	r3, [r7, #20]
 800b1b2:	9201      	str	r2, [sp, #4]
 800b1b4:	9b01      	ldr	r3, [sp, #4]
 800b1b6:	61bb      	str	r3, [r7, #24]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	bf14      	ite	ne
 800b1bc:	2102      	movne	r1, #2
 800b1be:	2101      	moveq	r1, #1
 800b1c0:	6139      	str	r1, [r7, #16]
 800b1c2:	b1c4      	cbz	r4, 800b1f6 <__d2b+0x88>
 800b1c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b1c8:	4404      	add	r4, r0
 800b1ca:	6034      	str	r4, [r6, #0]
 800b1cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1d0:	6028      	str	r0, [r5, #0]
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	b003      	add	sp, #12
 800b1d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1de:	e7d5      	b.n	800b18c <__d2b+0x1e>
 800b1e0:	6179      	str	r1, [r7, #20]
 800b1e2:	e7e7      	b.n	800b1b4 <__d2b+0x46>
 800b1e4:	a801      	add	r0, sp, #4
 800b1e6:	f7ff fdda 	bl	800ad9e <__lo0bits>
 800b1ea:	9b01      	ldr	r3, [sp, #4]
 800b1ec:	617b      	str	r3, [r7, #20]
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	6139      	str	r1, [r7, #16]
 800b1f2:	3020      	adds	r0, #32
 800b1f4:	e7e5      	b.n	800b1c2 <__d2b+0x54>
 800b1f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b1fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1fe:	6030      	str	r0, [r6, #0]
 800b200:	6918      	ldr	r0, [r3, #16]
 800b202:	f7ff fdad 	bl	800ad60 <__hi0bits>
 800b206:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b20a:	e7e1      	b.n	800b1d0 <__d2b+0x62>

0800b20c <_calloc_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	fb02 f401 	mul.w	r4, r2, r1
 800b212:	4621      	mov	r1, r4
 800b214:	f000 f856 	bl	800b2c4 <_malloc_r>
 800b218:	4605      	mov	r5, r0
 800b21a:	b118      	cbz	r0, 800b224 <_calloc_r+0x18>
 800b21c:	4622      	mov	r2, r4
 800b21e:	2100      	movs	r1, #0
 800b220:	f7fe f9fb 	bl	800961a <memset>
 800b224:	4628      	mov	r0, r5
 800b226:	bd38      	pop	{r3, r4, r5, pc}

0800b228 <_free_r>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	4605      	mov	r5, r0
 800b22c:	2900      	cmp	r1, #0
 800b22e:	d045      	beq.n	800b2bc <_free_r+0x94>
 800b230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b234:	1f0c      	subs	r4, r1, #4
 800b236:	2b00      	cmp	r3, #0
 800b238:	bfb8      	it	lt
 800b23a:	18e4      	addlt	r4, r4, r3
 800b23c:	f000 fa29 	bl	800b692 <__malloc_lock>
 800b240:	4a1f      	ldr	r2, [pc, #124]	; (800b2c0 <_free_r+0x98>)
 800b242:	6813      	ldr	r3, [r2, #0]
 800b244:	4610      	mov	r0, r2
 800b246:	b933      	cbnz	r3, 800b256 <_free_r+0x2e>
 800b248:	6063      	str	r3, [r4, #4]
 800b24a:	6014      	str	r4, [r2, #0]
 800b24c:	4628      	mov	r0, r5
 800b24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b252:	f000 ba1f 	b.w	800b694 <__malloc_unlock>
 800b256:	42a3      	cmp	r3, r4
 800b258:	d90c      	bls.n	800b274 <_free_r+0x4c>
 800b25a:	6821      	ldr	r1, [r4, #0]
 800b25c:	1862      	adds	r2, r4, r1
 800b25e:	4293      	cmp	r3, r2
 800b260:	bf04      	itt	eq
 800b262:	681a      	ldreq	r2, [r3, #0]
 800b264:	685b      	ldreq	r3, [r3, #4]
 800b266:	6063      	str	r3, [r4, #4]
 800b268:	bf04      	itt	eq
 800b26a:	1852      	addeq	r2, r2, r1
 800b26c:	6022      	streq	r2, [r4, #0]
 800b26e:	6004      	str	r4, [r0, #0]
 800b270:	e7ec      	b.n	800b24c <_free_r+0x24>
 800b272:	4613      	mov	r3, r2
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	b10a      	cbz	r2, 800b27c <_free_r+0x54>
 800b278:	42a2      	cmp	r2, r4
 800b27a:	d9fa      	bls.n	800b272 <_free_r+0x4a>
 800b27c:	6819      	ldr	r1, [r3, #0]
 800b27e:	1858      	adds	r0, r3, r1
 800b280:	42a0      	cmp	r0, r4
 800b282:	d10b      	bne.n	800b29c <_free_r+0x74>
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	4401      	add	r1, r0
 800b288:	1858      	adds	r0, r3, r1
 800b28a:	4282      	cmp	r2, r0
 800b28c:	6019      	str	r1, [r3, #0]
 800b28e:	d1dd      	bne.n	800b24c <_free_r+0x24>
 800b290:	6810      	ldr	r0, [r2, #0]
 800b292:	6852      	ldr	r2, [r2, #4]
 800b294:	605a      	str	r2, [r3, #4]
 800b296:	4401      	add	r1, r0
 800b298:	6019      	str	r1, [r3, #0]
 800b29a:	e7d7      	b.n	800b24c <_free_r+0x24>
 800b29c:	d902      	bls.n	800b2a4 <_free_r+0x7c>
 800b29e:	230c      	movs	r3, #12
 800b2a0:	602b      	str	r3, [r5, #0]
 800b2a2:	e7d3      	b.n	800b24c <_free_r+0x24>
 800b2a4:	6820      	ldr	r0, [r4, #0]
 800b2a6:	1821      	adds	r1, r4, r0
 800b2a8:	428a      	cmp	r2, r1
 800b2aa:	bf04      	itt	eq
 800b2ac:	6811      	ldreq	r1, [r2, #0]
 800b2ae:	6852      	ldreq	r2, [r2, #4]
 800b2b0:	6062      	str	r2, [r4, #4]
 800b2b2:	bf04      	itt	eq
 800b2b4:	1809      	addeq	r1, r1, r0
 800b2b6:	6021      	streq	r1, [r4, #0]
 800b2b8:	605c      	str	r4, [r3, #4]
 800b2ba:	e7c7      	b.n	800b24c <_free_r+0x24>
 800b2bc:	bd38      	pop	{r3, r4, r5, pc}
 800b2be:	bf00      	nop
 800b2c0:	200041d8 	.word	0x200041d8

0800b2c4 <_malloc_r>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	1ccd      	adds	r5, r1, #3
 800b2c8:	f025 0503 	bic.w	r5, r5, #3
 800b2cc:	3508      	adds	r5, #8
 800b2ce:	2d0c      	cmp	r5, #12
 800b2d0:	bf38      	it	cc
 800b2d2:	250c      	movcc	r5, #12
 800b2d4:	2d00      	cmp	r5, #0
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	db01      	blt.n	800b2de <_malloc_r+0x1a>
 800b2da:	42a9      	cmp	r1, r5
 800b2dc:	d903      	bls.n	800b2e6 <_malloc_r+0x22>
 800b2de:	230c      	movs	r3, #12
 800b2e0:	6033      	str	r3, [r6, #0]
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	bd70      	pop	{r4, r5, r6, pc}
 800b2e6:	f000 f9d4 	bl	800b692 <__malloc_lock>
 800b2ea:	4a21      	ldr	r2, [pc, #132]	; (800b370 <_malloc_r+0xac>)
 800b2ec:	6814      	ldr	r4, [r2, #0]
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	b991      	cbnz	r1, 800b318 <_malloc_r+0x54>
 800b2f2:	4c20      	ldr	r4, [pc, #128]	; (800b374 <_malloc_r+0xb0>)
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	b91b      	cbnz	r3, 800b300 <_malloc_r+0x3c>
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f000 f98f 	bl	800b61c <_sbrk_r>
 800b2fe:	6020      	str	r0, [r4, #0]
 800b300:	4629      	mov	r1, r5
 800b302:	4630      	mov	r0, r6
 800b304:	f000 f98a 	bl	800b61c <_sbrk_r>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	d124      	bne.n	800b356 <_malloc_r+0x92>
 800b30c:	230c      	movs	r3, #12
 800b30e:	6033      	str	r3, [r6, #0]
 800b310:	4630      	mov	r0, r6
 800b312:	f000 f9bf 	bl	800b694 <__malloc_unlock>
 800b316:	e7e4      	b.n	800b2e2 <_malloc_r+0x1e>
 800b318:	680b      	ldr	r3, [r1, #0]
 800b31a:	1b5b      	subs	r3, r3, r5
 800b31c:	d418      	bmi.n	800b350 <_malloc_r+0x8c>
 800b31e:	2b0b      	cmp	r3, #11
 800b320:	d90f      	bls.n	800b342 <_malloc_r+0x7e>
 800b322:	600b      	str	r3, [r1, #0]
 800b324:	50cd      	str	r5, [r1, r3]
 800b326:	18cc      	adds	r4, r1, r3
 800b328:	4630      	mov	r0, r6
 800b32a:	f000 f9b3 	bl	800b694 <__malloc_unlock>
 800b32e:	f104 000b 	add.w	r0, r4, #11
 800b332:	1d23      	adds	r3, r4, #4
 800b334:	f020 0007 	bic.w	r0, r0, #7
 800b338:	1ac3      	subs	r3, r0, r3
 800b33a:	d0d3      	beq.n	800b2e4 <_malloc_r+0x20>
 800b33c:	425a      	negs	r2, r3
 800b33e:	50e2      	str	r2, [r4, r3]
 800b340:	e7d0      	b.n	800b2e4 <_malloc_r+0x20>
 800b342:	428c      	cmp	r4, r1
 800b344:	684b      	ldr	r3, [r1, #4]
 800b346:	bf16      	itet	ne
 800b348:	6063      	strne	r3, [r4, #4]
 800b34a:	6013      	streq	r3, [r2, #0]
 800b34c:	460c      	movne	r4, r1
 800b34e:	e7eb      	b.n	800b328 <_malloc_r+0x64>
 800b350:	460c      	mov	r4, r1
 800b352:	6849      	ldr	r1, [r1, #4]
 800b354:	e7cc      	b.n	800b2f0 <_malloc_r+0x2c>
 800b356:	1cc4      	adds	r4, r0, #3
 800b358:	f024 0403 	bic.w	r4, r4, #3
 800b35c:	42a0      	cmp	r0, r4
 800b35e:	d005      	beq.n	800b36c <_malloc_r+0xa8>
 800b360:	1a21      	subs	r1, r4, r0
 800b362:	4630      	mov	r0, r6
 800b364:	f000 f95a 	bl	800b61c <_sbrk_r>
 800b368:	3001      	adds	r0, #1
 800b36a:	d0cf      	beq.n	800b30c <_malloc_r+0x48>
 800b36c:	6025      	str	r5, [r4, #0]
 800b36e:	e7db      	b.n	800b328 <_malloc_r+0x64>
 800b370:	200041d8 	.word	0x200041d8
 800b374:	200041dc 	.word	0x200041dc

0800b378 <__ssputs_r>:
 800b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b37c:	688e      	ldr	r6, [r1, #8]
 800b37e:	429e      	cmp	r6, r3
 800b380:	4682      	mov	sl, r0
 800b382:	460c      	mov	r4, r1
 800b384:	4690      	mov	r8, r2
 800b386:	4699      	mov	r9, r3
 800b388:	d837      	bhi.n	800b3fa <__ssputs_r+0x82>
 800b38a:	898a      	ldrh	r2, [r1, #12]
 800b38c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b390:	d031      	beq.n	800b3f6 <__ssputs_r+0x7e>
 800b392:	6825      	ldr	r5, [r4, #0]
 800b394:	6909      	ldr	r1, [r1, #16]
 800b396:	1a6f      	subs	r7, r5, r1
 800b398:	6965      	ldr	r5, [r4, #20]
 800b39a:	2302      	movs	r3, #2
 800b39c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3a0:	fb95 f5f3 	sdiv	r5, r5, r3
 800b3a4:	f109 0301 	add.w	r3, r9, #1
 800b3a8:	443b      	add	r3, r7
 800b3aa:	429d      	cmp	r5, r3
 800b3ac:	bf38      	it	cc
 800b3ae:	461d      	movcc	r5, r3
 800b3b0:	0553      	lsls	r3, r2, #21
 800b3b2:	d530      	bpl.n	800b416 <__ssputs_r+0x9e>
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	f7ff ff85 	bl	800b2c4 <_malloc_r>
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	b950      	cbnz	r0, 800b3d4 <__ssputs_r+0x5c>
 800b3be:	230c      	movs	r3, #12
 800b3c0:	f8ca 3000 	str.w	r3, [sl]
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d4:	463a      	mov	r2, r7
 800b3d6:	6921      	ldr	r1, [r4, #16]
 800b3d8:	f7fe f914 	bl	8009604 <memcpy>
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e6:	81a3      	strh	r3, [r4, #12]
 800b3e8:	6126      	str	r6, [r4, #16]
 800b3ea:	6165      	str	r5, [r4, #20]
 800b3ec:	443e      	add	r6, r7
 800b3ee:	1bed      	subs	r5, r5, r7
 800b3f0:	6026      	str	r6, [r4, #0]
 800b3f2:	60a5      	str	r5, [r4, #8]
 800b3f4:	464e      	mov	r6, r9
 800b3f6:	454e      	cmp	r6, r9
 800b3f8:	d900      	bls.n	800b3fc <__ssputs_r+0x84>
 800b3fa:	464e      	mov	r6, r9
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	4641      	mov	r1, r8
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	f000 f92d 	bl	800b660 <memmove>
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	1b9b      	subs	r3, r3, r6
 800b40a:	60a3      	str	r3, [r4, #8]
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	441e      	add	r6, r3
 800b410:	6026      	str	r6, [r4, #0]
 800b412:	2000      	movs	r0, #0
 800b414:	e7dc      	b.n	800b3d0 <__ssputs_r+0x58>
 800b416:	462a      	mov	r2, r5
 800b418:	f000 f93d 	bl	800b696 <_realloc_r>
 800b41c:	4606      	mov	r6, r0
 800b41e:	2800      	cmp	r0, #0
 800b420:	d1e2      	bne.n	800b3e8 <__ssputs_r+0x70>
 800b422:	6921      	ldr	r1, [r4, #16]
 800b424:	4650      	mov	r0, sl
 800b426:	f7ff feff 	bl	800b228 <_free_r>
 800b42a:	e7c8      	b.n	800b3be <__ssputs_r+0x46>

0800b42c <_svfiprintf_r>:
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	461d      	mov	r5, r3
 800b432:	898b      	ldrh	r3, [r1, #12]
 800b434:	061f      	lsls	r7, r3, #24
 800b436:	b09d      	sub	sp, #116	; 0x74
 800b438:	4680      	mov	r8, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	4616      	mov	r6, r2
 800b43e:	d50f      	bpl.n	800b460 <_svfiprintf_r+0x34>
 800b440:	690b      	ldr	r3, [r1, #16]
 800b442:	b96b      	cbnz	r3, 800b460 <_svfiprintf_r+0x34>
 800b444:	2140      	movs	r1, #64	; 0x40
 800b446:	f7ff ff3d 	bl	800b2c4 <_malloc_r>
 800b44a:	6020      	str	r0, [r4, #0]
 800b44c:	6120      	str	r0, [r4, #16]
 800b44e:	b928      	cbnz	r0, 800b45c <_svfiprintf_r+0x30>
 800b450:	230c      	movs	r3, #12
 800b452:	f8c8 3000 	str.w	r3, [r8]
 800b456:	f04f 30ff 	mov.w	r0, #4294967295
 800b45a:	e0c8      	b.n	800b5ee <_svfiprintf_r+0x1c2>
 800b45c:	2340      	movs	r3, #64	; 0x40
 800b45e:	6163      	str	r3, [r4, #20]
 800b460:	2300      	movs	r3, #0
 800b462:	9309      	str	r3, [sp, #36]	; 0x24
 800b464:	2320      	movs	r3, #32
 800b466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b46a:	2330      	movs	r3, #48	; 0x30
 800b46c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b470:	9503      	str	r5, [sp, #12]
 800b472:	f04f 0b01 	mov.w	fp, #1
 800b476:	4637      	mov	r7, r6
 800b478:	463d      	mov	r5, r7
 800b47a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b47e:	b10b      	cbz	r3, 800b484 <_svfiprintf_r+0x58>
 800b480:	2b25      	cmp	r3, #37	; 0x25
 800b482:	d13e      	bne.n	800b502 <_svfiprintf_r+0xd6>
 800b484:	ebb7 0a06 	subs.w	sl, r7, r6
 800b488:	d00b      	beq.n	800b4a2 <_svfiprintf_r+0x76>
 800b48a:	4653      	mov	r3, sl
 800b48c:	4632      	mov	r2, r6
 800b48e:	4621      	mov	r1, r4
 800b490:	4640      	mov	r0, r8
 800b492:	f7ff ff71 	bl	800b378 <__ssputs_r>
 800b496:	3001      	adds	r0, #1
 800b498:	f000 80a4 	beq.w	800b5e4 <_svfiprintf_r+0x1b8>
 800b49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b49e:	4453      	add	r3, sl
 800b4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a2:	783b      	ldrb	r3, [r7, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 809d 	beq.w	800b5e4 <_svfiprintf_r+0x1b8>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	9307      	str	r3, [sp, #28]
 800b4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b4be:	462f      	mov	r7, r5
 800b4c0:	2205      	movs	r2, #5
 800b4c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b4c6:	4850      	ldr	r0, [pc, #320]	; (800b608 <_svfiprintf_r+0x1dc>)
 800b4c8:	f7f4 fe92 	bl	80001f0 <memchr>
 800b4cc:	9b04      	ldr	r3, [sp, #16]
 800b4ce:	b9d0      	cbnz	r0, 800b506 <_svfiprintf_r+0xda>
 800b4d0:	06d9      	lsls	r1, r3, #27
 800b4d2:	bf44      	itt	mi
 800b4d4:	2220      	movmi	r2, #32
 800b4d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4da:	071a      	lsls	r2, r3, #28
 800b4dc:	bf44      	itt	mi
 800b4de:	222b      	movmi	r2, #43	; 0x2b
 800b4e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4e4:	782a      	ldrb	r2, [r5, #0]
 800b4e6:	2a2a      	cmp	r2, #42	; 0x2a
 800b4e8:	d015      	beq.n	800b516 <_svfiprintf_r+0xea>
 800b4ea:	9a07      	ldr	r2, [sp, #28]
 800b4ec:	462f      	mov	r7, r5
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	250a      	movs	r5, #10
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f8:	3b30      	subs	r3, #48	; 0x30
 800b4fa:	2b09      	cmp	r3, #9
 800b4fc:	d94d      	bls.n	800b59a <_svfiprintf_r+0x16e>
 800b4fe:	b1b8      	cbz	r0, 800b530 <_svfiprintf_r+0x104>
 800b500:	e00f      	b.n	800b522 <_svfiprintf_r+0xf6>
 800b502:	462f      	mov	r7, r5
 800b504:	e7b8      	b.n	800b478 <_svfiprintf_r+0x4c>
 800b506:	4a40      	ldr	r2, [pc, #256]	; (800b608 <_svfiprintf_r+0x1dc>)
 800b508:	1a80      	subs	r0, r0, r2
 800b50a:	fa0b f000 	lsl.w	r0, fp, r0
 800b50e:	4318      	orrs	r0, r3
 800b510:	9004      	str	r0, [sp, #16]
 800b512:	463d      	mov	r5, r7
 800b514:	e7d3      	b.n	800b4be <_svfiprintf_r+0x92>
 800b516:	9a03      	ldr	r2, [sp, #12]
 800b518:	1d11      	adds	r1, r2, #4
 800b51a:	6812      	ldr	r2, [r2, #0]
 800b51c:	9103      	str	r1, [sp, #12]
 800b51e:	2a00      	cmp	r2, #0
 800b520:	db01      	blt.n	800b526 <_svfiprintf_r+0xfa>
 800b522:	9207      	str	r2, [sp, #28]
 800b524:	e004      	b.n	800b530 <_svfiprintf_r+0x104>
 800b526:	4252      	negs	r2, r2
 800b528:	f043 0302 	orr.w	r3, r3, #2
 800b52c:	9207      	str	r2, [sp, #28]
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	783b      	ldrb	r3, [r7, #0]
 800b532:	2b2e      	cmp	r3, #46	; 0x2e
 800b534:	d10c      	bne.n	800b550 <_svfiprintf_r+0x124>
 800b536:	787b      	ldrb	r3, [r7, #1]
 800b538:	2b2a      	cmp	r3, #42	; 0x2a
 800b53a:	d133      	bne.n	800b5a4 <_svfiprintf_r+0x178>
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	1d1a      	adds	r2, r3, #4
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	9203      	str	r2, [sp, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	bfb8      	it	lt
 800b548:	f04f 33ff 	movlt.w	r3, #4294967295
 800b54c:	3702      	adds	r7, #2
 800b54e:	9305      	str	r3, [sp, #20]
 800b550:	4d2e      	ldr	r5, [pc, #184]	; (800b60c <_svfiprintf_r+0x1e0>)
 800b552:	7839      	ldrb	r1, [r7, #0]
 800b554:	2203      	movs	r2, #3
 800b556:	4628      	mov	r0, r5
 800b558:	f7f4 fe4a 	bl	80001f0 <memchr>
 800b55c:	b138      	cbz	r0, 800b56e <_svfiprintf_r+0x142>
 800b55e:	2340      	movs	r3, #64	; 0x40
 800b560:	1b40      	subs	r0, r0, r5
 800b562:	fa03 f000 	lsl.w	r0, r3, r0
 800b566:	9b04      	ldr	r3, [sp, #16]
 800b568:	4303      	orrs	r3, r0
 800b56a:	3701      	adds	r7, #1
 800b56c:	9304      	str	r3, [sp, #16]
 800b56e:	7839      	ldrb	r1, [r7, #0]
 800b570:	4827      	ldr	r0, [pc, #156]	; (800b610 <_svfiprintf_r+0x1e4>)
 800b572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b576:	2206      	movs	r2, #6
 800b578:	1c7e      	adds	r6, r7, #1
 800b57a:	f7f4 fe39 	bl	80001f0 <memchr>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d038      	beq.n	800b5f4 <_svfiprintf_r+0x1c8>
 800b582:	4b24      	ldr	r3, [pc, #144]	; (800b614 <_svfiprintf_r+0x1e8>)
 800b584:	bb13      	cbnz	r3, 800b5cc <_svfiprintf_r+0x1a0>
 800b586:	9b03      	ldr	r3, [sp, #12]
 800b588:	3307      	adds	r3, #7
 800b58a:	f023 0307 	bic.w	r3, r3, #7
 800b58e:	3308      	adds	r3, #8
 800b590:	9303      	str	r3, [sp, #12]
 800b592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b594:	444b      	add	r3, r9
 800b596:	9309      	str	r3, [sp, #36]	; 0x24
 800b598:	e76d      	b.n	800b476 <_svfiprintf_r+0x4a>
 800b59a:	fb05 3202 	mla	r2, r5, r2, r3
 800b59e:	2001      	movs	r0, #1
 800b5a0:	460f      	mov	r7, r1
 800b5a2:	e7a6      	b.n	800b4f2 <_svfiprintf_r+0xc6>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	3701      	adds	r7, #1
 800b5a8:	9305      	str	r3, [sp, #20]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	250a      	movs	r5, #10
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b4:	3a30      	subs	r2, #48	; 0x30
 800b5b6:	2a09      	cmp	r2, #9
 800b5b8:	d903      	bls.n	800b5c2 <_svfiprintf_r+0x196>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0c8      	beq.n	800b550 <_svfiprintf_r+0x124>
 800b5be:	9105      	str	r1, [sp, #20]
 800b5c0:	e7c6      	b.n	800b550 <_svfiprintf_r+0x124>
 800b5c2:	fb05 2101 	mla	r1, r5, r1, r2
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	e7f0      	b.n	800b5ae <_svfiprintf_r+0x182>
 800b5cc:	ab03      	add	r3, sp, #12
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	4b11      	ldr	r3, [pc, #68]	; (800b618 <_svfiprintf_r+0x1ec>)
 800b5d4:	a904      	add	r1, sp, #16
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	f7fe f8bc 	bl	8009754 <_printf_float>
 800b5dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5e0:	4681      	mov	r9, r0
 800b5e2:	d1d6      	bne.n	800b592 <_svfiprintf_r+0x166>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	065b      	lsls	r3, r3, #25
 800b5e8:	f53f af35 	bmi.w	800b456 <_svfiprintf_r+0x2a>
 800b5ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ee:	b01d      	add	sp, #116	; 0x74
 800b5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f4:	ab03      	add	r3, sp, #12
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	4b07      	ldr	r3, [pc, #28]	; (800b618 <_svfiprintf_r+0x1ec>)
 800b5fc:	a904      	add	r1, sp, #16
 800b5fe:	4640      	mov	r0, r8
 800b600:	f7fe fb5e 	bl	8009cc0 <_printf_i>
 800b604:	e7ea      	b.n	800b5dc <_svfiprintf_r+0x1b0>
 800b606:	bf00      	nop
 800b608:	0800bb3c 	.word	0x0800bb3c
 800b60c:	0800bb42 	.word	0x0800bb42
 800b610:	0800bb46 	.word	0x0800bb46
 800b614:	08009755 	.word	0x08009755
 800b618:	0800b379 	.word	0x0800b379

0800b61c <_sbrk_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4c06      	ldr	r4, [pc, #24]	; (800b638 <_sbrk_r+0x1c>)
 800b620:	2300      	movs	r3, #0
 800b622:	4605      	mov	r5, r0
 800b624:	4608      	mov	r0, r1
 800b626:	6023      	str	r3, [r4, #0]
 800b628:	f7f7 fd32 	bl	8003090 <_sbrk>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_sbrk_r+0x1a>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	b103      	cbz	r3, 800b636 <_sbrk_r+0x1a>
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	20004568 	.word	0x20004568

0800b63c <__ascii_mbtowc>:
 800b63c:	b082      	sub	sp, #8
 800b63e:	b901      	cbnz	r1, 800b642 <__ascii_mbtowc+0x6>
 800b640:	a901      	add	r1, sp, #4
 800b642:	b142      	cbz	r2, 800b656 <__ascii_mbtowc+0x1a>
 800b644:	b14b      	cbz	r3, 800b65a <__ascii_mbtowc+0x1e>
 800b646:	7813      	ldrb	r3, [r2, #0]
 800b648:	600b      	str	r3, [r1, #0]
 800b64a:	7812      	ldrb	r2, [r2, #0]
 800b64c:	1c10      	adds	r0, r2, #0
 800b64e:	bf18      	it	ne
 800b650:	2001      	movne	r0, #1
 800b652:	b002      	add	sp, #8
 800b654:	4770      	bx	lr
 800b656:	4610      	mov	r0, r2
 800b658:	e7fb      	b.n	800b652 <__ascii_mbtowc+0x16>
 800b65a:	f06f 0001 	mvn.w	r0, #1
 800b65e:	e7f8      	b.n	800b652 <__ascii_mbtowc+0x16>

0800b660 <memmove>:
 800b660:	4288      	cmp	r0, r1
 800b662:	b510      	push	{r4, lr}
 800b664:	eb01 0302 	add.w	r3, r1, r2
 800b668:	d807      	bhi.n	800b67a <memmove+0x1a>
 800b66a:	1e42      	subs	r2, r0, #1
 800b66c:	4299      	cmp	r1, r3
 800b66e:	d00a      	beq.n	800b686 <memmove+0x26>
 800b670:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b674:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b678:	e7f8      	b.n	800b66c <memmove+0xc>
 800b67a:	4283      	cmp	r3, r0
 800b67c:	d9f5      	bls.n	800b66a <memmove+0xa>
 800b67e:	1881      	adds	r1, r0, r2
 800b680:	1ad2      	subs	r2, r2, r3
 800b682:	42d3      	cmn	r3, r2
 800b684:	d100      	bne.n	800b688 <memmove+0x28>
 800b686:	bd10      	pop	{r4, pc}
 800b688:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b68c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b690:	e7f7      	b.n	800b682 <memmove+0x22>

0800b692 <__malloc_lock>:
 800b692:	4770      	bx	lr

0800b694 <__malloc_unlock>:
 800b694:	4770      	bx	lr

0800b696 <_realloc_r>:
 800b696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b698:	4607      	mov	r7, r0
 800b69a:	4614      	mov	r4, r2
 800b69c:	460e      	mov	r6, r1
 800b69e:	b921      	cbnz	r1, 800b6aa <_realloc_r+0x14>
 800b6a0:	4611      	mov	r1, r2
 800b6a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b6a6:	f7ff be0d 	b.w	800b2c4 <_malloc_r>
 800b6aa:	b922      	cbnz	r2, 800b6b6 <_realloc_r+0x20>
 800b6ac:	f7ff fdbc 	bl	800b228 <_free_r>
 800b6b0:	4625      	mov	r5, r4
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b6:	f000 f821 	bl	800b6fc <_malloc_usable_size_r>
 800b6ba:	42a0      	cmp	r0, r4
 800b6bc:	d20f      	bcs.n	800b6de <_realloc_r+0x48>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f7ff fdff 	bl	800b2c4 <_malloc_r>
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d0f2      	beq.n	800b6b2 <_realloc_r+0x1c>
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	4622      	mov	r2, r4
 800b6d0:	f7fd ff98 	bl	8009604 <memcpy>
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	f7ff fda6 	bl	800b228 <_free_r>
 800b6dc:	e7e9      	b.n	800b6b2 <_realloc_r+0x1c>
 800b6de:	4635      	mov	r5, r6
 800b6e0:	e7e7      	b.n	800b6b2 <_realloc_r+0x1c>

0800b6e2 <__ascii_wctomb>:
 800b6e2:	b149      	cbz	r1, 800b6f8 <__ascii_wctomb+0x16>
 800b6e4:	2aff      	cmp	r2, #255	; 0xff
 800b6e6:	bf85      	ittet	hi
 800b6e8:	238a      	movhi	r3, #138	; 0x8a
 800b6ea:	6003      	strhi	r3, [r0, #0]
 800b6ec:	700a      	strbls	r2, [r1, #0]
 800b6ee:	f04f 30ff 	movhi.w	r0, #4294967295
 800b6f2:	bf98      	it	ls
 800b6f4:	2001      	movls	r0, #1
 800b6f6:	4770      	bx	lr
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	4770      	bx	lr

0800b6fc <_malloc_usable_size_r>:
 800b6fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b700:	1f18      	subs	r0, r3, #4
 800b702:	2b00      	cmp	r3, #0
 800b704:	bfbc      	itt	lt
 800b706:	580b      	ldrlt	r3, [r1, r0]
 800b708:	18c0      	addlt	r0, r0, r3
 800b70a:	4770      	bx	lr

0800b70c <_init>:
 800b70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70e:	bf00      	nop
 800b710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b712:	bc08      	pop	{r3}
 800b714:	469e      	mov	lr, r3
 800b716:	4770      	bx	lr

0800b718 <_fini>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	bf00      	nop
 800b71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71e:	bc08      	pop	{r3}
 800b720:	469e      	mov	lr, r3
 800b722:	4770      	bx	lr
