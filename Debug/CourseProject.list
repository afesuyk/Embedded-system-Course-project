
CourseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800838c  0800838c  0001838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008544  08008544  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800854c  0800854c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800854c  0800854c  0001854c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004210  20000074  080085c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004284  080085c8  00024284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125ed  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002aa2  00000000  00000000  00032691  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed0  00000000  00000000  00035138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  00036008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018651  00000000  00000000  00036db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cdf8  00000000  00000000  0004f401  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000908f1  00000000  00000000  0005c1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ecaea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  000ecb68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008374 	.word	0x08008374

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008374 	.word	0x08008374

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <decToBcd>:
#include "DS3231.h"

uint8_t decToBcd(int val) {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <decToBcd+0x48>)
 800058c:	fb82 1203 	smull	r1, r2, r2, r3
 8000590:	1092      	asrs	r2, r2, #2
 8000592:	17db      	asrs	r3, r3, #31
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	b2d8      	uxtb	r0, r3
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <decToBcd+0x48>)
 80005a0:	fb83 1302 	smull	r1, r3, r3, r2
 80005a4:	1099      	asrs	r1, r3, #2
 80005a6:	17d3      	asrs	r3, r2, #31
 80005a8:	1ac9      	subs	r1, r1, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	440b      	add	r3, r1
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	1ad1      	subs	r1, r2, r3
 80005b4:	b2cb      	uxtb	r3, r1
 80005b6:	4403      	add	r3, r0
 80005b8:	b2db      	uxtb	r3, r3
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	66666667 	.word	0x66666667

080005cc <bcdToDec>:

int bcdToDec(uint8_t val) {
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	091b      	lsrs	r3, r3, #4
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	461a      	mov	r2, r3
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f003 030f 	and.w	r3, r3, #15
 80005ee:	4413      	add	r3, r2
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <Set_Time>:

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year, I2C_HandleTypeDef *hi2c3) {
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b089      	sub	sp, #36	; 0x24
 8000600:	af04      	add	r7, sp, #16
 8000602:	4604      	mov	r4, r0
 8000604:	4608      	mov	r0, r1
 8000606:	4611      	mov	r1, r2
 8000608:	461a      	mov	r2, r3
 800060a:	4623      	mov	r3, r4
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4603      	mov	r3, r0
 8000610:	71bb      	strb	r3, [r7, #6]
 8000612:	460b      	mov	r3, r1
 8000614:	717b      	strb	r3, [r7, #5]
 8000616:	4613      	mov	r3, r2
 8000618:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffaf 	bl	8000580 <decToBcd>
 8000622:	4603      	mov	r3, r0
 8000624:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffa9 	bl	8000580 <decToBcd>
 800062e:	4603      	mov	r3, r0
 8000630:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffa3 	bl	8000580 <decToBcd>
 800063a:	4603      	mov	r3, r0
 800063c:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 800063e:	793b      	ldrb	r3, [r7, #4]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff9d 	bl	8000580 <decToBcd>
 8000646:	4603      	mov	r3, r0
 8000648:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 800064a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff96 	bl	8000580 <decToBcd>
 8000654:	4603      	mov	r3, r0
 8000656:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8000658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff8f 	bl	8000580 <decToBcd>
 8000662:	4603      	mov	r3, r0
 8000664:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 8000666:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff88 	bl	8000580 <decToBcd>
 8000670:	4603      	mov	r3, r0
 8000672:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 8000674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	2307      	movs	r3, #7
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	2200      	movs	r2, #0
 8000688:	21d0      	movs	r1, #208	; 0xd0
 800068a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800068c:	f002 fa82 	bl	8002b94 <HAL_I2C_Mem_Write>
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}

08000698 <Get_Time>:

void Get_Time (I2C_HandleTypeDef *hi2c3) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	9302      	str	r3, [sp, #8]
 80006a6:	2307      	movs	r3, #7
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	2200      	movs	r2, #0
 80006b4:	21d0      	movs	r1, #208	; 0xd0
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f002 fb66 	bl	8002d88 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80006bc:	7a3b      	ldrb	r3, [r7, #8]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff84 	bl	80005cc <bcdToDec>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <Get_Time+0x9c>)
 80006ca:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80006cc:	7a7b      	ldrb	r3, [r7, #9]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff7c 	bl	80005cc <bcdToDec>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <Get_Time+0x9c>)
 80006da:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80006dc:	7abb      	ldrb	r3, [r7, #10]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff74 	bl	80005cc <bcdToDec>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <Get_Time+0x9c>)
 80006ea:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80006ec:	7afb      	ldrb	r3, [r7, #11]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff6c 	bl	80005cc <bcdToDec>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <Get_Time+0x9c>)
 80006fa:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80006fc:	7b3b      	ldrb	r3, [r7, #12]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff64 	bl	80005cc <bcdToDec>
 8000704:	4603      	mov	r3, r0
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <Get_Time+0x9c>)
 800070a:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 800070c:	7b7b      	ldrb	r3, [r7, #13]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff5c 	bl	80005cc <bcdToDec>
 8000714:	4603      	mov	r3, r0
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <Get_Time+0x9c>)
 800071a:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff54 	bl	80005cc <bcdToDec>
 8000724:	4603      	mov	r3, r0
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b02      	ldr	r3, [pc, #8]	; (8000734 <Get_Time+0x9c>)
 800072a:	719a      	strb	r2, [r3, #6]
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20004054 	.word	0x20004054

08000738 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4a07      	ldr	r2, [pc, #28]	; (8000764 <vApplicationGetIdleTaskMemory+0x2c>)
 8000748:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <vApplicationGetIdleTaskMemory+0x30>)
 800074e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000090 	.word	0x20000090
 8000768:	200000e4 	.word	0x200000e4

0800076c <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	4608      	mov	r0, r1
 8000776:	4611      	mov	r1, r2
 8000778:	461a      	mov	r2, r3
 800077a:	4603      	mov	r3, r0
 800077c:	70fb      	strb	r3, [r7, #3]
 800077e:	460b      	mov	r3, r1
 8000780:	70bb      	strb	r3, [r7, #2]
 8000782:	4613      	mov	r3, r2
 8000784:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 800078a:	4a4f      	ldr	r2, [pc, #316]	; (80008c8 <lcdInit+0x15c>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b4c      	ldr	r3, [pc, #304]	; (80008c8 <lcdInit+0x15c>)
 8000798:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 800079a:	4a4b      	ldr	r2, [pc, #300]	; (80008c8 <lcdInit+0x15c>)
 800079c:	78bb      	ldrb	r3, [r7, #2]
 800079e:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 80007a0:	4a49      	ldr	r2, [pc, #292]	; (80008c8 <lcdInit+0x15c>)
 80007a2:	787b      	ldrb	r3, [r7, #1]
 80007a4:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 80007a6:	4b48      	ldr	r3, [pc, #288]	; (80008c8 <lcdInit+0x15c>)
 80007a8:	2208      	movs	r2, #8
 80007aa:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 80007ac:	4b47      	ldr	r3, [pc, #284]	; (80008cc <lcdInit+0x160>)
 80007ae:	2234      	movs	r2, #52	; 0x34
 80007b0:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80007b2:	4b46      	ldr	r3, [pc, #280]	; (80008cc <lcdInit+0x160>)
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	4b45      	ldr	r3, [pc, #276]	; (80008cc <lcdInit+0x160>)
 80007b8:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 80007ba:	4b44      	ldr	r3, [pc, #272]	; (80008cc <lcdInit+0x160>)
 80007bc:	2230      	movs	r2, #48	; 0x30
 80007be:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 80007c0:	2300      	movs	r3, #0
 80007c2:	75fb      	strb	r3, [r7, #23]
 80007c4:	e030      	b.n	8000828 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80007c6:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <lcdInit+0x15c>)
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <lcdInit+0x15c>)
 80007cc:	799b      	ldrb	r3, [r3, #6]
 80007ce:	b299      	uxth	r1, r3
 80007d0:	2303      	movs	r3, #3
 80007d2:	4a3e      	ldr	r2, [pc, #248]	; (80008cc <lcdInit+0x160>)
 80007d4:	f002 f8c8 	bl	8002968 <HAL_I2C_Master_Transmit_DMA>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <lcdInit+0x76>
            return false;
 80007de:	2300      	movs	r3, #0
 80007e0:	e06d      	b.n	80008be <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 80007e2:	f006 fb2f 	bl	8006e44 <xTaskGetTickCount>
 80007e6:	4603      	mov	r3, r0
 80007e8:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80007ea:	e002      	b.n	80007f2 <lcdInit+0x86>
            vTaskDelay(1);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f006 f8c5 	bl	800697c <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80007f2:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <lcdInit+0x15c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 ff61 	bl	80036be <HAL_I2C_GetState>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b20      	cmp	r3, #32
 8000800:	d1f4      	bne.n	80007ec <lcdInit+0x80>
        }

        if (i == 2) {
 8000802:	7dfb      	ldrb	r3, [r7, #23]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d106      	bne.n	8000816 <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f006 f83a 	bl	8006888 <vTaskDelayUntil>
 8000814:	e005      	b.n	8000822 <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	2105      	movs	r1, #5
 800081c:	4618      	mov	r0, r3
 800081e:	f006 f833 	bl	8006888 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8000822:	7dfb      	ldrb	r3, [r7, #23]
 8000824:	3301      	adds	r3, #1
 8000826:	75fb      	strb	r3, [r7, #23]
 8000828:	7dfb      	ldrb	r3, [r7, #23]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d9cb      	bls.n	80007c6 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <lcdInit+0x160>)
 8000830:	222c      	movs	r2, #44	; 0x2c
 8000832:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <lcdInit+0x160>)
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <lcdInit+0x160>)
 800083a:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <lcdInit+0x160>)
 800083e:	2228      	movs	r2, #40	; 0x28
 8000840:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <lcdInit+0x15c>)
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <lcdInit+0x15c>)
 8000848:	799b      	ldrb	r3, [r3, #6]
 800084a:	b299      	uxth	r1, r3
 800084c:	2303      	movs	r3, #3
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <lcdInit+0x160>)
 8000850:	f002 f88a 	bl	8002968 <HAL_I2C_Master_Transmit_DMA>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <lcdInit+0xf8>
        return false;
 800085a:	2300      	movs	r3, #0
 800085c:	e02f      	b.n	80008be <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 800085e:	2001      	movs	r0, #1
 8000860:	f006 f88c 	bl	800697c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <lcdInit+0x15c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f002 ff28 	bl	80036be <HAL_I2C_GetState>
 800086e:	4603      	mov	r3, r0
 8000870:	2b20      	cmp	r3, #32
 8000872:	d1f4      	bne.n	800085e <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <lcdInit+0x15c>)
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d904      	bls.n	8000890 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	b2db      	uxtb	r3, r3
 800088e:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8000890:	f107 030f 	add.w	r3, r7, #15
 8000894:	4619      	mov	r1, r3
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f962 	bl	8000b60 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 800089c:	2101      	movs	r1, #1
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 f816 	bl	80008d0 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 80008a4:	2101      	movs	r1, #1
 80008a6:	2007      	movs	r0, #7
 80008a8:	f000 f812 	bl	80008d0 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 80008ac:	2101      	movs	r1, #1
 80008ae:	2002      	movs	r0, #2
 80008b0:	f000 f80e 	bl	80008d0 <lcdCommand>
    lcdCursorHome();
 80008b4:	2101      	movs	r1, #1
 80008b6:	2005      	movs	r0, #5
 80008b8:	f000 f80a 	bl	80008d0 <lcdCommand>

    return true;
 80008bc:	2301      	movs	r3, #1
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200002ec 	.word	0x200002ec
 80008cc:	200002e4 	.word	0x200002e4

080008d0 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	460a      	mov	r2, r1
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	4613      	mov	r3, r2
 80008de:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d06e      	beq.n	80009c8 <lcdCommand+0xf8>
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	f040 80b4 	bne.w	8000a58 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d864      	bhi.n	80009c2 <lcdCommand+0xf2>
 80008f8:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <lcdCommand+0x30>)
 80008fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fe:	bf00      	nop
 8000900:	08000921 	.word	0x08000921
 8000904:	08000951 	.word	0x08000951
 8000908:	08000931 	.word	0x08000931
 800090c:	08000941 	.word	0x08000941
 8000910:	08000975 	.word	0x08000975
 8000914:	080009a9 	.word	0x080009a9
 8000918:	08000999 	.word	0x08000999
 800091c:	080009b3 	.word	0x080009b3
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8000920:	4b67      	ldr	r3, [pc, #412]	; (8000ac0 <lcdCommand+0x1f0>)
 8000922:	7a1b      	ldrb	r3, [r3, #8]
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b65      	ldr	r3, [pc, #404]	; (8000ac0 <lcdCommand+0x1f0>)
 800092c:	721a      	strb	r2, [r3, #8]
                    break;
 800092e:	e04a      	b.n	80009c6 <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8000930:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <lcdCommand+0x1f0>)
 8000932:	7a1b      	ldrb	r3, [r3, #8]
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b61      	ldr	r3, [pc, #388]	; (8000ac0 <lcdCommand+0x1f0>)
 800093c:	721a      	strb	r2, [r3, #8]
                    break;
 800093e:	e042      	b.n	80009c6 <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8000940:	4b5f      	ldr	r3, [pc, #380]	; (8000ac0 <lcdCommand+0x1f0>)
 8000942:	7a1b      	ldrb	r3, [r3, #8]
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4b5d      	ldr	r3, [pc, #372]	; (8000ac0 <lcdCommand+0x1f0>)
 800094c:	721a      	strb	r2, [r3, #8]
                    break;
 800094e:	e03a      	b.n	80009c6 <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000954:	f107 030f 	add.w	r3, r7, #15
 8000958:	4619      	mov	r1, r3
 800095a:	2000      	movs	r0, #0
 800095c:	f000 f900 	bl	8000b60 <lcdWriteByte>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d101      	bne.n	800096a <lcdCommand+0x9a>
                        return false;
 8000966:	2300      	movs	r3, #0
 8000968:	e0a6      	b.n	8000ab8 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 800096a:	2002      	movs	r0, #2
 800096c:	f006 f806 	bl	800697c <vTaskDelay>
                        return true;
 8000970:	2301      	movs	r3, #1
 8000972:	e0a1      	b.n	8000ab8 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8000974:	2302      	movs	r3, #2
 8000976:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000978:	f107 030f 	add.w	r3, r7, #15
 800097c:	4619      	mov	r1, r3
 800097e:	2000      	movs	r0, #0
 8000980:	f000 f8ee 	bl	8000b60 <lcdWriteByte>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <lcdCommand+0xbe>
                        return false;
 800098a:	2300      	movs	r3, #0
 800098c:	e094      	b.n	8000ab8 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 800098e:	2002      	movs	r0, #2
 8000990:	f005 fff4 	bl	800697c <vTaskDelay>
                        return true;
 8000994:	2301      	movs	r3, #1
 8000996:	e08f      	b.n	8000ab8 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8000998:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <lcdCommand+0x1f0>)
 800099a:	7a5b      	ldrb	r3, [r3, #9]
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <lcdCommand+0x1f0>)
 80009a4:	725a      	strb	r2, [r3, #9]
                    break;
 80009a6:	e00e      	b.n	80009c6 <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 80009a8:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <lcdCommand+0x1f0>)
 80009aa:	7a5a      	ldrb	r2, [r3, #9]
 80009ac:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <lcdCommand+0x1f0>)
 80009ae:	725a      	strb	r2, [r3, #9]
                    break;
 80009b0:	e009      	b.n	80009c6 <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 80009b2:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <lcdCommand+0x1f0>)
 80009b4:	7a5b      	ldrb	r3, [r3, #9]
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <lcdCommand+0x1f0>)
 80009be:	725a      	strb	r2, [r3, #9]
                    break;
 80009c0:	e001      	b.n	80009c6 <lcdCommand+0xf6>

                default:
                    return false;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e078      	b.n	8000ab8 <lcdCommand+0x1e8>
            }

            break;
 80009c6:	e049      	b.n	8000a5c <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	2b07      	cmp	r3, #7
 80009ce:	d840      	bhi.n	8000a52 <lcdCommand+0x182>
 80009d0:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <lcdCommand+0x108>)
 80009d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d6:	bf00      	nop
 80009d8:	080009f9 	.word	0x080009f9
 80009dc:	08000a53 	.word	0x08000a53
 80009e0:	08000a09 	.word	0x08000a09
 80009e4:	08000a19 	.word	0x08000a19
 80009e8:	08000a53 	.word	0x08000a53
 80009ec:	08000a39 	.word	0x08000a39
 80009f0:	08000a29 	.word	0x08000a29
 80009f4:	08000a43 	.word	0x08000a43
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 80009f8:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <lcdCommand+0x1f0>)
 80009fa:	7a1b      	ldrb	r3, [r3, #8]
 80009fc:	f023 0304 	bic.w	r3, r3, #4
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a04:	721a      	strb	r2, [r3, #8]
                    break;
 8000a06:	e026      	b.n	8000a56 <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a0a:	7a1b      	ldrb	r3, [r3, #8]
 8000a0c:	f023 0302 	bic.w	r3, r3, #2
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a14:	721a      	strb	r2, [r3, #8]
                    break;
 8000a16:	e01e      	b.n	8000a56 <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a1a:	7a1b      	ldrb	r3, [r3, #8]
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a24:	721a      	strb	r2, [r3, #8]
                    break;
 8000a26:	e016      	b.n	8000a56 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a2a:	7a5b      	ldrb	r3, [r3, #9]
 8000a2c:	f023 0302 	bic.w	r3, r3, #2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a34:	725a      	strb	r2, [r3, #9]
                    break;
 8000a36:	e00e      	b.n	8000a56 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a3a:	7a5a      	ldrb	r2, [r3, #9]
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a3e:	725a      	strb	r2, [r3, #9]
                    break;
 8000a40:	e009      	b.n	8000a56 <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a44:	7a5b      	ldrb	r3, [r3, #9]
 8000a46:	f023 0301 	bic.w	r3, r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a4e:	725a      	strb	r2, [r3, #9]
                    break;
 8000a50:	e001      	b.n	8000a56 <lcdCommand+0x186>

                default:
                    return false;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e030      	b.n	8000ab8 <lcdCommand+0x1e8>
            }

            break;
 8000a56:	e001      	b.n	8000a5c <lcdCommand+0x18c>

        default:
            return false;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e02d      	b.n	8000ab8 <lcdCommand+0x1e8>
    }

    /* Now lets send the command */
    switch (command) {
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	2b07      	cmp	r3, #7
 8000a62:	d821      	bhi.n	8000aa8 <lcdCommand+0x1d8>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <lcdCommand+0x19c>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a8d 	.word	0x08000a8d
 8000a70:	08000aa9 	.word	0x08000aa9
 8000a74:	08000a8d 	.word	0x08000a8d
 8000a78:	08000a8d 	.word	0x08000a8d
 8000a7c:	08000aa9 	.word	0x08000aa9
 8000a80:	08000a9b 	.word	0x08000a9b
 8000a84:	08000a9b 	.word	0x08000a9b
 8000a88:	08000a9b 	.word	0x08000a9b
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a8e:	7a1b      	ldrb	r3, [r3, #8]
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	73fb      	strb	r3, [r7, #15]
            break;
 8000a98:	e007      	b.n	8000aaa <lcdCommand+0x1da>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <lcdCommand+0x1f0>)
 8000a9c:	7a5b      	ldrb	r3, [r3, #9]
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	73fb      	strb	r3, [r7, #15]
            break;
 8000aa6:	e000      	b.n	8000aaa <lcdCommand+0x1da>

        default:
            break;
 8000aa8:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8000aaa:	f107 030f 	add.w	r3, r7, #15
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 f855 	bl	8000b60 <lcdWriteByte>
 8000ab6:	4603      	mov	r3, r0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200002ec 	.word	0x200002ec

08000ac4 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	460a      	mov	r2, r1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <lcdSetCursorPosition+0x50>)
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d303      	bcc.n	8000ae6 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <lcdSetCursorPosition+0x50>)
 8000ae0:	791b      	ldrb	r3, [r3, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8000ae6:	79bb      	ldrb	r3, [r7, #6]
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <lcdSetCursorPosition+0x54>)
 8000aea:	5cd2      	ldrb	r2, [r2, r3]
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4413      	add	r3, r2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8000afe:	f107 030f 	add.w	r3, r7, #15
 8000b02:	4619      	mov	r1, r3
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 f82b 	bl	8000b60 <lcdWriteByte>
 8000b0a:	4603      	mov	r3, r0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200002ec 	.word	0x200002ec
 8000b18:	080084ec 	.word	0x080084ec

08000b1c <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e00e      	b.n	8000b4c <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	2001      	movs	r0, #1
 8000b38:	f000 f812 	bl	8000b60 <lcdWriteByte>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <lcdPrintStr+0x2a>
            return false;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e007      	b.n	8000b56 <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	7bfa      	ldrb	r2, [r7, #15]
 8000b4e:	78fb      	ldrb	r3, [r7, #3]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d3ec      	bcc.n	8000b2e <lcdPrintStr+0x12>
        }
    }

    return true;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8000b6c:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <lcdWriteByte+0xdc>)
 8000b6e:	79da      	ldrb	r2, [r3, #7]
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	f023 030f 	bic.w	r3, r3, #15
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <lcdWriteByte+0xe0>)
 8000b8c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <lcdWriteByte+0xe0>)
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <lcdWriteByte+0xe0>)
 8000b94:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8000b96:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <lcdWriteByte+0xdc>)
 8000b98:	79da      	ldrb	r2, [r3, #7]
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	b25a      	sxtb	r2, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	f023 030f 	bic.w	r3, r3, #15
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <lcdWriteByte+0xe0>)
 8000bb6:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <lcdWriteByte+0xdc>)
 8000bba:	79da      	ldrb	r2, [r3, #7]
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <lcdWriteByte+0xe0>)
 8000bd6:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <lcdWriteByte+0xe0>)
 8000bda:	78da      	ldrb	r2, [r3, #3]
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <lcdWriteByte+0xe0>)
 8000bde:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <lcdWriteByte+0xdc>)
 8000be2:	79da      	ldrb	r2, [r3, #7]
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	b25a      	sxtb	r2, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <lcdWriteByte+0xe0>)
 8000bfc:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <lcdWriteByte+0xdc>)
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <lcdWriteByte+0xdc>)
 8000c04:	799b      	ldrb	r3, [r3, #6]
 8000c06:	b299      	uxth	r1, r3
 8000c08:	2306      	movs	r3, #6
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <lcdWriteByte+0xe0>)
 8000c0c:	f001 feac 	bl	8002968 <HAL_I2C_Master_Transmit_DMA>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d004      	beq.n	8000c20 <lcdWriteByte+0xc0>
        return false;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e00b      	b.n	8000c32 <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f005 feae 	bl	800697c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <lcdWriteByte+0xdc>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 fd4a 	bl	80036be <HAL_I2C_GetState>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b20      	cmp	r3, #32
 8000c2e:	d1f4      	bne.n	8000c1a <lcdWriteByte+0xba>
    }

    return true;
 8000c30:	2301      	movs	r3, #1
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200002ec 	.word	0x200002ec
 8000c40:	200002e4 	.word	0x200002e4

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b5b0      	push	{r4, r5, r7, lr}
 8000c46:	b0a8      	sub	sp, #160	; 0xa0
 8000c48:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4a:	f000 fe37 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4e:	f000 f89b 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c52:	f000 f9df 	bl	8001014 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c56:	f000 f9b5 	bl	8000fc4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c5a:	f000 f989 	bl	8000f70 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c5e:	f000 f8fd 	bl	8000e5c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c62:	f000 f929 	bl	8000eb8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000c66:	f000 f955 	bl	8000f14 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  Set_Time(20, 27, 16, 6, 30, 5, 20, &hi2c3);
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <main+0x118>)
 8000c6c:	9303      	str	r3, [sp, #12]
 8000c6e:	2314      	movs	r3, #20
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	2305      	movs	r3, #5
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	231e      	movs	r3, #30
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	2210      	movs	r2, #16
 8000c7e:	211b      	movs	r1, #27
 8000c80:	2014      	movs	r0, #20
 8000c82:	f7ff fcbb 	bl	80005fc <Set_Time>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c86:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <main+0x11c>)
 8000c88:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000c8c:	461d      	mov	r5, r3
 8000c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f005 fb6a 	bl	800637a <osThreadCreate>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <main+0x120>)
 8000caa:	601a      	str	r2, [r3, #0]

  /* definition and creation of printLcdTask */
  osThreadDef(printLcdTask, StartLcdTask, osPriorityNormal, 0, 128);
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <main+0x124>)
 8000cae:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000cb2:	461d      	mov	r5, r3
 8000cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  printLcdTaskHandle = osThreadCreate(osThread(printLcdTask), NULL);
 8000cc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f005 fb57 	bl	800637a <osThreadCreate>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <main+0x128>)
 8000cd0:	601a      	str	r2, [r3, #0]

  /* definition and creation of checkDataSensor */
  osThreadDef(checkDataSensor, StartDataSensor, osPriorityNormal, 0, 128);
 8000cd2:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <main+0x12c>)
 8000cd4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000cd8:	461d      	mov	r5, r3
 8000cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkDataSensorHandle = osThreadCreate(osThread(checkDataSensor), NULL);
 8000ce6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f005 fb44 	bl	800637a <osThreadCreate>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <main+0x130>)
 8000cf6:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBtnTask */
  osThreadDef(myBtnTask, StartBtnTask, osPriorityNormal, 0, 128);
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <main+0x134>)
 8000cfa:	f107 0420 	add.w	r4, r7, #32
 8000cfe:	461d      	mov	r5, r3
 8000d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myBtnTaskHandle = osThreadCreate(osThread(myBtnTask), NULL);
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 fb31 	bl	800637a <osThreadCreate>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <main+0x138>)
 8000d1c:	601a      	str	r2, [r3, #0]

  /* definition and creation of myPrintTime */
  osThreadDef(myPrintTime, StartTimeTask, osPriorityNormal, 0, 128);
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <main+0x13c>)
 8000d20:	1d3c      	adds	r4, r7, #4
 8000d22:	461d      	mov	r5, r3
 8000d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPrintTimeHandle = osThreadCreate(osThread(myPrintTime), NULL);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f005 fb20 	bl	800637a <osThreadCreate>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <main+0x140>)
 8000d3e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  vTaskSuspend(printLcdTaskHandle);
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <main+0x128>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 fe4d 	bl	80069e4 <vTaskSuspend>
  vTaskSuspend(myPrintTimeHandle);
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <main+0x140>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f005 fe48 	bl	80069e4 <vTaskSuspend>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d54:	f005 fb0a 	bl	800636c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <main+0x114>
 8000d5a:	bf00      	nop
 8000d5c:	20004060 	.word	0x20004060
 8000d60:	08008398 	.word	0x08008398
 8000d64:	2000405c 	.word	0x2000405c
 8000d68:	080083c4 	.word	0x080083c4
 8000d6c:	200041bc 	.word	0x200041bc
 8000d70:	080083f0 	.word	0x080083f0
 8000d74:	200041d0 	.word	0x200041d0
 8000d78:	08008418 	.word	0x08008418
 8000d7c:	20004234 	.word	0x20004234
 8000d80:	08008440 	.word	0x08008440
 8000d84:	20004278 	.word	0x20004278

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	; 0x50
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	2230      	movs	r2, #48	; 0x30
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f006 fee7 	bl	8007b6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <SystemClock_Config+0xcc>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <SystemClock_Config+0xcc>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <SystemClock_Config+0xd0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <SystemClock_Config+0xd0>)
 8000dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dec:	2310      	movs	r3, #16
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df0:	2302      	movs	r3, #2
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df4:	2300      	movs	r3, #0
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dfc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e02:	2304      	movs	r3, #4
 8000e04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e06:	2304      	movs	r3, #4
 8000e08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f004 fa68 	bl	80052e4 <HAL_RCC_OscConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e1a:	f000 fabd 	bl	8001398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	230f      	movs	r3, #15
 8000e20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e22:	2302      	movs	r3, #2
 8000e24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 fcc2 	bl	80057c4 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e46:	f000 faa7 	bl	8001398 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3750      	adds	r7, #80	; 0x50
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e62:	4a13      	ldr	r2, [pc, #76]	; (8000eb0 <MX_I2C1_Init+0x54>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_I2C1_Init+0x58>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e9a:	f001 fc2d 	bl	80026f8 <HAL_I2C_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea4:	f000 fa78 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20004114 	.word	0x20004114
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	000186a0 	.word	0x000186a0

08000eb8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ebe:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <MX_I2C2_Init+0x54>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_I2C2_Init+0x58>)
 8000ec6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ed6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ef6:	f001 fbff 	bl	80026f8 <HAL_I2C_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f00:	f000 fa4a 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20004168 	.word	0x20004168
 8000f0c:	40005800 	.word	0x40005800
 8000f10:	000186a0 	.word	0x000186a0

08000f14 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_I2C3_Init+0x50>)
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <MX_I2C3_Init+0x54>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_I2C3_Init+0x50>)
 8000f20:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_I2C3_Init+0x58>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_I2C3_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_I2C3_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_I2C3_Init+0x50>)
 8000f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f36:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_I2C3_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_I2C3_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_I2C3_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_I2C3_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_I2C3_Init+0x50>)
 8000f52:	f001 fbd1 	bl	80026f8 <HAL_I2C_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f5c:	f000 fa1c 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20004060 	.word	0x20004060
 8000f68:	40005c00 	.word	0x40005c00
 8000f6c:	000186a0 	.word	0x000186a0

08000f70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_USART2_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa8:	f004 fdfe 	bl	8005ba8 <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f9f1 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20004238 	.word	0x20004238
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <MX_DMA_Init+0x4c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <MX_DMA_Init+0x4c>)
 8000fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <MX_DMA_Init+0x4c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2105      	movs	r1, #5
 8000fea:	200b      	movs	r0, #11
 8000fec:	f000 fdd5 	bl	8001b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ff0:	200b      	movs	r0, #11
 8000ff2:	f000 fdee 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	200c      	movs	r0, #12
 8000ffc:	f000 fdcd 	bl	8001b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001000:	200c      	movs	r0, #12
 8001002:	f000 fde6 	bl	8001bd2 <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a2c      	ldr	r2, [pc, #176]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <MX_GPIO_Init+0xd0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <MX_GPIO_Init+0xd0>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2120      	movs	r1, #32
 800109e:	4812      	ldr	r0, [pc, #72]	; (80010e8 <MX_GPIO_Init+0xd4>)
 80010a0:	f001 faf6 	bl	8002690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_GPIO_Init+0xd8>)
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_GPIO_Init+0xdc>)
 80010ba:	f001 f94f 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010be:	2320      	movs	r3, #32
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_GPIO_Init+0xd4>)
 80010d6:	f001 f941 	bl	800235c <HAL_GPIO_Init>

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	10210000 	.word	0x10210000
 80010f0:	40020800 	.word	0x40020800

080010f4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010fc:	2120      	movs	r1, #32
 80010fe:	4804      	ldr	r0, [pc, #16]	; (8001110 <StartDefaultTask+0x1c>)
 8001100:	f001 fadf 	bl	80026c2 <HAL_GPIO_TogglePin>
    vTaskDelay(1000);
 8001104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001108:	f005 fc38 	bl	800697c <vTaskDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800110c:	e7f6      	b.n	80010fc <StartDefaultTask+0x8>
 800110e:	bf00      	nop
 8001110:	40020000 	.word	0x40020000

08001114 <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void const * argument)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
	lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 800111c:	2314      	movs	r3, #20
 800111e:	2204      	movs	r2, #4
 8001120:	2127      	movs	r1, #39	; 0x27
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <StartLcdTask+0x54>)
 8001124:	f7ff fb22 	bl	800076c <lcdInit>
	lcdDisplayClear();
 8001128:	2101      	movs	r1, #1
 800112a:	2002      	movs	r0, #2
 800112c:	f7ff fbd0 	bl	80008d0 <lcdCommand>

	for(;;)
	{
      lcdSetCursorPosition(0, 0);
 8001130:	2100      	movs	r1, #0
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fcc6 	bl	8000ac4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Have a nice day!", 16);
 8001138:	2110      	movs	r1, #16
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <StartLcdTask+0x58>)
 800113c:	f7ff fcee 	bl	8000b1c <lcdPrintStr>

      lcdSetCursorPosition(0, 1);
 8001140:	2101      	movs	r1, #1
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fcbe 	bl	8000ac4 <lcdSetCursorPosition>
	  lcdPrintStr((uint8_t*)"Just a line...", 14);
 8001148:	210e      	movs	r1, #14
 800114a:	4809      	ldr	r0, [pc, #36]	; (8001170 <StartLcdTask+0x5c>)
 800114c:	f7ff fce6 	bl	8000b1c <lcdPrintStr>

	  HAL_Delay(1000);
 8001150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001154:	f000 fc24 	bl	80019a0 <HAL_Delay>
	  lcdDisplayClear();
 8001158:	2101      	movs	r1, #1
 800115a:	2002      	movs	r0, #2
 800115c:	f7ff fbb8 	bl	80008d0 <lcdCommand>

	  vTaskDelay(100);
 8001160:	2064      	movs	r0, #100	; 0x64
 8001162:	f005 fc0b 	bl	800697c <vTaskDelay>
      lcdSetCursorPosition(0, 0);
 8001166:	e7e3      	b.n	8001130 <StartLcdTask+0x1c>
 8001168:	20004114 	.word	0x20004114
 800116c:	0800845c 	.word	0x0800845c
 8001170:	08008470 	.word	0x08008470

08001174 <StartDataSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDataSensor */
void StartDataSensor(void const * argument)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDataSensor */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 800117c:	2314      	movs	r3, #20
 800117e:	2204      	movs	r2, #4
 8001180:	2127      	movs	r1, #39	; 0x27
 8001182:	4815      	ldr	r0, [pc, #84]	; (80011d8 <StartDataSensor+0x64>)
 8001184:	f7ff faf2 	bl	800076c <lcdInit>
  lcdDisplayClear();
 8001188:	2101      	movs	r1, #1
 800118a:	2002      	movs	r0, #2
 800118c:	f7ff fba0 	bl	80008d0 <lcdCommand>

  for(;;)
  {
	lcdSetCursorPosition(0, 0);
 8001190:	2100      	movs	r1, #0
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fc96 	bl	8000ac4 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Our sensor data:", 16);
 8001198:	2110      	movs	r1, #16
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <StartDataSensor+0x68>)
 800119c:	f7ff fcbe 	bl	8000b1c <lcdPrintStr>

	lcdSetCursorPosition(0, 1);
 80011a0:	2101      	movs	r1, #1
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff fc8e 	bl	8000ac4 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) "Humidity = ", 11);
 80011a8:	210b      	movs	r1, #11
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <StartDataSensor+0x6c>)
 80011ac:	f7ff fcb6 	bl	8000b1c <lcdPrintStr>

	lcdSetCursorPosition(0, 2);
 80011b0:	2102      	movs	r1, #2
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff fc86 	bl	8000ac4 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) "Pressure = ", 11);
 80011b8:	210b      	movs	r1, #11
 80011ba:	480a      	ldr	r0, [pc, #40]	; (80011e4 <StartDataSensor+0x70>)
 80011bc:	f7ff fcae 	bl	8000b1c <lcdPrintStr>

	HAL_Delay(1000);
 80011c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c4:	f000 fbec 	bl	80019a0 <HAL_Delay>
	lcdDisplayClear();
 80011c8:	2101      	movs	r1, #1
 80011ca:	2002      	movs	r0, #2
 80011cc:	f7ff fb80 	bl	80008d0 <lcdCommand>

    vTaskDelay(100);
 80011d0:	2064      	movs	r0, #100	; 0x64
 80011d2:	f005 fbd3 	bl	800697c <vTaskDelay>
	lcdSetCursorPosition(0, 0);
 80011d6:	e7db      	b.n	8001190 <StartDataSensor+0x1c>
 80011d8:	20004114 	.word	0x20004114
 80011dc:	08008480 	.word	0x08008480
 80011e0:	08008494 	.word	0x08008494
 80011e4:	080084a0 	.word	0x080084a0

080011e8 <StartBtnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBtnTask */
void StartBtnTask(void const * argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBtnTask */
  /* Infinite loop */
  for(;;)
  {
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 80011f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f4:	4830      	ldr	r0, [pc, #192]	; (80012b8 <StartBtnTask+0xd0>)
 80011f6:	f001 fa33 	bl	8002660 <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d156      	bne.n	80012ae <StartBtnTask+0xc6>
    	vTaskDelay(30);
 8001200:	201e      	movs	r0, #30
 8001202:	f005 fbbb 	bl	800697c <vTaskDelay>

    	if(numTask == 3) {
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <StartBtnTask+0xd4>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d102      	bne.n	8001214 <StartBtnTask+0x2c>
    		numTask = 0;
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <StartBtnTask+0xd4>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
    	}

    	if(numTask == 0) {
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <StartBtnTask+0xd4>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d115      	bne.n	8001248 <StartBtnTask+0x60>
    		vTaskSuspend(printLcdTaskHandle);
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <StartBtnTask+0xd8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f005 fbdf 	bl	80069e4 <vTaskSuspend>
    		vTaskSuspend(myPrintTimeHandle);
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <StartBtnTask+0xdc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f005 fbda 	bl	80069e4 <vTaskSuspend>
   		    vTaskResume(checkDataSensorHandle);
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <StartBtnTask+0xe0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f005 fca1 	bl	8006b7c <vTaskResume>
   	    	numTask++;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <StartBtnTask+0xd4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <StartBtnTask+0xd4>)
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e032      	b.n	80012ae <StartBtnTask+0xc6>
    	}
    	else if(numTask == 1) {
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <StartBtnTask+0xd4>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d115      	bne.n	800127c <StartBtnTask+0x94>
    		vTaskSuspend(checkDataSensorHandle);
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <StartBtnTask+0xe0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f005 fbc5 	bl	80069e4 <vTaskSuspend>
    		vTaskSuspend(myPrintTimeHandle);
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <StartBtnTask+0xdc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f005 fbc0 	bl	80069e4 <vTaskSuspend>
    		vTaskResume(printLcdTaskHandle);
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <StartBtnTask+0xd8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f005 fc87 	bl	8006b7c <vTaskResume>
        	numTask++;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <StartBtnTask+0xd4>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <StartBtnTask+0xd4>)
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e018      	b.n	80012ae <StartBtnTask+0xc6>
    	}
    	else if(numTask == 2) {
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <StartBtnTask+0xd4>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d114      	bne.n	80012ae <StartBtnTask+0xc6>
    		vTaskSuspend(checkDataSensorHandle);
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <StartBtnTask+0xe0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f005 fbab 	bl	80069e4 <vTaskSuspend>
    		vTaskSuspend(printLcdTaskHandle);
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <StartBtnTask+0xd8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f005 fba6 	bl	80069e4 <vTaskSuspend>
    		vTaskResume(myPrintTimeHandle);
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <StartBtnTask+0xdc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f005 fc6d 	bl	8006b7c <vTaskResume>
        	numTask++;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <StartBtnTask+0xd4>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <StartBtnTask+0xd4>)
 80012ac:	701a      	strb	r2, [r3, #0]
    	}
    }
    vTaskDelay(100);
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f005 fb64 	bl	800697c <vTaskDelay>
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 80012b4:	e79c      	b.n	80011f0 <StartBtnTask+0x8>
 80012b6:	bf00      	nop
 80012b8:	40020800 	.word	0x40020800
 80012bc:	200002f8 	.word	0x200002f8
 80012c0:	200041bc 	.word	0x200041bc
 80012c4:	20004278 	.word	0x20004278
 80012c8:	200041d0 	.word	0x200041d0

080012cc <StartTimeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimeTask */
void StartTimeTask(void const * argument)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeTask */
  lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 80012d4:	2314      	movs	r3, #20
 80012d6:	2204      	movs	r2, #4
 80012d8:	2127      	movs	r1, #39	; 0x27
 80012da:	4827      	ldr	r0, [pc, #156]	; (8001378 <StartTimeTask+0xac>)
 80012dc:	f7ff fa46 	bl	800076c <lcdInit>
  lcdDisplayClear();
 80012e0:	2101      	movs	r1, #1
 80012e2:	2002      	movs	r0, #2
 80012e4:	f7ff faf4 	bl	80008d0 <lcdCommand>

  for(;;)
  {
	Get_Time(&hi2c3);
 80012e8:	4824      	ldr	r0, [pc, #144]	; (800137c <StartTimeTask+0xb0>)
 80012ea:	f7ff f9d5 	bl	8000698 <Get_Time>

	lcdSetCursorPosition(0, 0);
 80012ee:	2100      	movs	r1, #0
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff fbe7 	bl	8000ac4 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Your time: ", 11);
 80012f6:	210b      	movs	r1, #11
 80012f8:	4821      	ldr	r0, [pc, #132]	; (8001380 <StartTimeTask+0xb4>)
 80012fa:	f7ff fc0f 	bl	8000b1c <lcdPrintStr>

	sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <StartTimeTask+0xb8>)
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	461a      	mov	r2, r3
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <StartTimeTask+0xb8>)
 8001306:	785b      	ldrb	r3, [r3, #1]
 8001308:	4619      	mov	r1, r3
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <StartTimeTask+0xb8>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	460b      	mov	r3, r1
 8001312:	491d      	ldr	r1, [pc, #116]	; (8001388 <StartTimeTask+0xbc>)
 8001314:	481d      	ldr	r0, [pc, #116]	; (800138c <StartTimeTask+0xc0>)
 8001316:	f006 fc31 	bl	8007b7c <siprintf>
	lcdSetCursorPosition(11, 0);
 800131a:	2100      	movs	r1, #0
 800131c:	200b      	movs	r0, #11
 800131e:	f7ff fbd1 	bl	8000ac4 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)buffer,8);
 8001322:	2108      	movs	r1, #8
 8001324:	4819      	ldr	r0, [pc, #100]	; (800138c <StartTimeTask+0xc0>)
 8001326:	f7ff fbf9 	bl	8000b1c <lcdPrintStr>

	lcdSetCursorPosition(0, 2);
 800132a:	2102      	movs	r1, #2
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fbc9 	bl	8000ac4 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Date: ", 6);
 8001332:	2106      	movs	r1, #6
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <StartTimeTask+0xc4>)
 8001336:	f7ff fbf1 	bl	8000b1c <lcdPrintStr>

	sprintf(buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <StartTimeTask+0xb8>)
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	461a      	mov	r2, r3
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <StartTimeTask+0xb8>)
 8001342:	795b      	ldrb	r3, [r3, #5]
 8001344:	4619      	mov	r1, r3
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <StartTimeTask+0xb8>)
 8001348:	799b      	ldrb	r3, [r3, #6]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	460b      	mov	r3, r1
 800134e:	4911      	ldr	r1, [pc, #68]	; (8001394 <StartTimeTask+0xc8>)
 8001350:	480e      	ldr	r0, [pc, #56]	; (800138c <StartTimeTask+0xc0>)
 8001352:	f006 fc13 	bl	8007b7c <siprintf>
	lcdSetCursorPosition(6, 2);
 8001356:	2102      	movs	r1, #2
 8001358:	2006      	movs	r0, #6
 800135a:	f7ff fbb3 	bl	8000ac4 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)buffer, 10);
 800135e:	210a      	movs	r1, #10
 8001360:	480a      	ldr	r0, [pc, #40]	; (800138c <StartTimeTask+0xc0>)
 8001362:	f7ff fbdb 	bl	8000b1c <lcdPrintStr>

	HAL_Delay(1000);
 8001366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136a:	f000 fb19 	bl	80019a0 <HAL_Delay>
	lcdDisplayClear();
 800136e:	2101      	movs	r1, #1
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff faad 	bl	80008d0 <lcdCommand>
	Get_Time(&hi2c3);
 8001376:	e7b7      	b.n	80012e8 <StartTimeTask+0x1c>
 8001378:	20004114 	.word	0x20004114
 800137c:	20004060 	.word	0x20004060
 8001380:	080084ac 	.word	0x080084ac
 8001384:	20004054 	.word	0x20004054
 8001388:	080084b8 	.word	0x080084b8
 800138c:	200041c0 	.word	0x200041c0
 8001390:	080084c8 	.word	0x080084c8
 8001394:	080084d0 	.word	0x080084d0

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_MspInit+0x54>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a11      	ldr	r2, [pc, #68]	; (80013fc <HAL_MspInit+0x54>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_MspInit+0x54>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_MspInit+0x54>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_MspInit+0x54>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_MspInit+0x54>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	210f      	movs	r1, #15
 80013ea:	f06f 0001 	mvn.w	r0, #1
 80013ee:	f000 fbd4 	bl	8001b9a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08e      	sub	sp, #56	; 0x38
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a9a      	ldr	r2, [pc, #616]	; (8001688 <HAL_I2C_MspInit+0x288>)
 800141e:	4293      	cmp	r3, r2
 8001420:	f040 8098 	bne.w	8001554 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
 8001428:	4b98      	ldr	r3, [pc, #608]	; (800168c <HAL_I2C_MspInit+0x28c>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a97      	ldr	r2, [pc, #604]	; (800168c <HAL_I2C_MspInit+0x28c>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b95      	ldr	r3, [pc, #596]	; (800168c <HAL_I2C_MspInit+0x28c>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	623b      	str	r3, [r7, #32]
 800143e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001440:	23c0      	movs	r3, #192	; 0xc0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001444:	2312      	movs	r3, #18
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001448:	2301      	movs	r3, #1
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001450:	2304      	movs	r3, #4
 8001452:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	488d      	ldr	r0, [pc, #564]	; (8001690 <HAL_I2C_MspInit+0x290>)
 800145c:	f000 ff7e 	bl	800235c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	4b89      	ldr	r3, [pc, #548]	; (800168c <HAL_I2C_MspInit+0x28c>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a88      	ldr	r2, [pc, #544]	; (800168c <HAL_I2C_MspInit+0x28c>)
 800146a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b86      	ldr	r3, [pc, #536]	; (800168c <HAL_I2C_MspInit+0x28c>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	69fb      	ldr	r3, [r7, #28]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800147c:	4b85      	ldr	r3, [pc, #532]	; (8001694 <HAL_I2C_MspInit+0x294>)
 800147e:	4a86      	ldr	r2, [pc, #536]	; (8001698 <HAL_I2C_MspInit+0x298>)
 8001480:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001482:	4b84      	ldr	r3, [pc, #528]	; (8001694 <HAL_I2C_MspInit+0x294>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001488:	4b82      	ldr	r3, [pc, #520]	; (8001694 <HAL_I2C_MspInit+0x294>)
 800148a:	2240      	movs	r2, #64	; 0x40
 800148c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148e:	4b81      	ldr	r3, [pc, #516]	; (8001694 <HAL_I2C_MspInit+0x294>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001494:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HAL_I2C_MspInit+0x294>)
 8001496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800149a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149c:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <HAL_I2C_MspInit+0x294>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a2:	4b7c      	ldr	r3, [pc, #496]	; (8001694 <HAL_I2C_MspInit+0x294>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80014a8:	4b7a      	ldr	r3, [pc, #488]	; (8001694 <HAL_I2C_MspInit+0x294>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014ae:	4b79      	ldr	r3, [pc, #484]	; (8001694 <HAL_I2C_MspInit+0x294>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b4:	4b77      	ldr	r3, [pc, #476]	; (8001694 <HAL_I2C_MspInit+0x294>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80014ba:	4876      	ldr	r0, [pc, #472]	; (8001694 <HAL_I2C_MspInit+0x294>)
 80014bc:	f000 fba4 	bl	8001c08 <HAL_DMA_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80014c6:	f7ff ff67 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a71      	ldr	r2, [pc, #452]	; (8001694 <HAL_I2C_MspInit+0x294>)
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
 80014d0:	4a70      	ldr	r2, [pc, #448]	; (8001694 <HAL_I2C_MspInit+0x294>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014d6:	4b71      	ldr	r3, [pc, #452]	; (800169c <HAL_I2C_MspInit+0x29c>)
 80014d8:	4a71      	ldr	r2, [pc, #452]	; (80016a0 <HAL_I2C_MspInit+0x2a0>)
 80014da:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014dc:	4b6f      	ldr	r3, [pc, #444]	; (800169c <HAL_I2C_MspInit+0x29c>)
 80014de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e4:	4b6d      	ldr	r3, [pc, #436]	; (800169c <HAL_I2C_MspInit+0x29c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ea:	4b6c      	ldr	r3, [pc, #432]	; (800169c <HAL_I2C_MspInit+0x29c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f0:	4b6a      	ldr	r3, [pc, #424]	; (800169c <HAL_I2C_MspInit+0x29c>)
 80014f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f8:	4b68      	ldr	r3, [pc, #416]	; (800169c <HAL_I2C_MspInit+0x29c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014fe:	4b67      	ldr	r3, [pc, #412]	; (800169c <HAL_I2C_MspInit+0x29c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001504:	4b65      	ldr	r3, [pc, #404]	; (800169c <HAL_I2C_MspInit+0x29c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800150a:	4b64      	ldr	r3, [pc, #400]	; (800169c <HAL_I2C_MspInit+0x29c>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001510:	4b62      	ldr	r3, [pc, #392]	; (800169c <HAL_I2C_MspInit+0x29c>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001516:	4861      	ldr	r0, [pc, #388]	; (800169c <HAL_I2C_MspInit+0x29c>)
 8001518:	f000 fb76 	bl	8001c08 <HAL_DMA_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001522:	f7ff ff39 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a5c      	ldr	r2, [pc, #368]	; (800169c <HAL_I2C_MspInit+0x29c>)
 800152a:	639a      	str	r2, [r3, #56]	; 0x38
 800152c:	4a5b      	ldr	r2, [pc, #364]	; (800169c <HAL_I2C_MspInit+0x29c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2105      	movs	r1, #5
 8001536:	201f      	movs	r0, #31
 8001538:	f000 fb2f 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800153c:	201f      	movs	r0, #31
 800153e:	f000 fb48 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2105      	movs	r1, #5
 8001546:	2020      	movs	r0, #32
 8001548:	f000 fb27 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800154c:	2020      	movs	r0, #32
 800154e:	f000 fb40 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001552:	e094      	b.n	800167e <HAL_I2C_MspInit+0x27e>
  else if(hi2c->Instance==I2C2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_I2C_MspInit+0x2a4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d13e      	bne.n	80015dc <HAL_I2C_MspInit+0x1dc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	4b4a      	ldr	r3, [pc, #296]	; (800168c <HAL_I2C_MspInit+0x28c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a49      	ldr	r2, [pc, #292]	; (800168c <HAL_I2C_MspInit+0x28c>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_I2C_MspInit+0x28c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800157a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001580:	2312      	movs	r3, #18
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001584:	2301      	movs	r3, #1
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800158c:	2304      	movs	r3, #4
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	483e      	ldr	r0, [pc, #248]	; (8001690 <HAL_I2C_MspInit+0x290>)
 8001598:	f000 fee0 	bl	800235c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a2:	2312      	movs	r3, #18
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80015ae:	2309      	movs	r3, #9
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	4835      	ldr	r0, [pc, #212]	; (8001690 <HAL_I2C_MspInit+0x290>)
 80015ba:	f000 fecf 	bl	800235c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	4b32      	ldr	r3, [pc, #200]	; (800168c <HAL_I2C_MspInit+0x28c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a31      	ldr	r2, [pc, #196]	; (800168c <HAL_I2C_MspInit+0x28c>)
 80015c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b2f      	ldr	r3, [pc, #188]	; (800168c <HAL_I2C_MspInit+0x28c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
}
 80015da:	e050      	b.n	800167e <HAL_I2C_MspInit+0x27e>
  else if(hi2c->Instance==I2C3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <HAL_I2C_MspInit+0x2a8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d14b      	bne.n	800167e <HAL_I2C_MspInit+0x27e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <HAL_I2C_MspInit+0x28c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_I2C_MspInit+0x28c>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b25      	ldr	r3, [pc, #148]	; (800168c <HAL_I2C_MspInit+0x28c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_I2C_MspInit+0x28c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a20      	ldr	r2, [pc, #128]	; (800168c <HAL_I2C_MspInit+0x28c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_I2C_MspInit+0x28c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800161e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001624:	2312      	movs	r3, #18
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001628:	2301      	movs	r3, #1
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001630:	2304      	movs	r3, #4
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	481c      	ldr	r0, [pc, #112]	; (80016ac <HAL_I2C_MspInit+0x2ac>)
 800163c:	f000 fe8e 	bl	800235c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001646:	2312      	movs	r3, #18
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164a:	2301      	movs	r3, #1
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001652:	2304      	movs	r3, #4
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	4814      	ldr	r0, [pc, #80]	; (80016b0 <HAL_I2C_MspInit+0x2b0>)
 800165e:	f000 fe7d 	bl	800235c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_I2C_MspInit+0x28c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <HAL_I2C_MspInit+0x28c>)
 800166c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_I2C_MspInit+0x28c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
}
 800167e:	bf00      	nop
 8001680:	3738      	adds	r7, #56	; 0x38
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40005400 	.word	0x40005400
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400
 8001694:	200040b4 	.word	0x200040b4
 8001698:	40026028 	.word	0x40026028
 800169c:	200041d4 	.word	0x200041d4
 80016a0:	40026010 	.word	0x40026010
 80016a4:	40005800 	.word	0x40005800
 80016a8:	40005c00 	.word	0x40005c00
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020000 	.word	0x40020000

080016b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_UART_MspInit+0x84>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d12b      	bne.n	800172e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_UART_MspInit+0x88>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a17      	ldr	r2, [pc, #92]	; (800173c <HAL_UART_MspInit+0x88>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_UART_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_UART_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <HAL_UART_MspInit+0x88>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_UART_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800170e:	230c      	movs	r3, #12
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171e:	2307      	movs	r3, #7
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_UART_MspInit+0x8c>)
 800172a:	f000 fe17 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004400 	.word	0x40004400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177c:	f000 f8f0 	bl	8001960 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001780:	f005 fd5e 	bl	8007240 <xTaskGetSchedulerState>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d001      	beq.n	800178e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800178a:	f005 ff95 	bl	80076b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DMA1_Stream0_IRQHandler+0x10>)
 800179a:	f000 fb5d 	bl	8001e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200041d4 	.word	0x200041d4

080017a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA1_Stream1_IRQHandler+0x10>)
 80017ae:	f000 fb53 	bl	8001e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200040b4 	.word	0x200040b4

080017bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <I2C1_EV_IRQHandler+0x10>)
 80017c2:	f001 fd07 	bl	80031d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20004114 	.word	0x20004114

080017d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <I2C1_ER_IRQHandler+0x10>)
 80017d6:	f001 fe63 	bl	80034a0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20004114 	.word	0x20004114

080017e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_sbrk+0x50>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x16>
		heap_end = &end;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <_sbrk+0x50>)
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <_sbrk+0x54>)
 80017f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <_sbrk+0x50>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <_sbrk+0x50>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	466a      	mov	r2, sp
 800180a:	4293      	cmp	r3, r2
 800180c:	d907      	bls.n	800181e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800180e:	f006 f977 	bl	8007b00 <__errno>
 8001812:	4602      	mov	r2, r0
 8001814:	230c      	movs	r3, #12
 8001816:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	e006      	b.n	800182c <_sbrk+0x48>
	}

	heap_end += incr;
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <_sbrk+0x50>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a03      	ldr	r2, [pc, #12]	; (8001834 <_sbrk+0x50>)
 8001828:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200002fc 	.word	0x200002fc
 8001838:	20004288 	.word	0x20004288

0800183c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <SystemInit+0x28>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <SystemInit+0x28>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SystemInit+0x28>)
 8001852:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001856:	609a      	str	r2, [r3, #8]
#endif
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800186c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800186e:	e003      	b.n	8001878 <LoopCopyDataInit>

08001870 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001872:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001874:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001876:	3104      	adds	r1, #4

08001878 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800187c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800187e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001880:	d3f6      	bcc.n	8001870 <CopyDataInit>
  ldr  r2, =_sbss
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001884:	e002      	b.n	800188c <LoopFillZerobss>

08001886 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001886:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001888:	f842 3b04 	str.w	r3, [r2], #4

0800188c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800188e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001890:	d3f9      	bcc.n	8001886 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001892:	f7ff ffd3 	bl	800183c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001896:	f006 f939 	bl	8007b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7ff f9d3 	bl	8000c44 <main>
  bx  lr    
 800189e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018a4:	08008554 	.word	0x08008554
  ldr  r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018ac:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80018b0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80018b4:	20004284 	.word	0x20004284

080018b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_Init+0x40>)
 80018c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_Init+0x40>)
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_Init+0x40>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f94d 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f808 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff fd5a 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f965 	bl	8001bee <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f92d 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000000 	.word	0x20000000
 8001958:	20000008 	.word	0x20000008
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x20>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x24>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_IncTick+0x24>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000008 	.word	0x20000008
 8001984:	2000427c 	.word	0x2000427c

08001988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return uwTick;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_GetTick+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	2000427c 	.word	0x2000427c

080019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff ffee 	bl	8001988 <HAL_GetTick>
 80019ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d005      	beq.n	80019c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_Delay+0x40>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019c6:	bf00      	nop
 80019c8:	f7ff ffde 	bl	8001988 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8f7      	bhi.n	80019c8 <HAL_Delay+0x28>
  {
  }
}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000008 	.word	0x20000008

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff29 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff3e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff31 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff feb8 	bl	8001988 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e099      	b.n	8001d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c44:	e00f      	b.n	8001c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c46:	f7ff fe9f 	bl	8001988 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d908      	bls.n	8001c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2220      	movs	r2, #32
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e078      	b.n	8001d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e8      	bne.n	8001c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_DMA_Init+0x158>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d107      	bne.n	8001cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f023 0307 	bic.w	r3, r3, #7
 8001ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d117      	bne.n	8001d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00e      	beq.n	8001d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 faab 	bl	8002268 <DMA_CheckFifoParam>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d26:	2301      	movs	r3, #1
 8001d28:	e016      	b.n	8001d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fa62 	bl	80021fc <DMA_CalcBaseAndBitshift>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	223f      	movs	r2, #63	; 0x3f
 8001d42:	409a      	lsls	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	f010803f 	.word	0xf010803f

08001d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_DMA_Start_IT+0x26>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e040      	b.n	8001e0c <HAL_DMA_Start_IT+0xa8>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d12f      	bne.n	8001dfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2202      	movs	r2, #2
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f9f4 	bl	80021a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	223f      	movs	r2, #63	; 0x3f
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0216 	orr.w	r2, r2, #22
 8001dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0208 	orr.w	r2, r2, #8
 8001dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e005      	b.n	8001e0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
 8001e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d004      	beq.n	8001e32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00c      	b.n	8001e4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2205      	movs	r2, #5
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e64:	4b92      	ldr	r3, [pc, #584]	; (80020b0 <HAL_DMA_IRQHandler+0x258>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a92      	ldr	r2, [pc, #584]	; (80020b4 <HAL_DMA_IRQHandler+0x25c>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	0a9b      	lsrs	r3, r3, #10
 8001e70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	2208      	movs	r2, #8
 8001e84:	409a      	lsls	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d01a      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	2201      	movs	r2, #1
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d012      	beq.n	8001efa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f043 0202 	orr.w	r2, r3, #2
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	2204      	movs	r2, #4
 8001f00:	409a      	lsls	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d012      	beq.n	8001f30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f043 0204 	orr.w	r2, r3, #4
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	2210      	movs	r2, #16
 8001f36:	409a      	lsls	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d043      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d03c      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	2210      	movs	r2, #16
 8001f54:	409a      	lsls	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d018      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d108      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d024      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
 8001f86:	e01f      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4798      	blx	r3
 8001f98:	e016      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d107      	bne.n	8001fb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0208 	bic.w	r2, r2, #8
 8001fb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	2220      	movs	r2, #32
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 808e 	beq.w	80020f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8086 	beq.w	80020f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2220      	movs	r2, #32
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d136      	bne.n	8002070 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0216 	bic.w	r2, r2, #22
 8002010:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002020:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <HAL_DMA_IRQHandler+0x1da>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0208 	bic.w	r2, r2, #8
 8002040:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	223f      	movs	r2, #63	; 0x3f
 8002048:	409a      	lsls	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002062:	2b00      	cmp	r3, #0
 8002064:	d07d      	beq.n	8002162 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
        }
        return;
 800206e:	e078      	b.n	8002162 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01c      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d108      	bne.n	800209e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	2b00      	cmp	r3, #0
 8002092:	d030      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
 800209c:	e02b      	b.n	80020f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d027      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
 80020ae:	e022      	b.n	80020f6 <HAL_DMA_IRQHandler+0x29e>
 80020b0:	20000000 	.word	0x20000000
 80020b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10f      	bne.n	80020e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0210 	bic.w	r2, r2, #16
 80020d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d032      	beq.n	8002164 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d022      	beq.n	8002150 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2205      	movs	r2, #5
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3301      	adds	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	429a      	cmp	r2, r3
 800212c:	d307      	bcc.n	800213e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f2      	bne.n	8002122 <HAL_DMA_IRQHandler+0x2ca>
 800213c:	e000      	b.n	8002140 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800213e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
 8002160:	e000      	b.n	8002164 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002162:	bf00      	nop
    }
  }
}
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop

0800216c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800217a:	b2db      	uxtb	r3, r3
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b40      	cmp	r3, #64	; 0x40
 80021cc:	d108      	bne.n	80021e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021de:	e007      	b.n	80021f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3b10      	subs	r3, #16
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <DMA_CalcBaseAndBitshift+0x64>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <DMA_CalcBaseAndBitshift+0x68>)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d909      	bls.n	800223e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002232:	f023 0303 	bic.w	r3, r3, #3
 8002236:	1d1a      	adds	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	; 0x58
 800223c:	e007      	b.n	800224e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002246:	f023 0303 	bic.w	r3, r3, #3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	aaaaaaab 	.word	0xaaaaaaab
 8002264:	08008508 	.word	0x08008508

08002268 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11f      	bne.n	80022c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d855      	bhi.n	8002334 <DMA_CheckFifoParam+0xcc>
 8002288:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <DMA_CheckFifoParam+0x28>)
 800228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228e:	bf00      	nop
 8002290:	080022a1 	.word	0x080022a1
 8002294:	080022b3 	.word	0x080022b3
 8002298:	080022a1 	.word	0x080022a1
 800229c:	08002335 	.word	0x08002335
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d045      	beq.n	8002338 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b0:	e042      	b.n	8002338 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ba:	d13f      	bne.n	800233c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c0:	e03c      	b.n	800233c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ca:	d121      	bne.n	8002310 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d836      	bhi.n	8002340 <DMA_CheckFifoParam+0xd8>
 80022d2:	a201      	add	r2, pc, #4	; (adr r2, 80022d8 <DMA_CheckFifoParam+0x70>)
 80022d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d8:	080022e9 	.word	0x080022e9
 80022dc:	080022ef 	.word	0x080022ef
 80022e0:	080022e9 	.word	0x080022e9
 80022e4:	08002301 	.word	0x08002301
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      break;
 80022ec:	e02f      	b.n	800234e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d024      	beq.n	8002344 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fe:	e021      	b.n	8002344 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002308:	d11e      	bne.n	8002348 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800230e:	e01b      	b.n	8002348 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d902      	bls.n	800231c <DMA_CheckFifoParam+0xb4>
 8002316:	2b03      	cmp	r3, #3
 8002318:	d003      	beq.n	8002322 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800231a:	e018      	b.n	800234e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
      break;
 8002320:	e015      	b.n	800234e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00e      	beq.n	800234c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
      break;
 8002332:	e00b      	b.n	800234c <DMA_CheckFifoParam+0xe4>
      break;
 8002334:	bf00      	nop
 8002336:	e00a      	b.n	800234e <DMA_CheckFifoParam+0xe6>
      break;
 8002338:	bf00      	nop
 800233a:	e008      	b.n	800234e <DMA_CheckFifoParam+0xe6>
      break;
 800233c:	bf00      	nop
 800233e:	e006      	b.n	800234e <DMA_CheckFifoParam+0xe6>
      break;
 8002340:	bf00      	nop
 8002342:	e004      	b.n	800234e <DMA_CheckFifoParam+0xe6>
      break;
 8002344:	bf00      	nop
 8002346:	e002      	b.n	800234e <DMA_CheckFifoParam+0xe6>
      break;   
 8002348:	bf00      	nop
 800234a:	e000      	b.n	800234e <DMA_CheckFifoParam+0xe6>
      break;
 800234c:	bf00      	nop
    }
  } 
  
  return status; 
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e159      	b.n	800262c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	429a      	cmp	r2, r3
 8002392:	f040 8148 	bne.w	8002626 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d00b      	beq.n	80023b6 <HAL_GPIO_Init+0x5a>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023aa:	2b11      	cmp	r3, #17
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0xfc>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b12      	cmp	r3, #18
 8002456:	d123      	bne.n	80024a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	69b9      	ldr	r1, [r7, #24]
 800249c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80a2 	beq.w	8002626 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b56      	ldr	r3, [pc, #344]	; (8002640 <HAL_GPIO_Init+0x2e4>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a55      	ldr	r2, [pc, #340]	; (8002640 <HAL_GPIO_Init+0x2e4>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_GPIO_Init+0x2e4>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fe:	4a51      	ldr	r2, [pc, #324]	; (8002644 <HAL_GPIO_Init+0x2e8>)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a48      	ldr	r2, [pc, #288]	; (8002648 <HAL_GPIO_Init+0x2ec>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d019      	beq.n	800255e <HAL_GPIO_Init+0x202>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a47      	ldr	r2, [pc, #284]	; (800264c <HAL_GPIO_Init+0x2f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0x1fe>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a46      	ldr	r2, [pc, #280]	; (8002650 <HAL_GPIO_Init+0x2f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00d      	beq.n	8002556 <HAL_GPIO_Init+0x1fa>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a45      	ldr	r2, [pc, #276]	; (8002654 <HAL_GPIO_Init+0x2f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <HAL_GPIO_Init+0x1f6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a44      	ldr	r2, [pc, #272]	; (8002658 <HAL_GPIO_Init+0x2fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_GPIO_Init+0x1f2>
 800254a:	2304      	movs	r3, #4
 800254c:	e008      	b.n	8002560 <HAL_GPIO_Init+0x204>
 800254e:	2307      	movs	r3, #7
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x204>
 8002552:	2303      	movs	r3, #3
 8002554:	e004      	b.n	8002560 <HAL_GPIO_Init+0x204>
 8002556:	2302      	movs	r3, #2
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x204>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x204>
 800255e:	2300      	movs	r3, #0
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f002 0203 	and.w	r2, r2, #3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4093      	lsls	r3, r2
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002570:	4934      	ldr	r1, [pc, #208]	; (8002644 <HAL_GPIO_Init+0x2e8>)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_GPIO_Init+0x300>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a2:	4a2e      	ldr	r2, [pc, #184]	; (800265c <HAL_GPIO_Init+0x300>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025a8:	4b2c      	ldr	r3, [pc, #176]	; (800265c <HAL_GPIO_Init+0x300>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025cc:	4a23      	ldr	r2, [pc, #140]	; (800265c <HAL_GPIO_Init+0x300>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_GPIO_Init+0x300>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025f6:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_GPIO_Init+0x300>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025fc:	4b17      	ldr	r3, [pc, #92]	; (800265c <HAL_GPIO_Init+0x300>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <HAL_GPIO_Init+0x300>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3301      	adds	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b0f      	cmp	r3, #15
 8002630:	f67f aea2 	bls.w	8002378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002634:	bf00      	nop
 8002636:	3724      	adds	r7, #36	; 0x24
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40023800 	.word	0x40023800
 8002644:	40013800 	.word	0x40013800
 8002648:	40020000 	.word	0x40020000
 800264c:	40020400 	.word	0x40020400
 8002650:	40020800 	.word	0x40020800
 8002654:	40020c00 	.word	0x40020c00
 8002658:	40021000 	.word	0x40021000
 800265c:	40013c00 	.word	0x40013c00

08002660 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	e001      	b.n	8002682 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a0:	787b      	ldrb	r3, [r7, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026ac:	e003      	b.n	80026b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	041a      	lsls	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	401a      	ands	r2, r3
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d104      	bne.n	80026e6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026dc:	887b      	ldrh	r3, [r7, #2]
 80026de:	041a      	lsls	r2, r3, #16
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80026e4:	e002      	b.n	80026ec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	619a      	str	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e11f      	b.n	800294a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fe6e 	bl	8001400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800274a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800275a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800275c:	f003 f9fc 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8002760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4a7b      	ldr	r2, [pc, #492]	; (8002954 <HAL_I2C_Init+0x25c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d807      	bhi.n	800277c <HAL_I2C_Init+0x84>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4a7a      	ldr	r2, [pc, #488]	; (8002958 <HAL_I2C_Init+0x260>)
 8002770:	4293      	cmp	r3, r2
 8002772:	bf94      	ite	ls
 8002774:	2301      	movls	r3, #1
 8002776:	2300      	movhi	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	e006      	b.n	800278a <HAL_I2C_Init+0x92>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a77      	ldr	r2, [pc, #476]	; (800295c <HAL_I2C_Init+0x264>)
 8002780:	4293      	cmp	r3, r2
 8002782:	bf94      	ite	ls
 8002784:	2301      	movls	r3, #1
 8002786:	2300      	movhi	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0db      	b.n	800294a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a72      	ldr	r2, [pc, #456]	; (8002960 <HAL_I2C_Init+0x268>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	0c9b      	lsrs	r3, r3, #18
 800279c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a64      	ldr	r2, [pc, #400]	; (8002954 <HAL_I2C_Init+0x25c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d802      	bhi.n	80027cc <HAL_I2C_Init+0xd4>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3301      	adds	r3, #1
 80027ca:	e009      	b.n	80027e0 <HAL_I2C_Init+0xe8>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	4a63      	ldr	r2, [pc, #396]	; (8002964 <HAL_I2C_Init+0x26c>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	3301      	adds	r3, #1
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4956      	ldr	r1, [pc, #344]	; (8002954 <HAL_I2C_Init+0x25c>)
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d80d      	bhi.n	800281c <HAL_I2C_Init+0x124>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1e59      	subs	r1, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fbb1 f3f3 	udiv	r3, r1, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	2b04      	cmp	r3, #4
 8002816:	bf38      	it	cc
 8002818:	2304      	movcc	r3, #4
 800281a:	e04f      	b.n	80028bc <HAL_I2C_Init+0x1c4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <HAL_I2C_Init+0x150>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e58      	subs	r0, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	440b      	add	r3, r1
 8002832:	fbb0 f3f3 	udiv	r3, r0, r3
 8002836:	3301      	adds	r3, #1
 8002838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e012      	b.n	800286e <HAL_I2C_Init+0x176>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e58      	subs	r0, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	0099      	lsls	r1, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Init+0x17e>
 8002872:	2301      	movs	r3, #1
 8002874:	e022      	b.n	80028bc <HAL_I2C_Init+0x1c4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10e      	bne.n	800289c <HAL_I2C_Init+0x1a4>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e58      	subs	r0, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	440b      	add	r3, r1
 800288c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002890:	3301      	adds	r3, #1
 8002892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800289a:	e00f      	b.n	80028bc <HAL_I2C_Init+0x1c4>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1e58      	subs	r0, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	0099      	lsls	r1, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	6809      	ldr	r1, [r1, #0]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6911      	ldr	r1, [r2, #16]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68d2      	ldr	r2, [r2, #12]
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	000186a0 	.word	0x000186a0
 8002958:	001e847f 	.word	0x001e847f
 800295c:	003d08ff 	.word	0x003d08ff
 8002960:	431bde83 	.word	0x431bde83
 8002964:	10624dd3 	.word	0x10624dd3

08002968 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	461a      	mov	r2, r3
 8002974:	460b      	mov	r3, r1
 8002976:	817b      	strh	r3, [r7, #10]
 8002978:	4613      	mov	r3, r2
 800297a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b20      	cmp	r3, #32
 800298a:	f040 80f4 	bne.w	8002b76 <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800298e:	4b7c      	ldr	r3, [pc, #496]	; (8002b80 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	08db      	lsrs	r3, r3, #3
 8002994:	4a7b      	ldr	r2, [pc, #492]	; (8002b84 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	0a1a      	lsrs	r2, r3, #8
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009a      	lsls	r2, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d116      	bne.n	80029e2 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0220 	orr.w	r2, r3, #32
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0ca      	b.n	8002b78 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d0db      	beq.n	80029a8 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_I2C_Master_Transmit_DMA+0x96>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e0bc      	b.n	8002b78 <HAL_I2C_Master_Transmit_DMA+0x210>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d007      	beq.n	8002a24 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2221      	movs	r2, #33	; 0x21
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2210      	movs	r2, #16
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	893a      	ldrh	r2, [r7, #8]
 8002a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a49      	ldr	r2, [pc, #292]	; (8002b88 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002a66:	897a      	ldrh	r2, [r7, #10]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d062      	beq.n	8002b3a <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	4a44      	ldr	r2, [pc, #272]	; (8002b8c <HAL_I2C_Master_Transmit_DMA+0x224>)
 8002a7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	4a43      	ldr	r2, [pc, #268]	; (8002b90 <HAL_I2C_Master_Transmit_DMA+0x228>)
 8002a82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	2200      	movs	r2, #0
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	2200      	movs	r2, #0
 8002a92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	2200      	movs	r2, #0
 8002a9a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	4619      	mov	r1, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3310      	adds	r3, #16
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aba:	f7ff f953 	bl	8001d64 <HAL_DMA_Start_IT>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d124      	bne.n	8002b12 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002afe:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	e02f      	b.n	8002b72 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f043 0210 	orr.w	r2, r3, #16
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e01e      	b.n	8002b78 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b48:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b58:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002b70:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e000      	b.n	8002b78 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
  }
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000000 	.word	0x20000000
 8002b84:	14f8b589 	.word	0x14f8b589
 8002b88:	ffff0000 	.word	0xffff0000
 8002b8c:	08004bd1 	.word	0x08004bd1
 8002b90:	08004d7b 	.word	0x08004d7b

08002b94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	813b      	strh	r3, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bae:	f7fe feeb 	bl	8001988 <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	f040 80d9 	bne.w	8002d74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2319      	movs	r3, #25
 8002bc8:	2201      	movs	r2, #1
 8002bca:	496d      	ldr	r1, [pc, #436]	; (8002d80 <HAL_I2C_Mem_Write+0x1ec>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f002 f990 	bl	8004ef2 <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0cc      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Mem_Write+0x56>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0c5      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d007      	beq.n	8002c10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2221      	movs	r2, #33	; 0x21
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_I2C_Mem_Write+0x1f0>)
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c52:	88f8      	ldrh	r0, [r7, #6]
 8002c54:	893a      	ldrh	r2, [r7, #8]
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4603      	mov	r3, r0
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f001 fe3a 	bl	80048dc <I2C_RequestMemoryWrite>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d052      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e081      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f002 fa11 	bl	800509e <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d107      	bne.n	8002c9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06b      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11b      	bne.n	8002d14 <HAL_I2C_Mem_Write+0x180>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1aa      	bne.n	8002c72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f002 f9fd 	bl	8005120 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d107      	bne.n	8002d44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e016      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000

08002d88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da2:	f7fe fdf1 	bl	8001988 <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	f040 8208 	bne.w	80031c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2319      	movs	r3, #25
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	497b      	ldr	r1, [pc, #492]	; (8002fac <HAL_I2C_Mem_Read+0x224>)
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f002 f896 	bl	8004ef2 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e1fb      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Mem_Read+0x56>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e1f4      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d007      	beq.n	8002e04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2222      	movs	r2, #34	; 0x22
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2240      	movs	r2, #64	; 0x40
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a5b      	ldr	r2, [pc, #364]	; (8002fb0 <HAL_I2C_Mem_Read+0x228>)
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e46:	88f8      	ldrh	r0, [r7, #6]
 8002e48:	893a      	ldrh	r2, [r7, #8]
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4603      	mov	r3, r0
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f001 fdd4 	bl	8004a04 <I2C_RequestMemoryRead>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1b0      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d113      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	623b      	str	r3, [r7, #32]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e184      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d11b      	bne.n	8002ed6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e164      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d11b      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	e144      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f2c:	e138      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	f200 80f1 	bhi.w	800311a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d123      	bne.n	8002f88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f002 f92c 	bl	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e139      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f86:	e10b      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d14e      	bne.n	800302e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f96:	2200      	movs	r2, #0
 8002f98:	4906      	ldr	r1, [pc, #24]	; (8002fb4 <HAL_I2C_Mem_Read+0x22c>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f001 ffa9 	bl	8004ef2 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e10e      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
 8002faa:	bf00      	nop
 8002fac:	00100002 	.word	0x00100002
 8002fb0:	ffff0000 	.word	0xffff0000
 8002fb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800302c:	e0b8      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	2200      	movs	r2, #0
 8003036:	4966      	ldr	r1, [pc, #408]	; (80031d0 <HAL_I2C_Mem_Read+0x448>)
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f001 ff5a 	bl	8004ef2 <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0bf      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	2200      	movs	r2, #0
 8003092:	494f      	ldr	r1, [pc, #316]	; (80031d0 <HAL_I2C_Mem_Read+0x448>)
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f001 ff2c 	bl	8004ef2 <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e091      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003118:	e042      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f002 f83f 	bl	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e04c      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d118      	bne.n	80031a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f47f aec2 	bne.w	8002f2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3728      	adds	r7, #40	; 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	00010004 	.word	0x00010004

080031d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	2b10      	cmp	r3, #16
 8003202:	d003      	beq.n	800320c <HAL_I2C_EV_IRQHandler+0x38>
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	f040 80b6 	bne.w	8003378 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <HAL_I2C_EV_IRQHandler+0x6e>
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800322c:	d003      	beq.n	8003236 <HAL_I2C_EV_IRQHandler+0x62>
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003234:	d101      	bne.n	800323a <HAL_I2C_EV_IRQHandler+0x66>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x68>
 800323a:	2300      	movs	r3, #0
 800323c:	2b01      	cmp	r3, #1
 800323e:	f000 8127 	beq.w	8003490 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00c      	beq.n	8003266 <HAL_I2C_EV_IRQHandler+0x92>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	0a5b      	lsrs	r3, r3, #9
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d006      	beq.n	8003266 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f002 f827 	bl	80052ac <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fd2a 	bl	8003cb8 <I2C_Master_SB>
 8003264:	e087      	b.n	8003376 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	08db      	lsrs	r3, r3, #3
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0xb2>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	0a5b      	lsrs	r3, r3, #9
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fda0 	bl	8003dc4 <I2C_Master_ADD10>
 8003284:	e077      	b.n	8003376 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	0a5b      	lsrs	r3, r3, #9
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fdba 	bl	8003e18 <I2C_Master_ADDR>
 80032a4:	e067      	b.n	8003376 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d030      	beq.n	8003314 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c0:	f000 80e8 	beq.w	8003494 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	09db      	lsrs	r3, r3, #7
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00f      	beq.n	80032f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	0a9b      	lsrs	r3, r3, #10
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d009      	beq.n	80032f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d103      	bne.n	80032f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f9f6 	bl	80036da <I2C_MasterTransmit_TXE>
 80032ee:	e042      	b.n	8003376 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80cb 	beq.w	8003494 <HAL_I2C_EV_IRQHandler+0x2c0>
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	0a5b      	lsrs	r3, r3, #9
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80c4 	beq.w	8003494 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fa80 	bl	8003812 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003312:	e0bf      	b.n	8003494 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003322:	f000 80b7 	beq.w	8003494 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00f      	beq.n	8003352 <HAL_I2C_EV_IRQHandler+0x17e>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	0a9b      	lsrs	r3, r3, #10
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_I2C_EV_IRQHandler+0x17e>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fb48 	bl	80039e0 <I2C_MasterReceive_RXNE>
 8003350:	e011      	b.n	8003376 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 809a 	beq.w	8003494 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	0a5b      	lsrs	r3, r3, #9
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8093 	beq.w	8003494 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fbb8 	bl	8003ae4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003374:	e08e      	b.n	8003494 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003376:	e08d      	b.n	8003494 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	e007      	b.n	800339a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d012      	beq.n	80033cc <HAL_I2C_EV_IRQHandler+0x1f8>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	0a5b      	lsrs	r3, r3, #9
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 ff76 	bl	80042b6 <I2C_Slave_ADDR>
 80033ca:	e066      	b.n	800349a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_I2C_EV_IRQHandler+0x218>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	0a5b      	lsrs	r3, r3, #9
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 ffab 	bl	8004340 <I2C_Slave_STOPF>
 80033ea:	e056      	b.n	800349a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033ec:	7bbb      	ldrb	r3, [r7, #14]
 80033ee:	2b21      	cmp	r3, #33	; 0x21
 80033f0:	d002      	beq.n	80033f8 <HAL_I2C_EV_IRQHandler+0x224>
 80033f2:	7bbb      	ldrb	r3, [r7, #14]
 80033f4:	2b29      	cmp	r3, #41	; 0x29
 80033f6:	d125      	bne.n	8003444 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	09db      	lsrs	r3, r3, #7
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00f      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x250>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	0a9b      	lsrs	r3, r3, #10
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x250>
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d103      	bne.n	8003424 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fe8c 	bl	800413a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003422:	e039      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d033      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	0a5b      	lsrs	r3, r3, #9
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02d      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 feb9 	bl	80041b4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003442:	e029      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00f      	beq.n	8003470 <HAL_I2C_EV_IRQHandler+0x29c>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	0a9b      	lsrs	r3, r3, #10
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <HAL_I2C_EV_IRQHandler+0x29c>
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d103      	bne.n	8003470 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fec4 	bl	80041f6 <I2C_SlaveReceive_RXNE>
 800346e:	e014      	b.n	800349a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00e      	beq.n	800349a <HAL_I2C_EV_IRQHandler+0x2c6>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	0a5b      	lsrs	r3, r3, #9
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fef2 	bl	8004272 <I2C_SlaveReceive_BTF>
 800348e:	e004      	b.n	800349a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003490:	bf00      	nop
 8003492:	e002      	b.n	800349a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003494:	bf00      	nop
 8003496:	e000      	b.n	800349a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003498:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	0a1b      	lsrs	r3, r3, #8
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00e      	beq.n	80034ee <HAL_I2C_ER_IRQHandler+0x4e>
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	0a5b      	lsrs	r3, r3, #9
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00e      	beq.n	8003518 <HAL_I2C_ER_IRQHandler+0x78>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003516:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	0a9b      	lsrs	r3, r3, #10
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d03f      	beq.n	80035a4 <HAL_I2C_ER_IRQHandler+0x104>
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d039      	beq.n	80035a4 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003530:	7efb      	ldrb	r3, [r7, #27]
 8003532:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003542:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800354a:	7ebb      	ldrb	r3, [r7, #26]
 800354c:	2b20      	cmp	r3, #32
 800354e:	d112      	bne.n	8003576 <HAL_I2C_ER_IRQHandler+0xd6>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <HAL_I2C_ER_IRQHandler+0xd6>
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	2b21      	cmp	r3, #33	; 0x21
 800355a:	d008      	beq.n	800356e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	2b29      	cmp	r3, #41	; 0x29
 8003560:	d005      	beq.n	800356e <HAL_I2C_ER_IRQHandler+0xce>
 8003562:	7cfb      	ldrb	r3, [r7, #19]
 8003564:	2b28      	cmp	r3, #40	; 0x28
 8003566:	d106      	bne.n	8003576 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b21      	cmp	r3, #33	; 0x21
 800356c:	d103      	bne.n	8003576 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f001 f816 	bl	80045a0 <I2C_Slave_AF>
 8003574:	e016      	b.n	80035a4 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800357e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	f043 0304 	orr.w	r3, r3, #4
 8003586:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003588:	7efb      	ldrb	r3, [r7, #27]
 800358a:	2b10      	cmp	r3, #16
 800358c:	d002      	beq.n	8003594 <HAL_I2C_ER_IRQHandler+0xf4>
 800358e:	7efb      	ldrb	r3, [r7, #27]
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d107      	bne.n	80035a4 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	0adb      	lsrs	r3, r3, #11
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <HAL_I2C_ER_IRQHandler+0x12e>
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	f043 0308 	orr.w	r3, r3, #8
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80035cc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f001 f84d 	bl	8004680 <I2C_ITError>
  }
}
 80035e6:	bf00      	nop
 80035e8:	3728      	adds	r7, #40	; 0x28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	70fb      	strb	r3, [r7, #3]
 800364a:	4613      	mov	r3, r2
 800364c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036f0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d150      	bne.n	80037a2 <I2C_MasterTransmit_TXE+0xc8>
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b21      	cmp	r3, #33	; 0x21
 8003704:	d14d      	bne.n	80037a2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d01d      	beq.n	8003748 <I2C_MasterTransmit_TXE+0x6e>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b20      	cmp	r3, #32
 8003710:	d01a      	beq.n	8003748 <I2C_MasterTransmit_TXE+0x6e>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003718:	d016      	beq.n	8003748 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003728:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2211      	movs	r2, #17
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff54 	bl	80035ee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003746:	e060      	b.n	800380a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003756:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d107      	bne.n	8003792 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ff6f 	bl	800366e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003790:	e03b      	b.n	800380a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff27 	bl	80035ee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037a0:	e033      	b.n	800380a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	2b21      	cmp	r3, #33	; 0x21
 80037a6:	d005      	beq.n	80037b4 <I2C_MasterTransmit_TXE+0xda>
 80037a8:	7bbb      	ldrb	r3, [r7, #14]
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d12d      	bne.n	800380a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b22      	cmp	r3, #34	; 0x22
 80037b2:	d12a      	bne.n	800380a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80037ce:	e01c      	b.n	800380a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d103      	bne.n	80037e4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f898 	bl	8003912 <I2C_MemoryTransmit_TXE_BTF>
}
 80037e2:	e012      	b.n	800380a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003808:	e7ff      	b.n	800380a <I2C_MasterTransmit_TXE+0x130>
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b21      	cmp	r3, #33	; 0x21
 800382a:	d165      	bne.n	80038f8 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800385a:	e056      	b.n	800390a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d01d      	beq.n	800389e <I2C_MasterTransmit_BTF+0x8c>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b20      	cmp	r3, #32
 8003866:	d01a      	beq.n	800389e <I2C_MasterTransmit_BTF+0x8c>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800386e:	d016      	beq.n	800389e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800387e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2211      	movs	r2, #17
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fea9 	bl	80035ee <HAL_I2C_MasterTxCpltCallback>
}
 800389c:	e035      	b.n	800390a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ac:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038bc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d107      	bne.n	80038e8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fec4 	bl	800366e <HAL_I2C_MemTxCpltCallback>
}
 80038e6:	e010      	b.n	800390a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fe7c 	bl	80035ee <HAL_I2C_MasterTxCpltCallback>
}
 80038f6:	e008      	b.n	800390a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d102      	bne.n	800390a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f804 	bl	8003912 <I2C_MemoryTransmit_TXE_BTF>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391e:	2b00      	cmp	r3, #0
 8003920:	d11d      	bne.n	800395e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d10b      	bne.n	8003942 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392e:	b2da      	uxtb	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393a:	1c9a      	adds	r2, r3, #2
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003940:	e048      	b.n	80039d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003946:	b29b      	uxth	r3, r3
 8003948:	121b      	asrs	r3, r3, #8
 800394a:	b2da      	uxtb	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800395c:	e03a      	b.n	80039d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	2b01      	cmp	r3, #1
 8003964:	d10b      	bne.n	800397e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396a:	b2da      	uxtb	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800397c:	e02a      	b.n	80039d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003982:	2b02      	cmp	r3, #2
 8003984:	d126      	bne.n	80039d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b22      	cmp	r3, #34	; 0x22
 8003990:	d108      	bne.n	80039a4 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a0:	601a      	str	r2, [r3, #0]
}
 80039a2:	e017      	b.n	80039d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b21      	cmp	r3, #33	; 0x21
 80039ae:	d111      	bne.n	80039d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b22      	cmp	r3, #34	; 0x22
 80039f2:	d173      	bne.n	8003adc <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d920      	bls.n	8003a44 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d154      	bne.n	8003adc <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a40:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003a42:	e04b      	b.n	8003adc <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d047      	beq.n	8003adc <I2C_MasterReceive_RXNE+0xfc>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d002      	beq.n	8003a58 <I2C_MasterReceive_RXNE+0x78>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d141      	bne.n	8003adc <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a66:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a76:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d10a      	bne.n	8003ac8 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff fdde 	bl	8003682 <HAL_I2C_MemRxCpltCallback>
}
 8003ac6:	e009      	b.n	8003adc <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2212      	movs	r2, #18
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fd93 	bl	8003602 <HAL_I2C_MasterRxCpltCallback>
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d11b      	bne.n	8003b34 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b32:	e0bd      	b.n	8003cb0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d129      	bne.n	8003b92 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d00a      	beq.n	8003b6a <I2C_MasterReceive_BTF+0x86>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d007      	beq.n	8003b6a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b90:	e08e      	b.n	8003cb0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d176      	bne.n	8003c8a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d002      	beq.n	8003ba8 <I2C_MasterReceive_BTF+0xc4>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d108      	bne.n	8003bba <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e019      	b.n	8003bee <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d002      	beq.n	8003bc6 <I2C_MasterReceive_BTF+0xe2>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d108      	bne.n	8003bd8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e00a      	b.n	8003bee <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b10      	cmp	r3, #16
 8003bdc:	d007      	beq.n	8003bee <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c48:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d10a      	bne.n	8003c74 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fd08 	bl	8003682 <HAL_I2C_MemRxCpltCallback>
}
 8003c72:	e01d      	b.n	8003cb0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2212      	movs	r2, #18
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fcbd 	bl	8003602 <HAL_I2C_MasterRxCpltCallback>
}
 8003c88:	e012      	b.n	8003cb0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d117      	bne.n	8003cfc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ce4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ce6:	e067      	b.n	8003db8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	611a      	str	r2, [r3, #16]
}
 8003cfa:	e05d      	b.n	8003db8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d04:	d133      	bne.n	8003d6e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b21      	cmp	r3, #33	; 0x21
 8003d10:	d109      	bne.n	8003d26 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d22:	611a      	str	r2, [r3, #16]
 8003d24:	e008      	b.n	8003d38 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <I2C_Master_SB+0x92>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d108      	bne.n	8003d5c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d032      	beq.n	8003db8 <I2C_Master_SB+0x100>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d02d      	beq.n	8003db8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d6a:	605a      	str	r2, [r3, #4]
}
 8003d6c:	e024      	b.n	8003db8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10e      	bne.n	8003d94 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	11db      	asrs	r3, r3, #7
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f003 0306 	and.w	r3, r3, #6
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f063 030f 	orn	r3, r3, #15
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	611a      	str	r2, [r3, #16]
}
 8003d92:	e011      	b.n	8003db8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d10d      	bne.n	8003db8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	11db      	asrs	r3, r3, #7
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0306 	and.w	r3, r3, #6
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f063 030e 	orn	r3, r3, #14
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <I2C_Master_ADD10+0x24>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d011      	beq.n	8003e0c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d104      	bne.n	8003dfc <I2C_Master_ADD10+0x38>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d007      	beq.n	8003e0c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b091      	sub	sp, #68	; 0x44
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b22      	cmp	r3, #34	; 0x22
 8003e40:	f040 8169 	bne.w	8004116 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10f      	bne.n	8003e6c <I2C_Master_ADDR+0x54>
 8003e4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d10b      	bne.n	8003e6c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e54:	2300      	movs	r3, #0
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	633b      	str	r3, [r7, #48]	; 0x30
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	e160      	b.n	800412e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d11d      	bne.n	8003eb0 <I2C_Master_ADDR+0x98>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e7c:	d118      	bne.n	8003eb0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	651a      	str	r2, [r3, #80]	; 0x50
 8003eae:	e13e      	b.n	800412e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d113      	bne.n	8003ee2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e115      	b.n	800410e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	f040 808a 	bne.w	8004002 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ef4:	d137      	bne.n	8003f66 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f14:	d113      	bne.n	8003f3e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f24:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f26:	2300      	movs	r3, #0
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	e0e7      	b.n	800410e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e0d3      	b.n	800410e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d02e      	beq.n	8003fca <I2C_Master_ADDR+0x1b2>
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d02b      	beq.n	8003fca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f74:	2b12      	cmp	r3, #18
 8003f76:	d102      	bne.n	8003f7e <I2C_Master_ADDR+0x166>
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d125      	bne.n	8003fca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d00e      	beq.n	8003fa2 <I2C_Master_ADDR+0x18a>
 8003f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d00b      	beq.n	8003fa2 <I2C_Master_ADDR+0x18a>
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d008      	beq.n	8003fa2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e007      	b.n	8003fb2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fb0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	e0a1      	b.n	800410e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e085      	b.n	800410e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d14d      	bne.n	80040a8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	2b04      	cmp	r3, #4
 8004010:	d016      	beq.n	8004040 <I2C_Master_ADDR+0x228>
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	2b02      	cmp	r3, #2
 8004016:	d013      	beq.n	8004040 <I2C_Master_ADDR+0x228>
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	2b10      	cmp	r3, #16
 800401c:	d010      	beq.n	8004040 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800402c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e007      	b.n	8004050 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800404e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405e:	d117      	bne.n	8004090 <I2C_Master_ADDR+0x278>
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004066:	d00b      	beq.n	8004080 <I2C_Master_ADDR+0x268>
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	2b01      	cmp	r3, #1
 800406c:	d008      	beq.n	8004080 <I2C_Master_ADDR+0x268>
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	2b08      	cmp	r3, #8
 8004072:	d005      	beq.n	8004080 <I2C_Master_ADDR+0x268>
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	2b10      	cmp	r3, #16
 8004078:	d002      	beq.n	8004080 <I2C_Master_ADDR+0x268>
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2b20      	cmp	r3, #32
 800407e:	d107      	bne.n	8004090 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800408e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	e032      	b.n	800410e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c6:	d117      	bne.n	80040f8 <I2C_Master_ADDR+0x2e0>
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ce:	d00b      	beq.n	80040e8 <I2C_Master_ADDR+0x2d0>
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d008      	beq.n	80040e8 <I2C_Master_ADDR+0x2d0>
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d005      	beq.n	80040e8 <I2C_Master_ADDR+0x2d0>
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d002      	beq.n	80040e8 <I2C_Master_ADDR+0x2d0>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d107      	bne.n	80040f8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004114:	e00b      	b.n	800412e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	68fb      	ldr	r3, [r7, #12]
}
 800412c:	e7ff      	b.n	800412e <I2C_Master_ADDR+0x316>
 800412e:	bf00      	nop
 8004130:	3744      	adds	r7, #68	; 0x44
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d02b      	beq.n	80041ac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d114      	bne.n	80041ac <I2C_SlaveTransmit_TXE+0x72>
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b29      	cmp	r3, #41	; 0x29
 8004186:	d111      	bne.n	80041ac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004196:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2221      	movs	r2, #33	; 0x21
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2228      	movs	r2, #40	; 0x28
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fa35 	bl	8003616 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d011      	beq.n	80041ea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	781a      	ldrb	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02c      	beq.n	800426a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d114      	bne.n	800426a <I2C_SlaveReceive_RXNE+0x74>
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b2a      	cmp	r3, #42	; 0x2a
 8004244:	d111      	bne.n	800426a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004254:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2222      	movs	r2, #34	; 0x22
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2228      	movs	r2, #40	; 0x28
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff f9e0 	bl	800362a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d012      	beq.n	80042aa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042d0:	2b28      	cmp	r3, #40	; 0x28
 80042d2:	d127      	bne.n	8004324 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	09db      	lsrs	r3, r3, #7
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d103      	bne.n	8004308 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	81bb      	strh	r3, [r7, #12]
 8004306:	e002      	b.n	800430e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004316:	89ba      	ldrh	r2, [r7, #12]
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	4619      	mov	r1, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff f98e 	bl	800363e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004322:	e008      	b.n	8004336 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0202 	mvn.w	r2, #2
 800432c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800435e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004360:	2300      	movs	r3, #0
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	60bb      	str	r3, [r7, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439c:	d172      	bne.n	8004484 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b22      	cmp	r3, #34	; 0x22
 80043a2:	d002      	beq.n	80043aa <I2C_Slave_STOPF+0x6a>
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b2a      	cmp	r3, #42	; 0x2a
 80043a8:	d135      	bne.n	8004416 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f043 0204 	orr.w	r2, r3, #4
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fd fec2 	bl	800216c <HAL_DMA_GetState>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d049      	beq.n	8004482 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	4a69      	ldr	r2, [pc, #420]	; (8004598 <I2C_Slave_STOPF+0x258>)
 80043f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd fd0a 	bl	8001e14 <HAL_DMA_Abort_IT>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d03d      	beq.n	8004482 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004410:	4610      	mov	r0, r2
 8004412:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004414:	e035      	b.n	8004482 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f043 0204 	orr.w	r2, r3, #4
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004448:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	4618      	mov	r0, r3
 8004450:	f7fd fe8c 	bl	800216c <HAL_DMA_GetState>
 8004454:	4603      	mov	r3, r0
 8004456:	2b01      	cmp	r3, #1
 8004458:	d014      	beq.n	8004484 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	4a4e      	ldr	r2, [pc, #312]	; (8004598 <I2C_Slave_STOPF+0x258>)
 8004460:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd fcd4 	bl	8001e14 <HAL_DMA_Abort_IT>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800447c:	4610      	mov	r0, r2
 800447e:	4798      	blx	r3
 8004480:	e000      	b.n	8004484 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004482:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d03e      	beq.n	800450c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b04      	cmp	r3, #4
 800449a:	d112      	bne.n	80044c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d112      	bne.n	80044f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f043 0204 	orr.w	r2, r3, #4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f8b3 	bl	8004680 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800451a:	e039      	b.n	8004590 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b2a      	cmp	r3, #42	; 0x2a
 8004520:	d109      	bne.n	8004536 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2228      	movs	r2, #40	; 0x28
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff f87a 	bl	800362a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b28      	cmp	r3, #40	; 0x28
 8004540:	d111      	bne.n	8004566 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a15      	ldr	r2, [pc, #84]	; (800459c <I2C_Slave_STOPF+0x25c>)
 8004546:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff f87b 	bl	800365a <HAL_I2C_ListenCpltCallback>
}
 8004564:	e014      	b.n	8004590 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	2b22      	cmp	r3, #34	; 0x22
 800456c:	d002      	beq.n	8004574 <I2C_Slave_STOPF+0x234>
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b22      	cmp	r3, #34	; 0x22
 8004572:	d10d      	bne.n	8004590 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff f84d 	bl	800362a <HAL_I2C_SlaveRxCpltCallback>
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	08004df5 	.word	0x08004df5
 800459c:	ffff0000 	.word	0xffff0000

080045a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d002      	beq.n	80045c2 <I2C_Slave_AF+0x22>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d129      	bne.n	8004616 <I2C_Slave_AF+0x76>
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b28      	cmp	r3, #40	; 0x28
 80045c6:	d126      	bne.n	8004616 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a2c      	ldr	r2, [pc, #176]	; (800467c <I2C_Slave_AF+0xdc>)
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff f823 	bl	800365a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004614:	e02e      	b.n	8004674 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	2b21      	cmp	r3, #33	; 0x21
 800461a:	d126      	bne.n	800466a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <I2C_Slave_AF+0xdc>)
 8004620:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2221      	movs	r2, #33	; 0x21
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004646:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004650:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004660:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fe ffd7 	bl	8003616 <HAL_I2C_SlaveTxCpltCallback>
}
 8004668:	e004      	b.n	8004674 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004672:	615a      	str	r2, [r3, #20]
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	ffff0000 	.word	0xffff0000

08004680 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b10      	cmp	r3, #16
 800469a:	d10a      	bne.n	80046b2 <I2C_ITError+0x32>
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b22      	cmp	r3, #34	; 0x22
 80046a0:	d107      	bne.n	80046b2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046b8:	2b28      	cmp	r3, #40	; 0x28
 80046ba:	d107      	bne.n	80046cc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2228      	movs	r2, #40	; 0x28
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046ca:	e015      	b.n	80046f8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046da:	d006      	beq.n	80046ea <I2C_ITError+0x6a>
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b60      	cmp	r3, #96	; 0x60
 80046e0:	d003      	beq.n	80046ea <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004706:	d162      	bne.n	80047ce <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004716:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d020      	beq.n	8004768 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	4a6a      	ldr	r2, [pc, #424]	; (80048d4 <I2C_ITError+0x254>)
 800472c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004732:	4618      	mov	r0, r3
 8004734:	f7fd fb6e 	bl	8001e14 <HAL_DMA_Abort_IT>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8089 	beq.w	8004852 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004762:	4610      	mov	r0, r2
 8004764:	4798      	blx	r3
 8004766:	e074      	b.n	8004852 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	4a59      	ldr	r2, [pc, #356]	; (80048d4 <I2C_ITError+0x254>)
 800476e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	4618      	mov	r0, r3
 8004776:	f7fd fb4d 	bl	8001e14 <HAL_DMA_Abort_IT>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d068      	beq.n	8004852 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d10b      	bne.n	80047a6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047c8:	4610      	mov	r0, r2
 80047ca:	4798      	blx	r3
 80047cc:	e041      	b.n	8004852 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b60      	cmp	r3, #96	; 0x60
 80047d8:	d125      	bne.n	8004826 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d10b      	bne.n	800480e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fe ff43 	bl	80036aa <HAL_I2C_AbortCpltCallback>
 8004824:	e015      	b.n	8004852 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d10b      	bne.n	800484c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fe ff22 	bl	8003696 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10e      	bne.n	8004880 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800488e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d113      	bne.n	80048cc <I2C_ITError+0x24c>
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b28      	cmp	r3, #40	; 0x28
 80048a8:	d110      	bne.n	80048cc <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <I2C_ITError+0x258>)
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fe fec7 	bl	800365a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	08004df5 	.word	0x08004df5
 80048d8:	ffff0000 	.word	0xffff0000

080048dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	461a      	mov	r2, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	817b      	strh	r3, [r7, #10]
 80048ee:	460b      	mov	r3, r1
 80048f0:	813b      	strh	r3, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004904:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	2200      	movs	r2, #0
 800490e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 faed 	bl	8004ef2 <I2C_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004932:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e05f      	b.n	80049f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004938:	897b      	ldrh	r3, [r7, #10]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004946:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	6a3a      	ldr	r2, [r7, #32]
 800494c:	492c      	ldr	r1, [pc, #176]	; (8004a00 <I2C_RequestMemoryWrite+0x124>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fb26 	bl	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e04c      	b.n	80049f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004976:	6a39      	ldr	r1, [r7, #32]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fb90 	bl	800509e <I2C_WaitOnTXEFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00d      	beq.n	80049a0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2b04      	cmp	r3, #4
 800498a:	d107      	bne.n	800499c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e02b      	b.n	80049f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049a6:	893b      	ldrh	r3, [r7, #8]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	611a      	str	r2, [r3, #16]
 80049b0:	e021      	b.n	80049f6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049b2:	893b      	ldrh	r3, [r7, #8]
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	6a39      	ldr	r1, [r7, #32]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fb6a 	bl	800509e <I2C_WaitOnTXEFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d107      	bne.n	80049e8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e005      	b.n	80049f8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ec:	893b      	ldrh	r3, [r7, #8]
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	00010002 	.word	0x00010002

08004a04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	461a      	mov	r2, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	817b      	strh	r3, [r7, #10]
 8004a16:	460b      	mov	r3, r1
 8004a18:	813b      	strh	r3, [r7, #8]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fa51 	bl	8004ef2 <I2C_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e0a9      	b.n	8004bc4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a70:	897b      	ldrh	r3, [r7, #10]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	6a3a      	ldr	r2, [r7, #32]
 8004a84:	4951      	ldr	r1, [pc, #324]	; (8004bcc <I2C_RequestMemoryRead+0x1c8>)
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fa8a 	bl	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e096      	b.n	8004bc4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aae:	6a39      	ldr	r1, [r7, #32]
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 faf4 	bl	800509e <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d107      	bne.n	8004ad4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e075      	b.n	8004bc4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d105      	bne.n	8004aea <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ade:	893b      	ldrh	r3, [r7, #8]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	611a      	str	r2, [r3, #16]
 8004ae8:	e021      	b.n	8004b2e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004aea:	893b      	ldrh	r3, [r7, #8]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	6a39      	ldr	r1, [r7, #32]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 face 	bl	800509e <I2C_WaitOnTXEFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d107      	bne.n	8004b20 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e04f      	b.n	8004bc4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b30:	6a39      	ldr	r1, [r7, #32]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fab3 	bl	800509e <I2C_WaitOnTXEFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00d      	beq.n	8004b5a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d107      	bne.n	8004b56 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e034      	b.n	8004bc4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f9bb 	bl	8004ef2 <I2C_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e013      	b.n	8004bc4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b9c:	897b      	ldrh	r3, [r7, #10]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	6a3a      	ldr	r2, [r7, #32]
 8004bb0:	4906      	ldr	r1, [pc, #24]	; (8004bcc <I2C_RequestMemoryRead+0x1c8>)
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f9f4 	bl	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	00010002 	.word	0x00010002

08004bd0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bec:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c02:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	2200      	movs	r2, #0
 8004c12:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	2200      	movs	r2, #0
 8004c22:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004c2a:	2b21      	cmp	r3, #33	; 0x21
 8004c2c:	d007      	beq.n	8004c3e <I2C_DMAXferCplt+0x6e>
 8004c2e:	7cfb      	ldrb	r3, [r7, #19]
 8004c30:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004c34:	2b22      	cmp	r3, #34	; 0x22
 8004c36:	d131      	bne.n	8004c9c <I2C_DMAXferCplt+0xcc>
 8004c38:	7cbb      	ldrb	r3, [r7, #18]
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d12e      	bne.n	8004c9c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c4c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2200      	movs	r2, #0
 8004c52:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	2b29      	cmp	r3, #41	; 0x29
 8004c58:	d10a      	bne.n	8004c70 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2221      	movs	r2, #33	; 0x21
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2228      	movs	r2, #40	; 0x28
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c68:	6978      	ldr	r0, [r7, #20]
 8004c6a:	f7fe fcd4 	bl	8003616 <HAL_I2C_SlaveTxCpltCallback>
 8004c6e:	e00c      	b.n	8004c8a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	2b2a      	cmp	r3, #42	; 0x2a
 8004c74:	d109      	bne.n	8004c8a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2222      	movs	r2, #34	; 0x22
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2228      	movs	r2, #40	; 0x28
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c84:	6978      	ldr	r0, [r7, #20]
 8004c86:	f7fe fcd0 	bl	800362a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004c98:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c9a:	e06a      	b.n	8004d72 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d064      	beq.n	8004d72 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d107      	bne.n	8004cc2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cd0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cd8:	d009      	beq.n	8004cee <I2C_DMAXferCplt+0x11e>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d006      	beq.n	8004cee <I2C_DMAXferCplt+0x11e>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ce6:	d002      	beq.n	8004cee <I2C_DMAXferCplt+0x11e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d107      	bne.n	8004cfe <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d0c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d1c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2200      	movs	r2, #0
 8004d22:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004d2c:	6978      	ldr	r0, [r7, #20]
 8004d2e:	f7fe fcb2 	bl	8003696 <HAL_I2C_ErrorCallback>
}
 8004d32:	e01e      	b.n	8004d72 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d10a      	bne.n	8004d5e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004d56:	6978      	ldr	r0, [r7, #20]
 8004d58:	f7fe fc93 	bl	8003682 <HAL_I2C_MemRxCpltCallback>
}
 8004d5c:	e009      	b.n	8004d72 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2212      	movs	r2, #18
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d6c:	6978      	ldr	r0, [r7, #20]
 8004d6e:	f7fe fc48 	bl	8003602 <HAL_I2C_MasterRxCpltCallback>
}
 8004d72:	bf00      	nop
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d94:	2200      	movs	r2, #0
 8004d96:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	2200      	movs	r2, #0
 8004da6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fd f9ed 	bl	8002188 <HAL_DMA_GetError>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d01b      	beq.n	8004dec <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f043 0210 	orr.w	r2, r3, #16
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7fe fc55 	bl	8003696 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	2200      	movs	r2, #0
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	2200      	movs	r2, #0
 8004e28:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b60      	cmp	r3, #96	; 0x60
 8004e7a:	d10e      	bne.n	8004e9a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7fe fc09 	bl	80036aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e98:	e027      	b.n	8004eea <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e9a:	7afb      	ldrb	r3, [r7, #11]
 8004e9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ea0:	2b28      	cmp	r3, #40	; 0x28
 8004ea2:	d117      	bne.n	8004ed4 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ec2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2228      	movs	r2, #40	; 0x28
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ed2:	e007      	b.n	8004ee4 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7fe fbd6 	bl	8003696 <HAL_I2C_ErrorCallback>
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f02:	e025      	b.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d021      	beq.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0c:	f7fc fd3c 	bl	8001988 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d302      	bcc.n	8004f22 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d116      	bne.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e023      	b.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	0c1b      	lsrs	r3, r3, #16
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10d      	bne.n	8004f76 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	43da      	mvns	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	e00c      	b.n	8004f90 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	43da      	mvns	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4013      	ands	r3, r2
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d0b6      	beq.n	8004f04 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fae:	e051      	b.n	8005054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbe:	d123      	bne.n	8005008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	f043 0204 	orr.w	r2, r3, #4
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e046      	b.n	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500e:	d021      	beq.n	8005054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005010:	f7fc fcba 	bl	8001988 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d302      	bcc.n	8005026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d116      	bne.n	8005054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e020      	b.n	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	0c1b      	lsrs	r3, r3, #16
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b01      	cmp	r3, #1
 800505c:	d10c      	bne.n	8005078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	43da      	mvns	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4013      	ands	r3, r2
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e00b      	b.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	43da      	mvns	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	bf14      	ite	ne
 800508a:	2301      	movne	r3, #1
 800508c:	2300      	moveq	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d18d      	bne.n	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050aa:	e02d      	b.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f8ce 	bl	800524e <I2C_IsAcknowledgeFailed>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e02d      	b.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d021      	beq.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c4:	f7fc fc60 	bl	8001988 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d302      	bcc.n	80050da <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d116      	bne.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e007      	b.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	d1ca      	bne.n	80050ac <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800512c:	e02d      	b.n	800518a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f88d 	bl	800524e <I2C_IsAcknowledgeFailed>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e02d      	b.n	800519a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d021      	beq.n	800518a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fc fc1f 	bl	8001988 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d116      	bne.n	800518a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e007      	b.n	800519a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b04      	cmp	r3, #4
 8005196:	d1ca      	bne.n	800512e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ae:	e042      	b.n	8005236 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b10      	cmp	r3, #16
 80051bc:	d119      	bne.n	80051f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0210 	mvn.w	r2, #16
 80051c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e029      	b.n	8005246 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f2:	f7fc fbc9 	bl	8001988 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d302      	bcc.n	8005208 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d116      	bne.n	8005236 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e007      	b.n	8005246 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d1b5      	bne.n	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005264:	d11b      	bne.n	800529e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800526e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f043 0204 	orr.w	r2, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80052bc:	d103      	bne.n	80052c6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80052c4:	e007      	b.n	80052d6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052ce:	d102      	bne.n	80052d6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2208      	movs	r2, #8
 80052d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e25b      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d075      	beq.n	80053ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005302:	4ba3      	ldr	r3, [pc, #652]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b04      	cmp	r3, #4
 800530c:	d00c      	beq.n	8005328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800530e:	4ba0      	ldr	r3, [pc, #640]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005316:	2b08      	cmp	r3, #8
 8005318:	d112      	bne.n	8005340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800531a:	4b9d      	ldr	r3, [pc, #628]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005326:	d10b      	bne.n	8005340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005328:	4b99      	ldr	r3, [pc, #612]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d05b      	beq.n	80053ec <HAL_RCC_OscConfig+0x108>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d157      	bne.n	80053ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e236      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005348:	d106      	bne.n	8005358 <HAL_RCC_OscConfig+0x74>
 800534a:	4b91      	ldr	r3, [pc, #580]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a90      	ldr	r2, [pc, #576]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e01d      	b.n	8005394 <HAL_RCC_OscConfig+0xb0>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005360:	d10c      	bne.n	800537c <HAL_RCC_OscConfig+0x98>
 8005362:	4b8b      	ldr	r3, [pc, #556]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a8a      	ldr	r2, [pc, #552]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b88      	ldr	r3, [pc, #544]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a87      	ldr	r2, [pc, #540]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e00b      	b.n	8005394 <HAL_RCC_OscConfig+0xb0>
 800537c:	4b84      	ldr	r3, [pc, #528]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a83      	ldr	r2, [pc, #524]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	4b81      	ldr	r3, [pc, #516]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a80      	ldr	r2, [pc, #512]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800538e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d013      	beq.n	80053c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539c:	f7fc faf4 	bl	8001988 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a4:	f7fc faf0 	bl	8001988 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1fb      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b6:	4b76      	ldr	r3, [pc, #472]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0xc0>
 80053c2:	e014      	b.n	80053ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c4:	f7fc fae0 	bl	8001988 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053cc:	f7fc fadc 	bl	8001988 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b64      	cmp	r3, #100	; 0x64
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e1e7      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053de:	4b6c      	ldr	r3, [pc, #432]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0xe8>
 80053ea:	e000      	b.n	80053ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d063      	beq.n	80054c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053fa:	4b65      	ldr	r3, [pc, #404]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 030c 	and.w	r3, r3, #12
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005406:	4b62      	ldr	r3, [pc, #392]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800540e:	2b08      	cmp	r3, #8
 8005410:	d11c      	bne.n	800544c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005412:	4b5f      	ldr	r3, [pc, #380]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d116      	bne.n	800544c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800541e:	4b5c      	ldr	r3, [pc, #368]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_RCC_OscConfig+0x152>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d001      	beq.n	8005436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e1bb      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005436:	4b56      	ldr	r3, [pc, #344]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4952      	ldr	r1, [pc, #328]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800544a:	e03a      	b.n	80054c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d020      	beq.n	8005496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005454:	4b4f      	ldr	r3, [pc, #316]	; (8005594 <HAL_RCC_OscConfig+0x2b0>)
 8005456:	2201      	movs	r2, #1
 8005458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545a:	f7fc fa95 	bl	8001988 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005462:	f7fc fa91 	bl	8001988 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e19c      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005474:	4b46      	ldr	r3, [pc, #280]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0f0      	beq.n	8005462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005480:	4b43      	ldr	r3, [pc, #268]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	4940      	ldr	r1, [pc, #256]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	4313      	orrs	r3, r2
 8005492:	600b      	str	r3, [r1, #0]
 8005494:	e015      	b.n	80054c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005496:	4b3f      	ldr	r3, [pc, #252]	; (8005594 <HAL_RCC_OscConfig+0x2b0>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fc fa74 	bl	8001988 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054a4:	f7fc fa70 	bl	8001988 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e17b      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054b6:	4b36      	ldr	r3, [pc, #216]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d030      	beq.n	8005530 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054d6:	4b30      	ldr	r3, [pc, #192]	; (8005598 <HAL_RCC_OscConfig+0x2b4>)
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054dc:	f7fc fa54 	bl	8001988 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054e4:	f7fc fa50 	bl	8001988 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e15b      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f6:	4b26      	ldr	r3, [pc, #152]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0x200>
 8005502:	e015      	b.n	8005530 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005504:	4b24      	ldr	r3, [pc, #144]	; (8005598 <HAL_RCC_OscConfig+0x2b4>)
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800550a:	f7fc fa3d 	bl	8001988 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005512:	f7fc fa39 	bl	8001988 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e144      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005524:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80a0 	beq.w	800567e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005542:	4b13      	ldr	r3, [pc, #76]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	4a0e      	ldr	r2, [pc, #56]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555c:	6413      	str	r3, [r2, #64]	; 0x40
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556a:	2301      	movs	r3, #1
 800556c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556e:	4b0b      	ldr	r3, [pc, #44]	; (800559c <HAL_RCC_OscConfig+0x2b8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d121      	bne.n	80055be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <HAL_RCC_OscConfig+0x2b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a07      	ldr	r2, [pc, #28]	; (800559c <HAL_RCC_OscConfig+0x2b8>)
 8005580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005586:	f7fc f9ff 	bl	8001988 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558c:	e011      	b.n	80055b2 <HAL_RCC_OscConfig+0x2ce>
 800558e:	bf00      	nop
 8005590:	40023800 	.word	0x40023800
 8005594:	42470000 	.word	0x42470000
 8005598:	42470e80 	.word	0x42470e80
 800559c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a0:	f7fc f9f2 	bl	8001988 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e0fd      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b2:	4b81      	ldr	r3, [pc, #516]	; (80057b8 <HAL_RCC_OscConfig+0x4d4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d106      	bne.n	80055d4 <HAL_RCC_OscConfig+0x2f0>
 80055c6:	4b7d      	ldr	r3, [pc, #500]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	4a7c      	ldr	r2, [pc, #496]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6713      	str	r3, [r2, #112]	; 0x70
 80055d2:	e01c      	b.n	800560e <HAL_RCC_OscConfig+0x32a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b05      	cmp	r3, #5
 80055da:	d10c      	bne.n	80055f6 <HAL_RCC_OscConfig+0x312>
 80055dc:	4b77      	ldr	r3, [pc, #476]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	4a76      	ldr	r2, [pc, #472]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 80055e2:	f043 0304 	orr.w	r3, r3, #4
 80055e6:	6713      	str	r3, [r2, #112]	; 0x70
 80055e8:	4b74      	ldr	r3, [pc, #464]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a73      	ldr	r2, [pc, #460]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	e00b      	b.n	800560e <HAL_RCC_OscConfig+0x32a>
 80055f6:	4b71      	ldr	r3, [pc, #452]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	4a70      	ldr	r2, [pc, #448]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6713      	str	r3, [r2, #112]	; 0x70
 8005602:	4b6e      	ldr	r3, [pc, #440]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a6d      	ldr	r2, [pc, #436]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 8005608:	f023 0304 	bic.w	r3, r3, #4
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d015      	beq.n	8005642 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fc f9b7 	bl	8001988 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561c:	e00a      	b.n	8005634 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fc f9b3 	bl	8001988 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e0bc      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	4b61      	ldr	r3, [pc, #388]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0ee      	beq.n	800561e <HAL_RCC_OscConfig+0x33a>
 8005640:	e014      	b.n	800566c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005642:	f7fc f9a1 	bl	8001988 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005648:	e00a      	b.n	8005660 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800564a:	f7fc f99d 	bl	8001988 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	f241 3288 	movw	r2, #5000	; 0x1388
 8005658:	4293      	cmp	r3, r2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e0a6      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005660:	4b56      	ldr	r3, [pc, #344]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1ee      	bne.n	800564a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005672:	4b52      	ldr	r3, [pc, #328]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	4a51      	ldr	r2, [pc, #324]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 8005678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8092 	beq.w	80057ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005688:	4b4c      	ldr	r3, [pc, #304]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b08      	cmp	r3, #8
 8005692:	d05c      	beq.n	800574e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d141      	bne.n	8005720 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569c:	4b48      	ldr	r3, [pc, #288]	; (80057c0 <HAL_RCC_OscConfig+0x4dc>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a2:	f7fc f971 	bl	8001988 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056aa:	f7fc f96d 	bl	8001988 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e078      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056bc:	4b3f      	ldr	r3, [pc, #252]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f0      	bne.n	80056aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	019b      	lsls	r3, r3, #6
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	3b01      	subs	r3, #1
 80056e2:	041b      	lsls	r3, r3, #16
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	061b      	lsls	r3, r3, #24
 80056ec:	4933      	ldr	r1, [pc, #204]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056f2:	4b33      	ldr	r3, [pc, #204]	; (80057c0 <HAL_RCC_OscConfig+0x4dc>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fc f946 	bl	8001988 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005700:	f7fc f942 	bl	8001988 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e04d      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005712:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0x41c>
 800571e:	e045      	b.n	80057ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005720:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <HAL_RCC_OscConfig+0x4dc>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005726:	f7fc f92f 	bl	8001988 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572e:	f7fc f92b 	bl	8001988 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e036      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005740:	4b1e      	ldr	r3, [pc, #120]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x44a>
 800574c:	e02e      	b.n	80057ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e029      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800575a:	4b18      	ldr	r3, [pc, #96]	; (80057bc <HAL_RCC_OscConfig+0x4d8>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	429a      	cmp	r2, r3
 800576c:	d11c      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005778:	429a      	cmp	r2, r3
 800577a:	d115      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005782:	4013      	ands	r3, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005788:	4293      	cmp	r3, r2
 800578a:	d10d      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d106      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d001      	beq.n	80057ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40007000 	.word	0x40007000
 80057bc:	40023800 	.word	0x40023800
 80057c0:	42470060 	.word	0x42470060

080057c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0cc      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057d8:	4b68      	ldr	r3, [pc, #416]	; (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d90c      	bls.n	8005800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e6:	4b65      	ldr	r3, [pc, #404]	; (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	4b63      	ldr	r3, [pc, #396]	; (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0b8      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005818:	4b59      	ldr	r3, [pc, #356]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4a58      	ldr	r2, [pc, #352]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005830:	4b53      	ldr	r3, [pc, #332]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4a52      	ldr	r2, [pc, #328]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800583a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800583c:	4b50      	ldr	r3, [pc, #320]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	494d      	ldr	r1, [pc, #308]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d044      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d107      	bne.n	8005872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005862:	4b47      	ldr	r3, [pc, #284]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d119      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e07f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d003      	beq.n	8005882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800587e:	2b03      	cmp	r3, #3
 8005880:	d107      	bne.n	8005892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005882:	4b3f      	ldr	r3, [pc, #252]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e06f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005892:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e067      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058a2:	4b37      	ldr	r3, [pc, #220]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 0203 	bic.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4934      	ldr	r1, [pc, #208]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b4:	f7fc f868 	bl	8001988 <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058bc:	f7fc f864 	bl	8001988 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e04f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d2:	4b2b      	ldr	r3, [pc, #172]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 020c 	and.w	r2, r3, #12
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d1eb      	bne.n	80058bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058e4:	4b25      	ldr	r3, [pc, #148]	; (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d20c      	bcs.n	800590c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f2:	4b22      	ldr	r3, [pc, #136]	; (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fa:	4b20      	ldr	r3, [pc, #128]	; (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d001      	beq.n	800590c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e032      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005918:	4b19      	ldr	r3, [pc, #100]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4916      	ldr	r1, [pc, #88]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005936:	4b12      	ldr	r3, [pc, #72]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	490e      	ldr	r1, [pc, #56]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800594a:	f000 f821 	bl	8005990 <HAL_RCC_GetSysClockFreq>
 800594e:	4601      	mov	r1, r0
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	4a0a      	ldr	r2, [pc, #40]	; (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 800595c:	5cd3      	ldrb	r3, [r2, r3]
 800595e:	fa21 f303 	lsr.w	r3, r1, r3
 8005962:	4a09      	ldr	r2, [pc, #36]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005966:	4b09      	ldr	r3, [pc, #36]	; (800598c <HAL_RCC_ClockConfig+0x1c8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f7fb ffc8 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40023c00 	.word	0x40023c00
 8005980:	40023800 	.word	0x40023800
 8005984:	080084f0 	.word	0x080084f0
 8005988:	20000000 	.word	0x20000000
 800598c:	20000004 	.word	0x20000004

08005990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	607b      	str	r3, [r7, #4]
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	2300      	movs	r3, #0
 80059a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059a6:	4b63      	ldr	r3, [pc, #396]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d007      	beq.n	80059c2 <HAL_RCC_GetSysClockFreq+0x32>
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d008      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0x38>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f040 80b4 	bne.w	8005b24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059bc:	4b5e      	ldr	r3, [pc, #376]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80059be:	60bb      	str	r3, [r7, #8]
       break;
 80059c0:	e0b3      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059c2:	4b5e      	ldr	r3, [pc, #376]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80059c4:	60bb      	str	r3, [r7, #8]
      break;
 80059c6:	e0b0      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059c8:	4b5a      	ldr	r3, [pc, #360]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059d2:	4b58      	ldr	r3, [pc, #352]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d04a      	beq.n	8005a74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059de:	4b55      	ldr	r3, [pc, #340]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	099b      	lsrs	r3, r3, #6
 80059e4:	f04f 0400 	mov.w	r4, #0
 80059e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	ea03 0501 	and.w	r5, r3, r1
 80059f4:	ea04 0602 	and.w	r6, r4, r2
 80059f8:	4629      	mov	r1, r5
 80059fa:	4632      	mov	r2, r6
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	f04f 0400 	mov.w	r4, #0
 8005a04:	0154      	lsls	r4, r2, #5
 8005a06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a0a:	014b      	lsls	r3, r1, #5
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4622      	mov	r2, r4
 8005a10:	1b49      	subs	r1, r1, r5
 8005a12:	eb62 0206 	sbc.w	r2, r2, r6
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	f04f 0400 	mov.w	r4, #0
 8005a1e:	0194      	lsls	r4, r2, #6
 8005a20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a24:	018b      	lsls	r3, r1, #6
 8005a26:	1a5b      	subs	r3, r3, r1
 8005a28:	eb64 0402 	sbc.w	r4, r4, r2
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	00e2      	lsls	r2, r4, #3
 8005a36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a3a:	00d9      	lsls	r1, r3, #3
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4614      	mov	r4, r2
 8005a40:	195b      	adds	r3, r3, r5
 8005a42:	eb44 0406 	adc.w	r4, r4, r6
 8005a46:	f04f 0100 	mov.w	r1, #0
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	0262      	lsls	r2, r4, #9
 8005a50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005a54:	0259      	lsls	r1, r3, #9
 8005a56:	460b      	mov	r3, r1
 8005a58:	4614      	mov	r4, r2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f04f 0400 	mov.w	r4, #0
 8005a64:	461a      	mov	r2, r3
 8005a66:	4623      	mov	r3, r4
 8005a68:	f7fa fc0a 	bl	8000280 <__aeabi_uldivmod>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e049      	b.n	8005b08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a74:	4b2f      	ldr	r3, [pc, #188]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	099b      	lsrs	r3, r3, #6
 8005a7a:	f04f 0400 	mov.w	r4, #0
 8005a7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	ea03 0501 	and.w	r5, r3, r1
 8005a8a:	ea04 0602 	and.w	r6, r4, r2
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4632      	mov	r2, r6
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	f04f 0400 	mov.w	r4, #0
 8005a9a:	0154      	lsls	r4, r2, #5
 8005a9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005aa0:	014b      	lsls	r3, r1, #5
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	1b49      	subs	r1, r1, r5
 8005aa8:	eb62 0206 	sbc.w	r2, r2, r6
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	f04f 0400 	mov.w	r4, #0
 8005ab4:	0194      	lsls	r4, r2, #6
 8005ab6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005aba:	018b      	lsls	r3, r1, #6
 8005abc:	1a5b      	subs	r3, r3, r1
 8005abe:	eb64 0402 	sbc.w	r4, r4, r2
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	00e2      	lsls	r2, r4, #3
 8005acc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ad0:	00d9      	lsls	r1, r3, #3
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	195b      	adds	r3, r3, r5
 8005ad8:	eb44 0406 	adc.w	r4, r4, r6
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	02a2      	lsls	r2, r4, #10
 8005ae6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005aea:	0299      	lsls	r1, r3, #10
 8005aec:	460b      	mov	r3, r1
 8005aee:	4614      	mov	r4, r2
 8005af0:	4618      	mov	r0, r3
 8005af2:	4621      	mov	r1, r4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f04f 0400 	mov.w	r4, #0
 8005afa:	461a      	mov	r2, r3
 8005afc:	4623      	mov	r3, r4
 8005afe:	f7fa fbbf 	bl	8000280 <__aeabi_uldivmod>
 8005b02:	4603      	mov	r3, r0
 8005b04:	460c      	mov	r4, r1
 8005b06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	3301      	adds	r3, #1
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	60bb      	str	r3, [r7, #8]
      break;
 8005b22:	e002      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b24:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b26:	60bb      	str	r3, [r7, #8]
      break;
 8005b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b34:	40023800 	.word	0x40023800
 8005b38:	00f42400 	.word	0x00f42400
 8005b3c:	007a1200 	.word	0x007a1200

08005b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b44:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b46:	681b      	ldr	r3, [r3, #0]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000000 	.word	0x20000000

08005b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b5c:	f7ff fff0 	bl	8005b40 <HAL_RCC_GetHCLKFreq>
 8005b60:	4601      	mov	r1, r0
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0a9b      	lsrs	r3, r3, #10
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4a03      	ldr	r2, [pc, #12]	; (8005b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b6e:	5cd3      	ldrb	r3, [r2, r3]
 8005b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	08008500 	.word	0x08008500

08005b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b84:	f7ff ffdc 	bl	8005b40 <HAL_RCC_GetHCLKFreq>
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	0b5b      	lsrs	r3, r3, #13
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	4a03      	ldr	r2, [pc, #12]	; (8005ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b96:	5cd3      	ldrb	r3, [r2, r3]
 8005b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	08008500 	.word	0x08008500

08005ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e03f      	b.n	8005c3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb fd70 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2224      	movs	r2, #36	; 0x24
 8005bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f829 	bl	8005c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c86:	f023 030c 	bic.w	r3, r3, #12
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	430b      	orrs	r3, r1
 8005c92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb2:	f040 818b 	bne.w	8005fcc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4ac1      	ldr	r2, [pc, #772]	; (8005fc0 <UART_SetConfig+0x37c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d005      	beq.n	8005ccc <UART_SetConfig+0x88>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4abf      	ldr	r2, [pc, #764]	; (8005fc4 <UART_SetConfig+0x380>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	f040 80bd 	bne.w	8005e46 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7ff ff58 	bl	8005b80 <HAL_RCC_GetPCLK2Freq>
 8005cd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	461d      	mov	r5, r3
 8005cd6:	f04f 0600 	mov.w	r6, #0
 8005cda:	46a8      	mov	r8, r5
 8005cdc:	46b1      	mov	r9, r6
 8005cde:	eb18 0308 	adds.w	r3, r8, r8
 8005ce2:	eb49 0409 	adc.w	r4, r9, r9
 8005ce6:	4698      	mov	r8, r3
 8005ce8:	46a1      	mov	r9, r4
 8005cea:	eb18 0805 	adds.w	r8, r8, r5
 8005cee:	eb49 0906 	adc.w	r9, r9, r6
 8005cf2:	f04f 0100 	mov.w	r1, #0
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d06:	4688      	mov	r8, r1
 8005d08:	4691      	mov	r9, r2
 8005d0a:	eb18 0005 	adds.w	r0, r8, r5
 8005d0e:	eb49 0106 	adc.w	r1, r9, r6
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	461d      	mov	r5, r3
 8005d18:	f04f 0600 	mov.w	r6, #0
 8005d1c:	196b      	adds	r3, r5, r5
 8005d1e:	eb46 0406 	adc.w	r4, r6, r6
 8005d22:	461a      	mov	r2, r3
 8005d24:	4623      	mov	r3, r4
 8005d26:	f7fa faab 	bl	8000280 <__aeabi_uldivmod>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	461a      	mov	r2, r3
 8005d30:	4ba5      	ldr	r3, [pc, #660]	; (8005fc8 <UART_SetConfig+0x384>)
 8005d32:	fba3 2302 	umull	r2, r3, r3, r2
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	461d      	mov	r5, r3
 8005d40:	f04f 0600 	mov.w	r6, #0
 8005d44:	46a9      	mov	r9, r5
 8005d46:	46b2      	mov	sl, r6
 8005d48:	eb19 0309 	adds.w	r3, r9, r9
 8005d4c:	eb4a 040a 	adc.w	r4, sl, sl
 8005d50:	4699      	mov	r9, r3
 8005d52:	46a2      	mov	sl, r4
 8005d54:	eb19 0905 	adds.w	r9, r9, r5
 8005d58:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d5c:	f04f 0100 	mov.w	r1, #0
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d70:	4689      	mov	r9, r1
 8005d72:	4692      	mov	sl, r2
 8005d74:	eb19 0005 	adds.w	r0, r9, r5
 8005d78:	eb4a 0106 	adc.w	r1, sl, r6
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	461d      	mov	r5, r3
 8005d82:	f04f 0600 	mov.w	r6, #0
 8005d86:	196b      	adds	r3, r5, r5
 8005d88:	eb46 0406 	adc.w	r4, r6, r6
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4623      	mov	r3, r4
 8005d90:	f7fa fa76 	bl	8000280 <__aeabi_uldivmod>
 8005d94:	4603      	mov	r3, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4b8b      	ldr	r3, [pc, #556]	; (8005fc8 <UART_SetConfig+0x384>)
 8005d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	2164      	movs	r1, #100	; 0x64
 8005da4:	fb01 f303 	mul.w	r3, r1, r3
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	3332      	adds	r3, #50	; 0x32
 8005dae:	4a86      	ldr	r2, [pc, #536]	; (8005fc8 <UART_SetConfig+0x384>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dbc:	4498      	add	r8, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	461d      	mov	r5, r3
 8005dc2:	f04f 0600 	mov.w	r6, #0
 8005dc6:	46a9      	mov	r9, r5
 8005dc8:	46b2      	mov	sl, r6
 8005dca:	eb19 0309 	adds.w	r3, r9, r9
 8005dce:	eb4a 040a 	adc.w	r4, sl, sl
 8005dd2:	4699      	mov	r9, r3
 8005dd4:	46a2      	mov	sl, r4
 8005dd6:	eb19 0905 	adds.w	r9, r9, r5
 8005dda:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dde:	f04f 0100 	mov.w	r1, #0
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005df2:	4689      	mov	r9, r1
 8005df4:	4692      	mov	sl, r2
 8005df6:	eb19 0005 	adds.w	r0, r9, r5
 8005dfa:	eb4a 0106 	adc.w	r1, sl, r6
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	461d      	mov	r5, r3
 8005e04:	f04f 0600 	mov.w	r6, #0
 8005e08:	196b      	adds	r3, r5, r5
 8005e0a:	eb46 0406 	adc.w	r4, r6, r6
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4623      	mov	r3, r4
 8005e12:	f7fa fa35 	bl	8000280 <__aeabi_uldivmod>
 8005e16:	4603      	mov	r3, r0
 8005e18:	460c      	mov	r4, r1
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	4b6a      	ldr	r3, [pc, #424]	; (8005fc8 <UART_SetConfig+0x384>)
 8005e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e22:	095b      	lsrs	r3, r3, #5
 8005e24:	2164      	movs	r1, #100	; 0x64
 8005e26:	fb01 f303 	mul.w	r3, r1, r3
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	3332      	adds	r3, #50	; 0x32
 8005e30:	4a65      	ldr	r2, [pc, #404]	; (8005fc8 <UART_SetConfig+0x384>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	f003 0207 	and.w	r2, r3, #7
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4442      	add	r2, r8
 8005e42:	609a      	str	r2, [r3, #8]
 8005e44:	e26f      	b.n	8006326 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e46:	f7ff fe87 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8005e4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	461d      	mov	r5, r3
 8005e50:	f04f 0600 	mov.w	r6, #0
 8005e54:	46a8      	mov	r8, r5
 8005e56:	46b1      	mov	r9, r6
 8005e58:	eb18 0308 	adds.w	r3, r8, r8
 8005e5c:	eb49 0409 	adc.w	r4, r9, r9
 8005e60:	4698      	mov	r8, r3
 8005e62:	46a1      	mov	r9, r4
 8005e64:	eb18 0805 	adds.w	r8, r8, r5
 8005e68:	eb49 0906 	adc.w	r9, r9, r6
 8005e6c:	f04f 0100 	mov.w	r1, #0
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e80:	4688      	mov	r8, r1
 8005e82:	4691      	mov	r9, r2
 8005e84:	eb18 0005 	adds.w	r0, r8, r5
 8005e88:	eb49 0106 	adc.w	r1, r9, r6
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	461d      	mov	r5, r3
 8005e92:	f04f 0600 	mov.w	r6, #0
 8005e96:	196b      	adds	r3, r5, r5
 8005e98:	eb46 0406 	adc.w	r4, r6, r6
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4623      	mov	r3, r4
 8005ea0:	f7fa f9ee 	bl	8000280 <__aeabi_uldivmod>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4b47      	ldr	r3, [pc, #284]	; (8005fc8 <UART_SetConfig+0x384>)
 8005eac:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	461d      	mov	r5, r3
 8005eba:	f04f 0600 	mov.w	r6, #0
 8005ebe:	46a9      	mov	r9, r5
 8005ec0:	46b2      	mov	sl, r6
 8005ec2:	eb19 0309 	adds.w	r3, r9, r9
 8005ec6:	eb4a 040a 	adc.w	r4, sl, sl
 8005eca:	4699      	mov	r9, r3
 8005ecc:	46a2      	mov	sl, r4
 8005ece:	eb19 0905 	adds.w	r9, r9, r5
 8005ed2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ed6:	f04f 0100 	mov.w	r1, #0
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ee2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ee6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eea:	4689      	mov	r9, r1
 8005eec:	4692      	mov	sl, r2
 8005eee:	eb19 0005 	adds.w	r0, r9, r5
 8005ef2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	461d      	mov	r5, r3
 8005efc:	f04f 0600 	mov.w	r6, #0
 8005f00:	196b      	adds	r3, r5, r5
 8005f02:	eb46 0406 	adc.w	r4, r6, r6
 8005f06:	461a      	mov	r2, r3
 8005f08:	4623      	mov	r3, r4
 8005f0a:	f7fa f9b9 	bl	8000280 <__aeabi_uldivmod>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	460c      	mov	r4, r1
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b2c      	ldr	r3, [pc, #176]	; (8005fc8 <UART_SetConfig+0x384>)
 8005f16:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	2164      	movs	r1, #100	; 0x64
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	3332      	adds	r3, #50	; 0x32
 8005f28:	4a27      	ldr	r2, [pc, #156]	; (8005fc8 <UART_SetConfig+0x384>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f36:	4498      	add	r8, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	461d      	mov	r5, r3
 8005f3c:	f04f 0600 	mov.w	r6, #0
 8005f40:	46a9      	mov	r9, r5
 8005f42:	46b2      	mov	sl, r6
 8005f44:	eb19 0309 	adds.w	r3, r9, r9
 8005f48:	eb4a 040a 	adc.w	r4, sl, sl
 8005f4c:	4699      	mov	r9, r3
 8005f4e:	46a2      	mov	sl, r4
 8005f50:	eb19 0905 	adds.w	r9, r9, r5
 8005f54:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f58:	f04f 0100 	mov.w	r1, #0
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f6c:	4689      	mov	r9, r1
 8005f6e:	4692      	mov	sl, r2
 8005f70:	eb19 0005 	adds.w	r0, r9, r5
 8005f74:	eb4a 0106 	adc.w	r1, sl, r6
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	461d      	mov	r5, r3
 8005f7e:	f04f 0600 	mov.w	r6, #0
 8005f82:	196b      	adds	r3, r5, r5
 8005f84:	eb46 0406 	adc.w	r4, r6, r6
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4623      	mov	r3, r4
 8005f8c:	f7fa f978 	bl	8000280 <__aeabi_uldivmod>
 8005f90:	4603      	mov	r3, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	461a      	mov	r2, r3
 8005f96:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <UART_SetConfig+0x384>)
 8005f98:	fba3 1302 	umull	r1, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	2164      	movs	r1, #100	; 0x64
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	3332      	adds	r3, #50	; 0x32
 8005faa:	4a07      	ldr	r2, [pc, #28]	; (8005fc8 <UART_SetConfig+0x384>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	f003 0207 	and.w	r2, r3, #7
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4442      	add	r2, r8
 8005fbc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005fbe:	e1b2      	b.n	8006326 <UART_SetConfig+0x6e2>
 8005fc0:	40011000 	.word	0x40011000
 8005fc4:	40011400 	.word	0x40011400
 8005fc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4ad7      	ldr	r2, [pc, #860]	; (8006330 <UART_SetConfig+0x6ec>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d005      	beq.n	8005fe2 <UART_SetConfig+0x39e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4ad6      	ldr	r2, [pc, #856]	; (8006334 <UART_SetConfig+0x6f0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	f040 80d1 	bne.w	8006184 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fe2:	f7ff fdcd 	bl	8005b80 <HAL_RCC_GetPCLK2Freq>
 8005fe6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	469a      	mov	sl, r3
 8005fec:	f04f 0b00 	mov.w	fp, #0
 8005ff0:	46d0      	mov	r8, sl
 8005ff2:	46d9      	mov	r9, fp
 8005ff4:	eb18 0308 	adds.w	r3, r8, r8
 8005ff8:	eb49 0409 	adc.w	r4, r9, r9
 8005ffc:	4698      	mov	r8, r3
 8005ffe:	46a1      	mov	r9, r4
 8006000:	eb18 080a 	adds.w	r8, r8, sl
 8006004:	eb49 090b 	adc.w	r9, r9, fp
 8006008:	f04f 0100 	mov.w	r1, #0
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006014:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006018:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800601c:	4688      	mov	r8, r1
 800601e:	4691      	mov	r9, r2
 8006020:	eb1a 0508 	adds.w	r5, sl, r8
 8006024:	eb4b 0609 	adc.w	r6, fp, r9
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	4619      	mov	r1, r3
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	f04f 0400 	mov.w	r4, #0
 800603a:	0094      	lsls	r4, r2, #2
 800603c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006040:	008b      	lsls	r3, r1, #2
 8006042:	461a      	mov	r2, r3
 8006044:	4623      	mov	r3, r4
 8006046:	4628      	mov	r0, r5
 8006048:	4631      	mov	r1, r6
 800604a:	f7fa f919 	bl	8000280 <__aeabi_uldivmod>
 800604e:	4603      	mov	r3, r0
 8006050:	460c      	mov	r4, r1
 8006052:	461a      	mov	r2, r3
 8006054:	4bb8      	ldr	r3, [pc, #736]	; (8006338 <UART_SetConfig+0x6f4>)
 8006056:	fba3 2302 	umull	r2, r3, r3, r2
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	469b      	mov	fp, r3
 8006064:	f04f 0c00 	mov.w	ip, #0
 8006068:	46d9      	mov	r9, fp
 800606a:	46e2      	mov	sl, ip
 800606c:	eb19 0309 	adds.w	r3, r9, r9
 8006070:	eb4a 040a 	adc.w	r4, sl, sl
 8006074:	4699      	mov	r9, r3
 8006076:	46a2      	mov	sl, r4
 8006078:	eb19 090b 	adds.w	r9, r9, fp
 800607c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800608c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006090:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006094:	4689      	mov	r9, r1
 8006096:	4692      	mov	sl, r2
 8006098:	eb1b 0509 	adds.w	r5, fp, r9
 800609c:	eb4c 060a 	adc.w	r6, ip, sl
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4619      	mov	r1, r3
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	f04f 0400 	mov.w	r4, #0
 80060b2:	0094      	lsls	r4, r2, #2
 80060b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060b8:	008b      	lsls	r3, r1, #2
 80060ba:	461a      	mov	r2, r3
 80060bc:	4623      	mov	r3, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	4631      	mov	r1, r6
 80060c2:	f7fa f8dd 	bl	8000280 <__aeabi_uldivmod>
 80060c6:	4603      	mov	r3, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	461a      	mov	r2, r3
 80060cc:	4b9a      	ldr	r3, [pc, #616]	; (8006338 <UART_SetConfig+0x6f4>)
 80060ce:	fba3 1302 	umull	r1, r3, r3, r2
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	2164      	movs	r1, #100	; 0x64
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	3332      	adds	r3, #50	; 0x32
 80060e0:	4a95      	ldr	r2, [pc, #596]	; (8006338 <UART_SetConfig+0x6f4>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ec:	4498      	add	r8, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	469b      	mov	fp, r3
 80060f2:	f04f 0c00 	mov.w	ip, #0
 80060f6:	46d9      	mov	r9, fp
 80060f8:	46e2      	mov	sl, ip
 80060fa:	eb19 0309 	adds.w	r3, r9, r9
 80060fe:	eb4a 040a 	adc.w	r4, sl, sl
 8006102:	4699      	mov	r9, r3
 8006104:	46a2      	mov	sl, r4
 8006106:	eb19 090b 	adds.w	r9, r9, fp
 800610a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800610e:	f04f 0100 	mov.w	r1, #0
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800611a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800611e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006122:	4689      	mov	r9, r1
 8006124:	4692      	mov	sl, r2
 8006126:	eb1b 0509 	adds.w	r5, fp, r9
 800612a:	eb4c 060a 	adc.w	r6, ip, sl
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	4619      	mov	r1, r3
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	f04f 0400 	mov.w	r4, #0
 8006140:	0094      	lsls	r4, r2, #2
 8006142:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006146:	008b      	lsls	r3, r1, #2
 8006148:	461a      	mov	r2, r3
 800614a:	4623      	mov	r3, r4
 800614c:	4628      	mov	r0, r5
 800614e:	4631      	mov	r1, r6
 8006150:	f7fa f896 	bl	8000280 <__aeabi_uldivmod>
 8006154:	4603      	mov	r3, r0
 8006156:	460c      	mov	r4, r1
 8006158:	461a      	mov	r2, r3
 800615a:	4b77      	ldr	r3, [pc, #476]	; (8006338 <UART_SetConfig+0x6f4>)
 800615c:	fba3 1302 	umull	r1, r3, r3, r2
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	2164      	movs	r1, #100	; 0x64
 8006164:	fb01 f303 	mul.w	r3, r1, r3
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	3332      	adds	r3, #50	; 0x32
 800616e:	4a72      	ldr	r2, [pc, #456]	; (8006338 <UART_SetConfig+0x6f4>)
 8006170:	fba2 2303 	umull	r2, r3, r2, r3
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	f003 020f 	and.w	r2, r3, #15
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4442      	add	r2, r8
 8006180:	609a      	str	r2, [r3, #8]
 8006182:	e0d0      	b.n	8006326 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006184:	f7ff fce8 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8006188:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	469a      	mov	sl, r3
 800618e:	f04f 0b00 	mov.w	fp, #0
 8006192:	46d0      	mov	r8, sl
 8006194:	46d9      	mov	r9, fp
 8006196:	eb18 0308 	adds.w	r3, r8, r8
 800619a:	eb49 0409 	adc.w	r4, r9, r9
 800619e:	4698      	mov	r8, r3
 80061a0:	46a1      	mov	r9, r4
 80061a2:	eb18 080a 	adds.w	r8, r8, sl
 80061a6:	eb49 090b 	adc.w	r9, r9, fp
 80061aa:	f04f 0100 	mov.w	r1, #0
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061be:	4688      	mov	r8, r1
 80061c0:	4691      	mov	r9, r2
 80061c2:	eb1a 0508 	adds.w	r5, sl, r8
 80061c6:	eb4b 0609 	adc.w	r6, fp, r9
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	4619      	mov	r1, r3
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	f04f 0400 	mov.w	r4, #0
 80061dc:	0094      	lsls	r4, r2, #2
 80061de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061e2:	008b      	lsls	r3, r1, #2
 80061e4:	461a      	mov	r2, r3
 80061e6:	4623      	mov	r3, r4
 80061e8:	4628      	mov	r0, r5
 80061ea:	4631      	mov	r1, r6
 80061ec:	f7fa f848 	bl	8000280 <__aeabi_uldivmod>
 80061f0:	4603      	mov	r3, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	461a      	mov	r2, r3
 80061f6:	4b50      	ldr	r3, [pc, #320]	; (8006338 <UART_SetConfig+0x6f4>)
 80061f8:	fba3 2302 	umull	r2, r3, r3, r2
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	469b      	mov	fp, r3
 8006206:	f04f 0c00 	mov.w	ip, #0
 800620a:	46d9      	mov	r9, fp
 800620c:	46e2      	mov	sl, ip
 800620e:	eb19 0309 	adds.w	r3, r9, r9
 8006212:	eb4a 040a 	adc.w	r4, sl, sl
 8006216:	4699      	mov	r9, r3
 8006218:	46a2      	mov	sl, r4
 800621a:	eb19 090b 	adds.w	r9, r9, fp
 800621e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006222:	f04f 0100 	mov.w	r1, #0
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800622e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006232:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006236:	4689      	mov	r9, r1
 8006238:	4692      	mov	sl, r2
 800623a:	eb1b 0509 	adds.w	r5, fp, r9
 800623e:	eb4c 060a 	adc.w	r6, ip, sl
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4619      	mov	r1, r3
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	f04f 0400 	mov.w	r4, #0
 8006254:	0094      	lsls	r4, r2, #2
 8006256:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800625a:	008b      	lsls	r3, r1, #2
 800625c:	461a      	mov	r2, r3
 800625e:	4623      	mov	r3, r4
 8006260:	4628      	mov	r0, r5
 8006262:	4631      	mov	r1, r6
 8006264:	f7fa f80c 	bl	8000280 <__aeabi_uldivmod>
 8006268:	4603      	mov	r3, r0
 800626a:	460c      	mov	r4, r1
 800626c:	461a      	mov	r2, r3
 800626e:	4b32      	ldr	r3, [pc, #200]	; (8006338 <UART_SetConfig+0x6f4>)
 8006270:	fba3 1302 	umull	r1, r3, r3, r2
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	2164      	movs	r1, #100	; 0x64
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	3332      	adds	r3, #50	; 0x32
 8006282:	4a2d      	ldr	r2, [pc, #180]	; (8006338 <UART_SetConfig+0x6f4>)
 8006284:	fba2 2303 	umull	r2, r3, r2, r3
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800628e:	4498      	add	r8, r3
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	469b      	mov	fp, r3
 8006294:	f04f 0c00 	mov.w	ip, #0
 8006298:	46d9      	mov	r9, fp
 800629a:	46e2      	mov	sl, ip
 800629c:	eb19 0309 	adds.w	r3, r9, r9
 80062a0:	eb4a 040a 	adc.w	r4, sl, sl
 80062a4:	4699      	mov	r9, r3
 80062a6:	46a2      	mov	sl, r4
 80062a8:	eb19 090b 	adds.w	r9, r9, fp
 80062ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062b0:	f04f 0100 	mov.w	r1, #0
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062c4:	4689      	mov	r9, r1
 80062c6:	4692      	mov	sl, r2
 80062c8:	eb1b 0509 	adds.w	r5, fp, r9
 80062cc:	eb4c 060a 	adc.w	r6, ip, sl
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4619      	mov	r1, r3
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	f04f 0400 	mov.w	r4, #0
 80062e2:	0094      	lsls	r4, r2, #2
 80062e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062e8:	008b      	lsls	r3, r1, #2
 80062ea:	461a      	mov	r2, r3
 80062ec:	4623      	mov	r3, r4
 80062ee:	4628      	mov	r0, r5
 80062f0:	4631      	mov	r1, r6
 80062f2:	f7f9 ffc5 	bl	8000280 <__aeabi_uldivmod>
 80062f6:	4603      	mov	r3, r0
 80062f8:	460c      	mov	r4, r1
 80062fa:	461a      	mov	r2, r3
 80062fc:	4b0e      	ldr	r3, [pc, #56]	; (8006338 <UART_SetConfig+0x6f4>)
 80062fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	2164      	movs	r1, #100	; 0x64
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	3332      	adds	r3, #50	; 0x32
 8006310:	4a09      	ldr	r2, [pc, #36]	; (8006338 <UART_SetConfig+0x6f4>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	f003 020f 	and.w	r2, r3, #15
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4442      	add	r2, r8
 8006322:	609a      	str	r2, [r3, #8]
}
 8006324:	e7ff      	b.n	8006326 <UART_SetConfig+0x6e2>
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006330:	40011000 	.word	0x40011000
 8006334:	40011400 	.word	0x40011400
 8006338:	51eb851f 	.word	0x51eb851f

0800633c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800634a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800634e:	2b84      	cmp	r3, #132	; 0x84
 8006350:	d005      	beq.n	800635e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006352:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	3303      	adds	r3, #3
 800635c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800635e:	68fb      	ldr	r3, [r7, #12]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006370:	f000 fc60 	bl	8006c34 <vTaskStartScheduler>
  
  return osOK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	bd80      	pop	{r7, pc}

0800637a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800637a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637c:	b089      	sub	sp, #36	; 0x24
 800637e:	af04      	add	r7, sp, #16
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d020      	beq.n	80063ce <osThreadCreate+0x54>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01c      	beq.n	80063ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685c      	ldr	r4, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681d      	ldr	r5, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691e      	ldr	r6, [r3, #16]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff ffc8 	bl	800633c <makeFreeRtosPriority>
 80063ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063b6:	9202      	str	r2, [sp, #8]
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	9100      	str	r1, [sp, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	4632      	mov	r2, r6
 80063c0:	4629      	mov	r1, r5
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 f8d9 	bl	800657a <xTaskCreateStatic>
 80063c8:	4603      	mov	r3, r0
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e01c      	b.n	8006408 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685c      	ldr	r4, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063da:	b29e      	uxth	r6, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff ffaa 	bl	800633c <makeFreeRtosPriority>
 80063e8:	4602      	mov	r2, r0
 80063ea:	f107 030c 	add.w	r3, r7, #12
 80063ee:	9301      	str	r3, [sp, #4]
 80063f0:	9200      	str	r2, [sp, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	4632      	mov	r2, r6
 80063f6:	4629      	mov	r1, r5
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 f917 	bl	800662c <xTaskCreate>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b01      	cmp	r3, #1
 8006402:	d001      	beq.n	8006408 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	e000      	b.n	800640a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006408:	68fb      	ldr	r3, [r7, #12]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006412 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f103 0208 	add.w	r2, r3, #8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f04f 32ff 	mov.w	r2, #4294967295
 800642a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f103 0208 	add.w	r2, r3, #8
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f103 0208 	add.w	r2, r3, #8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d103      	bne.n	80064d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e00c      	b.n	80064ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3308      	adds	r3, #8
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	e002      	b.n	80064e2 <vListInsert+0x2e>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d2f6      	bcs.n	80064dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	601a      	str	r2, [r3, #0]
}
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6892      	ldr	r2, [r2, #8]
 800653c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6852      	ldr	r2, [r2, #4]
 8006546:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	429a      	cmp	r2, r3
 8006550:	d103      	bne.n	800655a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	1e5a      	subs	r2, r3, #1
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800657a:	b580      	push	{r7, lr}
 800657c:	b08e      	sub	sp, #56	; 0x38
 800657e:	af04      	add	r7, sp, #16
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	623b      	str	r3, [r7, #32]
 80065a0:	e7fe      	b.n	80065a0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <xTaskCreateStatic+0x42>
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	e7fe      	b.n	80065ba <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065bc:	2354      	movs	r3, #84	; 0x54
 80065be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b54      	cmp	r3, #84	; 0x54
 80065c4:	d009      	beq.n	80065da <xTaskCreateStatic+0x60>
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	e7fe      	b.n	80065d8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01e      	beq.n	800661e <xTaskCreateStatic+0xa4>
 80065e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d01b      	beq.n	800661e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065f8:	2300      	movs	r3, #0
 80065fa:	9303      	str	r3, [sp, #12]
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	9302      	str	r3, [sp, #8]
 8006600:	f107 0314 	add.w	r3, r7, #20
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 f850 	bl	80066b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006618:	f000 f8cc 	bl	80067b4 <prvAddNewTaskToReadyList>
 800661c:	e001      	b.n	8006622 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006622:	697b      	ldr	r3, [r7, #20]
	}
 8006624:	4618      	mov	r0, r3
 8006626:	3728      	adds	r7, #40	; 0x28
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08c      	sub	sp, #48	; 0x30
 8006630:	af04      	add	r7, sp, #16
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4618      	mov	r0, r3
 8006642:	f001 f887 	bl	8007754 <pvPortMalloc>
 8006646:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00e      	beq.n	800666c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800664e:	2054      	movs	r0, #84	; 0x54
 8006650:	f001 f880 	bl	8007754 <pvPortMalloc>
 8006654:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	631a      	str	r2, [r3, #48]	; 0x30
 8006662:	e005      	b.n	8006670 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006664:	6978      	ldr	r0, [r7, #20]
 8006666:	f001 f937 	bl	80078d8 <vPortFree>
 800666a:	e001      	b.n	8006670 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d017      	beq.n	80066a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800667e:	88fa      	ldrh	r2, [r7, #6]
 8006680:	2300      	movs	r3, #0
 8006682:	9303      	str	r3, [sp, #12]
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	9302      	str	r3, [sp, #8]
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 f80e 	bl	80066b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800669a:	69f8      	ldr	r0, [r7, #28]
 800669c:	f000 f88a 	bl	80067b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066a0:	2301      	movs	r3, #1
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e002      	b.n	80066ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066a6:	f04f 33ff 	mov.w	r3, #4294967295
 80066aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066ac:	69bb      	ldr	r3, [r7, #24]
	}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b088      	sub	sp, #32
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066ce:	3b01      	subs	r3, #1
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f023 0307 	bic.w	r3, r3, #7
 80066dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d009      	beq.n	80066fc <prvInitialiseNewTask+0x46>
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	e7fe      	b.n	80066fa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066fc:	2300      	movs	r3, #0
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	e012      	b.n	8006728 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	7819      	ldrb	r1, [r3, #0]
 800670a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	4413      	add	r3, r2
 8006710:	3334      	adds	r3, #52	; 0x34
 8006712:	460a      	mov	r2, r1
 8006714:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d006      	beq.n	8006730 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	3301      	adds	r3, #1
 8006726:	61fb      	str	r3, [r7, #28]
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	2b0f      	cmp	r3, #15
 800672c:	d9e9      	bls.n	8006702 <prvInitialiseNewTask+0x4c>
 800672e:	e000      	b.n	8006732 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006730:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	2b06      	cmp	r3, #6
 800673e:	d901      	bls.n	8006744 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006740:	2306      	movs	r3, #6
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006748:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800674e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	2200      	movs	r2, #0
 8006754:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	3304      	adds	r3, #4
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fe79 	bl	8006452 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	3318      	adds	r3, #24
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fe74 	bl	8006452 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	f1c3 0207 	rsb	r2, r3, #7
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	2200      	movs	r2, #0
 8006784:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	69b8      	ldr	r0, [r7, #24]
 8006794:	f000 fdd8 	bl	8007348 <pxPortInitialiseStack>
 8006798:	4602      	mov	r2, r0
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067aa:	bf00      	nop
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067bc:	f000 feee 	bl	800759c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067c0:	4b2a      	ldr	r3, [pc, #168]	; (800686c <prvAddNewTaskToReadyList+0xb8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3301      	adds	r3, #1
 80067c6:	4a29      	ldr	r2, [pc, #164]	; (800686c <prvAddNewTaskToReadyList+0xb8>)
 80067c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067ca:	4b29      	ldr	r3, [pc, #164]	; (8006870 <prvAddNewTaskToReadyList+0xbc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067d2:	4a27      	ldr	r2, [pc, #156]	; (8006870 <prvAddNewTaskToReadyList+0xbc>)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067d8:	4b24      	ldr	r3, [pc, #144]	; (800686c <prvAddNewTaskToReadyList+0xb8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d110      	bne.n	8006802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067e0:	f000 fc6e 	bl	80070c0 <prvInitialiseTaskLists>
 80067e4:	e00d      	b.n	8006802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067e6:	4b23      	ldr	r3, [pc, #140]	; (8006874 <prvAddNewTaskToReadyList+0xc0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067ee:	4b20      	ldr	r3, [pc, #128]	; (8006870 <prvAddNewTaskToReadyList+0xbc>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d802      	bhi.n	8006802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067fc:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <prvAddNewTaskToReadyList+0xbc>)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006802:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <prvAddNewTaskToReadyList+0xc4>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <prvAddNewTaskToReadyList+0xc4>)
 800680a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	2201      	movs	r2, #1
 8006812:	409a      	lsls	r2, r3
 8006814:	4b19      	ldr	r3, [pc, #100]	; (800687c <prvAddNewTaskToReadyList+0xc8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4313      	orrs	r3, r2
 800681a:	4a18      	ldr	r2, [pc, #96]	; (800687c <prvAddNewTaskToReadyList+0xc8>)
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4a15      	ldr	r2, [pc, #84]	; (8006880 <prvAddNewTaskToReadyList+0xcc>)
 800682c:	441a      	add	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3304      	adds	r3, #4
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f7ff fe19 	bl	800646c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800683a:	f000 fedd 	bl	80075f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800683e:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <prvAddNewTaskToReadyList+0xc0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00e      	beq.n	8006864 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006846:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <prvAddNewTaskToReadyList+0xbc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	429a      	cmp	r2, r3
 8006852:	d207      	bcs.n	8006864 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006854:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <prvAddNewTaskToReadyList+0xd0>)
 8006856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000400 	.word	0x20000400
 8006870:	20000300 	.word	0x20000300
 8006874:	2000040c 	.word	0x2000040c
 8006878:	2000041c 	.word	0x2000041c
 800687c:	20000408 	.word	0x20000408
 8006880:	20000304 	.word	0x20000304
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006892:	2300      	movs	r3, #0
 8006894:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <vTaskDelayUntil+0x28>
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	e7fe      	b.n	80068ae <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <vTaskDelayUntil+0x42>
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	e7fe      	b.n	80068c8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80068ca:	4b29      	ldr	r3, [pc, #164]	; (8006970 <vTaskDelayUntil+0xe8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d009      	beq.n	80068e6 <vTaskDelayUntil+0x5e>
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e7fe      	b.n	80068e4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80068e6:	f000 fa03 	bl	8006cf0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80068ea:	4b22      	ldr	r3, [pc, #136]	; (8006974 <vTaskDelayUntil+0xec>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	4413      	add	r3, r2
 80068f8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a3a      	ldr	r2, [r7, #32]
 8006900:	429a      	cmp	r2, r3
 8006902:	d20b      	bcs.n	800691c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	429a      	cmp	r2, r3
 800690c:	d211      	bcs.n	8006932 <vTaskDelayUntil+0xaa>
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	429a      	cmp	r2, r3
 8006914:	d90d      	bls.n	8006932 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8006916:	2301      	movs	r3, #1
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
 800691a:	e00a      	b.n	8006932 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	429a      	cmp	r2, r3
 8006924:	d303      	bcc.n	800692e <vTaskDelayUntil+0xa6>
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	429a      	cmp	r2, r3
 800692c:	d901      	bls.n	8006932 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800692e:	2301      	movs	r3, #1
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	2b00      	cmp	r3, #0
 800693c:	d006      	beq.n	800694c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fc98 	bl	800727c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800694c:	f000 f9de 	bl	8006d0c <xTaskResumeAll>
 8006950:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d107      	bne.n	8006968 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8006958:	4b07      	ldr	r3, [pc, #28]	; (8006978 <vTaskDelayUntil+0xf0>)
 800695a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006968:	bf00      	nop
 800696a:	3728      	adds	r7, #40	; 0x28
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000428 	.word	0x20000428
 8006974:	20000404 	.word	0x20000404
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800698e:	4b13      	ldr	r3, [pc, #76]	; (80069dc <vTaskDelay+0x60>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <vTaskDelay+0x2e>
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	60bb      	str	r3, [r7, #8]
 80069a8:	e7fe      	b.n	80069a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80069aa:	f000 f9a1 	bl	8006cf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069ae:	2100      	movs	r1, #0
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fc63 	bl	800727c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069b6:	f000 f9a9 	bl	8006d0c <xTaskResumeAll>
 80069ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d107      	bne.n	80069d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <vTaskDelay+0x64>)
 80069c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000428 	.word	0x20000428
 80069e0:	e000ed04 	.word	0xe000ed04

080069e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80069ec:	f000 fdd6 	bl	800759c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <vTaskSuspend+0x18>
 80069f6:	4b3c      	ldr	r3, [pc, #240]	; (8006ae8 <vTaskSuspend+0x104>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	e000      	b.n	80069fe <vTaskSuspend+0x1a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff fd8e 	bl	8006526 <uxListRemove>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d115      	bne.n	8006a3c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a14:	4935      	ldr	r1, [pc, #212]	; (8006aec <vTaskSuspend+0x108>)
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <vTaskSuspend+0x58>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	43da      	mvns	r2, r3
 8006a32:	4b2f      	ldr	r3, [pc, #188]	; (8006af0 <vTaskSuspend+0x10c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4013      	ands	r3, r2
 8006a38:	4a2d      	ldr	r2, [pc, #180]	; (8006af0 <vTaskSuspend+0x10c>)
 8006a3a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d004      	beq.n	8006a4e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3318      	adds	r3, #24
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fd6c 	bl	8006526 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3304      	adds	r3, #4
 8006a52:	4619      	mov	r1, r3
 8006a54:	4827      	ldr	r0, [pc, #156]	; (8006af4 <vTaskSuspend+0x110>)
 8006a56:	f7ff fd09 	bl	800646c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d103      	bne.n	8006a6e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006a6e:	f000 fdc3 	bl	80075f8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006a72:	4b21      	ldr	r3, [pc, #132]	; (8006af8 <vTaskSuspend+0x114>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006a7a:	f000 fd8f 	bl	800759c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006a7e:	f000 fbb9 	bl	80071f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006a82:	f000 fdb9 	bl	80075f8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006a86:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <vTaskSuspend+0x104>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d126      	bne.n	8006ade <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8006a90:	4b19      	ldr	r3, [pc, #100]	; (8006af8 <vTaskSuspend+0x114>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d016      	beq.n	8006ac6 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006a98:	4b18      	ldr	r3, [pc, #96]	; (8006afc <vTaskSuspend+0x118>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d009      	beq.n	8006ab4 <vTaskSuspend+0xd0>
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	e7fe      	b.n	8006ab2 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8006ab4:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <vTaskSuspend+0x11c>)
 8006ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ac4:	e00b      	b.n	8006ade <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <vTaskSuspend+0x110>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4b0e      	ldr	r3, [pc, #56]	; (8006b04 <vTaskSuspend+0x120>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d103      	bne.n	8006ada <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8006ad2:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <vTaskSuspend+0x104>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]
	}
 8006ad8:	e001      	b.n	8006ade <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8006ada:	f000 fa7f 	bl	8006fdc <vTaskSwitchContext>
	}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000300 	.word	0x20000300
 8006aec:	20000304 	.word	0x20000304
 8006af0:	20000408 	.word	0x20000408
 8006af4:	200003ec 	.word	0x200003ec
 8006af8:	2000040c 	.word	0x2000040c
 8006afc:	20000428 	.word	0x20000428
 8006b00:	e000ed04 	.word	0xe000ed04
 8006b04:	20000400 	.word	0x20000400

08006b08 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <prvTaskIsTaskSuspended+0x2a>
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e7fe      	b.n	8006b30 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	4a0f      	ldr	r2, [pc, #60]	; (8006b74 <prvTaskIsTaskSuspended+0x6c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d101      	bne.n	8006b40 <prvTaskIsTaskSuspended+0x38>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <prvTaskIsTaskSuspended+0x3a>
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00f      	beq.n	8006b66 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	4a0b      	ldr	r2, [pc, #44]	; (8006b78 <prvTaskIsTaskSuspended+0x70>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00a      	beq.n	8006b66 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <prvTaskIsTaskSuspended+0x54>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <prvTaskIsTaskSuspended+0x56>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8006b62:	2301      	movs	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b66:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006b68:	4618      	mov	r0, r3
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	200003ec 	.word	0x200003ec
 8006b78:	200003c0 	.word	0x200003c0

08006b7c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d109      	bne.n	8006ba2 <vTaskResume+0x26>
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60bb      	str	r3, [r7, #8]
 8006ba0:	e7fe      	b.n	8006ba0 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d039      	beq.n	8006c1c <vTaskResume+0xa0>
 8006ba8:	4b1e      	ldr	r3, [pc, #120]	; (8006c24 <vTaskResume+0xa8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d034      	beq.n	8006c1c <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8006bb2:	f000 fcf3 	bl	800759c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7ff ffa6 	bl	8006b08 <prvTaskIsTaskSuspended>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d02a      	beq.n	8006c18 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fcad 	bl	8006526 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <vTaskResume+0xac>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	4a13      	ldr	r2, [pc, #76]	; (8006c28 <vTaskResume+0xac>)
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4a10      	ldr	r2, [pc, #64]	; (8006c2c <vTaskResume+0xb0>)
 8006bec:	441a      	add	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f7ff fc39 	bl	800646c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <vTaskResume+0xa8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d307      	bcc.n	8006c18 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006c08:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <vTaskResume+0xb4>)
 8006c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006c18:	f000 fcee 	bl	80075f8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20000300 	.word	0x20000300
 8006c28:	20000408 	.word	0x20000408
 8006c2c:	20000304 	.word	0x20000304
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c42:	463a      	mov	r2, r7
 8006c44:	1d39      	adds	r1, r7, #4
 8006c46:	f107 0308 	add.w	r3, r7, #8
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7f9 fd74 	bl	8000738 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	9202      	str	r2, [sp, #8]
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	460a      	mov	r2, r1
 8006c62:	491d      	ldr	r1, [pc, #116]	; (8006cd8 <vTaskStartScheduler+0xa4>)
 8006c64:	481d      	ldr	r0, [pc, #116]	; (8006cdc <vTaskStartScheduler+0xa8>)
 8006c66:	f7ff fc88 	bl	800657a <xTaskCreateStatic>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ce0 <vTaskStartScheduler+0xac>)
 8006c6e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c70:	4b1b      	ldr	r3, [pc, #108]	; (8006ce0 <vTaskStartScheduler+0xac>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e001      	b.n	8006c82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d115      	bne.n	8006cb4 <vTaskStartScheduler+0x80>
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c9a:	4b12      	ldr	r3, [pc, #72]	; (8006ce4 <vTaskStartScheduler+0xb0>)
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ca2:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <vTaskStartScheduler+0xb4>)
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006ca8:	4b10      	ldr	r3, [pc, #64]	; (8006cec <vTaskStartScheduler+0xb8>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cae:	f000 fbd7 	bl	8007460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cb2:	e00d      	b.n	8006cd0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cba:	d109      	bne.n	8006cd0 <vTaskStartScheduler+0x9c>
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e7fe      	b.n	8006cce <vTaskStartScheduler+0x9a>
}
 8006cd0:	bf00      	nop
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	080084e4 	.word	0x080084e4
 8006cdc:	08007091 	.word	0x08007091
 8006ce0:	20000424 	.word	0x20000424
 8006ce4:	20000420 	.word	0x20000420
 8006ce8:	2000040c 	.word	0x2000040c
 8006cec:	20000404 	.word	0x20000404

08006cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006cf4:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <vTaskSuspendAll+0x18>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	4a03      	ldr	r2, [pc, #12]	; (8006d08 <vTaskSuspendAll+0x18>)
 8006cfc:	6013      	str	r3, [r2, #0]
}
 8006cfe:	bf00      	nop
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	20000428 	.word	0x20000428

08006d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d1a:	4b41      	ldr	r3, [pc, #260]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <xTaskResumeAll+0x2a>
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	e7fe      	b.n	8006d34 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d36:	f000 fc31 	bl	800759c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d3a:	4b39      	ldr	r3, [pc, #228]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4a37      	ldr	r2, [pc, #220]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d44:	4b36      	ldr	r3, [pc, #216]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d161      	bne.n	8006e10 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d4c:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <xTaskResumeAll+0x118>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d05d      	beq.n	8006e10 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d54:	e02e      	b.n	8006db4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d56:	4b34      	ldr	r3, [pc, #208]	; (8006e28 <xTaskResumeAll+0x11c>)
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3318      	adds	r3, #24
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff fbdf 	bl	8006526 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fbda 	bl	8006526 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	2201      	movs	r2, #1
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	; (8006e2c <xTaskResumeAll+0x120>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	4a2a      	ldr	r2, [pc, #168]	; (8006e2c <xTaskResumeAll+0x120>)
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4a27      	ldr	r2, [pc, #156]	; (8006e30 <xTaskResumeAll+0x124>)
 8006d92:	441a      	add	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	f7ff fb66 	bl	800646c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	4b23      	ldr	r3, [pc, #140]	; (8006e34 <xTaskResumeAll+0x128>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d302      	bcc.n	8006db4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006dae:	4b22      	ldr	r3, [pc, #136]	; (8006e38 <xTaskResumeAll+0x12c>)
 8006db0:	2201      	movs	r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006db4:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <xTaskResumeAll+0x11c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1cc      	bne.n	8006d56 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dc2:	f000 fa17 	bl	80071f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	; (8006e3c <xTaskResumeAll+0x130>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d010      	beq.n	8006df4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dd2:	f000 f847 	bl	8006e64 <xTaskIncrementTick>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006ddc:	4b16      	ldr	r3, [pc, #88]	; (8006e38 <xTaskResumeAll+0x12c>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f1      	bne.n	8006dd2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006dee:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <xTaskResumeAll+0x130>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006df4:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <xTaskResumeAll+0x12c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d009      	beq.n	8006e10 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <xTaskResumeAll+0x134>)
 8006e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e10:	f000 fbf2 	bl	80075f8 <vPortExitCritical>

	return xAlreadyYielded;
 8006e14:	68bb      	ldr	r3, [r7, #8]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000428 	.word	0x20000428
 8006e24:	20000400 	.word	0x20000400
 8006e28:	200003c0 	.word	0x200003c0
 8006e2c:	20000408 	.word	0x20000408
 8006e30:	20000304 	.word	0x20000304
 8006e34:	20000300 	.word	0x20000300
 8006e38:	20000414 	.word	0x20000414
 8006e3c:	20000410 	.word	0x20000410
 8006e40:	e000ed04 	.word	0xe000ed04

08006e44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e4a:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <xTaskGetTickCount+0x1c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e50:	687b      	ldr	r3, [r7, #4]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	20000404 	.word	0x20000404

08006e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e6e:	4b50      	ldr	r3, [pc, #320]	; (8006fb0 <xTaskIncrementTick+0x14c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 808c 	bne.w	8006f90 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e78:	4b4e      	ldr	r3, [pc, #312]	; (8006fb4 <xTaskIncrementTick+0x150>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e80:	4a4c      	ldr	r2, [pc, #304]	; (8006fb4 <xTaskIncrementTick+0x150>)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d11f      	bne.n	8006ecc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e8c:	4b4a      	ldr	r3, [pc, #296]	; (8006fb8 <xTaskIncrementTick+0x154>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <xTaskIncrementTick+0x46>
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	e7fe      	b.n	8006ea8 <xTaskIncrementTick+0x44>
 8006eaa:	4b43      	ldr	r3, [pc, #268]	; (8006fb8 <xTaskIncrementTick+0x154>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	4b42      	ldr	r3, [pc, #264]	; (8006fbc <xTaskIncrementTick+0x158>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a40      	ldr	r2, [pc, #256]	; (8006fb8 <xTaskIncrementTick+0x154>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	4a40      	ldr	r2, [pc, #256]	; (8006fbc <xTaskIncrementTick+0x158>)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	4b40      	ldr	r3, [pc, #256]	; (8006fc0 <xTaskIncrementTick+0x15c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	4a3e      	ldr	r2, [pc, #248]	; (8006fc0 <xTaskIncrementTick+0x15c>)
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f000 f994 	bl	80071f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ecc:	4b3d      	ldr	r3, [pc, #244]	; (8006fc4 <xTaskIncrementTick+0x160>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d34d      	bcc.n	8006f72 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed6:	4b38      	ldr	r3, [pc, #224]	; (8006fb8 <xTaskIncrementTick+0x154>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <xTaskIncrementTick+0x80>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <xTaskIncrementTick+0x82>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eea:	4b36      	ldr	r3, [pc, #216]	; (8006fc4 <xTaskIncrementTick+0x160>)
 8006eec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef0:	601a      	str	r2, [r3, #0]
					break;
 8006ef2:	e03e      	b.n	8006f72 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ef4:	4b30      	ldr	r3, [pc, #192]	; (8006fb8 <xTaskIncrementTick+0x154>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d203      	bcs.n	8006f14 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f0c:	4a2d      	ldr	r2, [pc, #180]	; (8006fc4 <xTaskIncrementTick+0x160>)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6013      	str	r3, [r2, #0]
						break;
 8006f12:	e02e      	b.n	8006f72 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff fb04 	bl	8006526 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	3318      	adds	r3, #24
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fafb 	bl	8006526 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	2201      	movs	r2, #1
 8006f36:	409a      	lsls	r2, r3
 8006f38:	4b23      	ldr	r3, [pc, #140]	; (8006fc8 <xTaskIncrementTick+0x164>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	4a22      	ldr	r2, [pc, #136]	; (8006fc8 <xTaskIncrementTick+0x164>)
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4a1f      	ldr	r2, [pc, #124]	; (8006fcc <xTaskIncrementTick+0x168>)
 8006f50:	441a      	add	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f7ff fa87 	bl	800646c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f62:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <xTaskIncrementTick+0x16c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d3b4      	bcc.n	8006ed6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f70:	e7b1      	b.n	8006ed6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f72:	4b17      	ldr	r3, [pc, #92]	; (8006fd0 <xTaskIncrementTick+0x16c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f78:	4914      	ldr	r1, [pc, #80]	; (8006fcc <xTaskIncrementTick+0x168>)
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d907      	bls.n	8006f9a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e004      	b.n	8006f9a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f90:	4b10      	ldr	r3, [pc, #64]	; (8006fd4 <xTaskIncrementTick+0x170>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	4a0f      	ldr	r2, [pc, #60]	; (8006fd4 <xTaskIncrementTick+0x170>)
 8006f98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <xTaskIncrementTick+0x174>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006fa6:	697b      	ldr	r3, [r7, #20]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20000428 	.word	0x20000428
 8006fb4:	20000404 	.word	0x20000404
 8006fb8:	200003b8 	.word	0x200003b8
 8006fbc:	200003bc 	.word	0x200003bc
 8006fc0:	20000418 	.word	0x20000418
 8006fc4:	20000420 	.word	0x20000420
 8006fc8:	20000408 	.word	0x20000408
 8006fcc:	20000304 	.word	0x20000304
 8006fd0:	20000300 	.word	0x20000300
 8006fd4:	20000410 	.word	0x20000410
 8006fd8:	20000414 	.word	0x20000414

08006fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fe2:	4b26      	ldr	r3, [pc, #152]	; (800707c <vTaskSwitchContext+0xa0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fea:	4b25      	ldr	r3, [pc, #148]	; (8007080 <vTaskSwitchContext+0xa4>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ff0:	e03e      	b.n	8007070 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006ff2:	4b23      	ldr	r3, [pc, #140]	; (8007080 <vTaskSwitchContext+0xa4>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ff8:	4b22      	ldr	r3, [pc, #136]	; (8007084 <vTaskSwitchContext+0xa8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	fab3 f383 	clz	r3, r3
 8007004:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007006:	7afb      	ldrb	r3, [r7, #11]
 8007008:	f1c3 031f 	rsb	r3, r3, #31
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	491e      	ldr	r1, [pc, #120]	; (8007088 <vTaskSwitchContext+0xac>)
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	607b      	str	r3, [r7, #4]
 8007034:	e7fe      	b.n	8007034 <vTaskSwitchContext+0x58>
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4a11      	ldr	r2, [pc, #68]	; (8007088 <vTaskSwitchContext+0xac>)
 8007042:	4413      	add	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	605a      	str	r2, [r3, #4]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	3308      	adds	r3, #8
 8007058:	429a      	cmp	r2, r3
 800705a:	d104      	bne.n	8007066 <vTaskSwitchContext+0x8a>
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4a07      	ldr	r2, [pc, #28]	; (800708c <vTaskSwitchContext+0xb0>)
 800706e:	6013      	str	r3, [r2, #0]
}
 8007070:	bf00      	nop
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	20000428 	.word	0x20000428
 8007080:	20000414 	.word	0x20000414
 8007084:	20000408 	.word	0x20000408
 8007088:	20000304 	.word	0x20000304
 800708c:	20000300 	.word	0x20000300

08007090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007098:	f000 f852 	bl	8007140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800709c:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <prvIdleTask+0x28>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d9f9      	bls.n	8007098 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <prvIdleTask+0x2c>)
 80070a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070b4:	e7f0      	b.n	8007098 <prvIdleTask+0x8>
 80070b6:	bf00      	nop
 80070b8:	20000304 	.word	0x20000304
 80070bc:	e000ed04 	.word	0xe000ed04

080070c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070c6:	2300      	movs	r3, #0
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	e00c      	b.n	80070e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4a12      	ldr	r2, [pc, #72]	; (8007120 <prvInitialiseTaskLists+0x60>)
 80070d8:	4413      	add	r3, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff f999 	bl	8006412 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3301      	adds	r3, #1
 80070e4:	607b      	str	r3, [r7, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b06      	cmp	r3, #6
 80070ea:	d9ef      	bls.n	80070cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070ec:	480d      	ldr	r0, [pc, #52]	; (8007124 <prvInitialiseTaskLists+0x64>)
 80070ee:	f7ff f990 	bl	8006412 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070f2:	480d      	ldr	r0, [pc, #52]	; (8007128 <prvInitialiseTaskLists+0x68>)
 80070f4:	f7ff f98d 	bl	8006412 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070f8:	480c      	ldr	r0, [pc, #48]	; (800712c <prvInitialiseTaskLists+0x6c>)
 80070fa:	f7ff f98a 	bl	8006412 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070fe:	480c      	ldr	r0, [pc, #48]	; (8007130 <prvInitialiseTaskLists+0x70>)
 8007100:	f7ff f987 	bl	8006412 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007104:	480b      	ldr	r0, [pc, #44]	; (8007134 <prvInitialiseTaskLists+0x74>)
 8007106:	f7ff f984 	bl	8006412 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800710a:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <prvInitialiseTaskLists+0x78>)
 800710c:	4a05      	ldr	r2, [pc, #20]	; (8007124 <prvInitialiseTaskLists+0x64>)
 800710e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007110:	4b0a      	ldr	r3, [pc, #40]	; (800713c <prvInitialiseTaskLists+0x7c>)
 8007112:	4a05      	ldr	r2, [pc, #20]	; (8007128 <prvInitialiseTaskLists+0x68>)
 8007114:	601a      	str	r2, [r3, #0]
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20000304 	.word	0x20000304
 8007124:	20000390 	.word	0x20000390
 8007128:	200003a4 	.word	0x200003a4
 800712c:	200003c0 	.word	0x200003c0
 8007130:	200003d4 	.word	0x200003d4
 8007134:	200003ec 	.word	0x200003ec
 8007138:	200003b8 	.word	0x200003b8
 800713c:	200003bc 	.word	0x200003bc

08007140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007146:	e019      	b.n	800717c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007148:	f000 fa28 	bl	800759c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <prvCheckTasksWaitingTermination+0x4c>)
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3304      	adds	r3, #4
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff f9e4 	bl	8006526 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800715e:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <prvCheckTasksWaitingTermination+0x50>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3b01      	subs	r3, #1
 8007164:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <prvCheckTasksWaitingTermination+0x50>)
 8007166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007168:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <prvCheckTasksWaitingTermination+0x54>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3b01      	subs	r3, #1
 800716e:	4a09      	ldr	r2, [pc, #36]	; (8007194 <prvCheckTasksWaitingTermination+0x54>)
 8007170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007172:	f000 fa41 	bl	80075f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f80e 	bl	8007198 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <prvCheckTasksWaitingTermination+0x54>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e1      	bne.n	8007148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	200003d4 	.word	0x200003d4
 8007190:	20000400 	.word	0x20000400
 8007194:	200003e8 	.word	0x200003e8

08007198 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d108      	bne.n	80071bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fb92 	bl	80078d8 <vPortFree>
				vPortFree( pxTCB );
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fb8f 	bl	80078d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071ba:	e017      	b.n	80071ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d103      	bne.n	80071ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fb86 	bl	80078d8 <vPortFree>
	}
 80071cc:	e00e      	b.n	80071ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d009      	beq.n	80071ec <prvDeleteTCB+0x54>
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	e7fe      	b.n	80071ea <prvDeleteTCB+0x52>
	}
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071fa:	4b0f      	ldr	r3, [pc, #60]	; (8007238 <prvResetNextTaskUnblockTime+0x44>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <prvResetNextTaskUnblockTime+0x14>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <prvResetNextTaskUnblockTime+0x16>
 8007208:	2300      	movs	r3, #0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d004      	beq.n	8007218 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800720e:	4b0b      	ldr	r3, [pc, #44]	; (800723c <prvResetNextTaskUnblockTime+0x48>)
 8007210:	f04f 32ff 	mov.w	r2, #4294967295
 8007214:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007216:	e008      	b.n	800722a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007218:	4b07      	ldr	r3, [pc, #28]	; (8007238 <prvResetNextTaskUnblockTime+0x44>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	4a05      	ldr	r2, [pc, #20]	; (800723c <prvResetNextTaskUnblockTime+0x48>)
 8007228:	6013      	str	r3, [r2, #0]
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	200003b8 	.word	0x200003b8
 800723c:	20000420 	.word	0x20000420

08007240 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <xTaskGetSchedulerState+0x34>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d102      	bne.n	8007254 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800724e:	2301      	movs	r3, #1
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	e008      	b.n	8007266 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007254:	4b08      	ldr	r3, [pc, #32]	; (8007278 <xTaskGetSchedulerState+0x38>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d102      	bne.n	8007262 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800725c:	2302      	movs	r3, #2
 800725e:	607b      	str	r3, [r7, #4]
 8007260:	e001      	b.n	8007266 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007262:	2300      	movs	r3, #0
 8007264:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007266:	687b      	ldr	r3, [r7, #4]
	}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	2000040c 	.word	0x2000040c
 8007278:	20000428 	.word	0x20000428

0800727c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007286:	4b29      	ldr	r3, [pc, #164]	; (800732c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800728c:	4b28      	ldr	r3, [pc, #160]	; (8007330 <prvAddCurrentTaskToDelayedList+0xb4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3304      	adds	r3, #4
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff f947 	bl	8006526 <uxListRemove>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10b      	bne.n	80072b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800729e:	4b24      	ldr	r3, [pc, #144]	; (8007330 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	2201      	movs	r2, #1
 80072a6:	fa02 f303 	lsl.w	r3, r2, r3
 80072aa:	43da      	mvns	r2, r3
 80072ac:	4b21      	ldr	r3, [pc, #132]	; (8007334 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4013      	ands	r3, r2
 80072b2:	4a20      	ldr	r2, [pc, #128]	; (8007334 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d10a      	bne.n	80072d4 <prvAddCurrentTaskToDelayedList+0x58>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072c4:	4b1a      	ldr	r3, [pc, #104]	; (8007330 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	481a      	ldr	r0, [pc, #104]	; (8007338 <prvAddCurrentTaskToDelayedList+0xbc>)
 80072ce:	f7ff f8cd 	bl	800646c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072d2:	e026      	b.n	8007322 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4413      	add	r3, r2
 80072da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072dc:	4b14      	ldr	r3, [pc, #80]	; (8007330 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d209      	bcs.n	8007300 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ec:	4b13      	ldr	r3, [pc, #76]	; (800733c <prvAddCurrentTaskToDelayedList+0xc0>)
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3304      	adds	r3, #4
 80072f6:	4619      	mov	r1, r3
 80072f8:	4610      	mov	r0, r2
 80072fa:	f7ff f8db 	bl	80064b4 <vListInsert>
}
 80072fe:	e010      	b.n	8007322 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3304      	adds	r3, #4
 800730a:	4619      	mov	r1, r3
 800730c:	4610      	mov	r0, r2
 800730e:	f7ff f8d1 	bl	80064b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	429a      	cmp	r2, r3
 800731a:	d202      	bcs.n	8007322 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800731c:	4a09      	ldr	r2, [pc, #36]	; (8007344 <prvAddCurrentTaskToDelayedList+0xc8>)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6013      	str	r3, [r2, #0]
}
 8007322:	bf00      	nop
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000404 	.word	0x20000404
 8007330:	20000300 	.word	0x20000300
 8007334:	20000408 	.word	0x20000408
 8007338:	200003ec 	.word	0x200003ec
 800733c:	200003bc 	.word	0x200003bc
 8007340:	200003b8 	.word	0x200003b8
 8007344:	20000420 	.word	0x20000420

08007348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3b04      	subs	r3, #4
 8007358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3b04      	subs	r3, #4
 8007366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f023 0201 	bic.w	r2, r3, #1
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3b04      	subs	r3, #4
 8007376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007378:	4a0c      	ldr	r2, [pc, #48]	; (80073ac <pxPortInitialiseStack+0x64>)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3b14      	subs	r3, #20
 8007382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3b04      	subs	r3, #4
 800738e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f06f 0202 	mvn.w	r2, #2
 8007396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3b20      	subs	r3, #32
 800739c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800739e:	68fb      	ldr	r3, [r7, #12]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	080073b1 	.word	0x080073b1

080073b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073ba:	4b11      	ldr	r3, [pc, #68]	; (8007400 <prvTaskExitError+0x50>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d009      	beq.n	80073d8 <prvTaskExitError+0x28>
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	e7fe      	b.n	80073d6 <prvTaskExitError+0x26>
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073ea:	bf00      	nop
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0fc      	beq.n	80073ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	2000000c 	.word	0x2000000c
	...

08007410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <pxCurrentTCBConst2>)
 8007412:	6819      	ldr	r1, [r3, #0]
 8007414:	6808      	ldr	r0, [r1, #0]
 8007416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741a:	f380 8809 	msr	PSP, r0
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8811 	msr	BASEPRI, r0
 800742a:	4770      	bx	lr
 800742c:	f3af 8000 	nop.w

08007430 <pxCurrentTCBConst2>:
 8007430:	20000300 	.word	0x20000300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop

08007438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007438:	4808      	ldr	r0, [pc, #32]	; (800745c <prvPortStartFirstTask+0x24>)
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	6800      	ldr	r0, [r0, #0]
 800743e:	f380 8808 	msr	MSP, r0
 8007442:	f04f 0000 	mov.w	r0, #0
 8007446:	f380 8814 	msr	CONTROL, r0
 800744a:	b662      	cpsie	i
 800744c:	b661      	cpsie	f
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	df00      	svc	0
 8007458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800745a:	bf00      	nop
 800745c:	e000ed08 	.word	0xe000ed08

08007460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007466:	4b44      	ldr	r3, [pc, #272]	; (8007578 <xPortStartScheduler+0x118>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a44      	ldr	r2, [pc, #272]	; (800757c <xPortStartScheduler+0x11c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d109      	bne.n	8007484 <xPortStartScheduler+0x24>
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	e7fe      	b.n	8007482 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007484:	4b3c      	ldr	r3, [pc, #240]	; (8007578 <xPortStartScheduler+0x118>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3d      	ldr	r2, [pc, #244]	; (8007580 <xPortStartScheduler+0x120>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d109      	bne.n	80074a2 <xPortStartScheduler+0x42>
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e7fe      	b.n	80074a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074a2:	4b38      	ldr	r3, [pc, #224]	; (8007584 <xPortStartScheduler+0x124>)
 80074a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	22ff      	movs	r2, #255	; 0xff
 80074b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	4b30      	ldr	r3, [pc, #192]	; (8007588 <xPortStartScheduler+0x128>)
 80074c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074ca:	4b30      	ldr	r3, [pc, #192]	; (800758c <xPortStartScheduler+0x12c>)
 80074cc:	2207      	movs	r2, #7
 80074ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074d0:	e009      	b.n	80074e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80074d2:	4b2e      	ldr	r3, [pc, #184]	; (800758c <xPortStartScheduler+0x12c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	4a2c      	ldr	r2, [pc, #176]	; (800758c <xPortStartScheduler+0x12c>)
 80074da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ee:	2b80      	cmp	r3, #128	; 0x80
 80074f0:	d0ef      	beq.n	80074d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074f2:	4b26      	ldr	r3, [pc, #152]	; (800758c <xPortStartScheduler+0x12c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f1c3 0307 	rsb	r3, r3, #7
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d009      	beq.n	8007512 <xPortStartScheduler+0xb2>
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	60bb      	str	r3, [r7, #8]
 8007510:	e7fe      	b.n	8007510 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007512:	4b1e      	ldr	r3, [pc, #120]	; (800758c <xPortStartScheduler+0x12c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	4a1c      	ldr	r2, [pc, #112]	; (800758c <xPortStartScheduler+0x12c>)
 800751a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800751c:	4b1b      	ldr	r3, [pc, #108]	; (800758c <xPortStartScheduler+0x12c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007524:	4a19      	ldr	r2, [pc, #100]	; (800758c <xPortStartScheduler+0x12c>)
 8007526:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	b2da      	uxtb	r2, r3
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007530:	4b17      	ldr	r3, [pc, #92]	; (8007590 <xPortStartScheduler+0x130>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a16      	ldr	r2, [pc, #88]	; (8007590 <xPortStartScheduler+0x130>)
 8007536:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800753a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800753c:	4b14      	ldr	r3, [pc, #80]	; (8007590 <xPortStartScheduler+0x130>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a13      	ldr	r2, [pc, #76]	; (8007590 <xPortStartScheduler+0x130>)
 8007542:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007546:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007548:	f000 f8d6 	bl	80076f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800754c:	4b11      	ldr	r3, [pc, #68]	; (8007594 <xPortStartScheduler+0x134>)
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007552:	f000 f8f5 	bl	8007740 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007556:	4b10      	ldr	r3, [pc, #64]	; (8007598 <xPortStartScheduler+0x138>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a0f      	ldr	r2, [pc, #60]	; (8007598 <xPortStartScheduler+0x138>)
 800755c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007560:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007562:	f7ff ff69 	bl	8007438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007566:	f7ff fd39 	bl	8006fdc <vTaskSwitchContext>
	prvTaskExitError();
 800756a:	f7ff ff21 	bl	80073b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	e000ed00 	.word	0xe000ed00
 800757c:	410fc271 	.word	0x410fc271
 8007580:	410fc270 	.word	0x410fc270
 8007584:	e000e400 	.word	0xe000e400
 8007588:	2000042c 	.word	0x2000042c
 800758c:	20000430 	.word	0x20000430
 8007590:	e000ed20 	.word	0xe000ed20
 8007594:	2000000c 	.word	0x2000000c
 8007598:	e000ef34 	.word	0xe000ef34

0800759c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075b4:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <vPortEnterCritical+0x54>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3301      	adds	r3, #1
 80075ba:	4a0d      	ldr	r2, [pc, #52]	; (80075f0 <vPortEnterCritical+0x54>)
 80075bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075be:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <vPortEnterCritical+0x54>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d10e      	bne.n	80075e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075c6:	4b0b      	ldr	r3, [pc, #44]	; (80075f4 <vPortEnterCritical+0x58>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <vPortEnterCritical+0x48>
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	e7fe      	b.n	80075e2 <vPortEnterCritical+0x46>
	}
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	2000000c 	.word	0x2000000c
 80075f4:	e000ed04 	.word	0xe000ed04

080075f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075fe:	4b11      	ldr	r3, [pc, #68]	; (8007644 <vPortExitCritical+0x4c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <vPortExitCritical+0x22>
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	607b      	str	r3, [r7, #4]
 8007618:	e7fe      	b.n	8007618 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <vPortExitCritical+0x4c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3b01      	subs	r3, #1
 8007620:	4a08      	ldr	r2, [pc, #32]	; (8007644 <vPortExitCritical+0x4c>)
 8007622:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007624:	4b07      	ldr	r3, [pc, #28]	; (8007644 <vPortExitCritical+0x4c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d104      	bne.n	8007636 <vPortExitCritical+0x3e>
 800762c:	2300      	movs	r3, #0
 800762e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	2000000c 	.word	0x2000000c
	...

08007650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007650:	f3ef 8009 	mrs	r0, PSP
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <pxCurrentTCBConst>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	f01e 0f10 	tst.w	lr, #16
 8007660:	bf08      	it	eq
 8007662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	6010      	str	r0, [r2, #0]
 800766c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007674:	f380 8811 	msr	BASEPRI, r0
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f7ff fcac 	bl	8006fdc <vTaskSwitchContext>
 8007684:	f04f 0000 	mov.w	r0, #0
 8007688:	f380 8811 	msr	BASEPRI, r0
 800768c:	bc09      	pop	{r0, r3}
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	6808      	ldr	r0, [r1, #0]
 8007692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007696:	f01e 0f10 	tst.w	lr, #16
 800769a:	bf08      	it	eq
 800769c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076a0:	f380 8809 	msr	PSP, r0
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w

080076b0 <pxCurrentTCBConst>:
 80076b0:	20000300 	.word	0x20000300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076d0:	f7ff fbc8 	bl	8006e64 <xTaskIncrementTick>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076da:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <xPortSysTickHandler+0x3c>)
 80076dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	2300      	movs	r3, #0
 80076e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	e000ed04 	.word	0xe000ed04

080076f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076fc:	4b0b      	ldr	r3, [pc, #44]	; (800772c <vPortSetupTimerInterrupt+0x34>)
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007702:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <vPortSetupTimerInterrupt+0x38>)
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <vPortSetupTimerInterrupt+0x3c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a0a      	ldr	r2, [pc, #40]	; (8007738 <vPortSetupTimerInterrupt+0x40>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	099b      	lsrs	r3, r3, #6
 8007714:	4a09      	ldr	r2, [pc, #36]	; (800773c <vPortSetupTimerInterrupt+0x44>)
 8007716:	3b01      	subs	r3, #1
 8007718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800771a:	4b04      	ldr	r3, [pc, #16]	; (800772c <vPortSetupTimerInterrupt+0x34>)
 800771c:	2207      	movs	r2, #7
 800771e:	601a      	str	r2, [r3, #0]
}
 8007720:	bf00      	nop
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	e000e010 	.word	0xe000e010
 8007730:	e000e018 	.word	0xe000e018
 8007734:	20000000 	.word	0x20000000
 8007738:	10624dd3 	.word	0x10624dd3
 800773c:	e000e014 	.word	0xe000e014

08007740 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007740:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007750 <vPortEnableVFP+0x10>
 8007744:	6801      	ldr	r1, [r0, #0]
 8007746:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800774a:	6001      	str	r1, [r0, #0]
 800774c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800774e:	bf00      	nop
 8007750:	e000ed88 	.word	0xe000ed88

08007754 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	; 0x28
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800775c:	2300      	movs	r3, #0
 800775e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007760:	f7ff fac6 	bl	8006cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007764:	4b57      	ldr	r3, [pc, #348]	; (80078c4 <pvPortMalloc+0x170>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800776c:	f000 f90c 	bl	8007988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007770:	4b55      	ldr	r3, [pc, #340]	; (80078c8 <pvPortMalloc+0x174>)
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4013      	ands	r3, r2
 8007778:	2b00      	cmp	r3, #0
 800777a:	f040 808c 	bne.w	8007896 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01c      	beq.n	80077be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007784:	2208      	movs	r2, #8
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	2b00      	cmp	r3, #0
 8007794:	d013      	beq.n	80077be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f023 0307 	bic.w	r3, r3, #7
 800779c:	3308      	adds	r3, #8
 800779e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <pvPortMalloc+0x6a>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e7fe      	b.n	80077bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d068      	beq.n	8007896 <pvPortMalloc+0x142>
 80077c4:	4b41      	ldr	r3, [pc, #260]	; (80078cc <pvPortMalloc+0x178>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d863      	bhi.n	8007896 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077ce:	4b40      	ldr	r3, [pc, #256]	; (80078d0 <pvPortMalloc+0x17c>)
 80077d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077d2:	4b3f      	ldr	r3, [pc, #252]	; (80078d0 <pvPortMalloc+0x17c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077d8:	e004      	b.n	80077e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d903      	bls.n	80077f6 <pvPortMalloc+0xa2>
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f1      	bne.n	80077da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077f6:	4b33      	ldr	r3, [pc, #204]	; (80078c4 <pvPortMalloc+0x170>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d04a      	beq.n	8007896 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2208      	movs	r2, #8
 8007806:	4413      	add	r3, r2
 8007808:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	1ad2      	subs	r2, r2, r3
 800781a:	2308      	movs	r3, #8
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	429a      	cmp	r2, r3
 8007820:	d91e      	bls.n	8007860 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4413      	add	r3, r2
 8007828:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	2b00      	cmp	r3, #0
 8007832:	d009      	beq.n	8007848 <pvPortMalloc+0xf4>
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	e7fe      	b.n	8007846 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800785a:	69b8      	ldr	r0, [r7, #24]
 800785c:	f000 f8f6 	bl	8007a4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007860:	4b1a      	ldr	r3, [pc, #104]	; (80078cc <pvPortMalloc+0x178>)
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	4a18      	ldr	r2, [pc, #96]	; (80078cc <pvPortMalloc+0x178>)
 800786c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800786e:	4b17      	ldr	r3, [pc, #92]	; (80078cc <pvPortMalloc+0x178>)
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4b18      	ldr	r3, [pc, #96]	; (80078d4 <pvPortMalloc+0x180>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	429a      	cmp	r2, r3
 8007878:	d203      	bcs.n	8007882 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800787a:	4b14      	ldr	r3, [pc, #80]	; (80078cc <pvPortMalloc+0x178>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <pvPortMalloc+0x180>)
 8007880:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <pvPortMalloc+0x174>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	431a      	orrs	r2, r3
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007896:	f7ff fa39 	bl	8006d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	f003 0307 	and.w	r3, r3, #7
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d009      	beq.n	80078b8 <pvPortMalloc+0x164>
 80078a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	e7fe      	b.n	80078b6 <pvPortMalloc+0x162>
	return pvReturn;
 80078b8:	69fb      	ldr	r3, [r7, #28]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3728      	adds	r7, #40	; 0x28
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	2000403c 	.word	0x2000403c
 80078c8:	20004048 	.word	0x20004048
 80078cc:	20004040 	.word	0x20004040
 80078d0:	20004034 	.word	0x20004034
 80078d4:	20004044 	.word	0x20004044

080078d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d046      	beq.n	8007978 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078ea:	2308      	movs	r3, #8
 80078ec:	425b      	negs	r3, r3
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4413      	add	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	4b20      	ldr	r3, [pc, #128]	; (8007980 <vPortFree+0xa8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4013      	ands	r3, r2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <vPortFree+0x42>
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	e7fe      	b.n	8007918 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <vPortFree+0x5e>
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60bb      	str	r3, [r7, #8]
 8007934:	e7fe      	b.n	8007934 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	4b11      	ldr	r3, [pc, #68]	; (8007980 <vPortFree+0xa8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4013      	ands	r3, r2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d019      	beq.n	8007978 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d115      	bne.n	8007978 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <vPortFree+0xa8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	43db      	mvns	r3, r3
 8007956:	401a      	ands	r2, r3
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800795c:	f7ff f9c8 	bl	8006cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <vPortFree+0xac>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4413      	add	r3, r2
 800796a:	4a06      	ldr	r2, [pc, #24]	; (8007984 <vPortFree+0xac>)
 800796c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800796e:	6938      	ldr	r0, [r7, #16]
 8007970:	f000 f86c 	bl	8007a4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007974:	f7ff f9ca 	bl	8006d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007978:	bf00      	nop
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20004048 	.word	0x20004048
 8007984:	20004040 	.word	0x20004040

08007988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800798e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007994:	4b27      	ldr	r3, [pc, #156]	; (8007a34 <prvHeapInit+0xac>)
 8007996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00c      	beq.n	80079bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3307      	adds	r3, #7
 80079a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0307 	bic.w	r3, r3, #7
 80079ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	4a1f      	ldr	r2, [pc, #124]	; (8007a34 <prvHeapInit+0xac>)
 80079b8:	4413      	add	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079c0:	4a1d      	ldr	r2, [pc, #116]	; (8007a38 <prvHeapInit+0xb0>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079c6:	4b1c      	ldr	r3, [pc, #112]	; (8007a38 <prvHeapInit+0xb0>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	4413      	add	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079d4:	2208      	movs	r2, #8
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0307 	bic.w	r3, r3, #7
 80079e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4a15      	ldr	r2, [pc, #84]	; (8007a3c <prvHeapInit+0xb4>)
 80079e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079ea:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <prvHeapInit+0xb4>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079f2:	4b12      	ldr	r3, [pc, #72]	; (8007a3c <prvHeapInit+0xb4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a08:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <prvHeapInit+0xb4>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	4a0a      	ldr	r2, [pc, #40]	; (8007a40 <prvHeapInit+0xb8>)
 8007a16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	4a09      	ldr	r2, [pc, #36]	; (8007a44 <prvHeapInit+0xbc>)
 8007a1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a20:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <prvHeapInit+0xc0>)
 8007a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a26:	601a      	str	r2, [r3, #0]
}
 8007a28:	bf00      	nop
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	20000434 	.word	0x20000434
 8007a38:	20004034 	.word	0x20004034
 8007a3c:	2000403c 	.word	0x2000403c
 8007a40:	20004044 	.word	0x20004044
 8007a44:	20004040 	.word	0x20004040
 8007a48:	20004048 	.word	0x20004048

08007a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a54:	4b28      	ldr	r3, [pc, #160]	; (8007af8 <prvInsertBlockIntoFreeList+0xac>)
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	e002      	b.n	8007a60 <prvInsertBlockIntoFreeList+0x14>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d8f7      	bhi.n	8007a5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	4413      	add	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d108      	bne.n	8007a8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	441a      	add	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	441a      	add	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d118      	bne.n	8007ad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b15      	ldr	r3, [pc, #84]	; (8007afc <prvInsertBlockIntoFreeList+0xb0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d00d      	beq.n	8007aca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	441a      	add	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e008      	b.n	8007adc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007aca:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <prvInsertBlockIntoFreeList+0xb0>)
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	e003      	b.n	8007adc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d002      	beq.n	8007aea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	20004034 	.word	0x20004034
 8007afc:	2000403c 	.word	0x2000403c

08007b00 <__errno>:
 8007b00:	4b01      	ldr	r3, [pc, #4]	; (8007b08 <__errno+0x8>)
 8007b02:	6818      	ldr	r0, [r3, #0]
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	20000010 	.word	0x20000010

08007b0c <__libc_init_array>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	4e0d      	ldr	r6, [pc, #52]	; (8007b44 <__libc_init_array+0x38>)
 8007b10:	4c0d      	ldr	r4, [pc, #52]	; (8007b48 <__libc_init_array+0x3c>)
 8007b12:	1ba4      	subs	r4, r4, r6
 8007b14:	10a4      	asrs	r4, r4, #2
 8007b16:	2500      	movs	r5, #0
 8007b18:	42a5      	cmp	r5, r4
 8007b1a:	d109      	bne.n	8007b30 <__libc_init_array+0x24>
 8007b1c:	4e0b      	ldr	r6, [pc, #44]	; (8007b4c <__libc_init_array+0x40>)
 8007b1e:	4c0c      	ldr	r4, [pc, #48]	; (8007b50 <__libc_init_array+0x44>)
 8007b20:	f000 fc28 	bl	8008374 <_init>
 8007b24:	1ba4      	subs	r4, r4, r6
 8007b26:	10a4      	asrs	r4, r4, #2
 8007b28:	2500      	movs	r5, #0
 8007b2a:	42a5      	cmp	r5, r4
 8007b2c:	d105      	bne.n	8007b3a <__libc_init_array+0x2e>
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b34:	4798      	blx	r3
 8007b36:	3501      	adds	r5, #1
 8007b38:	e7ee      	b.n	8007b18 <__libc_init_array+0xc>
 8007b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b3e:	4798      	blx	r3
 8007b40:	3501      	adds	r5, #1
 8007b42:	e7f2      	b.n	8007b2a <__libc_init_array+0x1e>
 8007b44:	0800854c 	.word	0x0800854c
 8007b48:	0800854c 	.word	0x0800854c
 8007b4c:	0800854c 	.word	0x0800854c
 8007b50:	08008550 	.word	0x08008550

08007b54 <memcpy>:
 8007b54:	b510      	push	{r4, lr}
 8007b56:	1e43      	subs	r3, r0, #1
 8007b58:	440a      	add	r2, r1
 8007b5a:	4291      	cmp	r1, r2
 8007b5c:	d100      	bne.n	8007b60 <memcpy+0xc>
 8007b5e:	bd10      	pop	{r4, pc}
 8007b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b68:	e7f7      	b.n	8007b5a <memcpy+0x6>

08007b6a <memset>:
 8007b6a:	4402      	add	r2, r0
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d100      	bne.n	8007b74 <memset+0xa>
 8007b72:	4770      	bx	lr
 8007b74:	f803 1b01 	strb.w	r1, [r3], #1
 8007b78:	e7f9      	b.n	8007b6e <memset+0x4>
	...

08007b7c <siprintf>:
 8007b7c:	b40e      	push	{r1, r2, r3}
 8007b7e:	b500      	push	{lr}
 8007b80:	b09c      	sub	sp, #112	; 0x70
 8007b82:	ab1d      	add	r3, sp, #116	; 0x74
 8007b84:	9002      	str	r0, [sp, #8]
 8007b86:	9006      	str	r0, [sp, #24]
 8007b88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b8c:	4809      	ldr	r0, [pc, #36]	; (8007bb4 <siprintf+0x38>)
 8007b8e:	9107      	str	r1, [sp, #28]
 8007b90:	9104      	str	r1, [sp, #16]
 8007b92:	4909      	ldr	r1, [pc, #36]	; (8007bb8 <siprintf+0x3c>)
 8007b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b98:	9105      	str	r1, [sp, #20]
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	a902      	add	r1, sp, #8
 8007ba0:	f000 f866 	bl	8007c70 <_svfiprintf_r>
 8007ba4:	9b02      	ldr	r3, [sp, #8]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	b01c      	add	sp, #112	; 0x70
 8007bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bb0:	b003      	add	sp, #12
 8007bb2:	4770      	bx	lr
 8007bb4:	20000010 	.word	0x20000010
 8007bb8:	ffff0208 	.word	0xffff0208

08007bbc <__ssputs_r>:
 8007bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc0:	688e      	ldr	r6, [r1, #8]
 8007bc2:	429e      	cmp	r6, r3
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	4690      	mov	r8, r2
 8007bca:	4699      	mov	r9, r3
 8007bcc:	d837      	bhi.n	8007c3e <__ssputs_r+0x82>
 8007bce:	898a      	ldrh	r2, [r1, #12]
 8007bd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bd4:	d031      	beq.n	8007c3a <__ssputs_r+0x7e>
 8007bd6:	6825      	ldr	r5, [r4, #0]
 8007bd8:	6909      	ldr	r1, [r1, #16]
 8007bda:	1a6f      	subs	r7, r5, r1
 8007bdc:	6965      	ldr	r5, [r4, #20]
 8007bde:	2302      	movs	r3, #2
 8007be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007be4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007be8:	f109 0301 	add.w	r3, r9, #1
 8007bec:	443b      	add	r3, r7
 8007bee:	429d      	cmp	r5, r3
 8007bf0:	bf38      	it	cc
 8007bf2:	461d      	movcc	r5, r3
 8007bf4:	0553      	lsls	r3, r2, #21
 8007bf6:	d530      	bpl.n	8007c5a <__ssputs_r+0x9e>
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	f000 fb21 	bl	8008240 <_malloc_r>
 8007bfe:	4606      	mov	r6, r0
 8007c00:	b950      	cbnz	r0, 8007c18 <__ssputs_r+0x5c>
 8007c02:	230c      	movs	r3, #12
 8007c04:	f8ca 3000 	str.w	r3, [sl]
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c0e:	81a3      	strh	r3, [r4, #12]
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295
 8007c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c18:	463a      	mov	r2, r7
 8007c1a:	6921      	ldr	r1, [r4, #16]
 8007c1c:	f7ff ff9a 	bl	8007b54 <memcpy>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2a:	81a3      	strh	r3, [r4, #12]
 8007c2c:	6126      	str	r6, [r4, #16]
 8007c2e:	6165      	str	r5, [r4, #20]
 8007c30:	443e      	add	r6, r7
 8007c32:	1bed      	subs	r5, r5, r7
 8007c34:	6026      	str	r6, [r4, #0]
 8007c36:	60a5      	str	r5, [r4, #8]
 8007c38:	464e      	mov	r6, r9
 8007c3a:	454e      	cmp	r6, r9
 8007c3c:	d900      	bls.n	8007c40 <__ssputs_r+0x84>
 8007c3e:	464e      	mov	r6, r9
 8007c40:	4632      	mov	r2, r6
 8007c42:	4641      	mov	r1, r8
 8007c44:	6820      	ldr	r0, [r4, #0]
 8007c46:	f000 fa93 	bl	8008170 <memmove>
 8007c4a:	68a3      	ldr	r3, [r4, #8]
 8007c4c:	1b9b      	subs	r3, r3, r6
 8007c4e:	60a3      	str	r3, [r4, #8]
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	441e      	add	r6, r3
 8007c54:	6026      	str	r6, [r4, #0]
 8007c56:	2000      	movs	r0, #0
 8007c58:	e7dc      	b.n	8007c14 <__ssputs_r+0x58>
 8007c5a:	462a      	mov	r2, r5
 8007c5c:	f000 fb4a 	bl	80082f4 <_realloc_r>
 8007c60:	4606      	mov	r6, r0
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d1e2      	bne.n	8007c2c <__ssputs_r+0x70>
 8007c66:	6921      	ldr	r1, [r4, #16]
 8007c68:	4650      	mov	r0, sl
 8007c6a:	f000 fa9b 	bl	80081a4 <_free_r>
 8007c6e:	e7c8      	b.n	8007c02 <__ssputs_r+0x46>

08007c70 <_svfiprintf_r>:
 8007c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	461d      	mov	r5, r3
 8007c76:	898b      	ldrh	r3, [r1, #12]
 8007c78:	061f      	lsls	r7, r3, #24
 8007c7a:	b09d      	sub	sp, #116	; 0x74
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	4616      	mov	r6, r2
 8007c82:	d50f      	bpl.n	8007ca4 <_svfiprintf_r+0x34>
 8007c84:	690b      	ldr	r3, [r1, #16]
 8007c86:	b96b      	cbnz	r3, 8007ca4 <_svfiprintf_r+0x34>
 8007c88:	2140      	movs	r1, #64	; 0x40
 8007c8a:	f000 fad9 	bl	8008240 <_malloc_r>
 8007c8e:	6020      	str	r0, [r4, #0]
 8007c90:	6120      	str	r0, [r4, #16]
 8007c92:	b928      	cbnz	r0, 8007ca0 <_svfiprintf_r+0x30>
 8007c94:	230c      	movs	r3, #12
 8007c96:	f8c8 3000 	str.w	r3, [r8]
 8007c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9e:	e0c8      	b.n	8007e32 <_svfiprintf_r+0x1c2>
 8007ca0:	2340      	movs	r3, #64	; 0x40
 8007ca2:	6163      	str	r3, [r4, #20]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca8:	2320      	movs	r3, #32
 8007caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cae:	2330      	movs	r3, #48	; 0x30
 8007cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cb4:	9503      	str	r5, [sp, #12]
 8007cb6:	f04f 0b01 	mov.w	fp, #1
 8007cba:	4637      	mov	r7, r6
 8007cbc:	463d      	mov	r5, r7
 8007cbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007cc2:	b10b      	cbz	r3, 8007cc8 <_svfiprintf_r+0x58>
 8007cc4:	2b25      	cmp	r3, #37	; 0x25
 8007cc6:	d13e      	bne.n	8007d46 <_svfiprintf_r+0xd6>
 8007cc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007ccc:	d00b      	beq.n	8007ce6 <_svfiprintf_r+0x76>
 8007cce:	4653      	mov	r3, sl
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	f7ff ff71 	bl	8007bbc <__ssputs_r>
 8007cda:	3001      	adds	r0, #1
 8007cdc:	f000 80a4 	beq.w	8007e28 <_svfiprintf_r+0x1b8>
 8007ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce2:	4453      	add	r3, sl
 8007ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce6:	783b      	ldrb	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 809d 	beq.w	8007e28 <_svfiprintf_r+0x1b8>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	9307      	str	r3, [sp, #28]
 8007cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d00:	931a      	str	r3, [sp, #104]	; 0x68
 8007d02:	462f      	mov	r7, r5
 8007d04:	2205      	movs	r2, #5
 8007d06:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d0a:	4850      	ldr	r0, [pc, #320]	; (8007e4c <_svfiprintf_r+0x1dc>)
 8007d0c:	f7f8 fa68 	bl	80001e0 <memchr>
 8007d10:	9b04      	ldr	r3, [sp, #16]
 8007d12:	b9d0      	cbnz	r0, 8007d4a <_svfiprintf_r+0xda>
 8007d14:	06d9      	lsls	r1, r3, #27
 8007d16:	bf44      	itt	mi
 8007d18:	2220      	movmi	r2, #32
 8007d1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d1e:	071a      	lsls	r2, r3, #28
 8007d20:	bf44      	itt	mi
 8007d22:	222b      	movmi	r2, #43	; 0x2b
 8007d24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d28:	782a      	ldrb	r2, [r5, #0]
 8007d2a:	2a2a      	cmp	r2, #42	; 0x2a
 8007d2c:	d015      	beq.n	8007d5a <_svfiprintf_r+0xea>
 8007d2e:	9a07      	ldr	r2, [sp, #28]
 8007d30:	462f      	mov	r7, r5
 8007d32:	2000      	movs	r0, #0
 8007d34:	250a      	movs	r5, #10
 8007d36:	4639      	mov	r1, r7
 8007d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d3c:	3b30      	subs	r3, #48	; 0x30
 8007d3e:	2b09      	cmp	r3, #9
 8007d40:	d94d      	bls.n	8007dde <_svfiprintf_r+0x16e>
 8007d42:	b1b8      	cbz	r0, 8007d74 <_svfiprintf_r+0x104>
 8007d44:	e00f      	b.n	8007d66 <_svfiprintf_r+0xf6>
 8007d46:	462f      	mov	r7, r5
 8007d48:	e7b8      	b.n	8007cbc <_svfiprintf_r+0x4c>
 8007d4a:	4a40      	ldr	r2, [pc, #256]	; (8007e4c <_svfiprintf_r+0x1dc>)
 8007d4c:	1a80      	subs	r0, r0, r2
 8007d4e:	fa0b f000 	lsl.w	r0, fp, r0
 8007d52:	4318      	orrs	r0, r3
 8007d54:	9004      	str	r0, [sp, #16]
 8007d56:	463d      	mov	r5, r7
 8007d58:	e7d3      	b.n	8007d02 <_svfiprintf_r+0x92>
 8007d5a:	9a03      	ldr	r2, [sp, #12]
 8007d5c:	1d11      	adds	r1, r2, #4
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	9103      	str	r1, [sp, #12]
 8007d62:	2a00      	cmp	r2, #0
 8007d64:	db01      	blt.n	8007d6a <_svfiprintf_r+0xfa>
 8007d66:	9207      	str	r2, [sp, #28]
 8007d68:	e004      	b.n	8007d74 <_svfiprintf_r+0x104>
 8007d6a:	4252      	negs	r2, r2
 8007d6c:	f043 0302 	orr.w	r3, r3, #2
 8007d70:	9207      	str	r2, [sp, #28]
 8007d72:	9304      	str	r3, [sp, #16]
 8007d74:	783b      	ldrb	r3, [r7, #0]
 8007d76:	2b2e      	cmp	r3, #46	; 0x2e
 8007d78:	d10c      	bne.n	8007d94 <_svfiprintf_r+0x124>
 8007d7a:	787b      	ldrb	r3, [r7, #1]
 8007d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d7e:	d133      	bne.n	8007de8 <_svfiprintf_r+0x178>
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	1d1a      	adds	r2, r3, #4
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	9203      	str	r2, [sp, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bfb8      	it	lt
 8007d8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d90:	3702      	adds	r7, #2
 8007d92:	9305      	str	r3, [sp, #20]
 8007d94:	4d2e      	ldr	r5, [pc, #184]	; (8007e50 <_svfiprintf_r+0x1e0>)
 8007d96:	7839      	ldrb	r1, [r7, #0]
 8007d98:	2203      	movs	r2, #3
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f7f8 fa20 	bl	80001e0 <memchr>
 8007da0:	b138      	cbz	r0, 8007db2 <_svfiprintf_r+0x142>
 8007da2:	2340      	movs	r3, #64	; 0x40
 8007da4:	1b40      	subs	r0, r0, r5
 8007da6:	fa03 f000 	lsl.w	r0, r3, r0
 8007daa:	9b04      	ldr	r3, [sp, #16]
 8007dac:	4303      	orrs	r3, r0
 8007dae:	3701      	adds	r7, #1
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	7839      	ldrb	r1, [r7, #0]
 8007db4:	4827      	ldr	r0, [pc, #156]	; (8007e54 <_svfiprintf_r+0x1e4>)
 8007db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dba:	2206      	movs	r2, #6
 8007dbc:	1c7e      	adds	r6, r7, #1
 8007dbe:	f7f8 fa0f 	bl	80001e0 <memchr>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d038      	beq.n	8007e38 <_svfiprintf_r+0x1c8>
 8007dc6:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <_svfiprintf_r+0x1e8>)
 8007dc8:	bb13      	cbnz	r3, 8007e10 <_svfiprintf_r+0x1a0>
 8007dca:	9b03      	ldr	r3, [sp, #12]
 8007dcc:	3307      	adds	r3, #7
 8007dce:	f023 0307 	bic.w	r3, r3, #7
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	9303      	str	r3, [sp, #12]
 8007dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd8:	444b      	add	r3, r9
 8007dda:	9309      	str	r3, [sp, #36]	; 0x24
 8007ddc:	e76d      	b.n	8007cba <_svfiprintf_r+0x4a>
 8007dde:	fb05 3202 	mla	r2, r5, r2, r3
 8007de2:	2001      	movs	r0, #1
 8007de4:	460f      	mov	r7, r1
 8007de6:	e7a6      	b.n	8007d36 <_svfiprintf_r+0xc6>
 8007de8:	2300      	movs	r3, #0
 8007dea:	3701      	adds	r7, #1
 8007dec:	9305      	str	r3, [sp, #20]
 8007dee:	4619      	mov	r1, r3
 8007df0:	250a      	movs	r5, #10
 8007df2:	4638      	mov	r0, r7
 8007df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007df8:	3a30      	subs	r2, #48	; 0x30
 8007dfa:	2a09      	cmp	r2, #9
 8007dfc:	d903      	bls.n	8007e06 <_svfiprintf_r+0x196>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0c8      	beq.n	8007d94 <_svfiprintf_r+0x124>
 8007e02:	9105      	str	r1, [sp, #20]
 8007e04:	e7c6      	b.n	8007d94 <_svfiprintf_r+0x124>
 8007e06:	fb05 2101 	mla	r1, r5, r1, r2
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	e7f0      	b.n	8007df2 <_svfiprintf_r+0x182>
 8007e10:	ab03      	add	r3, sp, #12
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	4622      	mov	r2, r4
 8007e16:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <_svfiprintf_r+0x1ec>)
 8007e18:	a904      	add	r1, sp, #16
 8007e1a:	4640      	mov	r0, r8
 8007e1c:	f3af 8000 	nop.w
 8007e20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e24:	4681      	mov	r9, r0
 8007e26:	d1d6      	bne.n	8007dd6 <_svfiprintf_r+0x166>
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	065b      	lsls	r3, r3, #25
 8007e2c:	f53f af35 	bmi.w	8007c9a <_svfiprintf_r+0x2a>
 8007e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e32:	b01d      	add	sp, #116	; 0x74
 8007e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e38:	ab03      	add	r3, sp, #12
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <_svfiprintf_r+0x1ec>)
 8007e40:	a904      	add	r1, sp, #16
 8007e42:	4640      	mov	r0, r8
 8007e44:	f000 f882 	bl	8007f4c <_printf_i>
 8007e48:	e7ea      	b.n	8007e20 <_svfiprintf_r+0x1b0>
 8007e4a:	bf00      	nop
 8007e4c:	08008510 	.word	0x08008510
 8007e50:	08008516 	.word	0x08008516
 8007e54:	0800851a 	.word	0x0800851a
 8007e58:	00000000 	.word	0x00000000
 8007e5c:	08007bbd 	.word	0x08007bbd

08007e60 <_printf_common>:
 8007e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e64:	4691      	mov	r9, r2
 8007e66:	461f      	mov	r7, r3
 8007e68:	688a      	ldr	r2, [r1, #8]
 8007e6a:	690b      	ldr	r3, [r1, #16]
 8007e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	bfb8      	it	lt
 8007e74:	4613      	movlt	r3, r2
 8007e76:	f8c9 3000 	str.w	r3, [r9]
 8007e7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460c      	mov	r4, r1
 8007e82:	b112      	cbz	r2, 8007e8a <_printf_common+0x2a>
 8007e84:	3301      	adds	r3, #1
 8007e86:	f8c9 3000 	str.w	r3, [r9]
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	0699      	lsls	r1, r3, #26
 8007e8e:	bf42      	ittt	mi
 8007e90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e94:	3302      	addmi	r3, #2
 8007e96:	f8c9 3000 	strmi.w	r3, [r9]
 8007e9a:	6825      	ldr	r5, [r4, #0]
 8007e9c:	f015 0506 	ands.w	r5, r5, #6
 8007ea0:	d107      	bne.n	8007eb2 <_printf_common+0x52>
 8007ea2:	f104 0a19 	add.w	sl, r4, #25
 8007ea6:	68e3      	ldr	r3, [r4, #12]
 8007ea8:	f8d9 2000 	ldr.w	r2, [r9]
 8007eac:	1a9b      	subs	r3, r3, r2
 8007eae:	42ab      	cmp	r3, r5
 8007eb0:	dc28      	bgt.n	8007f04 <_printf_common+0xa4>
 8007eb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007eb6:	6822      	ldr	r2, [r4, #0]
 8007eb8:	3300      	adds	r3, #0
 8007eba:	bf18      	it	ne
 8007ebc:	2301      	movne	r3, #1
 8007ebe:	0692      	lsls	r2, r2, #26
 8007ec0:	d42d      	bmi.n	8007f1e <_printf_common+0xbe>
 8007ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	4630      	mov	r0, r6
 8007eca:	47c0      	blx	r8
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d020      	beq.n	8007f12 <_printf_common+0xb2>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	68e5      	ldr	r5, [r4, #12]
 8007ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ed8:	f003 0306 	and.w	r3, r3, #6
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	bf08      	it	eq
 8007ee0:	1aad      	subeq	r5, r5, r2
 8007ee2:	68a3      	ldr	r3, [r4, #8]
 8007ee4:	6922      	ldr	r2, [r4, #16]
 8007ee6:	bf0c      	ite	eq
 8007ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eec:	2500      	movne	r5, #0
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	bfc4      	itt	gt
 8007ef2:	1a9b      	subgt	r3, r3, r2
 8007ef4:	18ed      	addgt	r5, r5, r3
 8007ef6:	f04f 0900 	mov.w	r9, #0
 8007efa:	341a      	adds	r4, #26
 8007efc:	454d      	cmp	r5, r9
 8007efe:	d11a      	bne.n	8007f36 <_printf_common+0xd6>
 8007f00:	2000      	movs	r0, #0
 8007f02:	e008      	b.n	8007f16 <_printf_common+0xb6>
 8007f04:	2301      	movs	r3, #1
 8007f06:	4652      	mov	r2, sl
 8007f08:	4639      	mov	r1, r7
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	47c0      	blx	r8
 8007f0e:	3001      	adds	r0, #1
 8007f10:	d103      	bne.n	8007f1a <_printf_common+0xba>
 8007f12:	f04f 30ff 	mov.w	r0, #4294967295
 8007f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1a:	3501      	adds	r5, #1
 8007f1c:	e7c3      	b.n	8007ea6 <_printf_common+0x46>
 8007f1e:	18e1      	adds	r1, r4, r3
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	2030      	movs	r0, #48	; 0x30
 8007f24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f28:	4422      	add	r2, r4
 8007f2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f32:	3302      	adds	r3, #2
 8007f34:	e7c5      	b.n	8007ec2 <_printf_common+0x62>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	47c0      	blx	r8
 8007f40:	3001      	adds	r0, #1
 8007f42:	d0e6      	beq.n	8007f12 <_printf_common+0xb2>
 8007f44:	f109 0901 	add.w	r9, r9, #1
 8007f48:	e7d8      	b.n	8007efc <_printf_common+0x9c>
	...

08007f4c <_printf_i>:
 8007f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f54:	460c      	mov	r4, r1
 8007f56:	7e09      	ldrb	r1, [r1, #24]
 8007f58:	b085      	sub	sp, #20
 8007f5a:	296e      	cmp	r1, #110	; 0x6e
 8007f5c:	4617      	mov	r7, r2
 8007f5e:	4606      	mov	r6, r0
 8007f60:	4698      	mov	r8, r3
 8007f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f64:	f000 80b3 	beq.w	80080ce <_printf_i+0x182>
 8007f68:	d822      	bhi.n	8007fb0 <_printf_i+0x64>
 8007f6a:	2963      	cmp	r1, #99	; 0x63
 8007f6c:	d036      	beq.n	8007fdc <_printf_i+0x90>
 8007f6e:	d80a      	bhi.n	8007f86 <_printf_i+0x3a>
 8007f70:	2900      	cmp	r1, #0
 8007f72:	f000 80b9 	beq.w	80080e8 <_printf_i+0x19c>
 8007f76:	2958      	cmp	r1, #88	; 0x58
 8007f78:	f000 8083 	beq.w	8008082 <_printf_i+0x136>
 8007f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f84:	e032      	b.n	8007fec <_printf_i+0xa0>
 8007f86:	2964      	cmp	r1, #100	; 0x64
 8007f88:	d001      	beq.n	8007f8e <_printf_i+0x42>
 8007f8a:	2969      	cmp	r1, #105	; 0x69
 8007f8c:	d1f6      	bne.n	8007f7c <_printf_i+0x30>
 8007f8e:	6820      	ldr	r0, [r4, #0]
 8007f90:	6813      	ldr	r3, [r2, #0]
 8007f92:	0605      	lsls	r5, r0, #24
 8007f94:	f103 0104 	add.w	r1, r3, #4
 8007f98:	d52a      	bpl.n	8007ff0 <_printf_i+0xa4>
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6011      	str	r1, [r2, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	da03      	bge.n	8007faa <_printf_i+0x5e>
 8007fa2:	222d      	movs	r2, #45	; 0x2d
 8007fa4:	425b      	negs	r3, r3
 8007fa6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007faa:	486f      	ldr	r0, [pc, #444]	; (8008168 <_printf_i+0x21c>)
 8007fac:	220a      	movs	r2, #10
 8007fae:	e039      	b.n	8008024 <_printf_i+0xd8>
 8007fb0:	2973      	cmp	r1, #115	; 0x73
 8007fb2:	f000 809d 	beq.w	80080f0 <_printf_i+0x1a4>
 8007fb6:	d808      	bhi.n	8007fca <_printf_i+0x7e>
 8007fb8:	296f      	cmp	r1, #111	; 0x6f
 8007fba:	d020      	beq.n	8007ffe <_printf_i+0xb2>
 8007fbc:	2970      	cmp	r1, #112	; 0x70
 8007fbe:	d1dd      	bne.n	8007f7c <_printf_i+0x30>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	f043 0320 	orr.w	r3, r3, #32
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	e003      	b.n	8007fd2 <_printf_i+0x86>
 8007fca:	2975      	cmp	r1, #117	; 0x75
 8007fcc:	d017      	beq.n	8007ffe <_printf_i+0xb2>
 8007fce:	2978      	cmp	r1, #120	; 0x78
 8007fd0:	d1d4      	bne.n	8007f7c <_printf_i+0x30>
 8007fd2:	2378      	movs	r3, #120	; 0x78
 8007fd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fd8:	4864      	ldr	r0, [pc, #400]	; (800816c <_printf_i+0x220>)
 8007fda:	e055      	b.n	8008088 <_printf_i+0x13c>
 8007fdc:	6813      	ldr	r3, [r2, #0]
 8007fde:	1d19      	adds	r1, r3, #4
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6011      	str	r1, [r2, #0]
 8007fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fec:	2301      	movs	r3, #1
 8007fee:	e08c      	b.n	800810a <_printf_i+0x1be>
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6011      	str	r1, [r2, #0]
 8007ff4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ff8:	bf18      	it	ne
 8007ffa:	b21b      	sxthne	r3, r3
 8007ffc:	e7cf      	b.n	8007f9e <_printf_i+0x52>
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	6825      	ldr	r5, [r4, #0]
 8008002:	1d18      	adds	r0, r3, #4
 8008004:	6010      	str	r0, [r2, #0]
 8008006:	0628      	lsls	r0, r5, #24
 8008008:	d501      	bpl.n	800800e <_printf_i+0xc2>
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	e002      	b.n	8008014 <_printf_i+0xc8>
 800800e:	0668      	lsls	r0, r5, #25
 8008010:	d5fb      	bpl.n	800800a <_printf_i+0xbe>
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	4854      	ldr	r0, [pc, #336]	; (8008168 <_printf_i+0x21c>)
 8008016:	296f      	cmp	r1, #111	; 0x6f
 8008018:	bf14      	ite	ne
 800801a:	220a      	movne	r2, #10
 800801c:	2208      	moveq	r2, #8
 800801e:	2100      	movs	r1, #0
 8008020:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008024:	6865      	ldr	r5, [r4, #4]
 8008026:	60a5      	str	r5, [r4, #8]
 8008028:	2d00      	cmp	r5, #0
 800802a:	f2c0 8095 	blt.w	8008158 <_printf_i+0x20c>
 800802e:	6821      	ldr	r1, [r4, #0]
 8008030:	f021 0104 	bic.w	r1, r1, #4
 8008034:	6021      	str	r1, [r4, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d13d      	bne.n	80080b6 <_printf_i+0x16a>
 800803a:	2d00      	cmp	r5, #0
 800803c:	f040 808e 	bne.w	800815c <_printf_i+0x210>
 8008040:	4665      	mov	r5, ip
 8008042:	2a08      	cmp	r2, #8
 8008044:	d10b      	bne.n	800805e <_printf_i+0x112>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	07db      	lsls	r3, r3, #31
 800804a:	d508      	bpl.n	800805e <_printf_i+0x112>
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	6862      	ldr	r2, [r4, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	bfde      	ittt	le
 8008054:	2330      	movle	r3, #48	; 0x30
 8008056:	f805 3c01 	strble.w	r3, [r5, #-1]
 800805a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800805e:	ebac 0305 	sub.w	r3, ip, r5
 8008062:	6123      	str	r3, [r4, #16]
 8008064:	f8cd 8000 	str.w	r8, [sp]
 8008068:	463b      	mov	r3, r7
 800806a:	aa03      	add	r2, sp, #12
 800806c:	4621      	mov	r1, r4
 800806e:	4630      	mov	r0, r6
 8008070:	f7ff fef6 	bl	8007e60 <_printf_common>
 8008074:	3001      	adds	r0, #1
 8008076:	d14d      	bne.n	8008114 <_printf_i+0x1c8>
 8008078:	f04f 30ff 	mov.w	r0, #4294967295
 800807c:	b005      	add	sp, #20
 800807e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008082:	4839      	ldr	r0, [pc, #228]	; (8008168 <_printf_i+0x21c>)
 8008084:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008088:	6813      	ldr	r3, [r2, #0]
 800808a:	6821      	ldr	r1, [r4, #0]
 800808c:	1d1d      	adds	r5, r3, #4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6015      	str	r5, [r2, #0]
 8008092:	060a      	lsls	r2, r1, #24
 8008094:	d50b      	bpl.n	80080ae <_printf_i+0x162>
 8008096:	07ca      	lsls	r2, r1, #31
 8008098:	bf44      	itt	mi
 800809a:	f041 0120 	orrmi.w	r1, r1, #32
 800809e:	6021      	strmi	r1, [r4, #0]
 80080a0:	b91b      	cbnz	r3, 80080aa <_printf_i+0x15e>
 80080a2:	6822      	ldr	r2, [r4, #0]
 80080a4:	f022 0220 	bic.w	r2, r2, #32
 80080a8:	6022      	str	r2, [r4, #0]
 80080aa:	2210      	movs	r2, #16
 80080ac:	e7b7      	b.n	800801e <_printf_i+0xd2>
 80080ae:	064d      	lsls	r5, r1, #25
 80080b0:	bf48      	it	mi
 80080b2:	b29b      	uxthmi	r3, r3
 80080b4:	e7ef      	b.n	8008096 <_printf_i+0x14a>
 80080b6:	4665      	mov	r5, ip
 80080b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80080bc:	fb02 3311 	mls	r3, r2, r1, r3
 80080c0:	5cc3      	ldrb	r3, [r0, r3]
 80080c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80080c6:	460b      	mov	r3, r1
 80080c8:	2900      	cmp	r1, #0
 80080ca:	d1f5      	bne.n	80080b8 <_printf_i+0x16c>
 80080cc:	e7b9      	b.n	8008042 <_printf_i+0xf6>
 80080ce:	6813      	ldr	r3, [r2, #0]
 80080d0:	6825      	ldr	r5, [r4, #0]
 80080d2:	6961      	ldr	r1, [r4, #20]
 80080d4:	1d18      	adds	r0, r3, #4
 80080d6:	6010      	str	r0, [r2, #0]
 80080d8:	0628      	lsls	r0, r5, #24
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	d501      	bpl.n	80080e2 <_printf_i+0x196>
 80080de:	6019      	str	r1, [r3, #0]
 80080e0:	e002      	b.n	80080e8 <_printf_i+0x19c>
 80080e2:	066a      	lsls	r2, r5, #25
 80080e4:	d5fb      	bpl.n	80080de <_printf_i+0x192>
 80080e6:	8019      	strh	r1, [r3, #0]
 80080e8:	2300      	movs	r3, #0
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	4665      	mov	r5, ip
 80080ee:	e7b9      	b.n	8008064 <_printf_i+0x118>
 80080f0:	6813      	ldr	r3, [r2, #0]
 80080f2:	1d19      	adds	r1, r3, #4
 80080f4:	6011      	str	r1, [r2, #0]
 80080f6:	681d      	ldr	r5, [r3, #0]
 80080f8:	6862      	ldr	r2, [r4, #4]
 80080fa:	2100      	movs	r1, #0
 80080fc:	4628      	mov	r0, r5
 80080fe:	f7f8 f86f 	bl	80001e0 <memchr>
 8008102:	b108      	cbz	r0, 8008108 <_printf_i+0x1bc>
 8008104:	1b40      	subs	r0, r0, r5
 8008106:	6060      	str	r0, [r4, #4]
 8008108:	6863      	ldr	r3, [r4, #4]
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	2300      	movs	r3, #0
 800810e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008112:	e7a7      	b.n	8008064 <_printf_i+0x118>
 8008114:	6923      	ldr	r3, [r4, #16]
 8008116:	462a      	mov	r2, r5
 8008118:	4639      	mov	r1, r7
 800811a:	4630      	mov	r0, r6
 800811c:	47c0      	blx	r8
 800811e:	3001      	adds	r0, #1
 8008120:	d0aa      	beq.n	8008078 <_printf_i+0x12c>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	079b      	lsls	r3, r3, #30
 8008126:	d413      	bmi.n	8008150 <_printf_i+0x204>
 8008128:	68e0      	ldr	r0, [r4, #12]
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	4298      	cmp	r0, r3
 800812e:	bfb8      	it	lt
 8008130:	4618      	movlt	r0, r3
 8008132:	e7a3      	b.n	800807c <_printf_i+0x130>
 8008134:	2301      	movs	r3, #1
 8008136:	464a      	mov	r2, r9
 8008138:	4639      	mov	r1, r7
 800813a:	4630      	mov	r0, r6
 800813c:	47c0      	blx	r8
 800813e:	3001      	adds	r0, #1
 8008140:	d09a      	beq.n	8008078 <_printf_i+0x12c>
 8008142:	3501      	adds	r5, #1
 8008144:	68e3      	ldr	r3, [r4, #12]
 8008146:	9a03      	ldr	r2, [sp, #12]
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	42ab      	cmp	r3, r5
 800814c:	dcf2      	bgt.n	8008134 <_printf_i+0x1e8>
 800814e:	e7eb      	b.n	8008128 <_printf_i+0x1dc>
 8008150:	2500      	movs	r5, #0
 8008152:	f104 0919 	add.w	r9, r4, #25
 8008156:	e7f5      	b.n	8008144 <_printf_i+0x1f8>
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1ac      	bne.n	80080b6 <_printf_i+0x16a>
 800815c:	7803      	ldrb	r3, [r0, #0]
 800815e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008162:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008166:	e76c      	b.n	8008042 <_printf_i+0xf6>
 8008168:	08008521 	.word	0x08008521
 800816c:	08008532 	.word	0x08008532

08008170 <memmove>:
 8008170:	4288      	cmp	r0, r1
 8008172:	b510      	push	{r4, lr}
 8008174:	eb01 0302 	add.w	r3, r1, r2
 8008178:	d807      	bhi.n	800818a <memmove+0x1a>
 800817a:	1e42      	subs	r2, r0, #1
 800817c:	4299      	cmp	r1, r3
 800817e:	d00a      	beq.n	8008196 <memmove+0x26>
 8008180:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008184:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008188:	e7f8      	b.n	800817c <memmove+0xc>
 800818a:	4283      	cmp	r3, r0
 800818c:	d9f5      	bls.n	800817a <memmove+0xa>
 800818e:	1881      	adds	r1, r0, r2
 8008190:	1ad2      	subs	r2, r2, r3
 8008192:	42d3      	cmn	r3, r2
 8008194:	d100      	bne.n	8008198 <memmove+0x28>
 8008196:	bd10      	pop	{r4, pc}
 8008198:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800819c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80081a0:	e7f7      	b.n	8008192 <memmove+0x22>
	...

080081a4 <_free_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4605      	mov	r5, r0
 80081a8:	2900      	cmp	r1, #0
 80081aa:	d045      	beq.n	8008238 <_free_r+0x94>
 80081ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081b0:	1f0c      	subs	r4, r1, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bfb8      	it	lt
 80081b6:	18e4      	addlt	r4, r4, r3
 80081b8:	f000 f8d2 	bl	8008360 <__malloc_lock>
 80081bc:	4a1f      	ldr	r2, [pc, #124]	; (800823c <_free_r+0x98>)
 80081be:	6813      	ldr	r3, [r2, #0]
 80081c0:	4610      	mov	r0, r2
 80081c2:	b933      	cbnz	r3, 80081d2 <_free_r+0x2e>
 80081c4:	6063      	str	r3, [r4, #4]
 80081c6:	6014      	str	r4, [r2, #0]
 80081c8:	4628      	mov	r0, r5
 80081ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ce:	f000 b8c8 	b.w	8008362 <__malloc_unlock>
 80081d2:	42a3      	cmp	r3, r4
 80081d4:	d90c      	bls.n	80081f0 <_free_r+0x4c>
 80081d6:	6821      	ldr	r1, [r4, #0]
 80081d8:	1862      	adds	r2, r4, r1
 80081da:	4293      	cmp	r3, r2
 80081dc:	bf04      	itt	eq
 80081de:	681a      	ldreq	r2, [r3, #0]
 80081e0:	685b      	ldreq	r3, [r3, #4]
 80081e2:	6063      	str	r3, [r4, #4]
 80081e4:	bf04      	itt	eq
 80081e6:	1852      	addeq	r2, r2, r1
 80081e8:	6022      	streq	r2, [r4, #0]
 80081ea:	6004      	str	r4, [r0, #0]
 80081ec:	e7ec      	b.n	80081c8 <_free_r+0x24>
 80081ee:	4613      	mov	r3, r2
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	b10a      	cbz	r2, 80081f8 <_free_r+0x54>
 80081f4:	42a2      	cmp	r2, r4
 80081f6:	d9fa      	bls.n	80081ee <_free_r+0x4a>
 80081f8:	6819      	ldr	r1, [r3, #0]
 80081fa:	1858      	adds	r0, r3, r1
 80081fc:	42a0      	cmp	r0, r4
 80081fe:	d10b      	bne.n	8008218 <_free_r+0x74>
 8008200:	6820      	ldr	r0, [r4, #0]
 8008202:	4401      	add	r1, r0
 8008204:	1858      	adds	r0, r3, r1
 8008206:	4282      	cmp	r2, r0
 8008208:	6019      	str	r1, [r3, #0]
 800820a:	d1dd      	bne.n	80081c8 <_free_r+0x24>
 800820c:	6810      	ldr	r0, [r2, #0]
 800820e:	6852      	ldr	r2, [r2, #4]
 8008210:	605a      	str	r2, [r3, #4]
 8008212:	4401      	add	r1, r0
 8008214:	6019      	str	r1, [r3, #0]
 8008216:	e7d7      	b.n	80081c8 <_free_r+0x24>
 8008218:	d902      	bls.n	8008220 <_free_r+0x7c>
 800821a:	230c      	movs	r3, #12
 800821c:	602b      	str	r3, [r5, #0]
 800821e:	e7d3      	b.n	80081c8 <_free_r+0x24>
 8008220:	6820      	ldr	r0, [r4, #0]
 8008222:	1821      	adds	r1, r4, r0
 8008224:	428a      	cmp	r2, r1
 8008226:	bf04      	itt	eq
 8008228:	6811      	ldreq	r1, [r2, #0]
 800822a:	6852      	ldreq	r2, [r2, #4]
 800822c:	6062      	str	r2, [r4, #4]
 800822e:	bf04      	itt	eq
 8008230:	1809      	addeq	r1, r1, r0
 8008232:	6021      	streq	r1, [r4, #0]
 8008234:	605c      	str	r4, [r3, #4]
 8008236:	e7c7      	b.n	80081c8 <_free_r+0x24>
 8008238:	bd38      	pop	{r3, r4, r5, pc}
 800823a:	bf00      	nop
 800823c:	2000404c 	.word	0x2000404c

08008240 <_malloc_r>:
 8008240:	b570      	push	{r4, r5, r6, lr}
 8008242:	1ccd      	adds	r5, r1, #3
 8008244:	f025 0503 	bic.w	r5, r5, #3
 8008248:	3508      	adds	r5, #8
 800824a:	2d0c      	cmp	r5, #12
 800824c:	bf38      	it	cc
 800824e:	250c      	movcc	r5, #12
 8008250:	2d00      	cmp	r5, #0
 8008252:	4606      	mov	r6, r0
 8008254:	db01      	blt.n	800825a <_malloc_r+0x1a>
 8008256:	42a9      	cmp	r1, r5
 8008258:	d903      	bls.n	8008262 <_malloc_r+0x22>
 800825a:	230c      	movs	r3, #12
 800825c:	6033      	str	r3, [r6, #0]
 800825e:	2000      	movs	r0, #0
 8008260:	bd70      	pop	{r4, r5, r6, pc}
 8008262:	f000 f87d 	bl	8008360 <__malloc_lock>
 8008266:	4a21      	ldr	r2, [pc, #132]	; (80082ec <_malloc_r+0xac>)
 8008268:	6814      	ldr	r4, [r2, #0]
 800826a:	4621      	mov	r1, r4
 800826c:	b991      	cbnz	r1, 8008294 <_malloc_r+0x54>
 800826e:	4c20      	ldr	r4, [pc, #128]	; (80082f0 <_malloc_r+0xb0>)
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	b91b      	cbnz	r3, 800827c <_malloc_r+0x3c>
 8008274:	4630      	mov	r0, r6
 8008276:	f000 f863 	bl	8008340 <_sbrk_r>
 800827a:	6020      	str	r0, [r4, #0]
 800827c:	4629      	mov	r1, r5
 800827e:	4630      	mov	r0, r6
 8008280:	f000 f85e 	bl	8008340 <_sbrk_r>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d124      	bne.n	80082d2 <_malloc_r+0x92>
 8008288:	230c      	movs	r3, #12
 800828a:	6033      	str	r3, [r6, #0]
 800828c:	4630      	mov	r0, r6
 800828e:	f000 f868 	bl	8008362 <__malloc_unlock>
 8008292:	e7e4      	b.n	800825e <_malloc_r+0x1e>
 8008294:	680b      	ldr	r3, [r1, #0]
 8008296:	1b5b      	subs	r3, r3, r5
 8008298:	d418      	bmi.n	80082cc <_malloc_r+0x8c>
 800829a:	2b0b      	cmp	r3, #11
 800829c:	d90f      	bls.n	80082be <_malloc_r+0x7e>
 800829e:	600b      	str	r3, [r1, #0]
 80082a0:	50cd      	str	r5, [r1, r3]
 80082a2:	18cc      	adds	r4, r1, r3
 80082a4:	4630      	mov	r0, r6
 80082a6:	f000 f85c 	bl	8008362 <__malloc_unlock>
 80082aa:	f104 000b 	add.w	r0, r4, #11
 80082ae:	1d23      	adds	r3, r4, #4
 80082b0:	f020 0007 	bic.w	r0, r0, #7
 80082b4:	1ac3      	subs	r3, r0, r3
 80082b6:	d0d3      	beq.n	8008260 <_malloc_r+0x20>
 80082b8:	425a      	negs	r2, r3
 80082ba:	50e2      	str	r2, [r4, r3]
 80082bc:	e7d0      	b.n	8008260 <_malloc_r+0x20>
 80082be:	428c      	cmp	r4, r1
 80082c0:	684b      	ldr	r3, [r1, #4]
 80082c2:	bf16      	itet	ne
 80082c4:	6063      	strne	r3, [r4, #4]
 80082c6:	6013      	streq	r3, [r2, #0]
 80082c8:	460c      	movne	r4, r1
 80082ca:	e7eb      	b.n	80082a4 <_malloc_r+0x64>
 80082cc:	460c      	mov	r4, r1
 80082ce:	6849      	ldr	r1, [r1, #4]
 80082d0:	e7cc      	b.n	800826c <_malloc_r+0x2c>
 80082d2:	1cc4      	adds	r4, r0, #3
 80082d4:	f024 0403 	bic.w	r4, r4, #3
 80082d8:	42a0      	cmp	r0, r4
 80082da:	d005      	beq.n	80082e8 <_malloc_r+0xa8>
 80082dc:	1a21      	subs	r1, r4, r0
 80082de:	4630      	mov	r0, r6
 80082e0:	f000 f82e 	bl	8008340 <_sbrk_r>
 80082e4:	3001      	adds	r0, #1
 80082e6:	d0cf      	beq.n	8008288 <_malloc_r+0x48>
 80082e8:	6025      	str	r5, [r4, #0]
 80082ea:	e7db      	b.n	80082a4 <_malloc_r+0x64>
 80082ec:	2000404c 	.word	0x2000404c
 80082f0:	20004050 	.word	0x20004050

080082f4 <_realloc_r>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	4607      	mov	r7, r0
 80082f8:	4614      	mov	r4, r2
 80082fa:	460e      	mov	r6, r1
 80082fc:	b921      	cbnz	r1, 8008308 <_realloc_r+0x14>
 80082fe:	4611      	mov	r1, r2
 8008300:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008304:	f7ff bf9c 	b.w	8008240 <_malloc_r>
 8008308:	b922      	cbnz	r2, 8008314 <_realloc_r+0x20>
 800830a:	f7ff ff4b 	bl	80081a4 <_free_r>
 800830e:	4625      	mov	r5, r4
 8008310:	4628      	mov	r0, r5
 8008312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008314:	f000 f826 	bl	8008364 <_malloc_usable_size_r>
 8008318:	42a0      	cmp	r0, r4
 800831a:	d20f      	bcs.n	800833c <_realloc_r+0x48>
 800831c:	4621      	mov	r1, r4
 800831e:	4638      	mov	r0, r7
 8008320:	f7ff ff8e 	bl	8008240 <_malloc_r>
 8008324:	4605      	mov	r5, r0
 8008326:	2800      	cmp	r0, #0
 8008328:	d0f2      	beq.n	8008310 <_realloc_r+0x1c>
 800832a:	4631      	mov	r1, r6
 800832c:	4622      	mov	r2, r4
 800832e:	f7ff fc11 	bl	8007b54 <memcpy>
 8008332:	4631      	mov	r1, r6
 8008334:	4638      	mov	r0, r7
 8008336:	f7ff ff35 	bl	80081a4 <_free_r>
 800833a:	e7e9      	b.n	8008310 <_realloc_r+0x1c>
 800833c:	4635      	mov	r5, r6
 800833e:	e7e7      	b.n	8008310 <_realloc_r+0x1c>

08008340 <_sbrk_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4c06      	ldr	r4, [pc, #24]	; (800835c <_sbrk_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4605      	mov	r5, r0
 8008348:	4608      	mov	r0, r1
 800834a:	6023      	str	r3, [r4, #0]
 800834c:	f7f9 fa4a 	bl	80017e4 <_sbrk>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_sbrk_r+0x1a>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	b103      	cbz	r3, 800835a <_sbrk_r+0x1a>
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20004280 	.word	0x20004280

08008360 <__malloc_lock>:
 8008360:	4770      	bx	lr

08008362 <__malloc_unlock>:
 8008362:	4770      	bx	lr

08008364 <_malloc_usable_size_r>:
 8008364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008368:	1f18      	subs	r0, r3, #4
 800836a:	2b00      	cmp	r3, #0
 800836c:	bfbc      	itt	lt
 800836e:	580b      	ldrlt	r3, [r1, r0]
 8008370:	18c0      	addlt	r0, r0, r3
 8008372:	4770      	bx	lr

08008374 <_init>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	bf00      	nop
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr

08008380 <_fini>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr
